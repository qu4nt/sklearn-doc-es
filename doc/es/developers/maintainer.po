msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/developers/maintainer.po\n"
"X-Crowdin-File-ID: 2790\n"
"Language: es_ES\n"

#: ../developers/maintainer.rst:2
msgid "Maintainer / core-developer information"
msgstr ""

#: ../developers/maintainer.rst:6
msgid "Releasing"
msgstr ""

#: ../developers/maintainer.rst:8
msgid "This section is about preparing a major release, incrementing the minor version, or a bug fix release incrementing the patch version. Our convention is that we release one or more release candidates (0.RRrcN) before releasing the final distributions. We follow the `PEP101 <https://www.python.org/dev/peps/pep-0101/>`_ to indicate release candidates, post, and minor releases."
msgstr ""

#: ../developers/maintainer.rst:16
msgid "Before a release"
msgstr ""

#: ../developers/maintainer.rst:18
msgid "Update authors table:"
msgstr ""

#: ../developers/maintainer.rst:24
msgid "and commit. This is only needed if the authors have changed since the last release. This step is sometimes done independent of the release. This updates the maintainer list and is not the contributor list for the release."
msgstr ""

#: ../developers/maintainer.rst:28
msgid "Confirm any blockers tagged for the milestone are resolved, and that other issues tagged for the milestone can be postponed."
msgstr ""

#: ../developers/maintainer.rst:31
msgid "Ensure the change log and commits correspond (within reason!), and that the change log is reasonably well curated. Some tools for these tasks include:"
msgstr ""

#: ../developers/maintainer.rst:34
msgid "``maint_tools/sort_whats_new.py`` can put what's new entries into sections. It's not perfect, and requires manual checking of the changes. If the whats new list is well curated, it may not be necessary."
msgstr ""

#: ../developers/maintainer.rst:38
msgid "The ``maint_tools/whats_missing.sh`` script may be used to identify pull requests that were merged but likely missing from What's New."
msgstr ""

#: ../developers/maintainer.rst:41
msgid "Make sure the deprecations, FIXME and TODOs tagged for the release have been taken care of."
msgstr ""

#: ../developers/maintainer.rst:44
msgid "**Permissions**"
msgstr ""

#: ../developers/maintainer.rst:46
msgid "The release manager requires a set of permissions on top of the usual permissions given to maintainers, which includes:"
msgstr ""

#: ../developers/maintainer.rst:49
msgid "*maintainer* role on ``scikit-learn`` projects on ``pypi.org`` and ``test.pypi.org``, separately."
msgstr ""

#: ../developers/maintainer.rst:51
msgid "become a member of the *scikit-learn* team on conda-forge by editing the ``recipe/meta.yaml`` file on ``https://github.com/conda-forge/scikit-learn-feedstock``"
msgstr ""

#: ../developers/maintainer.rst:58
msgid "Preparing a release PR"
msgstr ""

#: ../developers/maintainer.rst:61
msgid "Major version release"
msgstr ""

#: ../developers/maintainer.rst:63
msgid "Prior to branching please do not forget to prepare a Release Highlights page as a runnable example and check that its HTML rendering looks correct. These release highlights should be linked from the ``doc/whats_new/v0.99.rst`` file for the new version of scikit-learn."
msgstr ""

#: ../developers/maintainer.rst:68
msgid "Releasing the first RC of e.g. version `0.99.0` involves creating the release branch `0.99.X` directly on the main repo, where `X` really is the letter X, **not a placeholder**. The development for the major and minor releases of `0.99` should **also** happen under `0.99.X`. Each release (rc, major, or minor) is a tag under that branch."
msgstr ""

#: ../developers/maintainer.rst:74
msgid "This is done only once, as the major and minor releases happen on the same branch:"
msgstr ""

#: ../developers/maintainer.rst:85
msgid "Again, `X` is literal here, and `99` is replaced by the release number. The branches are called ``0.19.X``, ``0.20.X``, etc."
msgstr ""

#: ../developers/maintainer.rst:88
msgid "In terms of including changes, the first RC ideally counts as a *feature freeze*. Each coming release candidate and the final release afterwards will include only minor documentation changes and bug fixes. Any major enhancement or feature should be excluded."
msgstr ""

#: ../developers/maintainer.rst:93
msgid "Then you can prepare a local branch for the release itself, for instance: ``release-0.99.0rc1``, push it to your github fork and open a PR **to the** `scikit-learn/0.99.X` **branch**. Copy the :ref:`release_checklist` templates in the description of the Pull Request to track progress."
msgstr ""

#: ../developers/maintainer.rst:98
msgid "This PR will be used to push commits related to the release as explained in :ref:`making_a_release`."
msgstr ""

#: ../developers/maintainer.rst:101
msgid "You can also create a second PR from main and targeting main to increment the ``__version__`` variable in `sklearn/__init__.py` to increment the dev version. This means while we're in the release candidate period, the latest stable is two versions behind the main branch, instead of one. In this PR targeting main you should also include a new file for the matching version under the ``doc/whats_new/`` folder so PRs that target the next version can contribute their changelog entries to this file in parallel to the release process."
msgstr ""

#: ../developers/maintainer.rst:111
msgid "Minor version release"
msgstr ""

#: ../developers/maintainer.rst:113
msgid "The minor releases should include bug fixes and some relevant documentation changes only. Any PR resulting in a behavior change which is not a bug fix should be excluded."
msgstr ""

#: ../developers/maintainer.rst:117
msgid "First, create a branch, **on your own fork** (to release e.g. `0.99.3`):"
msgstr ""

#: ../developers/maintainer.rst:124
msgid "Then, create a PR **to the** `scikit-learn/0.99.X` **branch** (not to main!) with all the desired changes:"
msgstr ""

#: ../developers/maintainer.rst:131
msgid "Copy the :ref:`release_checklist` templates in the description of the Pull Request to track progress."
msgstr ""

#: ../developers/maintainer.rst:134
msgid "Do not forget to add a commit updating ``sklearn.__version__``."
msgstr ""

#: ../developers/maintainer.rst:136
msgid "It's nice to have a copy of the ``git rebase -i`` log in the PR to help others understand what's included."
msgstr ""

#: ../developers/maintainer.rst:142
msgid "Making a release"
msgstr ""

#: ../developers/maintainer.rst:144
msgid "Ensure that you have checked out the branch of the release PR as explained in :ref:`preparing_a_release_pr` above."
msgstr ""

#: ../developers/maintainer.rst:147
msgid "Update docs. Note that this is for the final release, not necessarily for the RC releases. These changes should be made in main and cherry-picked into the release branch, only before the final release."
msgstr ""

#: ../developers/maintainer.rst:151
msgid "Edit the ``doc/whats_new/v0.99.rst`` file to add release title and list of contributors. You can retrieve the list of contributor names with:"
msgstr ""

#: ../developers/maintainer.rst:159
msgid "For major releases, link the release highlights example from the ``doc/whats_new/v0.99.rst`` file."
msgstr ""

#: ../developers/maintainer.rst:161
msgid "Update the release date in ``whats_new.rst``"
msgstr ""

#: ../developers/maintainer.rst:163
msgid "Edit the ``doc/templates/index.html`` to change the 'News' entry of the front page (with the release month as well)."
msgstr ""

#: ../developers/maintainer.rst:166
msgid "On the branch for releasing, update the version number in ``sklearn/__init__.py``, the ``__version__``."
msgstr ""

#: ../developers/maintainer.rst:169
msgid "For major releases, please add a 0 at the end: `0.99.0` instead of `0.99`."
msgstr ""

#: ../developers/maintainer.rst:171
msgid "For the first release candidate, use the `rc1` suffix on the expected final release number: `0.99.0rc1`."
msgstr ""

#: ../developers/maintainer.rst:174
msgid "Trigger the wheel builder with the ``[cd build]`` commit marker using the command:"
msgstr ""

#: ../developers/maintainer.rst:181
msgid "The wheel building workflow is managed by GitHub Actions and the results be browsed at: https://github.com/scikit-learn/scikit-learn/actions?query=workflow%3A%22Wheel+builder%22"
msgstr ""

#: ../developers/maintainer.rst:186
msgid "Before building the wheels, make sure that the ``pyproject.toml`` file is up to date and using the oldest version of ``numpy`` for each Python version to avoid `ABI <https://en.wikipedia.org/wiki/Application_binary_interface>`_ incompatibility issues. Moreover, a new line have to be included in the ``pyproject.toml`` file for each new supported version of Python."
msgstr ""

#: ../developers/maintainer.rst:194
msgid "The acronym CD in `[cd build]` stands for `Continuous Delivery <https://en.wikipedia.org/wiki/Continuous_delivery>`_ and refers to the automation used to generate the release artifacts (binary and source packages). This can be seen as an extension to CI which stands for `Continuous Integration <https://en.wikipedia.org/wiki/Continuous_integration>`_. The CD workflow on GitHub Actions is also used to automatically create nightly builds and publish packages for the developement branch of scikit-learn. See :ref:`install_nightly_builds`."
msgstr ""

#: ../developers/maintainer.rst:204
msgid "Once all the CD jobs have completed successfully in the PR, merge it, again with the `[cd build]` marker in the commit message. This time the results will be uploaded to the staging area."
msgstr ""

#: ../developers/maintainer.rst:208
msgid "You should then be able to upload the generated artifacts (.tar.gz and .whl files) to https://test.pypi.org using the \"Run workflow\" form for the following GitHub Actions workflow:"
msgstr ""

#: ../developers/maintainer.rst:212
msgid "https://github.com/scikit-learn/scikit-learn/actions?query=workflow%3A%22Publish+to+Pypi%22"
msgstr ""

#: ../developers/maintainer.rst:214
msgid "If this went fine, you can proceed with tagging. Proceed with caution. Ideally, tags should be created when you're almost certain that the release is ready, since adding a tag to the main repo can trigger certain automated processes."
msgstr ""

#: ../developers/maintainer.rst:219
msgid "Create the tag and push it (if it's an RC, it can be ``0.xx.0rc1`` for instance):"
msgstr ""

#: ../developers/maintainer.rst:227
msgid "Trigger the GitHub Actions workflow again but this time to upload the artifacts to the real https://pypi.org (replace \"testpypi\" by \"pypi\" in the \"Run workflow\" form)."
msgstr ""

#: ../developers/maintainer.rst:231
msgid "Alternatively, it's possible to collect locally the generated binary wheel packages and source tarball and upload them all to PyPI by running the following commands in the scikit-learn source folder (checked out at the release tag):"
msgstr ""

#: ../developers/maintainer.rst:242
msgid "This command will download all the binary packages accumulated in the `staging area on the anaconda.org hosting service <https://anaconda.org/scikit-learn-wheels-staging/scikit-learn/files>`_ and put them in your local `./dist` folder."
msgstr ""

#: ../developers/maintainer.rst:247
msgid "Check the content of the `./dist` folder: it should contain all the wheels along with the source tarball (\"scikit-learn-RRR.tar.gz\")."
msgstr ""

#: ../developers/maintainer.rst:250
msgid "Make sure that you do not have developer versions or older versions of the scikit-learn package in that folder."
msgstr ""

#: ../developers/maintainer.rst:253
msgid "Before uploading to pypi, you can test upload to test.pypi.org:"
msgstr ""

#: ../developers/maintainer.rst:259
msgid "Upload everything at once to https://pypi.org:"
msgstr ""

#: ../developers/maintainer.rst:265
msgid "For major/minor (not bug-fix release), update the symlink for ``stable`` and the ``latestStable`` variable in https://github.com/scikit-learn/scikit-learn.github.io:"
msgstr ""

#: ../developers/maintainer.rst:286
msgid "Release checklist"
msgstr ""

#: ../developers/maintainer.rst:288
msgid "The following GitHub checklist might be helpful in a release PR::"
msgstr ""

#: ../developers/maintainer.rst:306
msgid "Merging Pull Requests"
msgstr ""

#: ../developers/maintainer.rst:308
msgid "Individual commits are squashed when a Pull Request (PR) is merged on Github. Before merging,"
msgstr ""

#: ../developers/maintainer.rst:311
msgid "the resulting commit title can be edited if necessary. Note that this will rename the PR title by default."
msgstr ""

#: ../developers/maintainer.rst:313
msgid "the detailed description, containing the titles of all the commits, can be edited or deleted."
msgstr ""

#: ../developers/maintainer.rst:315
msgid "for PRs with multiple code contributors care must be taken to keep the `Co-authored-by: name <name@example.com>` tags in the detailed description. This will mark the PR as having `multiple co-authors <https://help.github.com/en/github/committing-changes-to-your-project/creating-a-commit-with-multiple-authors>`_. Whether code contributions are significanly enough to merit co-authorship is left to the maintainer's discretion, same as for the \"what's new\" entry."
msgstr ""

#: ../developers/maintainer.rst:324
msgid "The scikit-learn.org web site"
msgstr ""

#: ../developers/maintainer.rst:326
msgid "The scikit-learn web site (http://scikit-learn.org) is hosted at GitHub, but should rarely be updated manually by pushing to the https://github.com/scikit-learn/scikit-learn.github.io repository. Most updates can be made by pushing to master (for /dev) or a release branch like 0.99.X, from which Circle CI builds and uploads the documentation automatically."
msgstr ""

#: ../developers/maintainer.rst:334
msgid "Travis Cron jobs"
msgstr ""

#: ../developers/maintainer.rst:336
msgid "From `<https://docs.travis-ci.com/user/cron-jobs>`_: Travis CI cron jobs work similarly to the cron utility, they run builds at regular scheduled intervals independently of whether any commits were pushed to the repository. Cron jobs always fetch the most recent commit on a particular branch and build the project at that state. Cron jobs can run daily, weekly or monthly, which in practice means up to an hour after the selected time span, and you cannot set them to run at a specific time."
msgstr ""

#: ../developers/maintainer.rst:344
msgid "For scikit-learn, Cron jobs are used for builds that we do not want to run in each PR. As an example the build with the dev versions of numpy and scipy is run as a Cron job. Most of the time when this numpy-dev build fail, it is related to a numpy change and not a scikit-learn one, so it would not make sense to blame the PR author for the Travis failure."
msgstr ""

#: ../developers/maintainer.rst:350
msgid "The definition of what gets run in the Cron job is done in the .travis.yml config file, exactly the same way as the other Travis jobs. We use a ``if: type = cron`` filter in order for the build to be run only in Cron jobs."
msgstr ""

#: ../developers/maintainer.rst:354
msgid "The branch targeted by the Cron job and the frequency of the Cron job is set via the web UI at https://www.travis-ci.org/scikit-learn/scikit-learn/settings."
msgstr ""

#: ../developers/maintainer.rst:358
msgid "Experimental features"
msgstr ""

#: ../developers/maintainer.rst:360
msgid "The :mod:`sklearn.experimental` module was introduced in 0.21 and contains experimental features / estimators that are subject to change without deprecation cycle."
msgstr ""

#: ../developers/maintainer.rst:364
msgid "To create an experimental module, you can just copy and modify the content of `enable_hist_gradient_boosting.py <https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/experimental/enable_hist_gradient_boosting.py>`_, or `enable_iterative_imputer.py <https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/experimental/enable_iterative_imputer.py>`_."
msgstr ""

#: ../developers/maintainer.rst:371
msgid "Note that the public import path must be to a public subpackage (like ``sklearn/ensemble`` or ``sklearn/impute``), not just a ``.py`` module. Also, the (private) experimental features that are imported must be in a submodule/subpackage of the public subpackage, e.g. ``sklearn/ensemble/_hist_gradient_boosting/`` or ``sklearn/impute/_iterative.py``. This is needed so that pickles still work in the future when the features aren't experimental anymore."
msgstr ""

#: ../developers/maintainer.rst:379
msgid "To avoid type checker (e.g. mypy) errors a direct import of experimental estimators should be done in the parent module, protected by the ``if typing.TYPE_CHECKING`` check. See `sklearn/ensemble/__init__.py <https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/ensemble/__init__.py>`_, or `sklearn/impute/__init__.py <https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/impute/__init__.py>`_ for an example."
msgstr ""

#: ../developers/maintainer.rst:387
msgid "Please also write basic tests following those in `test_enable_hist_gradient_boosting.py <https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/experimental/tests/test_enable_hist_gradient_boosting.py>`_."
msgstr ""

#: ../developers/maintainer.rst:391
msgid "Make sure every user-facing code you write explicitly mentions that the feature is experimental, and add a ``# noqa`` comment to avoid pep8-related warnings::"
msgstr ""

#: ../developers/maintainer.rst:398
msgid "For the docs to render properly, please also import ``enable_my_experimental_feature`` in ``doc/conf.py``, else sphinx won't be able to import the corresponding modules. Note that using ``from sklearn.experimental import *`` **does not work**."
msgstr ""

#: ../developers/maintainer.rst:403
msgid "Note that some experimental classes / functions are not included in the :mod:`sklearn.experimental` module: ``sklearn.datasets.fetch_openml``."
msgstr ""

