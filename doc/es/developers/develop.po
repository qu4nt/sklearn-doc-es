msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-20 03:55\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/developers/develop.po\n"
"X-Crowdin-File-ID: 4020\n"
"Language: es_ES\n"

#: ../developers/develop.rst:5
msgid "Developing scikit-learn estimators"
msgstr ""

#: ../developers/develop.rst:7
msgid "Whether you are proposing an estimator for inclusion in scikit-learn, developing a separate package compatible with scikit-learn, or implementing custom components for your own projects, this chapter details how to develop objects that safely interact with scikit-learn Pipelines and model selection tools."
msgstr ""

#: ../developers/develop.rst:18
msgid "APIs of scikit-learn objects"
msgstr ""

#: ../developers/develop.rst:20
msgid "To have a uniform API, we try to have a common basic API for all the objects. In addition, to avoid the proliferation of framework code, we try to adopt simple conventions and limit to a minimum the number of methods an object must implement."
msgstr ""

#: ../developers/develop.rst:25
msgid "Elements of the scikit-learn API are described more definitively in the :ref:`glossary`."
msgstr ""

#: ../developers/develop.rst:29
msgid "Different objects"
msgstr "Objetos diferentes"

#: ../developers/develop.rst:31
msgid "The main objects in scikit-learn are (one class can implement multiple interfaces):"
msgstr ""

#: ../developers/develop.rst
msgid "Estimator"
msgstr "Estimador"

#: ../developers/develop.rst:36
msgid "The base object, implements a ``fit`` method to learn from data, either::"
msgstr "El objeto base, implementa un m√©todo ``fit`` para aprender de los datos, o bien::"

#: ../developers/develop.rst:40
msgid "or::"
msgstr "o::"

#: ../developers/develop.rst
msgid "Predictor"
msgstr "Predictor"

#: ../developers/develop.rst:46
msgid "For supervised learning, or some unsupervised problems, implements::"
msgstr ""

#: ../developers/develop.rst:50
msgid "Classification algorithms usually also offer a way to quantify certainty of a prediction, either using ``decision_function`` or ``predict_proba``::"
msgstr ""

#: ../developers/develop.rst
msgid "Transformer"
msgstr "Transformador"

#: ../developers/develop.rst:57
msgid "For filtering or modifying the data, in a supervised or unsupervised way, implements::"
msgstr ""

#: ../developers/develop.rst:62
msgid "When fitting and transforming can be performed much more efficiently together than separately, implements::"
msgstr ""

#: ../developers/develop.rst
msgid "Model"
msgstr ""

#: ../developers/develop.rst:69
msgid "A model that can give a `goodness of fit <https://en.wikipedia.org/wiki/Goodness_of_fit>`_ measure or a likelihood of unseen data, implements (higher is better)::"
msgstr ""

#: ../developers/develop.rst:75
msgid "Estimators"
msgstr ""

#: ../developers/develop.rst:77
msgid "The API has one predominant object: the estimator. An estimator is an object that fits a model based on some training data and is capable of inferring some properties on new data. It can be, for instance, a classifier or a regressor. All estimators implement the fit method::"
msgstr ""

#: ../developers/develop.rst:84
msgid "All built-in estimators also have a ``set_params`` method, which sets data-independent parameters (overriding previous parameter values passed to ``__init__``)."
msgstr ""

#: ../developers/develop.rst:88
msgid "All estimators in the main scikit-learn codebase should inherit from ``sklearn.base.BaseEstimator``."
msgstr ""

#: ../developers/develop.rst:92
msgid "Instantiation"
msgstr ""

#: ../developers/develop.rst:94
msgid "This concerns the creation of an object. The object's ``__init__`` method might accept constants as arguments that determine the estimator's behavior (like the C constant in SVMs). It should not, however, take the actual training data as an argument, as this is left to the ``fit()`` method::"
msgstr ""

#: ../developers/develop.rst:103
msgid "The arguments accepted by ``__init__`` should all be keyword arguments with a default value. In other words, a user should be able to instantiate an estimator without passing any arguments to it. The arguments should all correspond to hyperparameters describing the model or the optimisation problem the estimator tries to solve. These initial arguments (or parameters) are always remembered by the estimator. Also note that they should not be documented under the \"Attributes\" section, but rather under the \"Parameters\" section for that estimator."
msgstr ""

#: ../developers/develop.rst:112
msgid "In addition, **every keyword argument accepted by** ``__init__`` **should correspond to an attribute on the instance**. Scikit-learn relies on this to find the relevant attributes to set on an estimator when doing model selection."
msgstr ""

#: ../developers/develop.rst:116
msgid "To summarize, an ``__init__`` should look like::"
msgstr ""

#: ../developers/develop.rst:122
msgid "There should be no logic, not even input validation, and the parameters should not be changed. The corresponding logic should be put where the parameters are used, typically in ``fit``. The following is wrong::"
msgstr ""

#: ../developers/develop.rst:137
msgid "The reason for postponing the validation is that the same validation would have to be performed in ``set_params``, which is used in algorithms like ``GridSearchCV``."
msgstr ""

#: ../developers/develop.rst:142
msgid "Fitting"
msgstr ""

#: ../developers/develop.rst:144
msgid "The next thing you will probably want to do is to estimate some parameters in the model. This is implemented in the ``fit()`` method."
msgstr ""

#: ../developers/develop.rst:147
msgid "The ``fit()`` method takes the training data as arguments, which can be one array in the case of unsupervised learning, or two arrays in the case of supervised learning."
msgstr ""

#: ../developers/develop.rst:151
msgid "Note that the model is fitted using ``X`` and ``y``, but the object holds no reference to ``X`` and ``y``. There are, however, some exceptions to this, as in the case of precomputed kernels where this data must be stored for use by the predict method."
msgstr ""

#: ../developers/develop.rst:157
msgid "Parameters"
msgstr ""

#: ../developers/develop.rst:159
msgid "X"
msgstr ""

#: ../developers/develop.rst:159
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: ../developers/develop.rst:161
msgid "y"
msgstr ""

#: ../developers/develop.rst:161
msgid "array-like of shape (n_samples,)"
msgstr ""

#: ../developers/develop.rst:163
msgid "kwargs"
msgstr ""

#: ../developers/develop.rst:163
msgid "optional data-dependent parameters"
msgstr ""

#: ../developers/develop.rst:166
msgid "``X.shape[0]`` should be the same as ``y.shape[0]``. If this requisite is not met, an exception of type ``ValueError`` should be raised."
msgstr ""

#: ../developers/develop.rst:169
msgid "``y`` might be ignored in the case of unsupervised learning. However, to make it possible to use the estimator as part of a pipeline that can mix both supervised and unsupervised transformers, even unsupervised estimators need to accept a ``y=None`` keyword argument in the second position that is just ignored by the estimator. For the same reason, ``fit_predict``, ``fit_transform``, ``score`` and ``partial_fit`` methods need to accept a ``y`` argument in the second place if they are implemented."
msgstr ""

#: ../developers/develop.rst:178
msgid "The method should return the object (``self``). This pattern is useful to be able to implement quick one liners in an IPython session such as::"
msgstr ""

#: ../developers/develop.rst:183
msgid "Depending on the nature of the algorithm, ``fit`` can sometimes also accept additional keywords arguments. However, any parameter that can have a value assigned prior to having access to the data should be an ``__init__`` keyword argument. **fit parameters should be restricted to directly data dependent variables**. For instance a Gram matrix or an affinity matrix which are precomputed from the data matrix ``X`` are data dependent. A tolerance stopping criterion ``tol`` is not directly data dependent (although the optimal value according to some scoring function probably is)."
msgstr ""

#: ../developers/develop.rst:193
msgid "When ``fit`` is called, any previous call to ``fit`` should be ignored. In general, calling ``estimator.fit(X1)`` and then ``estimator.fit(X2)`` should be the same as only calling ``estimator.fit(X2)``. However, this may not be true in practice when ``fit`` depends on some random process, see :term:`random_state`. Another exception to this rule is when the hyper-parameter ``warm_start`` is set to ``True`` for estimators that support it. ``warm_start=True`` means that the previous state of the trainable parameters of the estimator are reused instead of using the default initialization strategy."
msgstr ""

#: ../developers/develop.rst:204
msgid "Estimated Attributes"
msgstr ""

#: ../developers/develop.rst:206
msgid "Attributes that have been estimated from the data must always have a name ending with trailing underscore, for example the coefficients of some regression estimator would be stored in a ``coef_`` attribute after ``fit`` has been called."
msgstr ""

#: ../developers/develop.rst:211
msgid "The estimated attributes are expected to be overridden when you call ``fit`` a second time."
msgstr ""

#: ../developers/develop.rst:215
msgid "Optional Arguments"
msgstr ""

#: ../developers/develop.rst:217
msgid "In iterative algorithms, the number of iterations should be specified by an integer called ``n_iter``."
msgstr ""

#: ../developers/develop.rst:221
msgid "Pairwise Attributes"
msgstr ""

#: ../developers/develop.rst:223
msgid "An estimator that accepts ``X`` of shape ``(n_samples, n_samples)`` and defines a :term:`_pairwise` property equal to ``True`` allows for cross-validation of the dataset, e.g. when ``X`` is a precomputed kernel matrix. Specifically, the :term:`_pairwise` property is used by ``utils.metaestimators._safe_split`` to slice rows and columns."
msgstr ""

#: ../developers/develop.rst:231
msgid "The _pairwise attribute is deprecated in 0.24. From 1.1 (renaming of 0.26) onward, the `pairwise` estimator tag should be used instead."
msgstr ""

#: ../developers/develop.rst:235
msgid "Universal attributes"
msgstr ""

#: ../developers/develop.rst:237
msgid "Estimators that expect tabular input should set a `n_features_in_` attribute at `fit` time to indicate the number of features that the estimator expects for subsequent calls to `predict` or `transform`. See `SLEP010 <https://scikit-learn-enhancement-proposals.readthedocs.io/en/latest/slep010/proposal.html>`_ for details."
msgstr ""

#: ../developers/develop.rst:248
msgid "Rolling your own estimator"
msgstr ""

#: ../developers/develop.rst:249
msgid "If you want to implement a new estimator that is scikit-learn-compatible, whether it is just for you or for contributing it to scikit-learn, there are several internals of scikit-learn that you should be aware of in addition to the scikit-learn API outlined above. You can check whether your estimator adheres to the scikit-learn interface and standards by running :func:`~sklearn.utils.estimator_checks.check_estimator` on an instance. The :func:`~sklearn.utils.estimator_checks.parametrize_with_checks` pytest decorator can also be used (see its docstring for details and possible interactions with `pytest`)::"
msgstr ""

#: ../developers/develop.rst:263
msgid "The main motivation to make a class compatible to the scikit-learn estimator interface might be that you want to use it together with model evaluation and selection tools such as :class:`model_selection.GridSearchCV` and :class:`pipeline.Pipeline`."
msgstr ""

#: ../developers/develop.rst:268
msgid "Before detailing the required interface below, we describe two ways to achieve the correct interface more easily."
msgstr ""

#: ../developers/develop.rst:273
msgid "We provide a `project template <https://github.com/scikit-learn-contrib/project-template/>`_ which helps in the creation of Python packages containing scikit-learn compatible estimators. It provides:"
msgstr ""

#: ../developers/develop.rst:277
msgid "an initial git repository with Python package directory structure"
msgstr ""

#: ../developers/develop.rst:278
msgid "a template of a scikit-learn estimator"
msgstr ""

#: ../developers/develop.rst:279
msgid "an initial test suite including use of ``check_estimator``"
msgstr ""

#: ../developers/develop.rst:280
msgid "directory structures and scripts to compile documentation and example galleries"
msgstr ""

#: ../developers/develop.rst:282
msgid "scripts to manage continuous integration (testing on Linux and Windows)"
msgstr ""

#: ../developers/develop.rst:283
msgid "instructions from getting started to publishing on `PyPi <https://pypi.org/>`_"
msgstr ""

msgid "``BaseEstimator`` and mixins:"
msgstr ""

#: ../developers/develop.rst:287
msgid "We tend to use \"duck typing\", so building an estimator which follows the API suffices for compatibility, without needing to inherit from or even import any scikit-learn classes."
msgstr "Tendemos a utilizar la \"duck typing\", por lo que la compilaci√≥n de un estimador que sigue la API es suficiente para la compatibilidad, sin necesidad de heredar o incluso importar cualquier clase de scikit-learn."

#: ../developers/develop.rst:291
msgid "However, if a dependency on scikit-learn is acceptable in your code, you can prevent a lot of boilerplate code by deriving a class from ``BaseEstimator`` and optionally the mixin classes in ``sklearn.base``. For example, below is a custom classifier, with more examples included in the scikit-learn-contrib `project template <https://github.com/scikit-learn-contrib/project-template/blob/master/skltemplate/_template.py>`__."
msgstr ""

#: ../developers/develop.rst:334
msgid "get_params and set_params"
msgstr ""

#: ../developers/develop.rst:335
msgid "All scikit-learn estimators have ``get_params`` and ``set_params`` functions. The ``get_params`` function takes no arguments and returns a dict of the ``__init__`` parameters of the estimator, together with their values."
msgstr ""

#: ../developers/develop.rst:339
msgid "It must take one keyword argument, ``deep``, which receives a boolean value that determines whether the method should return the parameters of sub-estimators (for most estimators, this can be ignored). The default value for ``deep`` should be `True`. For instance considering the following estimator::"
msgstr ""

#: ../developers/develop.rst:352
msgid "The parameter `deep` will control whether or not the parameters of the `subsestimator` should be reported. Thus when `deep=True`, the output will be::"
msgstr ""

#: ../developers/develop.rst:376
msgid "Often, the `subestimator` has a name (as e.g. named steps in a :class:`~sklearn.pipeline.Pipeline` object), in which case the key should become `<name>__C`, `<name>__class_weight`, etc."
msgstr ""

#: ../developers/develop.rst:380
msgid "While when `deep=False`, the output will be::"
msgstr ""

#: ../developers/develop.rst:387
msgid "The ``set_params`` on the other hand takes as input a dict of the form ``'parameter': value`` and sets the parameter of the estimator using this dict. Return value must be estimator itself."
msgstr ""

#: ../developers/develop.rst:391
msgid "While the ``get_params`` mechanism is not essential (see :ref:`cloning` below), the ``set_params`` function is necessary as it is used to set parameters during grid searches."
msgstr ""

#: ../developers/develop.rst:395
msgid "The easiest way to implement these functions, and to get a sensible ``__repr__`` method, is to inherit from ``sklearn.base.BaseEstimator``. If you do not want to make your code dependent on scikit-learn, the easiest way to implement the interface is::"
msgstr ""

#: ../developers/develop.rst:411
msgid "Parameters and init"
msgstr ""

#: ../developers/develop.rst:412
msgid "As :class:`model_selection.GridSearchCV` uses ``set_params`` to apply parameter setting to estimators, it is essential that calling ``set_params`` has the same effect as setting parameters using the ``__init__`` method. The easiest and recommended way to accomplish this is to **not do any parameter validation in** ``__init__``. All logic behind estimator parameters, like translating string arguments into functions, should be done in ``fit``."
msgstr ""

#: ../developers/develop.rst:421
msgid "Also it is expected that parameters with trailing ``_`` are **not to be set inside the** ``__init__`` **method**. All and only the public attributes set by fit have a trailing ``_``. As a result the existence of parameters with trailing ``_`` is used to check if the estimator has been fitted."
msgstr ""

#: ../developers/develop.rst:429
msgid "Cloning"
msgstr ""

#: ../developers/develop.rst:430
msgid "For use with the :mod:`model_selection` module, an estimator must support the ``base.clone`` function to replicate an estimator. This can be done by providing a ``get_params`` method. If ``get_params`` is present, then ``clone(estimator)`` will be an instance of ``type(estimator)`` on which ``set_params`` has been called with clones of the result of ``estimator.get_params()``."
msgstr ""

#: ../developers/develop.rst:437
msgid "Objects that do not provide this method will be deep-copied (using the Python standard function ``copy.deepcopy``) if ``safe=False`` is passed to ``clone``."
msgstr ""

#: ../developers/develop.rst:442
msgid "Pipeline compatibility"
msgstr ""

#: ../developers/develop.rst:443
msgid "For an estimator to be usable together with ``pipeline.Pipeline`` in any but the last step, it needs to provide a ``fit`` or ``fit_transform`` function. To be able to evaluate the pipeline on any data but the training set, it also needs to provide a ``transform`` function. There are no special requirements for the last step in a pipeline, except that it has a ``fit`` function. All ``fit`` and ``fit_transform`` functions must take arguments ``X, y``, even if y is not used. Similarly, for ``score`` to be usable, the last step of the pipeline needs to have a ``score`` function that accepts an optional ``y``."
msgstr ""

#: ../developers/develop.rst:454
msgid "Estimator types"
msgstr ""

#: ../developers/develop.rst:455
msgid "Some common functionality depends on the kind of estimator passed. For example, cross-validation in :class:`model_selection.GridSearchCV` and :func:`model_selection.cross_val_score` defaults to being stratified when used on a classifier, but not otherwise. Similarly, scorers for average precision that take a continuous prediction need to call ``decision_function`` for classifiers, but ``predict`` for regressors. This distinction between classifiers and regressors is implemented using the ``_estimator_type`` attribute, which takes a string value. It should be ``\"classifier\"`` for classifiers and ``\"regressor\"`` for regressors and ``\"clusterer\"`` for clustering methods, to work as expected. Inheriting from ``ClassifierMixin``, ``RegressorMixin`` or ``ClusterMixin`` will set the attribute automatically.  When a meta-estimator needs to distinguish among estimator types, instead of checking ``_estimator_type`` directly, helpers like :func:`base.is_classifier` should be used."
msgstr ""

#: ../developers/develop.rst:470
msgid "Specific models"
msgstr ""

#: ../developers/develop.rst:472
msgid "Classifiers should accept ``y`` (target) arguments to ``fit`` that are sequences (lists, arrays) of either strings or integers.  They should not assume that the class labels are a contiguous range of integers; instead, they should store a list of classes in a ``classes_`` attribute or property.  The order of class labels in this attribute should match the order in which ``predict_proba``, ``predict_log_proba`` and ``decision_function`` return their values.  The easiest way to achieve this is to put::"
msgstr ""

#: ../developers/develop.rst:482
msgid "in ``fit``.  This returns a new ``y`` that contains class indexes, rather than labels, in the range [0, ``n_classes``)."
msgstr ""

#: ../developers/develop.rst:485
msgid "A classifier's ``predict`` method should return arrays containing class labels from ``classes_``. In a classifier that implements ``decision_function``, this can be achieved with::"
msgstr ""

#: ../developers/develop.rst:494
msgid "In linear models, coefficients are stored in an array called ``coef_``, and the independent term is stored in ``intercept_``.  ``sklearn.linear_model._base`` contains a few base classes and mixins that implement common linear model patterns."
msgstr ""

#: ../developers/develop.rst:499
msgid "The :mod:`sklearn.utils.multiclass` module contains useful functions for working with multiclass and multilabel problems."
msgstr ""

#: ../developers/develop.rst:505
msgid "Estimator Tags"
msgstr ""

#: ../developers/develop.rst:508
msgid "The estimator tags are experimental and the API is subject to change."
msgstr ""

#: ../developers/develop.rst:510
msgid "Scikit-learn introduced estimator tags in version 0.21. These are annotations of estimators that allow programmatic inspection of their capabilities, such as sparse matrix support, supported output types and supported methods. The estimator tags are a dictionary returned by the method ``_get_tags()``. These tags are used in the common checks run by the :func:`~sklearn.utils.estimator_checks.check_estimator` function and the :func:`~sklearn.utils.estimator_checks.parametrize_with_checks` decorator. Tags determine which checks to run and what input data is appropriate. Tags can depend on estimator parameters or even system architecture and can in general only be determined at runtime."
msgstr ""

#: ../developers/develop.rst:521
msgid "The current set of estimator tags are:"
msgstr ""

#: ../developers/develop.rst:524
msgid "allow_nan (default=False)"
msgstr ""

#: ../developers/develop.rst:524
msgid "whether the estimator supports data with missing values encoded as np.NaN"
msgstr ""

#: ../developers/develop.rst:528
msgid "binary_only (default=False)"
msgstr ""

#: ../developers/develop.rst:527
msgid "whether estimator supports binary classification but lacks multi-class classification support."
msgstr ""

#: ../developers/develop.rst:531
msgid "multilabel (default=False)"
msgstr ""

#: ../developers/develop.rst:531
msgid "whether the estimator supports multilabel output"
msgstr ""

#: ../developers/develop.rst:535
msgid "multioutput (default=False)"
msgstr ""

#: ../developers/develop.rst:534
msgid "whether a regressor supports multi-target outputs or a classifier supports multi-class multi-output."
msgstr ""

#: ../developers/develop.rst:538
msgid "multioutput_only (default=False)"
msgstr ""

#: ../developers/develop.rst:538
msgid "whether estimator supports only multi-output classification or regression."
msgstr ""

#: ../developers/develop.rst:542
msgid "no_validation (default=False)"
msgstr ""

#: ../developers/develop.rst:541
msgid "whether the estimator skips input-validation. This is only meant for stateless and dummy transformers!"
msgstr ""

#: ../developers/develop.rst:545
msgid "non_deterministic (default=False)"
msgstr ""

#: ../developers/develop.rst:545
msgid "whether the estimator is not deterministic given a fixed ``random_state``"
msgstr ""

#: ../developers/develop.rst:555
msgid "pairwise (default=False)"
msgstr ""

#: ../developers/develop.rst:548
msgid "This boolean attribute indicates whether the data (`X`) :term:`fit` and similar methods consists of pairwise measures over samples rather than a feature representation for each sample.  It is usually `True` where an estimator has a `metric` or `affinity` or `kernel` parameter with value 'precomputed'. Its primary purpose is that when a :term:`meta-estimator` extracts a sub-sample of data intended for a pairwise estimator, the data needs to be indexed on both axes, while other data is indexed only on the first axis."
msgstr ""

#: ../developers/develop.rst:563
msgid "preserves_dtype (default=``[np.float64]``)"
msgstr ""

#: ../developers/develop.rst:558
msgid "applies only on transformers. It corresponds to the data types which will be preserved such that `X_trans.dtype` is the same as `X.dtype` after calling `transformer.transform(X)`. If this list is empty, then the transformer is not expected to preserve the data type. The first value in the list is considered as the default data type, corresponding to the data type of the output when the input data type is not going to be preserved."
msgstr ""

#: ../developers/develop.rst:571
msgid "poor_score (default=False)"
msgstr ""

#: ../developers/develop.rst:566
msgid "whether the estimator fails to provide a \"reasonable\" test-set score, which currently for regression is an R2 of 0.5 on a subset of the boston housing dataset, and for classification an accuracy of 0.83 on ``make_blobs(n_samples=300, random_state=0)``. These datasets and values are based on current estimators in sklearn and might be replaced by something more systematic."
msgstr ""

#: ../developers/develop.rst:575
msgid "requires_fit (default=True)"
msgstr ""

#: ../developers/develop.rst:574
msgid "whether the estimator requires to be fitted before calling one of `transform`, `predict`, `predict_proba`, or `decision_function`."
msgstr ""

#: ../developers/develop.rst:578
msgid "requires_positive_X (default=False)"
msgstr ""

#: ../developers/develop.rst:578
msgid "whether the estimator requires positive X."
msgstr ""

#: ../developers/develop.rst:583
msgid "requires_y (default=False)"
msgstr ""

#: ../developers/develop.rst:581
msgid "whether the estimator requires y to be passed to `fit`, `fit_predict` or `fit_transform` methods. The tag is True for estimators inheriting from `~sklearn.base.RegressorMixin` and `~sklearn.base.ClassifierMixin`."
msgstr ""

#: ../developers/develop.rst:586
msgid "requires_positive_y (default=False)"
msgstr ""

#: ../developers/develop.rst:586
msgid "whether the estimator requires a positive y (only applicable for regression)."
msgstr ""

#: ../developers/develop.rst:590
msgid "_skip_test (default=False)"
msgstr ""

#: ../developers/develop.rst:589
msgid "whether to skip common tests entirely. Don't use this unless you have a *very good* reason."
msgstr ""

#: ../developers/develop.rst:603
msgid "_xfail_checks (default=False)"
msgstr ""

#: ../developers/develop.rst:593
msgid "dictionary ``{check_name: reason}`` of common checks that will be marked as `XFAIL` for pytest, when using :func:`~sklearn.utils.estimator_checks.parametrize_with_checks`. These checks will be simply ignored and not run by :func:`~sklearn.utils.estimator_checks.check_estimator`, but a `SkipTestWarning` will be raised. Don't use this unless there is a *very good* reason for your estimator not to pass the check. Also note that the usage of this tag is highly subject to change because we are trying to make it more flexible: be prepared for breaking changes in the future."
msgstr ""

#: ../developers/develop.rst:608
msgid "stateless (default=False)"
msgstr ""

#: ../developers/develop.rst:606
msgid "whether the estimator needs access to data for fitting. Even though an estimator is stateless, it might still need a call to ``fit`` for initialization."
msgstr ""

#: ../developers/develop.rst:619
msgid "X_types (default=['2darray'])"
msgstr ""

#: ../developers/develop.rst:611
msgid "Supported input types for X as list of strings. Tests are currently only run if '2darray' is contained in the list, signifying that the estimator takes continuous 2d numpy arrays as input. The default value is ['2darray']. Other possible types are ``'string'``, ``'sparse'``, ``'categorical'``, ``dict``, ``'1dlabels'`` and ``'2dlabels'``. The goal is that in the future the supported input type will determine the data used during testing, in particular for ``'string'``, ``'sparse'`` and ``'categorical'`` data. For now, the test for sparse data do not make use of the ``'sparse'`` tag."
msgstr ""

#: ../developers/develop.rst:621
msgid "It is unlikely that the default values for each tag will suit the needs of your specific estimator. Additional tags can be created or default tags can be overridden by defining a `_more_tags()` method which returns a dict with the desired overridden tags or new tags. For example::"
msgstr ""

#: ../developers/develop.rst:632
msgid "Any tag that is not in `_more_tags()` will just fall-back to the default values documented above."
msgstr ""

#: ../developers/develop.rst:635
msgid "Even if it is not recommended, it is possible to override the method `_get_tags()`. Note however that **all tags must be present in the dict**. If any of the keys documented above is not present in the output of `_get_tags()`, an error will occur."
msgstr ""

#: ../developers/develop.rst:640
msgid "In addition to the tags, estimators also need to declare any non-optional parameters to ``__init__`` in the ``_required_parameters`` class attribute, which is a list or tuple.  If ``_required_parameters`` is only ``[\"estimator\"]`` or ``[\"base_estimator\"]``, then the estimator will be instantiated with an instance of ``LinearDiscriminantAnalysis`` (or ``RidgeRegression`` if the estimator is a regressor) in the tests. The choice of these two models is somewhat idiosyncratic but both should provide robust closed-form solutions."
msgstr ""

#: ../developers/develop.rst:652
msgid "Coding guidelines"
msgstr ""

#: ../developers/develop.rst:654
msgid "The following are some guidelines on how new code should be written for inclusion in scikit-learn, and which may be appropriate to adopt in external projects. Of course, there are special cases and there will be exceptions to these rules. However, following these rules when submitting new code makes the review easier so new code can be integrated in less time."
msgstr ""

#: ../developers/develop.rst:660
msgid "Uniformly formatted code makes it easier to share code ownership. The scikit-learn project tries to closely follow the official Python guidelines detailed in `PEP8 <https://www.python.org/dev/peps/pep-0008>`_ that detail how code should be formatted and indented. Please read it and follow it."
msgstr ""

#: ../developers/develop.rst:666
msgid "In addition, we add the following guidelines:"
msgstr ""

#: ../developers/develop.rst:668
msgid "Use underscores to separate words in non class names: ``n_samples`` rather than ``nsamples``."
msgstr ""

#: ../developers/develop.rst:671
msgid "Avoid multiple statements on one line. Prefer a line return after a control flow statement (``if``/``for``)."
msgstr ""

#: ../developers/develop.rst:674
msgid "Use relative imports for references inside scikit-learn."
msgstr ""

#: ../developers/develop.rst:676
msgid "Unit tests are an exception to the previous rule; they should use absolute imports, exactly as client code would. A corollary is that, if ``sklearn.foo`` exports a class or function that is implemented in ``sklearn.foo.bar.baz``, the test should import it from ``sklearn.foo``."
msgstr ""

#: ../developers/develop.rst:682
msgid "**Please don't use** ``import *`` **in any case**. It is considered harmful by the `official Python recommendations <https://docs.python.org/3.1/howto/doanddont.html#at-module-level>`_. It makes the code harder to read as the origin of symbols is no longer explicitly referenced, but most important, it prevents using a static analysis tool like `pyflakes <https://divmod.readthedocs.io/en/latest/products/pyflakes.html>`_ to automatically find bugs in scikit-learn."
msgstr ""

#: ../developers/develop.rst:691
msgid "Use the `numpy docstring standard <https://numpydoc.readthedocs.io/en/latest/format.html#numpydoc-docstring-guide>`_ in all your docstrings."
msgstr ""

#: ../developers/develop.rst:695
msgid "A good example of code that we like can be found `here <https://gist.github.com/nateGeorge/5455d2c57fb33c1ae04706f2dc4fee01>`_."
msgstr ""

#: ../developers/develop.rst:699
msgid "Input validation"
msgstr ""

#: ../developers/develop.rst:703
msgid "The module :mod:`sklearn.utils` contains various functions for doing input validation and conversion. Sometimes, ``np.asarray`` suffices for validation; do *not* use ``np.asanyarray`` or ``np.atleast_2d``, since those let NumPy's ``np.matrix`` through, which has a different API (e.g., ``*`` means dot product on ``np.matrix``, but Hadamard product on ``np.ndarray``)."
msgstr ""

#: ../developers/develop.rst:710
msgid "In other cases, be sure to call :func:`check_array` on any array-like argument passed to a scikit-learn API function. The exact parameters to use depends mainly on whether and which ``scipy.sparse`` matrices must be accepted."
msgstr ""

#: ../developers/develop.rst:714
msgid "For more information, refer to the :ref:`developers-utils` page."
msgstr ""

#: ../developers/develop.rst:717
msgid "Random Numbers"
msgstr ""

#: ../developers/develop.rst:719
msgid "If your code depends on a random number generator, do not use ``numpy.random.random()`` or similar routines.  To ensure repeatability in error checking, the routine should accept a keyword ``random_state`` and use this to construct a ``numpy.random.RandomState`` object. See :func:`sklearn.utils.check_random_state` in :ref:`developers-utils`."
msgstr ""

#: ../developers/develop.rst:726
msgid "Here's a simple example of code using some of the above guidelines::"
msgstr ""

#: ../developers/develop.rst:753
msgid "If you use randomness in an estimator instead of a freestanding function, some additional guidelines apply."
msgstr ""

#: ../developers/develop.rst:756
msgid "First off, the estimator should take a ``random_state`` argument to its ``__init__`` with a default value of ``None``. It should store that argument's value, **unmodified**, in an attribute ``random_state``. ``fit`` can call ``check_random_state`` on that attribute to get an actual random number generator. If, for some reason, randomness is needed after ``fit``, the RNG should be stored in an attribute ``random_state_``. The following example should make this clear::"
msgstr ""

#: ../developers/develop.rst:785
msgid "The reason for this setup is reproducibility: when an estimator is ``fit`` twice to the same data, it should produce an identical model both times, hence the validation in ``fit``, not ``__init__``."
msgstr ""

