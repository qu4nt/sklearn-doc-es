msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-27 20:04\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/developers/plotting.po\n"
"X-Crowdin-File-ID: 4028\n"
"Language: es_ES\n"

#: ../developers/plotting.rst:5
msgid "Developing with the Plotting API"
msgstr "Desarrollo con la API Plotting"

#: ../developers/plotting.rst:7
msgid "Scikit-learn defines a simple API for creating visualizations for machine learning. The key features of this API is to run calculations once and to have the flexibility to adjust the visualizations after the fact. This section is intended for developers who wish to develop or maintain plotting tools. For usage, users should refer to the :ref`User Guide <visualizations>`."
msgstr "Scikit-learn define una API sencilla para crear visualizaciones para el aprendizaje automático. Las características clave de esta API son ejecutar los cálculos una vez y tener la flexibilidad de ajustar las visualizaciones después del hecho. Esta sección está destinada a los desarrolladores que deseen desarrollar o mantener herramientas de trazado. Para su uso, los usuarios deben consultar el :ref:`Manual de Usuario <visualizations>`."

#: ../developers/plotting.rst:14
msgid "Plotting API Overview"
msgstr "Visión general de la API Plotting"

#: ../developers/plotting.rst:16
msgid "This logic is encapsulated into a display object where the computed data is stored and the plotting is done in a `plot` method. The display object's `__init__` method contains only the data needed to create the visualization. The `plot` method takes in parameters that only have to do with visualization, such as a matplotlib axes. The `plot` method will store the matplotlib artists as attributes allowing for style adjustments through the display object. A `plot_*` helper function accepts parameters to do the computation and the parameters used for plotting. After the helper function creates the display object with the computed values, it calls the display's plot method. Note that the `plot` method defines attributes related to matplotlib, such as the line artist. This allows for customizations after calling the `plot` method."
msgstr "Esta lógica se encapsula en un objeto de visualización donde se almacenan los datos calculados y el trazado se realiza en un método `plot`. El método `__init__` del objeto de visualización contiene sólo los datos necesarios para crear la visualización. El método `plot` toma parámetros que sólo tienen que ver con la visualización, como los ejes de matplotlib. El método `plot` almacenará los artistas de matplotlib como atributos que permiten ajustes de estilo a través del objeto de visualización. Una función de ayuda (helper) `plot_*` acepta parámetros para hacer el cálculo y los parámetros utilizados para el trazado. Después de que la función de ayuda crea el objeto de visualización con los valores calculados, invoca al método plot de la visualización. Ten en cuenta que el método `plot` define atributos relacionados con matplotlib, como el artista de la línea. Esto permite personalizaciones después de invocar al método `plot`."

#: ../developers/plotting.rst:28
msgid "For example, the `RocCurveDisplay` defines the following methods and attributes::"
msgstr "Por ejemplo, `RocCurveDisplay` define los siguientes métodos y atributos::"

#: ../developers/plotting.rst:53
msgid "Read more in :ref:`sphx_glr_auto_examples_miscellaneous_plot_roc_curve_visualization_api.py` and the :ref:`User Guide <visualizations>`."
msgstr "Lee más en :ref:`sphx_glr_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py` y en el :ref:`Manual de Usuario <visualizations>`."

#: ../developers/plotting.rst:57
msgid "Plotting with Multiple Axes"
msgstr "Graficar con Múltiples Ejes"

#: ../developers/plotting.rst:59
msgid "Some of the plotting tools like :func:`~sklearn.inspection.plot_partial_dependence` and :class:`~sklearn.inspection.PartialDependenceDisplay` support plottong on multiple axes. Two different scenarios are supported:"
msgstr "Algunas de las herramientas de graficación como :func:`~sklearn.inspection.plot_partial_dependence` y :class:`~sklearn.inspection.PartialDependenceDisplay` admiten el trazado en múltiples ejes. Se admiten dos escenarios diferentes:"

#: ../developers/plotting.rst:64
msgid "1. If a list of axes is passed in, `plot` will check if the number of axes is consistent with the number of axes it expects and then draws on those axes. 2. If a single axes is passed in, that axes defines a space for multiple axes to be placed. In this case, we suggest using matplotlib's `~matplotlib.gridspec.GridSpecFromSubplotSpec` to split up the space::"
msgstr "Primero, si se pasa una lista de ejes, `plot` comprobará si el número de ejes es coherente con el número de ejes que espera y entonces dibujará en esos ejes. Segundo, si se pasa un solo eje, ese eje define un espacio para colocar varios ejes. En este caso, te sugerimos que utilices la función `~matplotlib.gridspec.GridSpecFromSubplotSpec` de matplotlib para dividir el espacio::"

#: ../developers/plotting.rst:80
msgid "By default, the `ax` keyword in `plot` is `None`. In this case, the single axes is created and the gridspec api is used to create the regions to plot in."
msgstr "Por defecto, la palabra clave `ax` en `plot` es `None`. En este caso, se crea el eje único y se utiliza la api gridspec para crear las regiones a trazar."

#: ../developers/plotting.rst:83
msgid "See for example, :func:`~sklearn.inspection.plot_partial_dependence` which plots multiple lines and contours using this API. The axes defining the bounding box is saved in a `bounding_ax_` attribute. The individual axes created are stored in an `axes_` ndarray, corresponding to the axes position on the grid. Positions that are not used are set to `None`. Furthermore, the matplotlib Artists are stored in `lines_` and `contours_` where the key is the position on the grid. When a list of axes is passed in, the `axes_`, `lines_`, and `contours_` is a 1d ndarray corresponding to the list of axes passed in."
msgstr "Mira por ejemplo, :func:`~sklearn.inspection.plot_partial_dependence` que traza múltiples líneas y contornos utilizando esta API. Los ejes que definen la caja delimitadora se guardan en un atributo `bounding_ax_`. Los ejes individuales creados se guardan en un ndarray `axes_` , correspondiente a la posición de los ejes en la cuadrícula. Las posiciones que no se utilizan se establecen en `None`. Además, los Artistas de matplotlib se almacenan en `lines_` y `contours_` donde la clave es la posición en la cuadrícula. Cuando se pasa una lista de ejes, el `axes_`, `lines_` y `contours_` es un ndarray 1d correspondiente a la lista de ejes pasados."

