msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-14 22:15\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/developers/advanced_installation.po\n"
"X-Crowdin-File-ID: 4012\n"
"Language: es_ES\n"

#: ../developers/advanced_installation.rst:8
msgid "Installing the development version of scikit-learn"
msgstr "Instalación de la versión de desarrollo de scikit-learn"

#: ../developers/advanced_installation.rst:10
msgid "This section introduces how to install the **main branch** of scikit-learn. This can be done by either installing a nightly build or building from source."
msgstr "Esta sección presenta cómo instalar la **rama principal** de scikit-learn. Esto se puede hacer ya sea instalando una construcción nocturna o construyendo desde el código fuente."

#: ../developers/advanced_installation.rst:16
msgid "Installing nightly builds"
msgstr "Instalación de compilaciones nocturnas"

#: ../developers/advanced_installation.rst:18
msgid "The continuous integration servers of the scikit-learn project build, test and upload wheel packages for the most recent Python version on a nightly basis."
msgstr "Los servidores de integración continua del proyecto scikit-learn construyen, prueban y suben paquetes wheel para la versión más reciente de Python cada noche."

#: ../developers/advanced_installation.rst:22
msgid "Installing a nightly build is the quickest way to:"
msgstr "Instalar una compilación nocturna es la forma más rápida de:"

#: ../developers/advanced_installation.rst:24
msgid "try a new feature that will be shipped in the next release (that is, a feature from a pull-request that was recently merged to the main branch);"
msgstr "probar una nueva característica que será enviada en la próxima versión (es decir, una característica de una solicitud de pull que fue recientemente fusionada con la rama principal);"

#: ../developers/advanced_installation.rst:27
msgid "check whether a bug you encountered has been fixed since the last release."
msgstr "comprobar si un error detectado ha sido corregido desde la última versión."

#: ../developers/advanced_installation.rst:37
msgid "Building from source"
msgstr "Construyendo desde la fuente"

#: ../developers/advanced_installation.rst:39
msgid "Building from source is required to work on a contribution (bug fix, new feature, code or documentation improvement)."
msgstr "Es necesario compilar desde el código fuente para trabajar en una contribución (corrección de errores, nueva función, mejora del código o de la documentación)."

#: ../developers/advanced_installation.rst:44
msgid "Use `Git <https://git-scm.com/>`_ to check out the latest source from the `scikit-learn repository <https://github.com/scikit-learn/scikit-learn>`_ on Github.:"
msgstr "Usa `Git <https://git-scm.com/>`_ para revisar la última fuente del repositorio `scikit-learn <https://github.com/scikit-learn/scikit-learn>`_ en Github.:"

#: ../developers/advanced_installation.rst:53
msgid "If you plan on submitting a pull-request, you should clone from your fork instead."
msgstr "Si planeas enviar una solicitud de pull, deberías clonar desde su bifurcación."

#: ../developers/advanced_installation.rst:56
msgid "Install a compiler with OpenMP_ support for your platform. See instructions for :ref:`compiler_windows`, :ref:`compiler_macos`, :ref:`compiler_linux` and :ref:`compiler_freebsd`."
msgstr "Instala un compilador con soporte OpenMP_ para su plataforma. Ver instrucciones para :ref:`compiler_windows`, :ref:`compiler_macos`, :ref:`compiler_linux` y :ref:`compiler_freebsd`."

#: ../developers/advanced_installation.rst:60
msgid "Optional (but recommended): create and activate a dedicated virtualenv_ or `conda environment`_."
msgstr "Opcional (pero recomendado): crear y activar un entorno virtual dedicado_ o `conda`_."

#: ../developers/advanced_installation.rst:63
msgid "Install Cython_ and build the project with pip in :ref:`editable_mode`:"
msgstr "Instala Cython_ y construye el proyecto con pip en :ref:`editable_mode`:"

#: ../developers/advanced_installation.rst:70
msgid "Check that the installed scikit-learn has a version number ending with `.dev0`:"
msgstr "Comprueba que el scikit-learn instalado tiene un número de versión que termina con `.dev0`:"

#: ../developers/advanced_installation.rst:77
msgid "Please refer to the :ref:`developers_guide` and :ref:`pytest_tips` to run the tests on the module of your choice."
msgstr "Por favor, consulta :ref:`developers_guide` y :ref:`pytest_tips` para ejecutar las pruebas en el módulo de tu elección."

#: ../developers/advanced_installation.rst:82
msgid "You will have to run the ``pip install --no-build-isolation --editable .`` command every time the source code of a Cython file is updated (ending in `.pyx` or `.pxd`). Use the ``--no-build-isolation`` flag to avoid compiling the whole project each time, only the files you have modified."
msgstr "Tendrás que ejecutar el comando ``pip install --no-build-isolation --editable .`` cada vez que se actualice el código fuente de un archivo Cython (que termine en `.pyx` o `.pxd`). Utilice la bandera ``--no-build-isolation`` para evitar compilar todo el proyecto cada vez, sólo los archivos que ha modificado."

#: ../developers/advanced_installation.rst:89
msgid "Dependencies"
msgstr "Dependencias"

#: ../developers/advanced_installation.rst:92
msgid "Runtime dependencies"
msgstr "Dependencias de ejecución"

#: ../developers/advanced_installation.rst:94
msgid "Scikit-learn requires the following dependencies both at build time and at runtime:"
msgstr "Scikit-learn requiere las siguientes dependencias tanto en tiempo de construcción como en tiempo de ejecución:"

#: ../developers/advanced_installation.rst:97
msgid "Python (>= 3.6),"
msgstr "Python (>= 3.6),"

#: ../developers/advanced_installation.rst:98
msgid "NumPy (>= |NumpyMinVersion|),"
msgstr "NumPy (>= |NumpyMinVersion|),"

#: ../developers/advanced_installation.rst:99
msgid "SciPy (>= |ScipyMinVersion|),"
msgstr "SciPy (>= |ScipyMinVersion|),"

#: ../developers/advanced_installation.rst:100
msgid "Joblib (>= |JoblibMinVersion|),"
msgstr "Joblib (>= |JoblibMinVersion|),"

#: ../developers/advanced_installation.rst:101
msgid "threadpoolctl (>= |ThreadpoolctlMinVersion|)."
msgstr "threadpoolctl (>= |ThreadpoolctlMinVersion|)."

#: ../developers/advanced_installation.rst:103
msgid "Those dependencies are **automatically installed by pip** if they were missing when building scikit-learn from source."
msgstr "Esas dependencias son **instaladas automáticamente por pip** si faltaban al construir scikit-learn desde el origen."

#: ../developers/advanced_installation.rst:108
msgid "For running on PyPy, PyPy3-v5.10+, Numpy 1.14.0+, and scipy 1.1.0+ are required. For PyPy, only installation instructions with pip apply."
msgstr "Para ejecutarse en PyPy, PyPy3-v5.10+, se requieren Numpy 1.14.0+, y scipy 1.1.0+. Para PyPy, solo se aplican las instrucciones de instalación con pip."

#: ../developers/advanced_installation.rst:112
msgid "Build dependencies"
msgstr "Dependencias de construcción"

#: ../developers/advanced_installation.rst:114
msgid "Building Scikit-learn also requires:"
msgstr ""

#: ../developers/advanced_installation.rst:122
msgid "Cython >= |CythonMinVersion|"
msgstr ""

#: ../developers/advanced_installation.rst:123
msgid "A C/C++ compiler and a matching OpenMP_ runtime library. See the :ref:`platform system specific instructions <platform_specific_instructions>` for more details."
msgstr ""

#: ../developers/advanced_installation.rst:129
msgid "If OpenMP is not supported by the compiler, the build will be done with OpenMP functionalities disabled. This is not recommended since it will force some estimators to run in sequential mode instead of leveraging thread-based parallelism. Setting the ``SKLEARN_FAIL_NO_OPENMP`` environment variable (before cythonization) will force the build to fail if OpenMP is not supported."
msgstr ""

#: ../developers/advanced_installation.rst:136
msgid "Since version 0.21, scikit-learn automatically detects and use the linear algebrea library used by SciPy **at runtime**. Scikit-learn has therefore no build dependency on BLAS/LAPACK implementations such as OpenBlas, Atlas, Blis or MKL."
msgstr ""

#: ../developers/advanced_installation.rst:142
msgid "Test dependencies"
msgstr ""

#: ../developers/advanced_installation.rst:144
msgid "Running tests requires:"
msgstr ""

#: ../developers/advanced_installation.rst:146
msgid "pytest >= |PytestMinVersion|"
msgstr ""

#: ../developers/advanced_installation.rst:148
msgid "Some tests also require `pandas <https://pandas.pydata.org>`_."
msgstr ""

#: ../developers/advanced_installation.rst:152
msgid "Building a specific version from a tag"
msgstr ""

#: ../developers/advanced_installation.rst:154
msgid "If you want to build a stable version, you can ``git checkout <VERSION>`` to get the code for that particular version, or download an zip archive of the version from github."
msgstr ""

#: ../developers/advanced_installation.rst:161
msgid "Editable mode"
msgstr ""

#: ../developers/advanced_installation.rst:163
msgid "If you run the development version, it is cumbersome to reinstall the package each time you update the sources. Therefore it is recommended that you install in with the ``pip install --no-build-isolation --editable .`` command, which allows you to edit the code in-place. This builds the extension in place and creates a link to the development directory (see `the pip docs <https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs>`_)."
msgstr ""

#: ../developers/advanced_installation.rst:170
msgid "This is fundamentally similar to using the command ``python setup.py develop`` (see `the setuptool docs <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_). It is however preferred to use pip."
msgstr ""

#: ../developers/advanced_installation.rst:175
msgid "On Unix-like systems, you can equivalently type ``make in`` from the top-level folder. Have a look at the ``Makefile`` for additional utilities."
msgstr ""

#: ../developers/advanced_installation.rst:181
msgid "Platform-specific instructions"
msgstr ""

#: ../developers/advanced_installation.rst:183
msgid "Here are instructions to install a working C/C++ compiler with OpenMP support to build scikit-learn Cython extensions for each supported platform."
msgstr ""

#: ../developers/advanced_installation.rst:189
msgid "Windows"
msgstr ""

#: ../developers/advanced_installation.rst:191
msgid "First, install `Build Tools for Visual Studio 2019 <https://visualstudio.microsoft.com/downloads/>`_."
msgstr ""

#: ../developers/advanced_installation.rst:196
msgid "You DO NOT need to install Visual Studio 2019. You only need the \"Build Tools for Visual Studio 2019\", under \"All downloads\" -> \"Tools for Visual Studio 2019\"."
msgstr ""

#: ../developers/advanced_installation.rst:200
msgid "Secondly, find out if you are running 64-bit or 32-bit Python. The building command depends on the architecture of the Python interpreter. You can check the architecture by running the following in ``cmd`` or ``powershell`` console:"
msgstr ""

#: ../developers/advanced_installation.rst:209
msgid "For 64-bit Python, configure the build environment by running the following commands in ``cmd`` or an Anaconda Prompt (if you use Anaconda):"
msgstr ""

#: ../developers/advanced_installation.rst:217
msgid "Replace ``x64`` by ``x86`` to build for 32-bit Python."
msgstr ""

#: ../developers/advanced_installation.rst:219
msgid "Please be aware that the path above might be different from user to user. The aim is to point to the \"vcvarsall.bat\" file that will set the necessary environment variables in the current command prompt."
msgstr ""

#: ../developers/advanced_installation.rst:223
msgid "Finally, build scikit-learn from this command prompt:"
msgstr ""

#: ../developers/advanced_installation.rst:232
msgid "macOS"
msgstr ""

#: ../developers/advanced_installation.rst:234
msgid "The default C compiler on macOS, Apple clang (confusingly aliased as `/usr/bin/gcc`), does not directly support OpenMP. We present two alternatives to enable OpenMP support:"
msgstr ""

#: ../developers/advanced_installation.rst:238
msgid "either install `conda-forge::compilers` with conda;"
msgstr ""

#: ../developers/advanced_installation.rst:240
msgid "or install `libomp` with Homebrew to extend the default Apple clang compiler."
msgstr ""

#: ../developers/advanced_installation.rst:242
msgid "For Apple Silicon M1 hardware, only the conda-forge method below is known to work at the time of writing (January 2021). You can install the `macos/arm64` distribution of conda using the `miniforge installer <https://github.com/conda-forge/miniforge#miniforge>`_"
msgstr ""

#: ../developers/advanced_installation.rst:248
msgid "macOS compilers from conda-forge"
msgstr ""

#: ../developers/advanced_installation.rst:250
msgid "If you use the conda package manager (version >= 4.7), you can install the ``compilers`` meta-package from the conda-forge channel, which provides OpenMP-enabled C/C++ compilers based on the llvm toolchain."
msgstr ""

#: ../developers/advanced_installation.rst:254
#: ../developers/advanced_installation.rst:312
msgid "First install the macOS command line tools:"
msgstr ""

#: ../developers/advanced_installation.rst:260
msgid "It is recommended to use a dedicated `conda environment`_ to build scikit-learn from source:"
msgstr ""

#: ../developers/advanced_installation.rst:273
msgid "If you get any conflicting dependency error message, try commenting out any custom conda configuration in the ``$HOME/.condarc`` file. In particular the ``channel_priority: strict`` directive is known to cause problems for this setup."
msgstr ""

#: ../developers/advanced_installation.rst:278
msgid "You can check that the custom compilers are properly installed from conda forge using the following command:"
msgstr ""

#: ../developers/advanced_installation.rst:285
msgid "which should include ``compilers`` and ``llvm-openmp``."
msgstr ""

#: ../developers/advanced_installation.rst:287
msgid "The compilers meta-package will automatically set custom environment variables:"
msgstr ""

#: ../developers/advanced_installation.rst:298
msgid "They point to files and folders from your ``sklearn-dev`` conda environment (in particular in the bin/, include/ and lib/ subfolders). For instance ``-L/path/to/conda/envs/sklearn-dev/lib`` should appear in ``LDFLAGS``."
msgstr ""

#: ../developers/advanced_installation.rst:302
msgid "In the log, you should see the compiled extension being built with the clang and clang++ compilers installed by conda with the ``-fopenmp`` command line flag."
msgstr ""

#: ../developers/advanced_installation.rst:307
msgid "macOS compilers from Homebrew"
msgstr ""

#: ../developers/advanced_installation.rst:309
msgid "Another solution is to enable OpenMP support for the clang compiler shipped by default on macOS."
msgstr ""

#: ../developers/advanced_installation.rst:318
msgid "Install the Homebrew_ package manager for macOS."
msgstr ""

#: ../developers/advanced_installation.rst:320
msgid "Install the LLVM OpenMP library:"
msgstr ""

#: ../developers/advanced_installation.rst:326
msgid "Set the following environment variables:"
msgstr ""

#: ../developers/advanced_installation.rst:337
msgid "Finally, build scikit-learn in verbose mode (to check for the presence of the ``-fopenmp`` flag in the compiler commands):"
msgstr ""

#: ../developers/advanced_installation.rst:348
msgid "Linux"
msgstr ""

#: ../developers/advanced_installation.rst:351
msgid "Linux compilers from the system"
msgstr ""

#: ../developers/advanced_installation.rst:353
msgid "Installing scikit-learn from source without using conda requires you to have installed the scikit-learn Python development headers and a working C/C++ compiler with OpenMP support (typically the GCC toolchain)."
msgstr ""

#: ../developers/advanced_installation.rst:357
msgid "Install build dependencies for Debian-based operating systems, e.g. Ubuntu:"
msgstr ""

#: ../developers/advanced_installation.rst:364
msgid "then proceed as usual:"
msgstr ""

#: ../developers/advanced_installation.rst:371
msgid "Cython and the pre-compiled wheels for the runtime dependencies (numpy, scipy and joblib) should automatically be installed in ``$HOME/.local/lib/pythonX.Y/site-packages``. Alternatively you can run the above commands from a virtualenv_ or a `conda environment`_ to get full isolation from the Python packages installed via the system packager. When using an isolated environment, ``pip3`` should be replaced by ``pip`` in the above commands."
msgstr ""

#: ../developers/advanced_installation.rst:379
msgid "When precompiled wheels of the runtime dependencies are not avalaible for your architecture (e.g. ARM), you can install the system versions:"
msgstr ""

#: ../developers/advanced_installation.rst:386
msgid "On Red Hat and clones (e.g. CentOS), install the dependencies using:"
msgstr ""

#: ../developers/advanced_installation.rst:393
msgid "Linux compilers from conda-forge"
msgstr ""

#: ../developers/advanced_installation.rst:395
msgid "Alternatively, install a recent version of the GNU C Compiler toolchain (GCC) in the user folder using conda:"
msgstr ""

#: ../developers/advanced_installation.rst:408
msgid "FreeBSD"
msgstr ""

#: ../developers/advanced_installation.rst:410
msgid "The clang compiler included in FreeBSD 12.0 and 11.2 base systems does not include OpenMP support. You need to install the `openmp` library from packages (or ports):"
msgstr ""

#: ../developers/advanced_installation.rst:418
msgid "This will install header files in ``/usr/local/include`` and libs in ``/usr/local/lib``. Since these directories are not searched by default, you can set the environment variables to these locations:"
msgstr ""

#: ../developers/advanced_installation.rst:428
msgid "Finally, build the package using the standard command:"
msgstr ""

#: ../developers/advanced_installation.rst:434
msgid "For the upcoming FreeBSD 12.1 and 11.3 versions, OpenMP will be included in the base system and these steps will not be necessary."
msgstr ""

#: ../developers/advanced_installation.rst:444
msgid "Alternative compilers"
msgstr ""

#: ../developers/advanced_installation.rst:446
msgid "The command:"
msgstr ""

#: ../developers/advanced_installation.rst:452
msgid "will build scikit-learn using your default C/C++ compiler. If you want to build scikit-learn with another compiler handled by ``distutils`` or by ``numpy.distutils``, use the following command:"
msgstr ""

#: ../developers/advanced_installation.rst:460
msgid "To see the list of available compilers run:"
msgstr ""

#: ../developers/advanced_installation.rst:466
msgid "If your compiler is not listed here, you can specify it via the ``CC`` and ``LDSHARED`` environment variables (does not work on windows):"
msgstr ""

#: ../developers/advanced_installation.rst:474
msgid "Building with Intel C Compiler (ICC) using oneAPI on Linux"
msgstr ""

#: ../developers/advanced_installation.rst:476
msgid "Intel provides access to all of its oneAPI toolkits and packages through a public APT repository. First you need to get and install the public key of this repository:"
msgstr ""

#: ../developers/advanced_installation.rst:486
msgid "Then, add the oneAPI repository to your APT repositories:"
msgstr ""

#: ../developers/advanced_installation.rst:493
msgid "Install ICC, packaged under the name ``intel-oneapi-icc``:"
msgstr ""

#: ../developers/advanced_installation.rst:499
msgid "Before using ICC, you need to set up environment variables:"
msgstr ""

#: ../developers/advanced_installation.rst:505
msgid "Finally, you can build scikit-learn. For example on Linux x86_64:"
msgstr ""

#: ../developers/advanced_installation.rst:512
msgid "Parallel builds"
msgstr ""

#: ../developers/advanced_installation.rst:514
msgid "It is possible to build scikit-learn compiled extensions in parallel by setting and environment variable as follows before calling the ``pip install`` or ``python setup.py build_ext`` commands::"
msgstr ""

#: ../developers/advanced_installation.rst:521
msgid "On a machine with 2 CPU cores, it can be beneficial to use a parallelism level of 3 to overlap IO bound tasks (reading and writing files on disk) with CPU bound tasks (actually compiling)."
msgstr ""

