msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/developers/tips.po\n"
"X-Crowdin-File-ID: 2796\n"
"Language: es_ES\n"

#: ../developers/tips.rst:5
msgid "Developers' Tips and Tricks"
msgstr ""

#: ../developers/tips.rst:8
msgid "Productivity and sanity-preserving tips"
msgstr ""

#: ../developers/tips.rst:10
msgid "In this section we gather some useful advice and tools that may increase your quality-of-life when reviewing pull requests, running unit tests, and so forth. Some of these tricks consist of userscripts that require a browser extension such as `TamperMonkey`_ or `GreaseMonkey`_; to set up userscripts you must have one of these extensions installed, enabled and running.  We provide userscripts as GitHub gists; to install them, click on the \"Raw\" button on the gist page."
msgstr ""

#: ../developers/tips.rst:21
msgid "Folding and unfolding outdated diffs on pull requests"
msgstr ""

#: ../developers/tips.rst:23
msgid "GitHub hides discussions on PRs when the corresponding lines of code have been changed in the mean while. This `userscript <https://raw.githubusercontent.com/lesteve/userscripts/master/github-expand-all.user.js>`__ provides a shortcut (Control-Alt-P at the time of writing but look at the code to be sure) to unfold all such hidden discussions at once, so you can catch up."
msgstr ""

#: ../developers/tips.rst:30
msgid "Checking out pull requests as remote-tracking branches"
msgstr ""

#: ../developers/tips.rst:32
msgid "In your local fork, add to your ``.git/config``, under the ``[remote \"upstream\"]`` heading, the line::"
msgstr ""

#: ../developers/tips.rst:37
msgid "You may then use ``git checkout pr/PR_NUMBER`` to navigate to the code of the pull-request with the given number. (`Read more in this gist. <https://gist.github.com/piscisaureus/3342247>`_)"
msgstr ""

#: ../developers/tips.rst:42
msgid "Display code coverage in pull requests"
msgstr ""

#: ../developers/tips.rst:44
msgid "To overlay the code coverage reports generated by the CodeCov continuous integration, consider `this browser extension <https://github.com/codecov/browser-extension>`_. The coverage of each line will be displayed as a color background behind the line number."
msgstr ""

#: ../developers/tips.rst:53
msgid "Useful pytest aliases and flags"
msgstr ""

#: ../developers/tips.rst:55
msgid "The full test suite takes fairly long to run. For faster iterations, it is possibly to select a subset of tests using pytest selectors. In particular, one can run a `single test based on its node ID <https://docs.pytest.org/en/latest/example/markers.html#selecting-tests-based-on-their-node-id>`_:"
msgstr ""

#: ../developers/tips.rst:64
msgid "or use the `-k pytest parameter <https://docs.pytest.org/en/latest/example/markers.html#using-k-expr-to-select-tests-based-on-their-name>`_ to select tests based on their name. For instance,:"
msgstr ""

#: ../developers/tips.rst:72
msgid "will run all :term:`common tests` for the ``LogisticRegression`` estimator."
msgstr ""

#: ../developers/tips.rst:74
msgid "When a unit test fails, the following tricks can make debugging easier:"
msgstr ""

#: ../developers/tips.rst:76
msgid "The command line argument ``pytest -l`` instructs pytest to print the local variables when a failure occurs."
msgstr ""

#: ../developers/tips.rst:79
msgid "The argument ``pytest --pdb`` drops into the Python debugger on failure. To instead drop into the rich IPython debugger ``ipdb``, you may set up a shell alias to:"
msgstr ""

#: ../developers/tips.rst:87
msgid "Other `pytest` options that may become useful include:"
msgstr ""

#: ../developers/tips.rst:89
msgid "``-x`` which exits on the first failed test"
msgstr ""

#: ../developers/tips.rst:90
msgid "``--lf`` to rerun the tests that failed on the previous run"
msgstr ""

#: ../developers/tips.rst:91
msgid "``--ff`` to rerun all previous tests, running the ones that failed first"
msgstr ""

#: ../developers/tips.rst:92
msgid "``-s`` so that pytest does not capture the output of ``print()`` statements"
msgstr ""

#: ../developers/tips.rst:94
msgid "``--tb=short`` or ``--tb=line`` to control the length of the logs"
msgstr ""

#: ../developers/tips.rst:95
msgid "``--runxfail`` also run tests marked as a known failure (XFAIL) and report errors."
msgstr ""

#: ../developers/tips.rst:98
msgid "Since our continuous integration tests will error if ``FutureWarning`` isn't properly caught, it is also recommended to run ``pytest`` along with the ``-Werror::FutureWarning`` flag."
msgstr ""

#: ../developers/tips.rst:106
msgid "Standard replies for reviewing"
msgstr ""

#: ../developers/tips.rst:108
msgid "It may be helpful to store some of these in GitHub's `saved replies <https://github.com/settings/replies/>`_ for reviewing:"
msgstr ""

#: ../developers/tips.rst:122
msgid "Issue: Usage questions"
msgstr ""

#: ../developers/tips.rst:127
msgid "Issue: You're welcome to update the docs"
msgstr ""

#: ../developers/tips.rst:132
msgid "Issue: Self-contained example for bug"
msgstr ""

#: ../developers/tips.rst:141
msgid "Issue: Software versions"
msgstr ""

#: ../developers/tips.rst:168
msgid "Issue: Code blocks"
msgstr ""

#: ../developers/tips.rst:173
msgid "Issue/Comment: Linking to code"
msgstr ""

#: ../developers/tips.rst:178
msgid "Issue/Comment: Linking to comments"
msgstr ""

#: ../developers/tips.rst:183
msgid "PR-NEW: Better description and title"
msgstr ""

#: ../developers/tips.rst:188
msgid "PR-NEW: Fix #"
msgstr ""

#: ../developers/tips.rst:193
msgid "PR-NEW or Issue: Maintenance cost"
msgstr ""

#: ../developers/tips.rst:198
msgid "PR-WIP: What's needed before merge?"
msgstr ""

#: ../developers/tips.rst:203
msgid "PR-WIP: Regression test needed"
msgstr ""

#: ../developers/tips.rst:208
msgid "PR-WIP: PEP8"
msgstr ""

#: ../developers/tips.rst:213
msgid "PR-MRG: Patience"
msgstr ""

#: ../developers/tips.rst:218
msgid "PR-MRG: Add to what's new"
msgstr ""

#: ../developers/tips.rst:223
msgid "PR: Don't change unrelated"
msgstr ""

#: ../developers/tips.rst:228
msgid "Debugging memory errors in Cython with valgrind"
msgstr ""

#: ../developers/tips.rst:230
msgid "While python/numpy's built-in memory management is relatively robust, it can lead to performance penalties for some routines. For this reason, much of the high-performance code in scikit-learn in written in cython. This performance gain comes with a tradeoff, however: it is very easy for memory bugs to crop up in cython code, especially in situations where that code relies heavily on pointer arithmetic."
msgstr ""

#: ../developers/tips.rst:237
msgid "Memory errors can manifest themselves a number of ways. The easiest ones to debug are often segmentation faults and related glibc errors. Uninitialized variables can lead to unexpected behavior that is difficult to track down. A very useful tool when debugging these sorts of errors is valgrind_."
msgstr ""

#: ../developers/tips.rst:244
msgid "Valgrind is a command-line tool that can trace memory errors in a variety of code. Follow these steps:"
msgstr ""

#: ../developers/tips.rst:247
msgid "Install `valgrind`_ on your system."
msgstr ""

#: ../developers/tips.rst:249
msgid "Download the python valgrind suppression file: `valgrind-python.supp`_."
msgstr ""

#: ../developers/tips.rst:251
msgid "Follow the directions in the `README.valgrind`_ file to customize your python suppressions. If you don't, you will have spurious output coming related to the python interpreter instead of your own code."
msgstr ""

#: ../developers/tips.rst:255
msgid "Run valgrind as follows:"
msgstr ""

#: ../developers/tips.rst:266
msgid "The result will be a list of all the memory-related errors, which reference lines in the C-code generated by cython from your .pyx file. If you examine the referenced lines in the .c file, you will see comments which indicate the corresponding location in your .pyx source file. Hopefully the output will give you clues as to the source of your memory error."
msgstr ""

#: ../developers/tips.rst:272
msgid "For more information on valgrind and the array of options it has, see the tutorials and documentation on the `valgrind web site <http://valgrind.org>`_."
msgstr ""

#: ../developers/tips.rst:278
msgid "Building and testing for the ARM64 platform on a x86_64 machine"
msgstr ""

#: ../developers/tips.rst:280
msgid "ARM-based machines are a popular target for mobile, edge or other low-energy deployments (including in the cloud, for instance on Scaleway or AWS Graviton)."
msgstr ""

#: ../developers/tips.rst:283
msgid "Here are instructions to setup a local dev environment to reproduce ARM-specific bugs or test failures on a x86_64 host laptop or workstation. This is based on QEMU user mode emulation using docker for convenience (see https://github.com/multiarch/qemu-user-static)."
msgstr ""

#: ../developers/tips.rst:290
msgid "The following instructions are illustrated for ARM64 but they also apply to ppc64le, after changing the Docker image and Miniforge paths appropriately."
msgstr ""

#: ../developers/tips.rst:293
msgid "Prepare a folder on the host filesystem and download the necessary tools and source code:"
msgstr ""

#: ../developers/tips.rst:303
msgid "Use docker to install QEMU user mode and run an ARM64v8 container with access to your shared folder under the `/io` mount point:"
msgstr ""

#: ../developers/tips.rst:311
msgid "In the container, install miniforge3 for the ARM64 (a.k.a. aarch64) architecture:"
msgstr ""

#: ../developers/tips.rst:319
msgid "Whenever you restart a new container, you will need to reinit the conda env previously installed under `/io/miniforge3`:"
msgstr ""

#: ../developers/tips.rst:327
msgid "as the `/root` home folder is part of the ephemeral docker container. Every file or directory stored under `/io` is persistent on the other hand."
msgstr ""

#: ../developers/tips.rst:330
msgid "You can then build scikit-learn as usual (you will need to install compiler tools and dependencies using apt or conda as usual). Building scikit-learn takes a lot of time because of the emulation layer, however it needs to be done only once if you put the scikit-learn folder under the `/io` mount point."
msgstr ""

#: ../developers/tips.rst:336
msgid "Then use pytest to run only the tests of the module you are interested in debugging."
msgstr ""

