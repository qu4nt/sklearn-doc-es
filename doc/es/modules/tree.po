msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-06 19:57\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/tree.po\n"
"X-Crowdin-File-ID: 4866\n"
"Language: es_ES\n"

#: ../modules/tree.rst:5
msgid "Decision Trees"
msgstr "Árboles de decisión"

#: ../modules/tree.rst:9
msgid "**Decision Trees (DTs)** are a non-parametric supervised learning method used for :ref:`classification <tree_classification>` and :ref:`regression <tree_regression>`. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation."
msgstr "**Los árboles de decisión (DTs por sus siglas en inglés)** son un método de aprendizaje supervisado no paramétrico utilizado para :ref:`clasificación <tree_classification>` y :ref:`regresión <tree_regression>`. El objetivo es crear un modelo que prediga el valor de una variable objetivo mediante el aprendizaje de reglas de decisión simples inferidas a partir de las características de los datos. Un árbol puede ser visto como una aproximación constante a trozos."

#: ../modules/tree.rst:15
msgid "For instance, in the example below, decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model."
msgstr "En el siguiente ejemplo, los árboles de decisión aprenden de los datos para aproximar una curva sinusoidal con un conjunto de reglas de decisión si-entonces-en otro caso (if-then-else). Cuanto más profundo sea el árbol, más complejas serán las reglas de decisión y más ajustado será el modelo."

#: ../modules/tree.rst:24
msgid "Some advantages of decision trees are:"
msgstr "Algunas ventajas de los árboles de decisión son:"

#: ../modules/tree.rst:26
msgid "Simple to understand and to interpret. Trees can be visualised."
msgstr "Sencillo de entender e interpretar. Los árboles pueden ser visualizados."

#: ../modules/tree.rst:28
msgid "Requires little data preparation. Other techniques often require data normalisation, dummy variables need to be created and blank values to be removed. Note however that this module does not support missing values."
msgstr "Requiere poca preparación de los datos. Otras técnicas a menudo requieren la normalización de datos, la creación de variables dummy y la eliminación de valores en blanco. Sin embargo, ten en cuenta que este módulo no admite valores faltantes."

#: ../modules/tree.rst:33
msgid "The cost of using the tree (i.e., predicting data) is logarithmic in the number of data points used to train the tree."
msgstr "El costo de usar el árbol (es decir, de predecir datos) es logarítmico en el número de puntos de datos utilizados para entrenar el árbol."

#: ../modules/tree.rst:36
msgid "Able to handle both numerical and categorical data. However scikit-learn implementation does not support categorical variables for now. Other techniques are usually specialised in analysing datasets that have only one type of variable. See :ref:`algorithms <tree_algorithms>` for more information."
msgstr "Capaz de manejar datos tanto numéricos como categóricos. Sin embargo, la implementación de scikit-learn no admite variables categóricas por ahora. Otras técnicas suelen estar especializadas en el análisis de conjuntos de datos que sólo tienen un tipo de variable. Véase :ref:`algoritmos <tree_algorithms>` para más información."

#: ../modules/tree.rst:42
msgid "Able to handle multi-output problems."
msgstr "Capaz de manejar problemas de salida múltiple."

#: ../modules/tree.rst:44
msgid "Uses a white box model. If a given situation is observable in a model, the explanation for the condition is easily explained by boolean logic. By contrast, in a black box model (e.g., in an artificial neural network), results may be more difficult to interpret."
msgstr "Utiliza un modelo de caja blanca (white box model). Si una situación dada es observable en un modelo, la explicación de la condición se explica fácilmente por lógica booleana. Por el contrario, en un modelo de caja negra (black box model) (por ejemplo, en una red neuronal artificial), los resultados pueden ser más difíciles de interpretar."

#: ../modules/tree.rst:49
msgid "Possible to validate a model using statistical tests. That makes it possible to account for the reliability of the model."
msgstr "Es posible validar un modelo utilizando pruebas estadísticas. Eso permite tener en cuenta la fiabilidad del modelo."

#: ../modules/tree.rst:52
msgid "Performs well even if its assumptions are somewhat violated by the true model from which the data were generated."
msgstr ""

#: ../modules/tree.rst:56
msgid "The disadvantages of decision trees include:"
msgstr ""

#: ../modules/tree.rst:58
msgid "Decision-tree learners can create over-complex trees that do not generalise the data well. This is called overfitting. Mechanisms such as pruning, setting the minimum number of samples required at a leaf node or setting the maximum depth of the tree are necessary to avoid this problem."
msgstr ""

#: ../modules/tree.rst:64
msgid "Decision trees can be unstable because small variations in the data might result in a completely different tree being generated. This problem is mitigated by using decision trees within an ensemble."
msgstr ""

#: ../modules/tree.rst:69
msgid "Predictions of decision trees are neither smooth nor continuous, but piecewise constant approximations as seen in the above figure. Therefore, they are not good at extrapolation."
msgstr ""

#: ../modules/tree.rst:73
msgid "The problem of learning an optimal decision tree is known to be NP-complete under several aspects of optimality and even for simple concepts. Consequently, practical decision-tree learning algorithms are based on heuristic algorithms such as the greedy algorithm where locally optimal decisions are made at each node. Such algorithms cannot guarantee to return the globally optimal decision tree.  This can be mitigated by training multiple trees in an ensemble learner, where the features and samples are randomly sampled with replacement."
msgstr ""

#: ../modules/tree.rst:82
msgid "There are concepts that are hard to learn because decision trees do not express them easily, such as XOR, parity or multiplexer problems."
msgstr ""

#: ../modules/tree.rst:85
msgid "Decision tree learners create biased trees if some classes dominate. It is therefore recommended to balance the dataset prior to fitting with the decision tree."
msgstr ""

#: ../modules/tree.rst:93
msgid "Classification"
msgstr ""

#: ../modules/tree.rst:95
msgid ":class:`DecisionTreeClassifier` is a class capable of performing multi-class classification on a dataset."
msgstr ""

#: ../modules/tree.rst:98
msgid "As with other classifiers, :class:`DecisionTreeClassifier` takes as input two arrays: an array X, sparse or dense, of shape ``(n_samples, n_features)`` holding the training samples, and an array Y of integer values, shape ``(n_samples,)``, holding the class labels for the training samples::"
msgstr ""

#: ../modules/tree.rst:109
msgid "After being fitted, the model can then be used to predict the class of samples::"
msgstr ""

#: ../modules/tree.rst:114
msgid "In case that there are multiple classes with the same and highest probability, the classifier will predict the class with the lowest index amongst those classes."
msgstr ""

#: ../modules/tree.rst:118
msgid "As an alternative to outputting a specific class, the probability of each class can be predicted, which is the fraction of training samples of the class in a leaf::"
msgstr ""

#: ../modules/tree.rst:125
msgid ":class:`DecisionTreeClassifier` is capable of both binary (where the labels are [-1, 1]) classification and multiclass (where the labels are [0, ..., K-1]) classification."
msgstr ""

#: ../modules/tree.rst:129
msgid "Using the Iris dataset, we can construct a tree as follows::"
msgstr ""

#: ../modules/tree.rst:137
msgid "Once trained, you can plot the tree with the :func:`plot_tree` function::"
msgstr ""

#: ../modules/tree.rst:147
msgid "We can also export the tree in `Graphviz <https://www.graphviz.org/>`_ format using the :func:`export_graphviz` exporter. If you use the `conda <https://conda.io>`_ package manager, the graphviz binaries and the python package can be installed with `conda install python-graphviz`."
msgstr ""

#: ../modules/tree.rst:152
msgid "Alternatively binaries for graphviz can be downloaded from the graphviz project homepage, and the Python wrapper installed from pypi with `pip install graphviz`."
msgstr ""

#: ../modules/tree.rst:155
msgid "Below is an example graphviz export of the above tree trained on the entire iris dataset; the results are saved in an output file `iris.pdf`::"
msgstr ""

#: ../modules/tree.rst:164
msgid "The :func:`export_graphviz` exporter also supports a variety of aesthetic options, including coloring nodes by their class (or value for regression) and using explicit variable and class names if desired. Jupyter notebooks also render these plots inline automatically::"
msgstr ""

#: ../modules/tree.rst:192
msgid "Alternatively, the tree can also be exported in textual format with the function :func:`export_text`. This method doesn't require the installation of external libraries and is more compact:"
msgstr ""

#: ../modules/tree.rst:215
msgid ":ref:`sphx_glr_auto_examples_tree_plot_iris_dtc.py`"
msgstr ""

#: ../modules/tree.rst:216
msgid ":ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`"
msgstr ""

#: ../modules/tree.rst:221
msgid "Regression"
msgstr ""

#: ../modules/tree.rst:228
msgid "Decision trees can also be applied to regression problems, using the :class:`DecisionTreeRegressor` class."
msgstr ""

#: ../modules/tree.rst:231
msgid "As in the classification setting, the fit method will take as argument arrays X and y, only that in this case y is expected to have floating point values instead of integer values::"
msgstr ""

#: ../modules/tree.rst:245
msgid ":ref:`sphx_glr_auto_examples_tree_plot_tree_regression.py`"
msgstr ""

#: ../modules/tree.rst:251
msgid "Multi-output problems"
msgstr ""

#: ../modules/tree.rst:253
msgid "A multi-output problem is a supervised learning problem with several outputs to predict, that is when Y is a 2d array of shape ``(n_samples, n_outputs)``."
msgstr ""

#: ../modules/tree.rst:256
msgid "When there is no correlation between the outputs, a very simple way to solve this kind of problem is to build n independent models, i.e. one for each output, and then to use those models to independently predict each one of the n outputs. However, because it is likely that the output values related to the same input are themselves correlated, an often better way is to build a single model capable of predicting simultaneously all n outputs. First, it requires lower training time since only a single estimator is built. Second, the generalization accuracy of the resulting estimator may often be increased."
msgstr ""

#: ../modules/tree.rst:265
msgid "With regard to decision trees, this strategy can readily be used to support multi-output problems. This requires the following changes:"
msgstr ""

#: ../modules/tree.rst:268
msgid "Store n output values in leaves, instead of 1;"
msgstr ""

#: ../modules/tree.rst:269
msgid "Use splitting criteria that compute the average reduction across all n outputs."
msgstr ""

#: ../modules/tree.rst:272
msgid "This module offers support for multi-output problems by implementing this strategy in both :class:`DecisionTreeClassifier` and :class:`DecisionTreeRegressor`. If a decision tree is fit on an output array Y of shape ``(n_samples, n_outputs)`` then the resulting estimator will:"
msgstr ""

#: ../modules/tree.rst:277
msgid "Output n_output values upon ``predict``;"
msgstr ""

#: ../modules/tree.rst:279
msgid "Output a list of n_output arrays of class probabilities upon ``predict_proba``."
msgstr ""

#: ../modules/tree.rst:283
msgid "The use of multi-output trees for regression is demonstrated in :ref:`sphx_glr_auto_examples_tree_plot_tree_regression_multioutput.py`. In this example, the input X is a single real value and the outputs Y are the sine and cosine of X."
msgstr ""

#: ../modules/tree.rst:292
msgid "The use of multi-output trees for classification is demonstrated in :ref:`sphx_glr_auto_examples_miscellaneous_plot_multioutput_face_completion.py`. In this example, the inputs X are the pixels of the upper half of faces and the outputs Y are the pixels of the lower half of those faces."
msgstr ""

#: ../modules/tree.rst:304
msgid ":ref:`sphx_glr_auto_examples_tree_plot_tree_regression_multioutput.py`"
msgstr ""

#: ../modules/tree.rst:305
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_multioutput_face_completion.py`"
msgstr ""

#: ../modules/tree.rst:309
msgid "M. Dumont et al,  `Fast multi-class image annotation with random subwindows and multiple output randomized trees <http://www.montefiore.ulg.ac.be/services/stochastic/pubs/2009/DMWG09/dumont-visapp09-shortpaper.pdf>`_, International Conference on Computer Vision Theory and Applications 2009"
msgstr ""

#: ../modules/tree.rst:317
msgid "Complexity"
msgstr ""

#: ../modules/tree.rst:319
msgid "In general, the run time cost to construct a balanced binary tree is :math:`O(n_{samples}n_{features}\\log(n_{samples}))` and query time :math:`O(\\log(n_{samples}))`.  Although the tree construction algorithm attempts to generate balanced trees, they will not always be balanced.  Assuming that the subtrees remain approximately balanced, the cost at each node consists of searching through :math:`O(n_{features})` to find the feature that offers the largest reduction in entropy.  This has a cost of :math:`O(n_{features}n_{samples}\\log(n_{samples}))` at each node, leading to a total cost over the entire trees (by summing the cost at each node) of :math:`O(n_{features}n_{samples}^{2}\\log(n_{samples}))`."
msgstr ""

#: ../modules/tree.rst:332
msgid "Tips on practical use"
msgstr ""

#: ../modules/tree.rst:334
msgid "Decision trees tend to overfit on data with a large number of features. Getting the right ratio of samples to number of features is important, since a tree with few samples in high dimensional space is very likely to overfit."
msgstr ""

#: ../modules/tree.rst:338
msgid "Consider performing  dimensionality reduction (:ref:`PCA <PCA>`, :ref:`ICA <ICA>`, or :ref:`feature_selection`) beforehand to give your tree a better chance of finding features that are discriminative."
msgstr ""

#: ../modules/tree.rst:342
msgid ":ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py` will help in gaining more insights about how the decision tree makes predictions, which is important for understanding the important features in the data."
msgstr ""

#: ../modules/tree.rst:346
msgid "Visualise your tree as you are training by using the ``export`` function.  Use ``max_depth=3`` as an initial tree depth to get a feel for how the tree is fitting to your data, and then increase the depth."
msgstr ""

#: ../modules/tree.rst:350
msgid "Remember that the number of samples required to populate the tree doubles for each additional level the tree grows to.  Use ``max_depth`` to control the size of the tree to prevent overfitting."
msgstr ""

#: ../modules/tree.rst:354
msgid "Use ``min_samples_split`` or ``min_samples_leaf`` to ensure that multiple samples inform every decision in the tree, by controlling which splits will be considered. A very small number will usually mean the tree will overfit, whereas a large number will prevent the tree from learning the data. Try ``min_samples_leaf=5`` as an initial value. If the sample size varies greatly, a float number can be used as percentage in these two parameters. While ``min_samples_split`` can create arbitrarily small leaves, ``min_samples_leaf`` guarantees that each leaf has a minimum size, avoiding low-variance, over-fit leaf nodes in regression problems.  For classification with few classes, ``min_samples_leaf=1`` is often the best choice."
msgstr ""

#: ../modules/tree.rst:366
msgid "Note that ``min_samples_split`` considers samples directly and independent of ``sample_weight``, if provided (e.g. a node with m weighted samples is still treated as having exactly m samples). Consider ``min_weight_fraction_leaf`` or ``min_impurity_decrease`` if accounting for sample weights is required at splits."
msgstr ""

#: ../modules/tree.rst:371
msgid "Balance your dataset before training to prevent the tree from being biased toward the classes that are dominant. Class balancing can be done by sampling an equal number of samples from each class, or preferably by normalizing the sum of the sample weights (``sample_weight``) for each class to the same value. Also note that weight-based pre-pruning criteria, such as ``min_weight_fraction_leaf``, will then be less biased toward dominant classes than criteria that are not aware of the sample weights, like ``min_samples_leaf``."
msgstr ""

#: ../modules/tree.rst:380
msgid "If the samples are weighted, it will be easier to optimize the tree structure using weight-based pre-pruning criterion such as ``min_weight_fraction_leaf``, which ensure that leaf nodes contain at least a fraction of the overall sum of the sample weights."
msgstr ""

#: ../modules/tree.rst:385
msgid "All decision trees use ``np.float32`` arrays internally. If training data is not in this format, a copy of the dataset will be made."
msgstr ""

#: ../modules/tree.rst:388
msgid "If the input matrix X is very sparse, it is recommended to convert to sparse ``csc_matrix`` before calling fit and sparse ``csr_matrix`` before calling predict. Training time can be orders of magnitude faster for a sparse matrix input compared to a dense matrix when features have zero values in most of the samples."
msgstr ""

#: ../modules/tree.rst:398
msgid "Tree algorithms: ID3, C4.5, C5.0 and CART"
msgstr ""

#: ../modules/tree.rst:400
msgid "What are all the various decision tree algorithms and how do they differ from each other? Which one is implemented in scikit-learn?"
msgstr ""

#: ../modules/tree.rst:403
msgid "ID3_ (Iterative Dichotomiser 3) was developed in 1986 by Ross Quinlan. The algorithm creates a multiway tree, finding for each node (i.e. in a greedy manner) the categorical feature that will yield the largest information gain for categorical targets. Trees are grown to their maximum size and then a pruning step is usually applied to improve the ability of the tree to generalise to unseen data."
msgstr ""

#: ../modules/tree.rst:410
msgid "C4.5 is the successor to ID3 and removed the restriction that features must be categorical by dynamically defining a discrete attribute (based on numerical variables) that partitions the continuous attribute value into a discrete set of intervals. C4.5 converts the trained trees (i.e. the output of the ID3 algorithm) into sets of if-then rules. These accuracy of each rule is then evaluated to determine the order in which they should be applied. Pruning is done by removing a rule's precondition if the accuracy of the rule improves without it."
msgstr ""

#: ../modules/tree.rst:419
msgid "C5.0 is Quinlan's latest version release under a proprietary license. It uses less memory and builds smaller rulesets than C4.5 while being more accurate."
msgstr ""

#: ../modules/tree.rst:423
msgid "CART_ (Classification and Regression Trees) is very similar to C4.5, but it differs in that it supports numerical target variables (regression) and does not compute rule sets. CART constructs binary trees using the feature and threshold that yield the largest information gain at each node."
msgstr ""

#: ../modules/tree.rst:428
msgid "scikit-learn uses an optimised version of the CART algorithm; however, scikit-learn implementation does not support categorical variables for now."
msgstr ""

#: ../modules/tree.rst:438
msgid "Mathematical formulation"
msgstr ""

#: ../modules/tree.rst:440
msgid "Given training vectors :math:`x_i \\in R^n`, i=1,..., l and a label vector :math:`y \\in R^l`, a decision tree recursively partitions the feature space such that the samples with the same labels or similar target values are grouped together."
msgstr ""

#: ../modules/tree.rst:445
msgid "Let the data at node :math:`m` be represented by :math:`Q_m` with :math:`N_m` samples. For each candidate split :math:`\\theta = (j, t_m)` consisting of a feature :math:`j` and threshold :math:`t_m`, partition the data into :math:`Q_m^{left}(\\theta)` and :math:`Q_m^{right}(\\theta)` subsets"
msgstr ""

#: ../modules/tree.rst:450
msgid "Q_m^{left}(\\theta) = \\{(x, y) | x_j <= t_m\\}\n\n"
"Q_m^{right}(\\theta) = Q_m \\setminus Q_m^{left}(\\theta)"
msgstr ""

#: ../modules/tree.rst:456
msgid "The quality of a candidate split of node :math:`m` is then computed using an impurity function or loss function :math:`H()`, the choice of which depends on the task being solved (classification or regression)"
msgstr ""

#: ../modules/tree.rst:460
msgid "G(Q_m, \\theta) = \\frac{N_m^{left}}{N_m} H(Q_m^{left}(\\theta))\n"
"+ \\frac{N_m^{right}}{N_m} H(Q_m^{right}(\\theta))"
msgstr ""

#: ../modules/tree.rst:465
msgid "Select the parameters that minimises the impurity"
msgstr ""

#: ../modules/tree.rst:467
msgid "\\theta^* = \\operatorname{argmin}_\\theta  G(Q_m, \\theta)"
msgstr ""

#: ../modules/tree.rst:471
msgid "Recurse for subsets :math:`Q_m^{left}(\\theta^*)` and :math:`Q_m^{right}(\\theta^*)` until the maximum allowable depth is reached, :math:`N_m < \\min_{samples}` or :math:`N_m = 1`."
msgstr ""

#: ../modules/tree.rst:476
msgid "Classification criteria"
msgstr ""

#: ../modules/tree.rst:478
msgid "If a target is a classification outcome taking on values 0,1,...,K-1, for node :math:`m`, let"
msgstr ""

#: ../modules/tree.rst:481
msgid "p_{mk} = 1/ N_m \\sum_{y \\in Q_m} I(y = k)"
msgstr ""

#: ../modules/tree.rst:485
msgid "be the proportion of class k observations in node :math:`m`. If :math:`m` is a terminal node, `predict_proba` for this region is set to :math:`p_{mk}`. Common measures of impurity are the following."
msgstr ""

#: ../modules/tree.rst:489
msgid "Gini:"
msgstr ""

#: ../modules/tree.rst:491
msgid "H(Q_m) = \\sum_k p_{mk} (1 - p_{mk})"
msgstr ""

#: ../modules/tree.rst:495
msgid "Entropy:"
msgstr ""

#: ../modules/tree.rst:497
msgid "H(Q_m) = - \\sum_k p_{mk} \\log(p_{mk})"
msgstr ""

#: ../modules/tree.rst:501
msgid "Misclassification:"
msgstr ""

#: ../modules/tree.rst:503
msgid "H(Q_m) = 1 - \\max(p_{mk})"
msgstr ""

#: ../modules/tree.rst:508
msgid "Regression criteria"
msgstr ""

#: ../modules/tree.rst:510
msgid "If the target is a continuous value, then for node :math:`m`, common criteria to minimize as for determining locations for future splits are Mean Squared Error (MSE or L2 error), Poisson deviance as well as Mean Absolute Error (MAE or L1 error). MSE and Poisson deviance both set the predicted value of terminal nodes to the learned mean value :math:`\\bar{y}_m` of the node whereas the MAE sets the predicted value of terminal nodes to the median :math:`median(y)_m`."
msgstr ""

#: ../modules/tree.rst:518
msgid "Mean Squared Error:"
msgstr ""

#: ../modules/tree.rst:520
msgid "\\bar{y}_m = \\frac{1}{N_m} \\sum_{y \\in Q_m} y\n\n"
"H(Q_m) = \\frac{1}{N_m} \\sum_{y \\in Q_m} (y - \\bar{y}_m)^2"
msgstr ""

#: ../modules/tree.rst:526
msgid "Half Poisson deviance:"
msgstr ""

#: ../modules/tree.rst:528
msgid "H(Q_m) = \\frac{1}{N_m} \\sum_{y \\in Q_m} (y \\log\\frac{y}{\\bar{y}_m}\n"
"- y + \\bar{y}_m)"
msgstr ""

#: ../modules/tree.rst:533
msgid "Setting `criterion=\"poisson\"` might be a good choice if your target is a count or a frequency (count per some unit). In any case, :math:`y >= 0` is a necessary condition to use this criterion. Note that it fits much slower than the MSE criterion."
msgstr ""

#: ../modules/tree.rst:538
msgid "Mean Absolute Error:"
msgstr ""

#: ../modules/tree.rst:540
msgid "median(y)_m = \\underset{y \\in Q_m}{\\mathrm{median}}(y)\n\n"
"H(Q_m) = \\frac{1}{N_m} \\sum_{y \\in Q_m} |y - median(y)_m|"
msgstr ""

#: ../modules/tree.rst:546
msgid "Note that it fits much slower than the MSE criterion."
msgstr ""

#: ../modules/tree.rst:552
msgid "Minimal Cost-Complexity Pruning"
msgstr ""

#: ../modules/tree.rst:554
msgid "Minimal cost-complexity pruning is an algorithm used to prune a tree to avoid over-fitting, described in Chapter 3 of [BRE]_. This algorithm is parameterized by :math:`\\alpha\\ge0` known as the complexity parameter. The complexity parameter is used to define the cost-complexity measure, :math:`R_\\alpha(T)` of a given tree :math:`T`:"
msgstr ""

#: ../modules/tree.rst:560
msgid "R_\\alpha(T) = R(T) + \\alpha|\\widetilde{T}|"
msgstr ""

#: ../modules/tree.rst:564
msgid "where :math:`|\\widetilde{T}|` is the number of terminal nodes in :math:`T` and :math:`R(T)` is traditionally defined as the total misclassification rate of the terminal nodes. Alternatively, scikit-learn uses the total sample weighted impurity of the terminal nodes for :math:`R(T)`. As shown above, the impurity of a node depends on the criterion. Minimal cost-complexity pruning finds the subtree of :math:`T` that minimizes :math:`R_\\alpha(T)`."
msgstr ""

#: ../modules/tree.rst:571
msgid "The cost complexity measure of a single node is :math:`R_\\alpha(t)=R(t)+\\alpha`. The branch, :math:`T_t`, is defined to be a tree where node :math:`t` is its root. In general, the impurity of a node is greater than the sum of impurities of its terminal nodes, :math:`R(T_t)<R(t)`. However, the cost complexity measure of a node, :math:`t`, and its branch, :math:`T_t`, can be equal depending on :math:`\\alpha`. We define the effective :math:`\\alpha` of a node to be the value where they are equal, :math:`R_\\alpha(T_t)=R_\\alpha(t)` or :math:`\\alpha_{eff}(t)=\\frac{R(t)-R(T_t)}{|T|-1}`. A non-terminal node with the smallest value of :math:`\\alpha_{eff}` is the weakest link and will be pruned. This process stops when the pruned tree's minimal :math:`\\alpha_{eff}` is greater than the ``ccp_alpha`` parameter."
msgstr ""

#: ../modules/tree.rst:586
msgid ":ref:`sphx_glr_auto_examples_tree_plot_cost_complexity_pruning.py`"
msgstr ""

#: ../modules/tree.rst:590
msgid "L. Breiman, J. Friedman, R. Olshen, and C. Stone. Classification and Regression Trees. Wadsworth, Belmont, CA, 1984."
msgstr ""

#: ../modules/tree.rst:593
msgid "https://en.wikipedia.org/wiki/Decision_tree_learning"
msgstr ""

#: ../modules/tree.rst:595
msgid "https://en.wikipedia.org/wiki/Predictive_analytics"
msgstr ""

#: ../modules/tree.rst:597
msgid "J.R. Quinlan. C4. 5: programs for machine learning. Morgan Kaufmann, 1993."
msgstr ""

#: ../modules/tree.rst:600
msgid "T. Hastie, R. Tibshirani and J. Friedman. Elements of Statistical Learning, Springer, 2009."
msgstr ""

