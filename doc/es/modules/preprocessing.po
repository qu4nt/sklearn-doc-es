msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-28 19:00\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/preprocessing.po\n"
"X-Crowdin-File-ID: 4804\n"
"Language: es_ES\n"

#: ../modules/preprocessing.rst:5
msgid "Preprocessing data"
msgstr "Preprocesamiento de los datos"

#: ../modules/preprocessing.rst:9
msgid "The ``sklearn.preprocessing`` package provides several common utility functions and transformer classes to change raw feature vectors into a representation that is more suitable for the downstream estimators."
msgstr "El paquete ``sklearn.preprocessing`` proporciona varias funciones de utilidad comunes y clases transformadoras para cambiar los vectores de características en bruto a una representación que sea más adecuada para los estimadores posteriores."

#: ../modules/preprocessing.rst:13
msgid "In general, learning algorithms benefit from standardization of the data set. If some outliers are present in the set, robust scalers or transformers are more appropriate. The behaviors of the different scalers, transformers, and normalizers on a dataset containing marginal outliers is highlighted in :ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`."
msgstr "En general, los algoritmos de aprendizaje se benefician de la estandarización del conjunto de datos. Si hay algunos valores atípicos presentes en el conjunto, los escaladores robustos o transformadores son más apropiados. Los comportamientos de los diferentes escaladores, transformadores y normalizadores en un conjunto de datos que contiene valores atípicos marginales se resaltan en :ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`."

#: ../modules/preprocessing.rst:23
msgid "Standardization, or mean removal and variance scaling"
msgstr "Estandarización, o eliminación media y escala de varianza"

#: ../modules/preprocessing.rst:25
msgid "**Standardization** of datasets is a **common requirement for many machine learning estimators** implemented in scikit-learn; they might behave badly if the individual features do not more or less look like standard normally distributed data: Gaussian with **zero mean and unit variance**."
msgstr "La **Estandarización** de conjuntos de datos es un **requisito común para muchos estimadores de aprendizaje automático** implementados en scikit-learn; podrían comportarse mal si las características individuales no se ven más o menos como datos distribuidos normalmente estándar: Gaussiana con **media cero y varianza unitaria**."

#: ../modules/preprocessing.rst:30
msgid "In practice we often ignore the shape of the distribution and just transform the data to center it by removing the mean value of each feature, then scale it by dividing non-constant features by their standard deviation."
msgstr "En la práctica a menudo ignoramos la forma de la distribución y simplemente transformamos los datos para centrarlos eliminando el valor medio de cada característica, luego los escalamos dividiendo características no constantes por su desviación estándar."

#: ../modules/preprocessing.rst:35
msgid "For instance, many elements used in the objective function of a learning algorithm (such as the RBF kernel of Support Vector Machines or the l1 and l2 regularizers of linear models) assume that all features are centered around zero and have variance in the same order. If a feature has a variance that is orders of magnitude larger than others, it might dominate the objective function and make the estimator unable to learn from other features correctly as expected."
msgstr "Por ejemplo, muchos elementos utilizados en la función objetivo de un algoritmo de aprendizaje (como el kernel RBF de Máquinas de Vectores de Soporte o los regularizadores l1 y l2 de modelos lineales) asumen que todas las características están centradas en cero y tienen varianza del mismo orden. Si una característica tiene varianza de un orden de magnitud mayor que otras, podría dominar la función objetivo y hacer que el estimador no pueda aprender de otras características correctamente como se esperaba."

#: ../modules/preprocessing.rst:44
msgid "The :mod:`~sklearn.preprocessing` module provides the :class:`StandardScaler` utility class, which is a quick and easy way to perform the following operation on an array-like dataset::"
msgstr "El módulo :mod:`~sklearn.preprocessing` proporciona la clase de utilidad :class:`StandardScaler`, que es una forma rápida y sencilla de realizar la siguiente operación en un conjunto de datos array-like::"

#: ../modules/preprocessing.rst:75
msgid "Scaled data has zero mean and unit variance::"
msgstr "Los datos escalados tienen una media cero y varianza unitaria::"

#: ../modules/preprocessing.rst:85
msgid "This class implements the ``Transformer`` API to compute the mean and standard deviation on a training set so as to be able to later re-apply the same transformation on the testing set. This class is hence suitable for use in the early steps of a :class:`~sklearn.pipeline.Pipeline`::"
msgstr "Esta clase implementa la API ``Transformer`` para calcular la media y la desviación estándar en un conjunto de entrenamiento para poder volver a aplicar posteriormente la misma transformación en el conjunto de prueba. Esta clase es, por lo tanto, adecuada para su uso en los primeros pasos de un :class:`~sklearn.pipeline.Pipeline`::"

#: ../modules/preprocessing.rst:106
msgid "It is possible to disable either centering or scaling by either passing ``with_mean=False`` or ``with_std=False`` to the constructor of :class:`StandardScaler`."
msgstr "Es posible desactivar el centrado o el escalado pasando ``with_mean=False`` o ``with_std=False`` al constructor de :class:`StandardScaler`."

#: ../modules/preprocessing.rst:112
msgid "Scaling features to a range"
msgstr "Escalamiento de las características a un rango"

#: ../modules/preprocessing.rst:114
msgid "An alternative standardization is scaling features to lie between a given minimum and maximum value, often between zero and one, or so that the maximum absolute value of each feature is scaled to unit size. This can be achieved using :class:`MinMaxScaler` or :class:`MaxAbsScaler`, respectively."
msgstr ""

#: ../modules/preprocessing.rst:120
msgid "The motivation to use this scaling include robustness to very small standard deviations of features and preserving zero entries in sparse data."
msgstr ""

#: ../modules/preprocessing.rst:123
msgid "Here is an example to scale a toy data matrix to the ``[0, 1]`` range::"
msgstr ""

#: ../modules/preprocessing.rst:136
msgid "The same instance of the transformer can then be applied to some new test data unseen during the fit call: the same scaling and shifting operations will be applied to be consistent with the transformation performed on the train data::"
msgstr ""

#: ../modules/preprocessing.rst:145
msgid "It is possible to introspect the scaler attributes to find about the exact nature of the transformation learned on the training data::"
msgstr ""

#: ../modules/preprocessing.rst:154
msgid "If :class:`MinMaxScaler` is given an explicit ``feature_range=(min, max)`` the full formula is::"
msgstr ""

#: ../modules/preprocessing.rst:161
msgid ":class:`MaxAbsScaler` works in a very similar fashion, but scales in a way that the training data lies within the range ``[-1, 1]`` by dividing through the largest maximum value in each feature. It is meant for data that is already centered at zero or sparse data."
msgstr ""

#: ../modules/preprocessing.rst:166
msgid "Here is how to use the toy data from the previous example with this scaler::"
msgstr ""

#: ../modules/preprocessing.rst:187
msgid "Scaling sparse data"
msgstr ""

#: ../modules/preprocessing.rst:188
msgid "Centering sparse data would destroy the sparseness structure in the data, and thus rarely is a sensible thing to do. However, it can make sense to scale sparse inputs, especially if features are on different scales."
msgstr ""

#: ../modules/preprocessing.rst:192
msgid ":class:`MaxAbsScaler` was specifically designed for scaling sparse data, and is the recommended way to go about this. However, :class:`StandardScaler` can accept ``scipy.sparse`` matrices  as input, as long as ``with_mean=False`` is explicitly passed to the constructor. Otherwise a ``ValueError`` will be raised as silently centering would break the sparsity and would often crash the execution by allocating excessive amounts of memory unintentionally. :class:`RobustScaler` cannot be fitted to sparse inputs, but you can use the ``transform`` method on sparse inputs."
msgstr ""

#: ../modules/preprocessing.rst:202
msgid "Note that the scalers accept both Compressed Sparse Rows and Compressed Sparse Columns format (see ``scipy.sparse.csr_matrix`` and ``scipy.sparse.csc_matrix``). Any other sparse input will be **converted to the Compressed Sparse Rows representation**.  To avoid unnecessary memory copies, it is recommended to choose the CSR or CSC representation upstream."
msgstr ""

#: ../modules/preprocessing.rst:208
msgid "Finally, if the centered data is expected to be small enough, explicitly converting the input to an array using the ``toarray`` method of sparse matrices is another option."
msgstr ""

#: ../modules/preprocessing.rst:214
msgid "Scaling data with outliers"
msgstr ""

#: ../modules/preprocessing.rst:216
msgid "If your data contains many outliers, scaling using the mean and variance of the data is likely to not work very well. In these cases, you can use :class:`RobustScaler` as a drop-in replacement instead. It uses more robust estimates for the center and range of your data."
msgstr ""

msgid "References:"
msgstr ""

#: ../modules/preprocessing.rst:224
msgid "Further discussion on the importance of centering and scaling data is available on this FAQ: `Should I normalize/standardize/rescale the data? <http://www.faqs.org/faqs/ai-faq/neural-nets/part2/section-16.html>`_"
msgstr ""

msgid "Scaling vs Whitening"
msgstr ""

#: ../modules/preprocessing.rst:230
msgid "It is sometimes not enough to center and scale the features independently, since a downstream model can further make some assumption on the linear independence of the features."
msgstr ""

#: ../modules/preprocessing.rst:234
msgid "To address this issue you can use :class:`~sklearn.decomposition.PCA` with ``whiten=True`` to further remove the linear correlation across features."
msgstr ""

#: ../modules/preprocessing.rst:240
msgid "Centering kernel matrices"
msgstr ""

#: ../modules/preprocessing.rst:242
msgid "If you have a kernel matrix of a kernel :math:`K` that computes a dot product in a feature space defined by function :math:`\\phi`, a :class:`KernelCenterer` can transform the kernel matrix so that it contains inner products in the feature space defined by :math:`\\phi` followed by removal of the mean in that space."
msgstr ""

#: ../modules/preprocessing.rst:251
msgid "Non-linear transformation"
msgstr ""

#: ../modules/preprocessing.rst:253
msgid "Two types of transformations are available: quantile transforms and power transforms. Both quantile and power transforms are based on monotonic transformations of the features and thus preserve the rank of the values along each feature."
msgstr ""

#: ../modules/preprocessing.rst:258
msgid "Quantile transforms put all features into the same desired distribution based on the formula :math:`G^{-1}(F(X))` where :math:`F` is the cumulative distribution function of the feature and :math:`G^{-1}` the `quantile function <https://en.wikipedia.org/wiki/Quantile_function>`_ of the desired output distribution :math:`G`. This formula is using the two following facts: (i) if :math:`X` is a random variable with a continuous cumulative distribution function :math:`F` then :math:`F(X)` is uniformly distributed on :math:`[0,1]`; (ii) if :math:`U` is a random variable with uniform distribution on :math:`[0,1]` then :math:`G^{-1}(U)` has distribution :math:`G`. By performing a rank transformation, a quantile transform smooths out unusual distributions and is less influenced by outliers than scaling methods. It does, however, distort correlations and distances within and across features."
msgstr ""

#: ../modules/preprocessing.rst:271
msgid "Power transforms are a family of parametric transformations that aim to map data from any distribution to as close to a Gaussian distribution."
msgstr ""

#: ../modules/preprocessing.rst:275
msgid "Mapping to a Uniform distribution"
msgstr ""

#: ../modules/preprocessing.rst:277
msgid ":class:`QuantileTransformer` provides a non-parametric transformation to map the data to a uniform distribution with values between 0 and 1::"
msgstr ""

#: ../modules/preprocessing.rst:291
msgid "This feature corresponds to the sepal length in cm. Once the quantile transformation applied, those landmarks approach closely the percentiles previously defined::"
msgstr ""

#: ../modules/preprocessing.rst:299
msgid "This can be confirmed on a independent testing set with similar remarks::"
msgstr ""

#: ../modules/preprocessing.rst:309
msgid "Mapping to a Gaussian distribution"
msgstr ""

#: ../modules/preprocessing.rst:311
msgid "In many modeling scenarios, normality of the features in a dataset is desirable. Power transforms are a family of parametric, monotonic transformations that aim to map data from any distribution to as close to a Gaussian distribution as possible in order to stabilize variance and minimize skewness."
msgstr ""

#: ../modules/preprocessing.rst:316
msgid ":class:`PowerTransformer` currently provides two such power transformations, the Yeo-Johnson transform and the Box-Cox transform."
msgstr ""

#: ../modules/preprocessing.rst:319
msgid "The Yeo-Johnson transform is given by:"
msgstr ""

#: ../modules/preprocessing.rst:321
msgid "x_i^{(\\lambda)} =\n"
"\\begin{cases}\n"
" [(x_i + 1)^\\lambda - 1] / \\lambda & \\text{if } \\lambda \\neq 0, x_i \\geq 0, \\\\[8pt]\n"
"\\ln{(x_i + 1)} & \\text{if } \\lambda = 0, x_i \\geq 0 \\\\[8pt]\n"
"-[(-x_i + 1)^{2 - \\lambda} - 1] / (2 - \\lambda) & \\text{if } \\lambda \\neq 2, x_i < 0, \\\\[8pt]\n"
" - \\ln (- x_i + 1) & \\text{if } \\lambda = 2, x_i < 0\n"
"\\end{cases}\n\n"
msgstr ""

#: ../modules/preprocessing.rst:330
msgid "while the Box-Cox transform is given by:"
msgstr ""

#: ../modules/preprocessing.rst:332
msgid "x_i^{(\\lambda)} =\n"
"\\begin{cases}\n"
"\\dfrac{x_i^\\lambda - 1}{\\lambda} & \\text{if } \\lambda \\neq 0, \\\\[8pt]\n"
"\\ln{(x_i)} & \\text{if } \\lambda = 0,\n"
"\\end{cases}\n\n"
msgstr ""

#: ../modules/preprocessing.rst:340
msgid "Box-Cox can only be applied to strictly positive data. In both methods, the transformation is parameterized by :math:`\\lambda`, which is determined through maximum likelihood estimation. Here is an example of using Box-Cox to map samples drawn from a lognormal distribution to a normal distribution::"
msgstr ""

#: ../modules/preprocessing.rst:356
msgid "While the above example sets the `standardize` option to `False`, :class:`PowerTransformer` will apply zero-mean, unit-variance normalization to the transformed output by default."
msgstr ""

#: ../modules/preprocessing.rst:360
msgid "Below are examples of Box-Cox and Yeo-Johnson applied to various probability distributions.  Note that when applied to certain distributions, the power transforms achieve very Gaussian-like results, but with others, they are ineffective. This highlights the importance of visualizing the data before and after transformation."
msgstr ""

#: ../modules/preprocessing.rst:371
msgid "It is also possible to map data to a normal distribution using :class:`QuantileTransformer` by setting ``output_distribution='normal'``. Using the earlier example with the iris dataset::"
msgstr ""

#: ../modules/preprocessing.rst:387
msgid "Thus the median of the input becomes the mean of the output, centered at 0. The normal output is clipped so that the input's minimum and maximum --- corresponding to the 1e-7 and 1 - 1e-7 quantiles respectively --- do not become infinite under the transformation."
msgstr ""

#: ../modules/preprocessing.rst:395
msgid "Normalization"
msgstr ""

#: ../modules/preprocessing.rst:397
msgid "**Normalization** is the process of **scaling individual samples to have unit norm**. This process can be useful if you plan to use a quadratic form such as the dot-product or any other kernel to quantify the similarity of any pair of samples."
msgstr ""

#: ../modules/preprocessing.rst:402
msgid "This assumption is the base of the `Vector Space Model <https://en.wikipedia.org/wiki/Vector_Space_Model>`_ often used in text classification and clustering contexts."
msgstr ""

#: ../modules/preprocessing.rst:406
msgid "The function :func:`normalize` provides a quick and easy way to perform this operation on a single array-like dataset, either using the ``l1``, ``l2``, or ``max`` norms::"
msgstr ""

#: ../modules/preprocessing.rst:420
msgid "The ``preprocessing`` module further provides a utility class :class:`Normalizer` that implements the same operation using the ``Transformer`` API (even though the ``fit`` method is useless in this case: the class is stateless as this operation treats samples independently)."
msgstr ""

#: ../modules/preprocessing.rst:425
msgid "This class is hence suitable for use in the early steps of a :class:`~sklearn.pipeline.Pipeline`::"
msgstr ""

#: ../modules/preprocessing.rst:433
msgid "The normalizer instance can then be used on sample vectors as any transformer::"
msgstr ""

#: ../modules/preprocessing.rst:444
msgid "Note: L2 normalization is also known as spatial sign preprocessing."
msgstr ""

msgid "Sparse input"
msgstr ""

#: ../modules/preprocessing.rst:448
msgid ":func:`normalize` and :class:`Normalizer` accept **both dense array-like and sparse matrices from scipy.sparse as input**."
msgstr ""

#: ../modules/preprocessing.rst:451
msgid "For sparse input the data is **converted to the Compressed Sparse Rows representation** (see ``scipy.sparse.csr_matrix``) before being fed to efficient Cython routines. To avoid unnecessary memory copies, it is recommended to choose the CSR representation upstream."
msgstr ""

#: ../modules/preprocessing.rst:459
msgid "Encoding categorical features"
msgstr ""

#: ../modules/preprocessing.rst:460
msgid "Often features are not given as continuous values but categorical. For example a person could have features ``[\"male\", \"female\"]``, ``[\"from Europe\", \"from US\", \"from Asia\"]``, ``[\"uses Firefox\", \"uses Chrome\", \"uses Safari\", \"uses Internet Explorer\"]``. Such features can be efficiently coded as integers, for instance ``[\"male\", \"from US\", \"uses Internet Explorer\"]`` could be expressed as ``[0, 1, 3]`` while ``[\"female\", \"from Asia\", \"uses Chrome\"]`` would be ``[1, 2, 1]``."
msgstr ""

#: ../modules/preprocessing.rst:469
msgid "To convert categorical features to such integer codes, we can use the :class:`OrdinalEncoder`. This estimator transforms each categorical feature to one new feature of integers (0 to n_categories - 1)::"
msgstr ""

#: ../modules/preprocessing.rst:480
msgid "Such integer representation can, however, not be used directly with all scikit-learn estimators, as these expect continuous input, and would interpret the categories as being ordered, which is often not desired (i.e. the set of browsers was ordered arbitrarily)."
msgstr ""

#: ../modules/preprocessing.rst:485
msgid "Another possibility to convert categorical features to features that can be used with scikit-learn estimators is to use a one-of-K, also known as one-hot or dummy encoding. This type of encoding can be obtained with the :class:`OneHotEncoder`, which transforms each categorical feature with ``n_categories`` possible values into ``n_categories`` binary features, with one of them 1, and all others 0."
msgstr ""

#: ../modules/preprocessing.rst:493
msgid "Continuing the example above::"
msgstr ""

#: ../modules/preprocessing.rst:504
msgid "By default, the values each feature can take is inferred automatically from the dataset and can be found in the ``categories_`` attribute::"
msgstr ""

#: ../modules/preprocessing.rst:510
msgid "It is possible to specify this explicitly using the parameter ``categories``. There are two genders, four possible continents and four web browsers in our dataset::"
msgstr ""

#: ../modules/preprocessing.rst:530
msgid "If there is a possibility that the training data might have missing categorical features, it can often be better to specify ``handle_unknown='ignore'`` instead of setting the ``categories`` manually as above. When ``handle_unknown='ignore'`` is specified and unknown categories are encountered during transform, no error will be raised but the resulting one-hot encoded columns for this feature will be all zeros (``handle_unknown='ignore'`` is only supported for one-hot encoding)::"
msgstr ""

#: ../modules/preprocessing.rst:546
msgid "It is also possible to encode each column into ``n_categories - 1`` columns instead of ``n_categories`` columns by using the ``drop`` parameter. This parameter allows the user to specify a category for each feature to be dropped. This is useful to avoid co-linearity in the input matrix in some classifiers. Such functionality is useful, for example, when using non-regularized regression (:class:`LinearRegression <sklearn.linear_model.LinearRegression>`), since co-linearity would cause the covariance matrix to be non-invertible. When this parameter is not None, ``handle_unknown`` must be set to ``error``::"
msgstr ""

#: ../modules/preprocessing.rst:565
msgid "One might want to drop one of the two columns only for features with 2 categories. In this case, you can set the parameter `drop='if_binary'`."
msgstr ""

#: ../modules/preprocessing.rst:579
msgid "In the transformed `X`, the first column is the encoding of the feature with categories \"male\"/\"female\", while the remaining 6 columns is the encoding of the 2 features with respectively 3 categories each."
msgstr ""

#: ../modules/preprocessing.rst:583
msgid ":class:`OneHotEncoder` supports categorical features with missing values by considering the missing values as an additional category::"
msgstr ""

#: ../modules/preprocessing.rst:598
msgid "If a feature contains both `np.nan` and `None`, they will be considered separate categories::"
msgstr ""

#: ../modules/preprocessing.rst:611
msgid "See :ref:`dict_feature_extraction` for categorical features that are represented as a dict, not as scalars."
msgstr ""

#: ../modules/preprocessing.rst:617
msgid "Discretization"
msgstr ""

#: ../modules/preprocessing.rst:619
msgid "`Discretization <https://en.wikipedia.org/wiki/Discretization_of_continuous_features>`_ (otherwise known as quantization or binning) provides a way to partition continuous features into discrete values. Certain datasets with continuous features may benefit from discretization, because discretization can transform the dataset of continuous attributes to one with only nominal attributes."
msgstr ""

#: ../modules/preprocessing.rst:625
msgid "One-hot encoded discretized features can make a model more expressive, while maintaining interpretability. For instance, pre-processing with a discretizer can introduce nonlinearity to linear models."
msgstr ""

#: ../modules/preprocessing.rst:630
msgid "K-bins discretization"
msgstr ""

#: ../modules/preprocessing.rst:632
msgid ":class:`KBinsDiscretizer` discretizes features into ``k`` bins::"
msgstr ""

#: ../modules/preprocessing.rst:639
msgid "By default the output is one-hot encoded into a sparse matrix (See :ref:`preprocessing_categorical_features`) and this can be configured with the ``encode`` parameter. For each feature, the bin edges are computed during ``fit`` and together with the number of bins, they will define the intervals. Therefore, for the current example, these intervals are defined as:"
msgstr ""

#: ../modules/preprocessing.rst:646
msgid "feature 1: :math:`{[-\\infty, -1), [-1, 2), [2, \\infty)}`"
msgstr ""

#: ../modules/preprocessing.rst:647
msgid "feature 2: :math:`{[-\\infty, 5), [5, \\infty)}`"
msgstr ""

#: ../modules/preprocessing.rst:648
msgid "feature 3: :math:`{[-\\infty, 14), [14, \\infty)}`"
msgstr ""

#: ../modules/preprocessing.rst:650
msgid "Based on these bin intervals, ``X`` is transformed as follows::"
msgstr ""

#: ../modules/preprocessing.rst:657
msgid "The resulting dataset contains ordinal attributes which can be further used in a :class:`~sklearn.pipeline.Pipeline`."
msgstr ""

#: ../modules/preprocessing.rst:660
msgid "Discretization is similar to constructing histograms for continuous data. However, histograms focus on counting features which fall into particular bins, whereas discretization focuses on assigning feature values to these bins."
msgstr ""

#: ../modules/preprocessing.rst:664
msgid ":class:`KBinsDiscretizer` implements different binning strategies, which can be selected with the ``strategy`` parameter. The 'uniform' strategy uses constant-width bins. The 'quantile' strategy uses the quantiles values to have equally populated bins in each feature. The 'kmeans' strategy defines bins based on a k-means clustering procedure performed on each feature independently."
msgstr ""

#: ../modules/preprocessing.rst:670
msgid "Be aware that one can specify custom bins by passing a callable defining the discretization strategy to :class:`~sklearn.preprocessing.FunctionTransformer`. For instance, we can use the Pandas function :func:`pandas.cut`::"
msgstr ""

#: ../modules/preprocessing.rst:688
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization.py`"
msgstr ""

#: ../modules/preprocessing.rst:689
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`"
msgstr ""

#: ../modules/preprocessing.rst:690
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_strategies.py`"
msgstr ""

#: ../modules/preprocessing.rst:695
msgid "Feature binarization"
msgstr ""

#: ../modules/preprocessing.rst:697
msgid "**Feature binarization** is the process of **thresholding numerical features to get boolean values**. This can be useful for downstream probabilistic estimators that make assumption that the input data is distributed according to a multi-variate `Bernoulli distribution <https://en.wikipedia.org/wiki/Bernoulli_distribution>`_. For instance, this is the case for the :class:`~sklearn.neural_network.BernoulliRBM`."
msgstr ""

#: ../modules/preprocessing.rst:704
msgid "It is also common among the text processing community to use binary feature values (probably to simplify the probabilistic reasoning) even if normalized counts (a.k.a. term frequencies) or TF-IDF valued features often perform slightly better in practice."
msgstr ""

#: ../modules/preprocessing.rst:709
msgid "As for the :class:`Normalizer`, the utility class :class:`Binarizer` is meant to be used in the early stages of :class:`~sklearn.pipeline.Pipeline`. The ``fit`` method does nothing as each sample is treated independently of others::"
msgstr ""

#: ../modules/preprocessing.rst:727
msgid "It is possible to adjust the threshold of the binarizer::"
msgstr ""

#: ../modules/preprocessing.rst:735
msgid "As for the :class:`Normalizer` class, the preprocessing module provides a companion function :func:`binarize` to be used when the transformer API is not necessary."
msgstr ""

#: ../modules/preprocessing.rst:739
msgid "Note that the :class:`Binarizer` is similar to the :class:`KBinsDiscretizer` when ``k = 2``, and when the bin edge is at the value ``threshold``."
msgstr ""

#: ../modules/preprocessing.rst:744
msgid ":func:`binarize` and :class:`Binarizer` accept **both dense array-like and sparse matrices from scipy.sparse as input**."
msgstr ""

#: ../modules/preprocessing.rst:747
msgid "For sparse input the data is **converted to the Compressed Sparse Rows representation** (see ``scipy.sparse.csr_matrix``). To avoid unnecessary memory copies, it is recommended to choose the CSR representation upstream."
msgstr ""

#: ../modules/preprocessing.rst:755
msgid "Imputation of missing values"
msgstr ""

#: ../modules/preprocessing.rst:757
msgid "Tools for imputing missing values are discussed at :ref:`impute`."
msgstr ""

#: ../modules/preprocessing.rst:762
msgid "Generating polynomial features"
msgstr ""

#: ../modules/preprocessing.rst:764
msgid "Often it's useful to add complexity to the model by considering nonlinear features of the input data. A simple and common method to use is polynomial features, which can get features' high-order and interaction terms. It is implemented in :class:`PolynomialFeatures`::"
msgstr ""

#: ../modules/preprocessing.rst:779
msgid "The features of X have been transformed from :math:`(X_1, X_2)` to :math:`(1, X_1, X_2, X_1^2, X_1X_2, X_2^2)`."
msgstr ""

#: ../modules/preprocessing.rst:781
msgid "In some cases, only interaction terms among features are required, and it can be gotten with the setting ``interaction_only=True``::"
msgstr ""

#: ../modules/preprocessing.rst:794
msgid "The features of X have been transformed from :math:`(X_1, X_2, X_3)` to :math:`(1, X_1, X_2, X_3, X_1X_2, X_1X_3, X_2X_3, X_1X_2X_3)`."
msgstr ""

#: ../modules/preprocessing.rst:796
msgid "Note that polynomial features are used implicitly in `kernel methods <https://en.wikipedia.org/wiki/Kernel_method>`_ (e.g., :class:`~sklearn.svm.SVC`, :class:`~sklearn.decomposition.KernelPCA`) when using polynomial :ref:`svm_kernels`."
msgstr ""

#: ../modules/preprocessing.rst:798
msgid "See :ref:`sphx_glr_auto_examples_linear_model_plot_polynomial_interpolation.py` for Ridge regression using created polynomial features."
msgstr ""

#: ../modules/preprocessing.rst:803
msgid "Custom transformers"
msgstr ""

#: ../modules/preprocessing.rst:805
msgid "Often, you will want to convert an existing Python function into a transformer to assist in data cleaning or processing. You can implement a transformer from an arbitrary function with :class:`FunctionTransformer`. For example, to build a transformer that applies a log transformation in a pipeline, do::"
msgstr ""

#: ../modules/preprocessing.rst:818
msgid "You can ensure that ``func`` and ``inverse_func`` are the inverse of each other by setting ``check_inverse=True`` and calling ``fit`` before ``transform``. Please note that a warning is raised and can be turned into an error with a ``filterwarnings``::"
msgstr ""

#: ../modules/preprocessing.rst:827
msgid "For a full code example that demonstrates using a :class:`FunctionTransformer` to extract features from text data see :ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
msgstr ""

