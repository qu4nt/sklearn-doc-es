msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:14\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/model_persistence.po\n"
"X-Crowdin-File-ID: 3906\n"
"Language: es_ES\n"

#: ../modules/model_persistence.rst:5
msgid "Model persistence"
msgstr ""

#: ../modules/model_persistence.rst:7
msgid "After training a scikit-learn model, it is desirable to have a way to persist the model for future use without having to retrain. The following sections give you some hints on how to persist a scikit-learn model."
msgstr ""

#: ../modules/model_persistence.rst:12
msgid "Python specific serialization"
msgstr ""

#: ../modules/model_persistence.rst:14
msgid "It is possible to save a model in scikit-learn by using Python's built-in persistence model, namely `pickle <https://docs.python.org/3/library/pickle.html>`_::"
msgstr ""

#: ../modules/model_persistence.rst:33
msgid "In the specific case of scikit-learn, it may be better to use joblib's replacement of pickle (``dump`` & ``load``), which is more efficient on objects that carry large numpy arrays internally as is often the case for fitted scikit-learn estimators, but can only pickle to the disk and not to a string::"
msgstr ""

#: ../modules/model_persistence.rst:42
msgid "Later you can load back the pickled model (possibly in another Python process) with::"
msgstr ""

#: ../modules/model_persistence.rst:49
msgid "``dump`` and ``load`` functions also accept file-like object instead of filenames. More information on data persistence with Joblib is available `here <https://joblib.readthedocs.io/en/latest/persistence.html>`_."
msgstr ""

#: ../modules/model_persistence.rst:57
msgid "Security & maintainability limitations"
msgstr ""

#: ../modules/model_persistence.rst:59
msgid "pickle (and joblib by extension), has some issues regarding maintainability and security. Because of this,"
msgstr ""

#: ../modules/model_persistence.rst:62
msgid "Never unpickle untrusted data as it could lead to malicious code being executed upon loading."
msgstr ""

#: ../modules/model_persistence.rst:64
msgid "While models saved using one version of scikit-learn might load in other versions, this is entirely unsupported and inadvisable. It should also be kept in mind that operations performed on such data could give different and unexpected results."
msgstr ""

#: ../modules/model_persistence.rst:69
msgid "In order to rebuild a similar model with future versions of scikit-learn, additional metadata should be saved along the pickled model:"
msgstr ""

#: ../modules/model_persistence.rst:72
msgid "The training data, e.g. a reference to an immutable snapshot"
msgstr ""

#: ../modules/model_persistence.rst:73
msgid "The python source code used to generate the model"
msgstr ""

#: ../modules/model_persistence.rst:74
msgid "The versions of scikit-learn and its dependencies"
msgstr ""

#: ../modules/model_persistence.rst:75
msgid "The cross validation score obtained on the training data"
msgstr ""

#: ../modules/model_persistence.rst:77
msgid "This should make it possible to check that the cross-validation score is in the same range as before."
msgstr ""

#: ../modules/model_persistence.rst:80
msgid "Since a model internal representation may be different on two different architectures, dumping a model on one architecture and loading it on another architecture is not a supported behaviour, even if it might work on some cases. To overcome the issue of portability, pickle models are often deployed in production using containers, like docker."
msgstr ""

#: ../modules/model_persistence.rst:87
msgid "If you want to know more about these issues and explore other possible serialization methods, please refer to this `talk by Alex Gaynor <https://pyvideo.org/video/2566/pickles-are-for-delis-not-software>`_."
msgstr ""

#: ../modules/model_persistence.rst:93
msgid "Interoperable formats"
msgstr ""

#: ../modules/model_persistence.rst:95
msgid "For reproducibility and quality control needs, when different architectures and environments should be taken into account, exporting the model in `Open Neural Network Exchange <https://onnx.ai/>`_ format or `Predictive Model Markup Language (PMML) <http://dmg.org/pmml/v4-4-1/GeneralStructure.html>`_ format might be a better approach than using `pickle` alone. These are helpful where you may want to use your model for prediction in a different environment from where the model was trained."
msgstr ""

#: ../modules/model_persistence.rst:104
msgid "ONNX is a binary serialization of the model. It has been developed to improve the usability of the interoperable representation of data models. It aims to facilitate the conversion of the data models between different machine learning frameworks, and to improve their portability on different computing architectures. More details are available from the `ONNX tutorial <https://onnx.ai/get-started.html>`_. To convert scikit-learn model to ONNX a specific tool `sklearn-onnx <http://onnx.ai/sklearn-onnx/>`_ has been developed."
msgstr ""

#: ../modules/model_persistence.rst:113
msgid "PMML is an implementation of the `XML <https://en.wikipedia.org/wiki/XML>`_ document standard defined to represent data models together with the data used to generate them. Being human and machine readable, PMML is a good option for model validation on different platforms and long term archiving. On the other hand, as XML in general, its verbosity does not help in production when performance is critical. To convert scikit-learn model to PMML you can use for example `sklearn2pmml <https://github.com/jpmml/sklearn2pmml>`_ distributed under the Affero GPLv3 license."
msgstr ""

