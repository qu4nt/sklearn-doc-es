msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-23 20:37\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/biclustering.po\n"
"X-Crowdin-File-ID: 4862\n"
"Language: es_ES\n"

#: ../modules/biclustering.rst:5
msgid "Biclustering"
msgstr ""

#: ../modules/biclustering.rst:7
msgid "Biclustering can be performed with the module :mod:`sklearn.cluster.bicluster`. Biclustering algorithms simultaneously cluster rows and columns of a data matrix. These clusters of rows and columns are known as biclusters. Each determines a submatrix of the original data matrix with some desired properties."
msgstr ""

#: ../modules/biclustering.rst:13
msgid "For instance, given a matrix of shape ``(10, 10)``, one possible bicluster with three rows and two columns induces a submatrix of shape ``(3, 2)``::"
msgstr ""

#: ../modules/biclustering.rst:25
msgid "For visualization purposes, given a bicluster, the rows and columns of the data matrix may be rearranged to make the bicluster contiguous."
msgstr ""

#: ../modules/biclustering.rst:28
msgid "Algorithms differ in how they define biclusters. Some of the common types include:"
msgstr ""

#: ../modules/biclustering.rst:31
msgid "constant values, constant rows, or constant columns"
msgstr ""

#: ../modules/biclustering.rst:32
msgid "unusually high or low values"
msgstr ""

#: ../modules/biclustering.rst:33
msgid "submatrices with low variance"
msgstr ""

#: ../modules/biclustering.rst:34
msgid "correlated rows or columns"
msgstr ""

#: ../modules/biclustering.rst:36
msgid "Algorithms also differ in how rows and columns may be assigned to biclusters, which leads to different bicluster structures. Block diagonal or checkerboard structures occur when rows and columns are divided into partitions."
msgstr ""

#: ../modules/biclustering.rst:41
msgid "If each row and each column belongs to exactly one bicluster, then rearranging the rows and columns of the data matrix reveals the biclusters on the diagonal. Here is an example of this structure where biclusters have higher average values than the other rows and columns:"
msgstr ""

#: ../modules/biclustering.rst:52
msgid "An example of biclusters formed by partitioning rows and columns."
msgstr ""

#: ../modules/biclustering.rst:54
msgid "In the checkerboard case, each row belongs to all column clusters, and each column belongs to all row clusters. Here is an example of this structure where the variance of the values within each bicluster is small:"
msgstr ""

#: ../modules/biclustering.rst:64
msgid "An example of checkerboard biclusters."
msgstr ""

#: ../modules/biclustering.rst:66
msgid "After fitting a model, row and column cluster membership can be found in the ``rows_`` and ``columns_`` attributes. ``rows_[i]`` is a binary vector with nonzero entries corresponding to rows that belong to bicluster ``i``. Similarly, ``columns_[i]`` indicates which columns belong to bicluster ``i``."
msgstr ""

#: ../modules/biclustering.rst:72
msgid "Some models also have ``row_labels_`` and ``column_labels_`` attributes. These models partition the rows and columns, such as in the block diagonal and checkerboard bicluster structures."
msgstr ""

#: ../modules/biclustering.rst:78
msgid "Biclustering has many other names in different fields including co-clustering, two-mode clustering, two-way clustering, block clustering, coupled two-way clustering, etc. The names of some algorithms, such as the Spectral Co-Clustering algorithm, reflect these alternate names."
msgstr ""

#: ../modules/biclustering.rst:91
msgid "Spectral Co-Clustering"
msgstr ""

#: ../modules/biclustering.rst:93
msgid "The :class:`SpectralCoclustering` algorithm finds biclusters with values higher than those in the corresponding other rows and columns. Each row and each column belongs to exactly one bicluster, so rearranging the rows and columns to make partitions contiguous reveals these high values along the diagonal:"
msgstr ""

#: ../modules/biclustering.rst:101
msgid "The algorithm treats the input data matrix as a bipartite graph: the rows and columns of the matrix correspond to the two sets of vertices, and each entry corresponds to an edge between a row and a column. The algorithm approximates the normalized cut of this graph to find heavy subgraphs."
msgstr ""

#: ../modules/biclustering.rst:109 ../modules/biclustering.rst:187
msgid "Mathematical formulation"
msgstr ""

#: ../modules/biclustering.rst:111
msgid "An approximate solution to the optimal normalized cut may be found via the generalized eigenvalue decomposition of the Laplacian of the graph. Usually this would mean working directly with the Laplacian matrix. If the original data matrix :math:`A` has shape :math:`m \\times n`, the Laplacian matrix for the corresponding bipartite graph has shape :math:`(m + n) \\times (m + n)`. However, in this case it is possible to work directly with :math:`A`, which is smaller and more efficient."
msgstr ""

#: ../modules/biclustering.rst:120
msgid "The input matrix :math:`A` is preprocessed as follows:"
msgstr ""

#: ../modules/biclustering.rst:122
msgid "A_n = R^{-1/2} A C^{-1/2}\n\n"
msgstr ""

#: ../modules/biclustering.rst:125
msgid "Where :math:`R` is the diagonal matrix with entry :math:`i` equal to :math:`\\sum_{j} A_{ij}` and :math:`C` is the diagonal matrix with entry :math:`j` equal to :math:`\\sum_{i} A_{ij}`."
msgstr ""

#: ../modules/biclustering.rst:129
msgid "The singular value decomposition, :math:`A_n = U \\Sigma V^\\top`, provides the partitions of the rows and columns of :math:`A`. A subset of the left singular vectors gives the row partitions, and a subset of the right singular vectors gives the column partitions."
msgstr ""

#: ../modules/biclustering.rst:134
msgid "The :math:`\\ell = \\lceil \\log_2 k \\rceil` singular vectors, starting from the second, provide the desired partitioning information. They are used to form the matrix :math:`Z`:"
msgstr ""

#: ../modules/biclustering.rst:138
msgid "Z = \\begin{bmatrix} R^{-1/2} U \\\\\\\\\n"
"                    C^{-1/2} V\n"
"      \\end{bmatrix}\n\n"
msgstr ""

#: ../modules/biclustering.rst:143
msgid "where the columns of :math:`U` are :math:`u_2, \\dots, u_{\\ell + 1}`, and similarly for :math:`V`."
msgstr ""

#: ../modules/biclustering.rst:146
msgid "Then the rows of :math:`Z` are clustered using :ref:`k-means <k_means>`. The first ``n_rows`` labels provide the row partitioning, and the remaining ``n_columns`` labels provide the column partitioning."
msgstr ""

#: ../modules/biclustering.rst:153
msgid ":ref:`sphx_glr_auto_examples_bicluster_plot_spectral_coclustering.py`: A simple example showing how to generate a data matrix with biclusters and apply this method to it."
msgstr ""

#: ../modules/biclustering.rst:157
msgid ":ref:`sphx_glr_auto_examples_bicluster_plot_bicluster_newsgroups.py`: An example of finding biclusters in the twenty newsgroup dataset."
msgstr ""

#: ../modules/biclustering.rst:163
msgid "Dhillon, Inderjit S, 2001. `Co-clustering documents and words using bipartite spectral graph partitioning <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.140.3011>`__."
msgstr ""

#: ../modules/biclustering.rst:171
msgid "Spectral Biclustering"
msgstr "Biclustering espectral"

#: ../modules/biclustering.rst:173
msgid "The :class:`SpectralBiclustering` algorithm assumes that the input data matrix has a hidden checkerboard structure. The rows and columns of a matrix with this structure may be partitioned so that the entries of any bicluster in the Cartesian product of row clusters and column clusters are approximately constant. For instance, if there are two row partitions and three column partitions, each row will belong to three biclusters, and each column will belong to two biclusters."
msgstr "El algoritmo :class:`SpectralBiclustering` supone que la matriz de datos de entrada tiene una estructura de tablero de ajedrez oculto. Las filas y las columnas de una matriz con esta estructura pueden dividirse de forma que las entradas de cualquier bicluster en el producto cartesiano de los clusters de filas y los clusters de columnas sean aproximadamente constantes. Por ejemplo, si hay dos particiones de filas y tres de columnas, cada fila pertenecerá a tres biclústeres y cada columna pertenecerá a dos biclústeres."

#: ../modules/biclustering.rst:181
msgid "The algorithm partitions the rows and columns of a matrix so that a corresponding blockwise-constant checkerboard matrix provides a good approximation to the original matrix."
msgstr "El algoritmo divide las filas y las columnas de una matriz de modo que la correspondiente matriz en forma de tablero de ajedrez con constantes de bloque proporciona una buena aproximación a la matriz original."

#: ../modules/biclustering.rst:189
msgid "The input matrix :math:`A` is first normalized to make the checkerboard pattern more obvious. There are three possible methods:"
msgstr ""

#: ../modules/biclustering.rst:192
msgid "*Independent row and column normalization*, as in Spectral Co-Clustering. This method makes the rows sum to a constant and the columns sum to a different constant."
msgstr ""

#: ../modules/biclustering.rst:196
msgid "**Bistochastization**: repeated row and column normalization until convergence. This method makes both rows and columns sum to the same constant."
msgstr ""

#: ../modules/biclustering.rst:200
msgid "**Log normalization**: the log of the data matrix is computed: :math:`L = \\log A`. Then the column mean :math:`\\overline{L_{i \\cdot}}`, row mean :math:`\\overline{L_{\\cdot j}}`, and overall mean :math:`\\overline{L_{\\cdot \\cdot}}` of :math:`L` are computed. The final matrix is computed according to the formula"
msgstr ""

#: ../modules/biclustering.rst:206
msgid "K_{ij} = L_{ij} - \\overline{L_{i \\cdot}} - \\overline{L_{\\cdot\n"
"j}} + \\overline{L_{\\cdot \\cdot}}\n\n"
msgstr ""

#: ../modules/biclustering.rst:210
msgid "After normalizing, the first few singular vectors are computed, just as in the Spectral Co-Clustering algorithm."
msgstr ""

#: ../modules/biclustering.rst:213
msgid "If log normalization was used, all the singular vectors are meaningful. However, if independent normalization or bistochastization were used, the first singular vectors, :math:`u_1` and :math:`v_1`. are discarded. From now on, the \"first\" singular vectors refers to :math:`u_2 \\dots u_{p+1}` and :math:`v_2 \\dots v_{p+1}` except in the case of log normalization."
msgstr ""

#: ../modules/biclustering.rst:220
msgid "Given these singular vectors, they are ranked according to which can be best approximated by a piecewise-constant vector. The approximations for each vector are found using one-dimensional k-means and scored using the Euclidean distance. Some subset of the best left and right singular vector are selected. Next, the data is projected to this best subset of singular vectors and clustered."
msgstr ""

#: ../modules/biclustering.rst:227
msgid "For instance, if :math:`p` singular vectors were calculated, the :math:`q` best are found as described, where :math:`q<p`. Let :math:`U` be the matrix with columns the :math:`q` best left singular vectors, and similarly :math:`V` for the right. To partition the rows, the rows of :math:`A` are projected to a :math:`q` dimensional space: :math:`A * V`. Treating the :math:`m` rows of this :math:`m \\times q` matrix as samples and clustering using k-means yields the row labels. Similarly, projecting the columns to :math:`A^{\\top} * U` and clustering this :math:`n \\times q` matrix yields the column labels."
msgstr ""

#: ../modules/biclustering.rst:240
msgid ":ref:`sphx_glr_auto_examples_bicluster_plot_spectral_biclustering.py`: a simple example showing how to generate a checkerboard matrix and bicluster it."
msgstr ""

#: ../modules/biclustering.rst:246
msgid "Kluger, Yuval, et. al., 2003. `Spectral biclustering of microarray data: coclustering genes and conditions <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.135.1608>`__."
msgstr ""

#: ../modules/biclustering.rst:256
msgid "Biclustering evaluation"
msgstr ""

#: ../modules/biclustering.rst:258
msgid "There are two ways of evaluating a biclustering result: internal and external. Internal measures, such as cluster stability, rely only on the data and the result themselves. Currently there are no internal bicluster measures in scikit-learn. External measures refer to an external source of information, such as the true solution. When working with real data the true solution is usually unknown, but biclustering artificial data may be useful for evaluating algorithms precisely because the true solution is known."
msgstr ""

#: ../modules/biclustering.rst:267
msgid "To compare a set of found biclusters to the set of true biclusters, two similarity measures are needed: a similarity measure for individual biclusters, and a way to combine these individual similarities into an overall score."
msgstr ""

#: ../modules/biclustering.rst:272
msgid "To compare individual biclusters, several measures have been used. For now, only the Jaccard index is implemented:"
msgstr ""

#: ../modules/biclustering.rst:275
msgid "J(A, B) = \\frac{|A \\cap B|}{|A| + |B| - |A \\cap B|}\n\n"
msgstr ""

#: ../modules/biclustering.rst:278
msgid "where :math:`A` and :math:`B` are biclusters, :math:`|A \\cap B|` is the number of elements in their intersection. The Jaccard index achieves its minimum of 0 when the biclusters to not overlap at all and its maximum of 1 when they are identical."
msgstr ""

#: ../modules/biclustering.rst:283
msgid "Several methods have been developed to compare two sets of biclusters. For now, only :func:`consensus_score` (Hochreiter et. al., 2010) is available:"
msgstr ""

#: ../modules/biclustering.rst:287
msgid "Compute bicluster similarities for pairs of biclusters, one in each set, using the Jaccard index or a similar measure."
msgstr ""

#: ../modules/biclustering.rst:290
msgid "Assign biclusters from one set to another in a one-to-one fashion to maximize the sum of their similarities. This step is performed using the Hungarian algorithm."
msgstr ""

#: ../modules/biclustering.rst:294
msgid "The final sum of similarities is divided by the size of the larger set."
msgstr ""

#: ../modules/biclustering.rst:297
msgid "The minimum consensus score, 0, occurs when all pairs of biclusters are totally dissimilar. The maximum score, 1, occurs when both sets are identical."
msgstr ""

#: ../modules/biclustering.rst:304
msgid "Hochreiter, Bodenhofer, et. al., 2010. `FABIA: factor analysis for bicluster acquisition <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881408/>`__."
msgstr ""

