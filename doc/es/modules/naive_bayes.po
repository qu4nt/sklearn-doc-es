msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 04:39\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/naive_bayes.po\n"
"X-Crowdin-File-ID: 5928\n"
"Language: es_ES\n"

#: ../modules/naive_bayes.rst:5
msgid "Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:10
msgid "Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes' theorem with the \"naive\" assumption of conditional independence between every pair of features given the value of the class variable. Bayes' theorem states the following relationship, given class variable :math:`y` and dependent feature vector :math:`x_1` through :math:`x_n`, :"
msgstr ""

#: ../modules/naive_bayes.rst:17
msgid "P(y \\mid x_1, \\dots, x_n) = \\frac{P(y) P(x_1, \\dots, x_n \\mid y)}\n"
"                                 {P(x_1, \\dots, x_n)}"
msgstr ""

#: ../modules/naive_bayes.rst:22
msgid "Using the naive conditional independence assumption that"
msgstr ""

#: ../modules/naive_bayes.rst:24
msgid "P(x_i | y, x_1, \\dots, x_{i-1}, x_{i+1}, \\dots, x_n) = P(x_i | y),"
msgstr ""

#: ../modules/naive_bayes.rst:28
msgid "for all :math:`i`, this relationship is simplified to"
msgstr ""

#: ../modules/naive_bayes.rst:30
msgid "P(y \\mid x_1, \\dots, x_n) = \\frac{P(y) \\prod_{i=1}^{n} P(x_i \\mid y)}\n"
"                                 {P(x_1, \\dots, x_n)}"
msgstr ""

#: ../modules/naive_bayes.rst:35
msgid "Since :math:`P(x_1, \\dots, x_n)` is constant given the input, we can use the following classification rule:"
msgstr ""

#: ../modules/naive_bayes.rst:38
msgid "P(y \\mid x_1, \\dots, x_n) \\propto P(y) \\prod_{i=1}^{n} P(x_i \\mid y)\n\n"
"\\Downarrow\n\n"
"\\hat{y} = \\arg\\max_y P(y) \\prod_{i=1}^{n} P(x_i \\mid y),"
msgstr ""

#: ../modules/naive_bayes.rst:46
msgid "and we can use Maximum A Posteriori (MAP) estimation to estimate :math:`P(y)` and :math:`P(x_i \\mid y)`; the former is then the relative frequency of class :math:`y` in the training set."
msgstr ""

#: ../modules/naive_bayes.rst:51
msgid "The different naive Bayes classifiers differ mainly by the assumptions they make regarding the distribution of :math:`P(x_i \\mid y)`."
msgstr ""

#: ../modules/naive_bayes.rst:54
msgid "In spite of their apparently over-simplified assumptions, naive Bayes classifiers have worked quite well in many real-world situations, famously document classification and spam filtering. They require a small amount of training data to estimate the necessary parameters. (For theoretical reasons why naive Bayes works well, and on which types of data it does, see the references below.)"
msgstr ""

#: ../modules/naive_bayes.rst:61
msgid "Naive Bayes learners and classifiers can be extremely fast compared to more sophisticated methods. The decoupling of the class conditional feature distributions means that each distribution can be independently estimated as a one dimensional distribution. This in turn helps to alleviate problems stemming from the curse of dimensionality."
msgstr ""

#: ../modules/naive_bayes.rst:68
msgid "On the flip side, although naive Bayes is known as a decent classifier, it is known to be a bad estimator, so the probability outputs from ``predict_proba`` are not to be taken too seriously."
msgstr ""

#: ../modules/naive_bayes.rst:74
msgid "H. Zhang (2004). `The optimality of Naive Bayes. <https://www.cs.unb.ca/~hzhang/publications/FLAIRS04ZhangH.pdf>`_ Proc. FLAIRS."
msgstr ""

#: ../modules/naive_bayes.rst:81
msgid "Gaussian Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:83
msgid ":class:`GaussianNB` implements the Gaussian Naive Bayes algorithm for classification. The likelihood of the features is assumed to be Gaussian:"
msgstr ""

#: ../modules/naive_bayes.rst:86
msgid "P(x_i \\mid y) = \\frac{1}{\\sqrt{2\\pi\\sigma^2_y}} \\exp\\left(-\\frac{(x_i - \\mu_y)^2}{2\\sigma^2_y}\\right)"
msgstr ""

#: ../modules/naive_bayes.rst:90
msgid "The parameters :math:`\\sigma_y` and :math:`\\mu_y` are estimated using maximum likelihood."
msgstr ""

#: ../modules/naive_bayes.rst:107
msgid "Multinomial Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:109
msgid ":class:`MultinomialNB` implements the naive Bayes algorithm for multinomially distributed data, and is one of the two classic naive Bayes variants used in text classification (where the data are typically represented as word vector counts, although tf-idf vectors are also known to work well in practice). The distribution is parametrized by vectors :math:`\\theta_y = (\\theta_{y1},\\ldots,\\theta_{yn})` for each class :math:`y`, where :math:`n` is the number of features (in text classification, the size of the vocabulary) and :math:`\\theta_{yi}` is the probability :math:`P(x_i \\mid y)` of feature :math:`i` appearing in a sample belonging to class :math:`y`."
msgstr ""

#: ../modules/naive_bayes.rst:120
msgid "The parameters :math:`\\theta_y` is estimated by a smoothed version of maximum likelihood, i.e. relative frequency counting:"
msgstr ""

#: ../modules/naive_bayes.rst:123
msgid "\\hat{\\theta}_{yi} = \\frac{ N_{yi} + \\alpha}{N_y + \\alpha n}"
msgstr ""

#: ../modules/naive_bayes.rst:127
msgid "where :math:`N_{yi} = \\sum_{x \\in T} x_i` is the number of times feature :math:`i` appears in a sample of class :math:`y` in the training set :math:`T`, and :math:`N_{y} = \\sum_{i=1}^{n} N_{yi}` is the total count of all features for class :math:`y`."
msgstr ""

#: ../modules/naive_bayes.rst:133
msgid "The smoothing priors :math:`\\alpha \\ge 0` accounts for features not present in the learning samples and prevents zero probabilities in further computations. Setting :math:`\\alpha = 1` is called Laplace smoothing, while :math:`\\alpha < 1` is called Lidstone smoothing."
msgstr ""

#: ../modules/naive_bayes.rst:142
msgid "Complement Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:144
msgid ":class:`ComplementNB` implements the complement naive Bayes (CNB) algorithm. CNB is an adaptation of the standard multinomial naive Bayes (MNB) algorithm that is particularly suited for imbalanced data sets. Specifically, CNB uses statistics from the *complement* of each class to compute the model's weights. The inventors of CNB show empirically that the parameter estimates for CNB are more stable than those for MNB. Further, CNB regularly outperforms MNB (often by a considerable margin) on text classification tasks. The procedure for calculating the weights is as follows:"
msgstr ""

#: ../modules/naive_bayes.rst:153
msgid "\\hat{\\theta}_{ci} = \\frac{\\alpha_i + \\sum_{j:y_j \\neq c} d_{ij}}\n"
"                         {\\alpha + \\sum_{j:y_j \\neq c} \\sum_{k} d_{kj}}\n\n"
"w_{ci} = \\log \\hat{\\theta}_{ci}\n\n"
"w_{ci} = \\frac{w_{ci}}{\\sum_{j} |w_{cj}|}"
msgstr ""

#: ../modules/naive_bayes.rst:162
msgid "where the summations are over all documents :math:`j` not in class :math:`c`, :math:`d_{ij}` is either the count or tf-idf value of term :math:`i` in document :math:`j`, :math:`\\alpha_i` is a smoothing hyperparameter like that found in MNB, and :math:`\\alpha = \\sum_{i} \\alpha_i`. The second normalization addresses the tendency for longer documents to dominate parameter estimates in MNB. The classification rule is:"
msgstr ""

#: ../modules/naive_bayes.rst:169
msgid "\\hat{c} = \\arg\\min_c \\sum_{i} t_i w_{ci}"
msgstr ""

#: ../modules/naive_bayes.rst:173
msgid "i.e., a document is assigned to the class that is the *poorest* complement match."
msgstr ""

#: ../modules/naive_bayes.rst:178
msgid "Rennie, J. D., Shih, L., Teevan, J., & Karger, D. R. (2003). `Tackling the poor assumptions of naive bayes text classifiers. <https://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf>`_ In ICML (Vol. 3, pp. 616-623)."
msgstr ""

#: ../modules/naive_bayes.rst:186
msgid "Bernoulli Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:188
msgid ":class:`BernoulliNB` implements the naive Bayes training and classification algorithms for data that is distributed according to multivariate Bernoulli distributions; i.e., there may be multiple features but each one is assumed to be a binary-valued (Bernoulli, boolean) variable. Therefore, this class requires samples to be represented as binary-valued feature vectors; if handed any other kind of data, a ``BernoulliNB`` instance may binarize its input (depending on the ``binarize`` parameter)."
msgstr ""

#: ../modules/naive_bayes.rst:196
msgid "The decision rule for Bernoulli naive Bayes is based on"
msgstr ""

#: ../modules/naive_bayes.rst:198
msgid "P(x_i \\mid y) = P(i \\mid y) x_i + (1 - P(i \\mid y)) (1 - x_i)"
msgstr ""

#: ../modules/naive_bayes.rst:202
msgid "which differs from multinomial NB's rule in that it explicitly penalizes the non-occurrence of a feature :math:`i` that is an indicator for class :math:`y`, where the multinomial variant would simply ignore a non-occurring feature."
msgstr ""

#: ../modules/naive_bayes.rst:207
msgid "In the case of text classification, word occurrence vectors (rather than word count vectors) may be used to train and use this classifier. ``BernoulliNB`` might perform better on some datasets, especially those with shorter documents. It is advisable to evaluate both models, if time permits."
msgstr ""

#: ../modules/naive_bayes.rst:214
msgid "C.D. Manning, P. Raghavan and H. Sch√ºtze (2008). Introduction to Information Retrieval. Cambridge University Press, pp. 234-265."
msgstr ""

#: ../modules/naive_bayes.rst:217
msgid "A. McCallum and K. Nigam (1998). `A comparison of event models for Naive Bayes text classification. <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1529>`_ Proc. AAAI/ICML-98 Workshop on Learning for Text Categorization, pp. 41-48."
msgstr ""

#: ../modules/naive_bayes.rst:222
msgid "V. Metsis, I. Androutsopoulos and G. Paliouras (2006). `Spam filtering with Naive Bayes -- Which Naive Bayes? <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.61.5542>`_ 3rd Conf. on Email and Anti-Spam (CEAS)."
msgstr ""

#: ../modules/naive_bayes.rst:230
msgid "Categorical Naive Bayes"
msgstr ""

#: ../modules/naive_bayes.rst:232
msgid ":class:`CategoricalNB` implements the categorical naive Bayes algorithm for categorically distributed data. It assumes that each feature, which is described by the index :math:`i`, has its own categorical distribution."
msgstr ""

#: ../modules/naive_bayes.rst:237
msgid "For each feature :math:`i` in the training set :math:`X`, :class:`CategoricalNB` estimates a categorical distribution for each feature i of X conditioned on the class y. The index set of the samples is defined as :math:`J = \\{ 1, \\dots, m \\}`, with :math:`m` as the number of samples."
msgstr ""

#: ../modules/naive_bayes.rst:242
msgid "The probability of category :math:`t` in feature :math:`i` given class :math:`c` is estimated as:"
msgstr ""

#: ../modules/naive_bayes.rst:245
msgid "P(x_i = t \\mid y = c \\: ;\\, \\alpha) = \\frac{ N_{tic} + \\alpha}{N_{c} +\n"
"                                       \\alpha n_i},"
msgstr ""

#: ../modules/naive_bayes.rst:250
msgid "where :math:`N_{tic} = |\\{j \\in J \\mid x_{ij} = t, y_j = c\\}|` is the number of times category :math:`t` appears in the samples :math:`x_{i}`, which belong to class :math:`c`, :math:`N_{c} = |\\{ j \\in J\\mid y_j = c\\}|` is the number of samples with class c, :math:`\\alpha` is a smoothing parameter and :math:`n_i` is the number of available categories of feature :math:`i`."
msgstr ""

#: ../modules/naive_bayes.rst:256
msgid ":class:`CategoricalNB` assumes that the sample matrix :math:`X` is encoded (for instance with the help of :class:`OrdinalEncoder`) such that all categories for each feature :math:`i` are represented with numbers :math:`0, ..., n_i - 1` where :math:`n_i` is the number of available categories of feature :math:`i`."
msgstr ""

#: ../modules/naive_bayes.rst:263
msgid "Out-of-core naive Bayes model fitting"
msgstr ""

#: ../modules/naive_bayes.rst:265
msgid "Naive Bayes models can be used to tackle large scale classification problems for which the full training set might not fit in memory. To handle this case, :class:`MultinomialNB`, :class:`BernoulliNB`, and :class:`GaussianNB` expose a ``partial_fit`` method that can be used incrementally as done with other classifiers as demonstrated in :ref:`sphx_glr_auto_examples_applications_plot_out_of_core_classification.py`. All naive Bayes classifiers support sample weighting."
msgstr ""

#: ../modules/naive_bayes.rst:273
msgid "Contrary to the ``fit`` method, the first call to ``partial_fit`` needs to be passed the list of all the expected class labels."
msgstr ""

#: ../modules/naive_bayes.rst:276
msgid "For an overview of available strategies in scikit-learn, see also the :ref:`out-of-core learning <scaling_strategies>` documentation."
msgstr ""

#: ../modules/naive_bayes.rst:281
msgid "The ``partial_fit`` method call of naive Bayes models introduces some computational overhead. It is recommended to use data chunk sizes that are as large as possible, that is as the available RAM allows."
msgstr ""

