msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:12\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.cluster.OPTICS.po\n"
"X-Crowdin-File-ID: 5254\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.cluster.OPTICS.rst:2
msgid ":mod:`sklearn.cluster`.OPTICS"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:2
msgid "Estimate clustering structure from vector array."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:4
msgid "OPTICS (Ordering Points To Identify the Clustering Structure), closely related to DBSCAN, finds core sample of high density and expands clusters from them [R2c55e37003fe-1]_. Unlike DBSCAN, keeps cluster hierarchy for a variable neighborhood radius. Better suited for usage on large datasets than the current sklearn implementation of DBSCAN."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:10
msgid "Clusters are then extracted using a DBSCAN-like method (cluster_method = 'dbscan') or an automatic technique proposed in [R2c55e37003fe-1]_ (cluster_method = 'xi')."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:14
msgid "This implementation deviates from the original OPTICS by first performing k-nearest-neighborhood searches on all points to identify core sizes, then computing only the distances to unprocessed points when constructing the cluster order. Note that we do not employ a heap to manage the expansion candidates, so the time complexity will be O(n^2)."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:20
msgid "Read more in the :ref:`User Guide <optics>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClusterMixin.fit_predict
#: sklearn.cluster._optics.OPTICS sklearn.cluster._optics.OPTICS.fit
msgid "Parameters"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:29
msgid "**min_samples**"
msgstr ""

#: of
msgid "int > 1 or float between 0 and 1, default=5"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:25
msgid "The number of samples in a neighborhood for a point to be considered as a core point. Also, up and down steep regions can't have more than ``min_samples`` consecutive non-steep points. Expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2)."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:35
msgid "**max_eps**"
msgstr ""

#: of
msgid "float, default=np.inf"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:32
msgid "The maximum distance between two samples for one to be considered as in the neighborhood of the other. Default value of ``np.inf`` will identify clusters across all scales; reducing ``max_eps`` will result in shorter run times."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:60
msgid "**metric**"
msgstr ""

#: of
msgid "str or callable, default='minkowski'"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:38
msgid "Metric to use for distance computation. Any metric from scikit-learn or scipy.spatial.distance can be used."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:41
msgid "If metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays as input and return one value indicating the distance between them. This works for Scipy's metrics, but is less efficient than passing the metric name as a string. If metric is \"precomputed\", X is assumed to be a distance matrix and must be square."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:48
msgid "Valid values for metric are:"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:50
msgid "from scikit-learn: ['cityblock', 'cosine', 'euclidean', 'l1', 'l2', 'manhattan']"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:53
msgid "from scipy.spatial.distance: ['braycurtis', 'canberra', 'chebyshev', 'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule']"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:59
msgid "See the documentation for scipy.spatial.distance for details on these metrics."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:66
msgid "**p**"
msgstr ""

#: of
msgid "int, default=2"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:63
msgid "Parameter for the Minkowski metric from :class:`~sklearn.metrics.pairwise_distances`. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:69
msgid "**metric_params**"
msgstr ""

#: of
msgid "dict, default=None"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:69
msgid "Additional keyword arguments for the metric function."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:73
msgid "**cluster_method**"
msgstr ""

#: of
msgid "str, default='xi'"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:72
msgid "The extraction method used to extract clusters using the calculated reachability and ordering. Possible values are \"xi\" and \"dbscan\"."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:79
msgid "**eps**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:76
msgid "The maximum distance between two samples for one to be considered as in the neighborhood of the other. By default it assumes the same value as ``max_eps``. Used only when ``cluster_method='dbscan'``."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:86
msgid "**xi**"
msgstr ""

#: of
msgid "float between 0 and 1, default=0.05"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:82
msgid "Determines the minimum steepness on the reachability plot that constitutes a cluster boundary. For example, an upwards point in the reachability plot is defined by the ratio from one point to its successor being at most 1-xi. Used only when ``cluster_method='xi'``."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:91
msgid "**predecessor_correction**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:89
msgid "Correct clusters according to the predecessors calculated by OPTICS [R2c55e37003fe-2]_. This parameter has minimal effect on most datasets. Used only when ``cluster_method='xi'``."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:97
msgid "**min_cluster_size**"
msgstr ""

#: of
msgid "int > 1 or float between 0 and 1, default=None"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:94
msgid "Minimum number of samples in an OPTICS cluster, expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2). If ``None``, the value of ``min_samples`` is used instead. Used only when ``cluster_method='xi'``."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:109
msgid "**algorithm**"
msgstr ""

#: of
msgid "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:100
msgid "Algorithm used to compute the nearest neighbors:"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:102
msgid "'ball_tree' will use :class:`BallTree`"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:103
msgid "'kd_tree' will use :class:`KDTree`"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:104
msgid "'brute' will use a brute-force search."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:105
msgid "'auto' will attempt to decide the most appropriate algorithm based on the values passed to :meth:`fit` method. (default)"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:108
msgid "Note: fitting on sparse input will override the setting of this parameter, using brute force."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:115
msgid "**leaf_size**"
msgstr ""

#: of
msgid "int, default=30"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:112
msgid "Leaf size passed to :class:`BallTree` or :class:`KDTree`. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:124
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:118
msgid "The number of parallel jobs to run for neighbors search. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.cluster._optics.OPTICS
msgid "Attributes"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:131
msgid "**labels_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:129
msgid "Cluster labels for each point in the dataset given to fit(). Noisy samples and points which are not included in a leaf cluster of ``cluster_hierarchy_`` are labeled as -1."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:135
msgid "**reachability_**"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:134
msgid "Reachability distances per sample, indexed by object order. Use ``clust.reachability_[clust.ordering_]`` to access in cluster order."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:138
msgid "**ordering_**"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:138
msgid "The cluster ordered list of sample indices."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:143
msgid "**core_distances_**"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:141
msgid "Distance at which each sample becomes a core point, indexed by object order. Points which will never be core have a distance of inf. Use ``clust.core_distances_[clust.ordering_]`` to access in cluster order."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:147
msgid "**predecessor_**"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:146
msgid "Point that a sample was reached from, indexed by object order. Seed points have a predecessor of -1."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:161
msgid "**cluster_hierarchy_**"
msgstr ""

#: of
msgid "ndarray of shape (n_clusters, 2)"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:150
msgid "The list of clusters in the form of ``[start, end]`` in each row, with all indices inclusive. The clusters are ordered according to ``(end, -start)`` (ascending) so that larger clusters encompassing smaller clusters come after those smaller ones. Since ``labels_`` does not reflect the hierarchy, usually ``len(cluster_hierarchy_) > np.unique(optics.labels_)``. Please also note that these indices are of the ``ordering_``, i.e. ``X[ordering_][start:end + 1]`` form a cluster. Only available when ``cluster_method='xi'``."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:166
msgid ":obj:`DBSCAN`"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:167
msgid "A similar clustering for a specified neighborhood radius (eps). Our implementation is optimized for runtime."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:172
msgid "References"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:173
msgid "Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel, and Jörg Sander. \"OPTICS: ordering points to identify the clustering structure.\" ACM SIGMOD Record 28, no. 2 (1999): 49-60."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:177
msgid "Schubert, Erich, Michael Gertz. \"Improving the Cluster Structure Extracted from OPTICS Plots.\" Proc. of the Conference \"Lernen, Wissen, Daten, Analysen\" (LWDA) (2018): 318-329."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:183
msgid "[R2c55e37003fe-1]_, [R2c55e37003fe-2]_"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:186
msgid "Examples"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:196
msgid "Methods"
msgstr ""

#: of sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid ":obj:`fit <sklearn.cluster.OPTICS.fit>`\\"
msgstr ""

#: of sklearn.cluster._optics.OPTICS.fit:2
#: sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid "Perform OPTICS clustering."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid ":obj:`fit_predict <sklearn.cluster.OPTICS.fit_predict>`\\"
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:2
#: sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid "Perform clustering on `X` and returns cluster labels."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid ":obj:`get_params <sklearn.cluster.OPTICS.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid ":obj:`set_params <sklearn.cluster.OPTICS.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.cluster._optics.OPTICS:203:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.cluster._optics.OPTICS.fit:4
msgid "Extracts an ordered list of points and reachability distances, and performs initial clustering using ``max_eps`` distance specified at OPTICS object instantiation."
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:8
#: sklearn.cluster._optics.OPTICS.fit:12
msgid "**X**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features), or                 (n_samples, n_samples) if metric=’precomputed’"
msgstr ""

#: of sklearn.cluster._optics.OPTICS.fit:11
msgid "A feature array, or array of distances between samples if metric='precomputed'."
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:11
#: sklearn.cluster._optics.OPTICS.fit:15
msgid "**y**"
msgstr ""

#: of
msgid "ignored"
msgstr ""

#: of sklearn.cluster._optics.OPTICS.fit:15
msgid "Ignored."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClusterMixin.fit_predict
#: sklearn.cluster._optics.OPTICS.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.cluster._optics.OPTICS.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "instance of OPTICS"
msgstr ""

#: of sklearn.cluster._optics.OPTICS.fit:20
msgid "The instance."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:8
msgid "Input data."
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:11
msgid "Not used, present for API consistency by convention."
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:27
msgid "**labels**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,), dtype=np.int64"
msgstr ""

#: of sklearn.base.ClusterMixin.fit_predict:16
msgid "Cluster labels."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

