msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-13 01:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.VotingClassifier.po\n"
"X-Crowdin-File-ID: 5848\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.VotingClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.VotingClassifier"
msgstr ":mod:`sklearn.ensemble`.VotingClassifier"

#: of sklearn.ensemble._voting.VotingClassifier:2
msgid "Soft Voting/Majority Rule classifier for unfitted estimators."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:4
msgid "Read more in the :ref:`User Guide <voting_classifier>`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.VotingClassifier.predict_proba
#: sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params
#: sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params
#: sklearn.ensemble._voting.VotingClassifier
#: sklearn.ensemble._voting.VotingClassifier.fit
#: sklearn.ensemble._voting.VotingClassifier.predict
#: sklearn.ensemble._voting.VotingClassifier.transform
#: sklearn.ensemble._voting._BaseVoting.fit_transform
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:18
msgid "**estimators**"
msgstr ""

#: of
msgid "list of (str, estimator) tuples"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:11
msgid "Invoking the ``fit`` method on the ``VotingClassifier`` will fit clones of those original estimators that will be stored in the class attribute ``self.estimators_``. An estimator can be set to ``'drop'`` using ``set_params``."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:16
msgid "``'drop'`` is accepted. Using None was deprecated in 0.22 and support was removed in 0.24."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:24
msgid "**voting**"
msgstr ""

#: of
msgid "{'hard', 'soft'}, default='hard'"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:21
msgid "If 'hard', uses predicted class labels for majority rule voting. Else if 'soft', predicts the class label based on the argmax of the sums of the predicted probabilities, which is recommended for an ensemble of well-calibrated classifiers."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:29
msgid "**weights**"
msgstr ""

#: of
msgid "array-like of shape (n_classifiers,), default=None"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:27
msgid "Sequence of weights (`float` or `int`) to weight the occurrences of predicted class labels (`hard` voting) or class probabilities before averaging (`soft` voting). Uses uniform weights if `None`."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:37
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:32
msgid "The number of jobs to run in parallel for ``fit``. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:44
msgid "**flatten_transform**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:40
msgid "Affects shape of transform output only when voting='soft' If voting='soft' and flatten_transform=True, transform method returns matrix with shape (n_samples, n_classifiers * n_classes). If flatten_transform=False, it returns (n_classifiers, n_samples, n_classes)."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:53
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:47
msgid "If True, the time elapsed while fitting will be printed as it is completed."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:59
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of classifiers"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:58
msgid "The collection of fitted sub-estimators as defined in ``estimators`` that are not 'drop'."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:64
msgid "**named_estimators_** : :class:`~sklearn.utils.Bunch`"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:63
msgid "Bunch"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:62
msgid "Attribute to access any fitted sub-estimators by name."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:70
msgid "**classes_**"
msgstr ""

#: of
msgid "array-like of shape (n_predictions,)"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:67
msgid "The classes labels."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:75
msgid ":obj:`VotingRegressor`"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:76
msgid "Prediction voting regressor."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:82
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:117
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.VotingClassifier.fit>`\\"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.fit:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Fit the estimators."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.ensemble.VotingClassifier.fit_transform>`\\"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
#: sklearn.ensemble._voting._BaseVoting.fit_transform:2
msgid "Return class labels or probabilities for each estimator."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.VotingClassifier.get_params>`\\"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Get the parameters of an estimator from the ensemble."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.VotingClassifier.predict>`\\"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.predict:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Predict class labels for X."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.VotingClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.VotingClassifier.set_params>`\\"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Set the parameters of an estimator from the ensemble."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid ":obj:`transform <sklearn.ensemble.VotingClassifier.transform>`\\"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:2
#: sklearn.ensemble._voting.VotingClassifier:127:<autosummary>:1
msgid "Return class labels or probabilities for X for each estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble.VotingClassifier.predict_proba:8
#: sklearn.ensemble._voting.VotingClassifier.fit:9
#: sklearn.ensemble._voting.VotingClassifier.predict:8
#: sklearn.ensemble._voting.VotingClassifier.transform:9
#: sklearn.ensemble._voting._BaseVoting.fit_transform:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.fit:8
#: sklearn.ensemble._voting.VotingClassifier.transform:8
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._voting.VotingClassifier.fit:12
#: sklearn.ensemble._voting._BaseVoting.fit_transform:12
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.fit:12
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._voting.VotingClassifier.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.fit:15
msgid "Sample weights. If None, then samples are equally weighted. Note that this is supported only if all underlying estimators support sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.VotingClassifier.predict_proba
#: sklearn.ensemble._voting.VotingClassifier.fit
#: sklearn.ensemble._voting.VotingClassifier.predict
#: sklearn.ensemble._voting.VotingClassifier.transform
#: sklearn.ensemble._voting._BaseVoting.fit_transform
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.fit:35
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:4
msgid "Return predictions for X for each estimator."
msgstr ""

#: of
msgid "{array-like, sparse matrix, dataframe} of shape                 (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:9
msgid "Input samples"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:12
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:15
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:15
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:31
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.ensemble._voting._BaseVoting.fit_transform:20
msgid "Transformed array."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:4
msgid "Returns the parameters given in the constructor as well as the estimators contained within the `estimators` parameter."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:23
msgid "**deep**"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:10
msgid "Setting it to True gets the various estimators and the parameters of the estimators as well."
msgstr ""

#: of sklearn.ensemble.VotingClassifier.predict_proba:8
#: sklearn.ensemble._voting.VotingClassifier.predict:8
msgid "The input samples."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.predict:24
msgid "**maj**"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.predict:13
msgid "Predicted class labels."
msgstr ""

#: of sklearn.ensemble.VotingClassifier.predict_proba:2
msgid "Compute probabilities of possible outcomes for samples in X."
msgstr ""

#: of sklearn.ensemble.VotingClassifier.predict_proba:24
msgid "**avg**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble.VotingClassifier.predict_proba:13
msgid "Weighted average probability for each class per sample."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:4
msgid "Valid parameter keys can be listed with `get_params()`. Note that you can directly set the parameters of the estimators contained in `estimators`."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:27
msgid "**\\*\\*params**"
msgstr ""

#: of
msgid "keyword arguments"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:11
msgid "Specific parameters using e.g. `set_params(parameter_name=new_value)`. In addition, to setting the parameters of the estimator, the individual estimator of the estimators can also be set, or can be removed by setting them to 'drop'."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:33
msgid "probabilities_or_labels"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:16
msgid "If `voting='soft'` and `flatten_transform=True`:"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:15
msgid "returns ndarray of shape (n_classifiers, n_samples * n_classes), being class probabilities calculated by each classifier."
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:18
msgid "If `voting='soft' and `flatten_transform=False`:"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:19
msgid "ndarray of shape (n_classifiers, n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:33
msgid "If `voting='hard'`:"
msgstr ""

#: of sklearn.ensemble._voting.VotingClassifier.transform:21
msgid "ndarray of shape (n_samples, n_classifiers), being class labels predicted by each classifier."
msgstr ""

