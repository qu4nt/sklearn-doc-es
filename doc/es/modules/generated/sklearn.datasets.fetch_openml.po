msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: 2021-05-06 23:07\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.datasets.fetch_openml.po\n"
"X-Crowdin-File-ID: 4874\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.datasets.fetch_openml.rst:2
msgid ":mod:`sklearn.datasets`.fetch_openml"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:2
msgid "Fetch dataset from openml by name or dataset id."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:4
msgid "Datasets are uniquely identified by either an integer ID or by a combination of name and version (i.e. there might be multiple versions of the 'iris' dataset). Please give either name or data_id (not both). In case a name is given, a version can also be provided."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:10
msgid "Read more in the :ref:`User Guide <openml>`."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:14
#: sklearn.datasets._openml.fetch_openml:104
msgid "EXPERIMENTAL"
msgstr "EXPERIMENTAL"

#: of sklearn.datasets._openml.fetch_openml:16
msgid "The API is experimental (particularly the return value structure), and might have small backward-incompatible changes without notice or warning in future releases."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml
msgid "Parameters"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:24
msgid "**name**"
msgstr ""

#: of
msgid "str, default=None"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:23
msgid "String identifier of the dataset. Note that OpenML can have multiple datasets with the same name."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:31
msgid "**version**"
msgstr "**versi√≥n**"

#: of
msgid "int or 'active', default='active'"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:27
msgid "Version of the dataset. Can only be provided if also ``name`` is given. If 'active' the oldest version that's still active is used. Since there may be more than one active version of a dataset, and those versions may fundamentally be different from one another, setting an exact version is highly recommended."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:36
msgid "**data_id**"
msgstr ""

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.datasets._openml.fetch_openml:34
msgid "OpenML ID of the dataset. The most specific way of retrieving a dataset. If data_id is not given, name (and potential version) are used to obtain a dataset."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:40
msgid "**data_home**"
msgstr "**data_home**"

#: of sklearn.datasets._openml.fetch_openml:39
msgid "Specify another download and cache folder for the data sets. By default all scikit-learn data is stored in '~/scikit_learn_data' subfolders."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:48
msgid "**target_column**"
msgstr "**target_column**"

#: of
msgid "str, list or None, default='default-target'"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:43
msgid "Specify the column name in the data to use as target. If 'default-target', the standard target column a stored on the server is used. If ``None``, all columns are returned as data and the target is ``None``. If list (of strings), all columns with these names are returned as multi-target (Note: not all scikit-learn classifiers can handle all types of multi-output combinations)"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:51
msgid "**cache**"
msgstr "**cache**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.datasets._openml.fetch_openml:51
msgid "Whether to cache downloaded datasets using joblib."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:55
msgid "**return_X_y**"
msgstr "**return_X_y**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.datasets._openml.fetch_openml:54
msgid "If True, returns ``(data, target)`` instead of a Bunch object. See below for more information about the `data` and `target` objects."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:71
msgid "**as_frame**"
msgstr "**as_frame**"

#: of
msgid "bool or 'auto', default='auto'"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:58
msgid "If True, the data is a pandas DataFrame including columns with appropriate dtypes (numeric, string or categorical). The target is a pandas DataFrame or Series depending on the number of target_columns. The Bunch will contain a ``frame`` attribute with the target and the data. If ``return_X_y`` is True, then ``(data, target)`` will be pandas DataFrames or Series as describe above."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:65
msgid "If as_frame is 'auto', the data and target will be converted to DataFrame or Series as if as_frame is set to True, unless the dataset is stored in sparse format."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:69
msgid "The default value of `as_frame` changed from `False` to `'auto'` in 0.24."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml
msgid "Returns"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:101
msgid "**data** : :class:`~sklearn.utils.Bunch`"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:100
msgid "Bunch"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:76
msgid "Dictionary-like object, with the following attributes."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:78
msgid "data"
msgstr ""

#: of
msgid "np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:79
msgid "The feature matrix. Categorical features are encoded as ordinals."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:82
msgid "target"
msgstr "objetivo"

#: of
msgid "np.array, pandas Series or DataFrame"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:81
msgid "The regression target or classification labels, if applicable. Dtype is float if numeric, and object if categorical. If ``as_frame`` is True, ``target`` is a pandas object."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:84
msgid "DESCR"
msgstr "DESCR"

#: of
msgid "str"
msgstr "str"

#: of sklearn.datasets._openml.fetch_openml:85
msgid "The full description of the dataset"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:86
msgid "feature_names"
msgstr ""

#: of
msgid "list"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:87
msgid "The names of the dataset columns"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:89
msgid "target_names: list"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:89
msgid "The names of the target columns"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:95
msgid "categories"
msgstr ""

#: of
msgid "dict or None"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:94
msgid "Maps each categorical feature name to a list of values, such that the value encoded as i is ith in the list. If ``as_frame`` is True, this is None."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:97
msgid "details"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:98
msgid "More metadata from OpenML"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:101
msgid "frame"
msgstr ""

#: of
msgid "pandas DataFrame"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:100
msgid "Only present when `as_frame=True`. DataFrame with ``data`` and ``target``."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:123
msgid "**(data, target)** : tuple if ``return_X_y`` is True"
msgstr ""

#: of
msgid "tuple if"
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:106
msgid "This interface is **experimental** and subsequent releases may change attributes without notice (although there should only be minor changes to ``data`` and ``target``)."
msgstr ""

#: of sklearn.datasets._openml.fetch_openml:110
msgid "Missing values in the 'data' are represented as NaN's. Missing values in 'target' are represented as NaN's (numerical target) or None (categorical target)"
msgstr ""

#: ../modules/generated/sklearn.datasets.fetch_openml.examples:4
msgid "Examples using ``sklearn.datasets.fetch_openml``"
msgstr ""

#: ../modules/generated/sklearn.datasets.fetch_openml.examples:15
#: ../modules/generated/sklearn.datasets.fetch_openml.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"

#: ../modules/generated/sklearn.datasets.fetch_openml.examples:34
#: ../modules/generated/sklearn.datasets.fetch_openml.examples:42
msgid ":ref:`sphx_glr_auto_examples_neighbors_approximate_nearest_neighbors.py`"
msgstr ":ref:`sphx_glr_auto_examples_neighbors_approximate_nearest_neighbors.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_co2.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sparse_logistic_regression_mnist.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sgd_early_stopping.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_display_object_visualization.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_multioutput_plot_classifier_chain_yeast.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neural_networks_plot_mnist_filters.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_transformed_target.py`"
#~ msgstr ""

