msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.svm.NuSVC.po\n"
"X-Crowdin-File-ID: 3750\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.svm.NuSVC.rst:2
msgid ":mod:`sklearn.svm`.NuSVC"
msgstr ""

#: of sklearn.svm._classes.NuSVC:2
msgid "Nu-Support Vector Classification."
msgstr ""

#: of sklearn.svm._classes.NuSVC:4
msgid "Similar to SVC but uses a parameter to control the number of support vectors."
msgstr ""

#: of sklearn.svm._classes.NuSVC:7
msgid "The implementation is based on libsvm."
msgstr ""

#: of sklearn.svm._classes.NuSVC:9
msgid "Read more in the :ref:`User Guide <svm_classification>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.svm.NuSVC.predict_log_proba sklearn.svm.NuSVC.predict_proba
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseSVC.decision_function
#: sklearn.svm._base.BaseSVC.predict sklearn.svm._classes.NuSVC
msgid "Parameters"
msgstr ""

#: of sklearn.svm._classes.NuSVC:16
msgid "**nu**"
msgstr ""

#: of
msgid "float, default=0.5"
msgstr ""

#: of sklearn.svm._classes.NuSVC:14
msgid "An upper bound on the fraction of margin errors (see :ref:`User Guide <nu_svc>`) and a lower bound of the fraction of support vectors. Should be in the interval (0, 1]."
msgstr ""

#: of sklearn.svm._classes.NuSVC:23
msgid "**kernel**"
msgstr ""

#: of
msgid "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'}, default='rbf'"
msgstr ""

#: of sklearn.svm._classes.NuSVC:19
msgid "Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix."
msgstr ""

#: of sklearn.svm._classes.NuSVC:27
msgid "**degree**"
msgstr ""

#: of
msgid "int, default=3"
msgstr ""

#: of sklearn.svm._classes.NuSVC:26
msgid "Degree of the polynomial kernel function ('poly'). Ignored by all other kernels."
msgstr ""

#: of sklearn.svm._classes.NuSVC:37
msgid "**gamma**"
msgstr ""

#: of
msgid "{'scale', 'auto'} or float, default='scale'"
msgstr ""

#: of sklearn.svm._classes.NuSVC:30
msgid "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'."
msgstr ""

#: of sklearn.svm._classes.NuSVC:32
msgid "if ``gamma='scale'`` (default) is passed then it uses 1 / (n_features * X.var()) as value of gamma,"
msgstr ""

#: of sklearn.svm._classes.NuSVC:34
msgid "if 'auto', uses 1 / n_features."
msgstr ""

#: of sklearn.svm._classes.NuSVC:36
msgid "The default value of ``gamma`` changed from 'auto' to 'scale'."
msgstr ""

#: of sklearn.svm._classes.NuSVC:41
msgid "**coef0**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.svm._classes.NuSVC:40
msgid "Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'."
msgstr ""

#: of sklearn.svm._classes.NuSVC:45
msgid "**shrinking**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.svm._classes.NuSVC:44
msgid "Whether to use the shrinking heuristic. See the :ref:`User Guide <shrinking_svm>`."
msgstr ""

#: of sklearn.svm._classes.NuSVC:51
msgid "**probability**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.svm._classes.NuSVC:48
msgid "Whether to enable probability estimates. This must be enabled prior to calling `fit`, will slow down that method as it internally uses 5-fold cross-validation, and `predict_proba` may be inconsistent with `predict`. Read more in the :ref:`User Guide <scores_probabilities>`."
msgstr ""

#: of sklearn.svm._classes.NuSVC:54
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.svm._classes.NuSVC:54
msgid "Tolerance for stopping criterion."
msgstr ""

#: of sklearn.svm._classes.NuSVC:57
msgid "**cache_size**"
msgstr ""

#: of
msgid "float, default=200"
msgstr ""

#: of sklearn.svm._classes.NuSVC:57
msgid "Specify the size of the kernel cache (in MB)."
msgstr ""

#: of sklearn.svm._classes.NuSVC:64
msgid "**class_weight**"
msgstr ""

#: of
msgid "{dict, 'balanced'}, default=None"
msgstr ""

#: of sklearn.svm._classes.NuSVC:60
msgid "Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies as ``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: of sklearn.svm._classes.NuSVC:69
msgid "**verbose**"
msgstr ""

#: of sklearn.svm._classes.NuSVC:67
msgid "Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context."
msgstr ""

#: of sklearn.svm._classes.NuSVC:72
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=-1"
msgstr ""

#: of sklearn.svm._classes.NuSVC:72
msgid "Hard limit on iterations within solver, or -1 for no limit."
msgstr ""

#: of sklearn.svm._classes.NuSVC:89
msgid "**decision_function_shape**"
msgstr ""

#: of
msgid "{'ovo', 'ovr'}, default='ovr'"
msgstr ""

#: of sklearn.svm._classes.NuSVC:75
msgid "Whether to return a one-vs-rest ('ovr') decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one ('ovo') decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one ('ovo') is always used as multi-class strategy. The parameter is ignored for binary classification."
msgstr ""

#: of sklearn.svm._classes.NuSVC:82
msgid "decision_function_shape is 'ovr' by default."
msgstr ""

#: of sklearn.svm._classes.NuSVC:85
msgid "*decision_function_shape='ovr'* is recommended."
msgstr ""

#: of sklearn.svm._classes.NuSVC:88
msgid "Deprecated *decision_function_shape='ovo' and None*."
msgstr ""

#: of sklearn.svm._classes.NuSVC:98
msgid "**break_ties**"
msgstr ""

#: of sklearn.svm._classes.NuSVC:92
msgid "If true, ``decision_function_shape='ovr'``, and number of classes > 2, :term:`predict` will break ties according to the confidence values of :term:`decision_function`; otherwise the first class among the tied classes is returned. Please note that breaking ties comes at a relatively high computational cost compared to a simple predict."
msgstr ""

#: of sklearn.svm._classes.NuSVC:107
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.svm._classes.NuSVC:101
msgid "Controls the pseudo random number generation for shuffling the data for probability estimates. Ignored when `probability` is False. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.svm._classes.NuSVC
msgid "Attributes"
msgstr ""

#: of sklearn.svm._classes.NuSVC:113
msgid "**class_weight_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:112
msgid "Multipliers of parameter C of each class. Computed based on the ``class_weight`` parameter."
msgstr ""

#: of sklearn.svm._classes.NuSVC:116
msgid "**classes_**"
msgstr ""

#: of sklearn.svm._classes.NuSVC:116
msgid "The unique classes labels."
msgstr ""

#: of sklearn.svm._classes.NuSVC:123
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes * (n_classes -1) / 2, n_features)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:119
msgid "Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel."
msgstr ""

#: of sklearn.svm._classes.NuSVC:122
msgid "`coef_` is readonly property derived from `dual_coef_` and `support_vectors_`."
msgstr ""

#: of sklearn.svm._classes.NuSVC:132
msgid "**dual_coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes - 1, n_SV)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:126
msgid "Dual coefficients of the support vector in the decision function (see :ref:`sgd_mathematical_formulation`), multiplied by their targets. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial. See the :ref:`multi-class section of the User Guide <svm_multi_class>` for details."
msgstr ""

#: of sklearn.svm._classes.NuSVC:135 sklearn.svm._classes.NuSVC:150
msgid "**fit_status_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.svm._classes.NuSVC:135 sklearn.svm._classes.NuSVC:150
msgid "0 if correctly fitted, 1 if the algorithm did not converge."
msgstr ""

#: of sklearn.svm._classes.NuSVC:138
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes * (n_classes - 1) / 2,)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:138
msgid "Constants in decision function."
msgstr ""

#: of sklearn.svm._classes.NuSVC:141
msgid "**support_**"
msgstr ""

#: of
msgid "ndarray of shape (n_SV,)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:141
msgid "Indices of support vectors."
msgstr ""

#: of sklearn.svm._classes.NuSVC:144
msgid "**support_vectors_**"
msgstr ""

#: of
msgid "ndarray of shape (n_SV, n_features)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:144
msgid "Support vectors."
msgstr ""

#: of sklearn.svm._classes.NuSVC:147
msgid "**n_support_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,), dtype=int32"
msgstr ""

#: of sklearn.svm._classes.NuSVC:147
msgid "Number of support vectors for each class."
msgstr ""

#: of sklearn.svm._classes.NuSVC:153
msgid "**probA_**"
msgstr ""

#: of sklearn.svm._classes.NuSVC:163
msgid "**probB_**"
msgstr ""

#: of sklearn.svm._classes.NuSVC:156
msgid "If `probability=True`, it corresponds to the parameters learned in Platt scaling to produce probability estimates from decision values. If `probability=False`, it's an empty array. Platt scaling uses the logistic function ``1 / (1 + exp(decision_value * probA_ + probB_))`` where ``probA_`` and ``probB_`` are learned from the dataset [R9709ce4a60d3-2]_. For more information on the multiclass case and training procedure see section 8 of [R9709ce4a60d3-1]_."
msgstr ""

#: of sklearn.svm._classes.NuSVC:169
msgid "**shape_fit_**"
msgstr ""

#: of
msgid "tuple of int of shape (n_dimensions_of_X,)"
msgstr ""

#: of sklearn.svm._classes.NuSVC:166
msgid "Array dimensions of training vector ``X``."
msgstr ""

#: of sklearn.svm._classes.NuSVC:174
msgid ":obj:`SVC`"
msgstr ""

#: of sklearn.svm._classes.NuSVC:175
msgid "Support Vector Machine for classification using libsvm."
msgstr ""

#: of sklearn.svm._classes.NuSVC:176
msgid ":obj:`LinearSVC`"
msgstr ""

#: of sklearn.svm._classes.NuSVC:177
msgid "Scalable linear Support Vector Machine for classification using liblinear."
msgstr ""

#: of sklearn.svm._classes.NuSVC:182
msgid "References"
msgstr ""

#: of sklearn.svm._classes.NuSVC:183
msgid "`LIBSVM: A Library for Support Vector Machines <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_"
msgstr ""

#: of sklearn.svm._classes.NuSVC:186
msgid "`Platt, John (1999). \"Probabilistic outputs for support vector machines and comparison to regularizedlikelihood methods.\" <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.1639>`_"
msgstr ""

#: of sklearn.svm._classes.NuSVC:192
msgid "[R9709ce4a60d3-1]_, [R9709ce4a60d3-2]_"
msgstr ""

#: of sklearn.svm._classes.NuSVC:195
msgid "Examples"
msgstr ""

#: of sklearn.svm._classes.NuSVC:209
msgid "Methods"
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`decision_function <sklearn.svm.NuSVC.decision_function>`\\"
msgstr ""

#: of sklearn.svm._base.BaseSVC.decision_function:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Evaluates the decision function for the samples in X."
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`fit <sklearn.svm.NuSVC.fit>`\\"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Fit the SVM model according to the given training data."
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`get_params <sklearn.svm.NuSVC.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`predict <sklearn.svm.NuSVC.predict>`\\"
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Perform classification on samples in X."
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`score <sklearn.svm.NuSVC.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid ":obj:`set_params <sklearn.svm.NuSVC.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.svm._classes.NuSVC:218:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.svm.NuSVC.predict_log_proba:11 sklearn.svm.NuSVC.predict_proba:11
#: sklearn.svm._base.BaseLibSVM.fit:11
#: sklearn.svm._base.BaseSVC.decision_function:8
#: sklearn.svm._base.BaseSVC.decision_function:23
#: sklearn.svm._base.BaseSVC.predict:10
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.svm.NuSVC.predict_log_proba sklearn.svm.NuSVC.predict_proba
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseSVC.decision_function
#: sklearn.svm._base.BaseSVC.predict
msgid "Returns"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes * (n_classes-1) / 2)"
msgstr ""

#: of sklearn.svm._base.BaseSVC.decision_function:13
msgid "Returns the decision function of the sample for each class in the model. If decision_function_shape='ovr', the shape is (n_samples, n_classes)."
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:28 sklearn.svm.NuSVC.predict_proba:28
#: sklearn.svm._base.BaseLibSVM.fit:34
#: sklearn.svm._base.BaseSVC.decision_function:26
msgid "Notes"
msgstr ""

#: of sklearn.svm._base.BaseSVC.decision_function:27
msgid "If decision_function_shape='ovo', the function values are proportional to the distance of the samples X to the separating hyperplane. If the exact distances are required, divide the function values by the norm of the weight vector (``coef_``). See also `this question <https://stats.stackexchange.com/questions/14876/ interpreting-distance-from-hyperplane-in-svm>`_ for further details. If decision_function_shape='ovr', the decision function is a monotonic transformation of ovo decision function."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:8
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14 sklearn.svm._base.BaseLibSVM.fit:15
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:14
msgid "Target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17 sklearn.svm._base.BaseLibSVM.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:18
msgid "Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.svm._base.BaseLibSVM.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:35
msgid "If X and y are not C-ordered and contiguous arrays of np.float64 and X is not a scipy.sparse.csr_matrix, X and/or y may be copied."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:38
msgid "If X is a dense array, then the other methods will not support sparse matrices as input."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:4
msgid "For an one-class model, +1 or -1 is returned."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)"
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:10 sklearn.svm.NuSVC.predict_proba:10
#: sklearn.svm._base.BaseSVC.predict:9
msgid "For kernel=\"precomputed\", the expected shape of X is (n_samples_test, n_samples_train)."
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:26
msgid "**y_pred**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:15
msgid "Class labels for samples in X."
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:2
msgid "Compute log probabilities of possible outcomes for samples in X."
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:4 sklearn.svm.NuSVC.predict_proba:4
msgid "The model need to have probability information computed at training time: fit with attribute `probability` set to True."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features) or                 (n_samples_test, n_samples_train)"
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:25 sklearn.svm.NuSVC.predict_proba:25
msgid "**T**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:16
msgid "Returns the log-probabilities of the sample for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.svm.NuSVC.predict_log_proba:29 sklearn.svm.NuSVC.predict_proba:29
msgid "The probability model is created using cross validation, so the results can be slightly different than those obtained by predict. Also, it will produce meaningless results on very small datasets."
msgstr ""

#: of sklearn.svm.NuSVC.predict_proba:2
msgid "Compute probabilities of possible outcomes for samples in X."
msgstr ""

#: of sklearn.svm.NuSVC.predict_proba:16
msgid "Returns the probability of the sample for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.svm.NuSVC.examples:4
msgid "Examples using ``sklearn.svm.NuSVC``"
msgstr ""

#: ../modules/generated/sklearn.svm.NuSVC.examples:15
#: ../modules/generated/sklearn.svm.NuSVC.examples:23
msgid ":ref:`sphx_glr_auto_examples_svm_plot_svm_nonlinear.py`"
msgstr ""

