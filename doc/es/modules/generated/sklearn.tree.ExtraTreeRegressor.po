msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-21 22:57\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.tree.ExtraTreeRegressor.po\n"
"X-Crowdin-File-ID: 5510\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.tree.ExtraTreeRegressor.rst:2
msgid ":mod:`sklearn.tree`.ExtraTreeRegressor"
msgstr ":mod:`sklearn.tree`.ExtraTreeRegressor"

#: of sklearn.tree._classes.ExtraTreeRegressor:2
msgid "An extremely randomized tree regressor."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:4
msgid "Extra-trees differ from classic decision trees in the way they are built. When looking for the best split to separate the samples of a node into two groups, random splits are drawn for each of the `max_features` randomly selected features and the best split among those is chosen. When `max_features` is set 1, this amounts to building a totally random decision tree."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:11
msgid "Warning: Extra-trees should only be used within ensemble methods."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:13
msgid "Read more in the :ref:`User Guide <tree>`."
msgstr "Lee más en el :ref:`Manual de usuario <tree>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.tree._classes.BaseDecisionTree.apply
#: sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path
#: sklearn.tree._classes.BaseDecisionTree.decision_path
#: sklearn.tree._classes.BaseDecisionTree.predict
#: sklearn.tree._classes.DecisionTreeRegressor.fit
#: sklearn.tree._classes.ExtraTreeRegressor
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.tree._classes.ExtraTreeRegressor:27
msgid "**criterion**"
msgstr "**criterion**"

#: of
msgid "{\"mse\", \"friedman_mse\", \"mae\"}, default=\"mse\""
msgstr "{\"mse\", \"friedman_mse\", \"mae\"}, default=\"mse\""

#: of sklearn.tree._classes.ExtraTreeRegressor:18
msgid "The function to measure the quality of a split. Supported criteria are \"mse\" for the mean squared error, which is equal to variance reduction as feature selection criterion and \"mae\" for the mean absolute error."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:23
msgid "Mean Absolute Error (MAE) criterion."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:26
msgid "Poisson deviance criterion."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:32
msgid "**splitter**"
msgstr "**splitter**"

#: of
msgid "{\"random\", \"best\"}, default=\"random\""
msgstr "{\"random\", \"best\"}, default=\"random\""

#: of sklearn.tree._classes.ExtraTreeRegressor:30
msgid "The strategy used to choose the split at each node. Supported strategies are \"best\" to choose the best split and \"random\" to choose the best random split."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:37
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:35
msgid "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:48
msgid "**min_samples_split**"
msgstr "**min_samples_split**"

#: of
msgid "int or float, default=2"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:40
msgid "The minimum number of samples required to split an internal node:"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:42
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:43
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:47
#: sklearn.tree._classes.ExtraTreeRegressor:62
msgid "Added float values for fractions."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:63
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int or float, default=1"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:51
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:57
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:58
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:68
msgid "**min_weight_fraction_leaf**"
msgstr "**min_weight_fraction_leaf**"

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:66
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:84
msgid "**max_features**"
msgstr "**max_features**"

#: of
msgid "int, float, {\"auto\", \"sqrt\", \"log2\"} or None, default=\"auto\""
msgstr "int, float, {\"auto\", \"sqrt\", \"log2\"} o None, default=\"auto\""

#: of sklearn.tree._classes.ExtraTreeRegressor:71
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:73
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:74
msgid "If float, then `max_features` is a fraction and `int(max_features * n_features)` features are considered at each split."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:77
msgid "If \"auto\", then `max_features=n_features`."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:78
msgid "If \"sqrt\", then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:79
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:80
msgid "If None, then `max_features=n_features`."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:82
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:88
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:87
msgid "Used to pick randomly the `max_features` used at each split. See :term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:106
msgid "**min_impurity_decrease**"
msgstr "**min_impurity_decrease**"

#: of sklearn.tree._classes.ExtraTreeRegressor:91
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:94
msgid "The weighted impurity decrease equation is the following::"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:99
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:103
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:117
msgid "**min_impurity_split**"
msgstr "**min_impurity_split**"

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:109
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:112
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:122
msgid "**max_leaf_nodes**"
msgstr "**max_leaf_nodes**"

#: of sklearn.tree._classes.ExtraTreeRegressor:120
msgid "Grow a tree with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:133
msgid "**ccp_alpha**"
msgstr "**ccp_alpha**"

#: of
msgid "non-negative float, default=0.0"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:125
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:138
msgid "**max_features_**"
msgstr "**max_features_**"

#: of
msgid "int"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:138
msgid "The inferred value of max_features."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:141
msgid "**n_features_**"
msgstr "**n_features_**"

#: of sklearn.tree._classes.ExtraTreeRegressor:141
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:144
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ":obj:`feature_importances_ <feature_importances_>`"

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.tree.ExtraTreeRegressor.feature_importances_:2
#: sklearn.tree._classes.ExtraTreeRegressor:144
msgid "Return the feature importances."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:147
msgid "**n_outputs_**"
msgstr "**n_outputs_**"

#: of sklearn.tree._classes.ExtraTreeRegressor:147
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:156
msgid "**tree_**"
msgstr "**tree_**"

#: of
msgid "Tree instance"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:150
msgid "The underlying Tree object. Please refer to ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py` for basic usage of these attributes."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:161
msgid ":obj:`ExtraTreeClassifier`"
msgstr ":obj:`ExtraTreeClassifier`"

#: of sklearn.tree._classes.ExtraTreeRegressor:162
msgid "An extremely randomized tree classifier."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:163
msgid ":obj:`sklearn.ensemble.ExtraTreesClassifier`"
msgstr ":obj:`sklearn.ensemble.ExtraTreesClassifier`"

#: of sklearn.tree._classes.ExtraTreeRegressor:164
msgid "An extra-trees classifier."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:165
msgid ":obj:`sklearn.ensemble.ExtraTreesRegressor`"
msgstr ":obj:`sklearn.ensemble.ExtraTreesRegressor`"

#: of sklearn.tree._classes.ExtraTreeRegressor:166
msgid "An extra-trees regressor."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.tree._classes.ExtraTreeRegressor:170
msgid "Notes"
msgstr "Notas"

#: of sklearn.tree._classes.ExtraTreeRegressor:171
msgid "The default values for the parameters controlling the size of the trees (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:178
msgid "References"
msgstr "Referencias"

#: of sklearn.tree._classes.ExtraTreeRegressor:179
msgid "P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\", Machine Learning, 63(1), 3-42, 2006."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:184
msgid "[R4939d63d5a49-1]_"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:187
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.tree._classes.ExtraTreeRegressor:202
msgid "Methods"
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`apply <sklearn.tree.ExtraTreeRegressor.apply>`\\"
msgstr ":obj:`apply <sklearn.tree.ExtraTreeRegressor.apply>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.apply:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Return the index of the leaf that each sample is predicted as."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`cost_complexity_pruning_path <sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path>`\\"
msgstr ":obj:`cost_complexity_pruning_path <sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Compute the pruning path during Minimal Cost-Complexity Pruning."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`decision_path <sklearn.tree.ExtraTreeRegressor.decision_path>`\\"
msgstr ":obj:`decision_path <sklearn.tree.ExtraTreeRegressor.decision_path>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.decision_path:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Return the decision path in the tree."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`fit <sklearn.tree.ExtraTreeRegressor.fit>`\\"
msgstr ":obj:`fit <sklearn.tree.ExtraTreeRegressor.fit>`\\"

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Build a decision tree regressor from the training set (X, y)."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`get_depth <sklearn.tree.ExtraTreeRegressor.get_depth>`\\"
msgstr ":obj:`get_depth <sklearn.tree.ExtraTreeRegressor.get_depth>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.get_depth:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Return the depth of the decision tree."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`get_n_leaves <sklearn.tree.ExtraTreeRegressor.get_n_leaves>`\\"
msgstr ":obj:`get_n_leaves <sklearn.tree.ExtraTreeRegressor.get_n_leaves>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.get_n_leaves:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Return the number of leaves of the decision tree."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`get_params <sklearn.tree.ExtraTreeRegressor.get_params>`\\"
msgstr ":obj:`get_params <sklearn.tree.ExtraTreeRegressor.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`predict <sklearn.tree.ExtraTreeRegressor.predict>`\\"
msgstr ":obj:`predict <sklearn.tree.ExtraTreeRegressor.predict>`\\"

#: of sklearn.tree._classes.BaseDecisionTree.predict:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Predict class or regression value for X."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`score <sklearn.tree.ExtraTreeRegressor.score>`\\"
msgstr ":obj:`score <sklearn.tree.ExtraTreeRegressor.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid ":obj:`set_params <sklearn.tree.ExtraTreeRegressor.set_params>`\\"
msgstr ":obj:`set_params <sklearn.tree.ExtraTreeRegressor.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.tree._classes.ExtraTreeRegressor:215:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.tree._classes.BaseDecisionTree.apply:11
#: sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:12
#: sklearn.tree._classes.BaseDecisionTree.decision_path:11
#: sklearn.tree._classes.BaseDecisionTree.predict:13
#: sklearn.tree._classes.DecisionTreeRegressor.fit:10
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.tree._classes.BaseDecisionTree.apply:9
#: sklearn.tree._classes.BaseDecisionTree.decision_path:9
#: sklearn.tree._classes.BaseDecisionTree.predict:11
msgid "The input samples. Internally, it will be converted to ``dtype=np.float32`` and if a sparse matrix is provided to a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.apply:15
#: sklearn.tree._classes.BaseDecisionTree.decision_path:15
#: sklearn.tree._classes.BaseDecisionTree.predict:17
#: sklearn.tree._classes.DecisionTreeRegressor.fit:23
msgid "**check_input**"
msgstr "**check_input**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.tree._classes.BaseDecisionTree.apply:14
#: sklearn.tree._classes.BaseDecisionTree.decision_path:14
#: sklearn.tree._classes.BaseDecisionTree.predict:16
#: sklearn.tree._classes.DecisionTreeRegressor.fit:22
msgid "Allow to bypass several input checking. Don't use this parameter unless you know what you do."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.tree.ExtraTreeRegressor.feature_importances_
#: sklearn.tree._classes.BaseDecisionTree.apply
#: sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path
#: sklearn.tree._classes.BaseDecisionTree.decision_path
#: sklearn.tree._classes.BaseDecisionTree.get_depth
#: sklearn.tree._classes.BaseDecisionTree.get_n_leaves
#: sklearn.tree._classes.BaseDecisionTree.predict
#: sklearn.tree._classes.DecisionTreeRegressor.fit
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.tree._classes.BaseDecisionTree.apply:34
msgid "**X_leaves**"
msgstr "**X_leaves**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.apply:20
msgid "For each datapoint x in X, return the index of the leaf x ends up in. Leaves are numbered within ``[0; self.tree_.node_count)``, possibly with gaps in the numbering."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:4
msgid "See :ref:`minimal_cost_complexity_pruning` for details on the pruning process."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:10
#: sklearn.tree._classes.DecisionTreeRegressor.fit:8
msgid "The training input samples. Internally, it will be converted to ``dtype=np.float32`` and if a sparse matrix is provided to a sparse ``csc_matrix``."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:15
#: sklearn.tree._classes.BaseDecisionTree.predict:33
#: sklearn.tree._classes.DecisionTreeRegressor.fit:14
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:15
msgid "The target values (class labels) as integers or strings."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:22
#: sklearn.tree._classes.DecisionTreeRegressor.fit:19
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:18
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. Splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:45
msgid "**ccp_path** : :class:`~sklearn.utils.Bunch`"
msgstr "**ccp_path** : :class:`~sklearn.utils.Bunch`"

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:44
msgid "Bunch"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:27
msgid "Dictionary-like object, with the following attributes."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:30
msgid "ccp_alphas"
msgstr ""

#: of
msgid "ndarray"
msgstr "ndarray"

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:30
msgid "Effective alphas of subtree during pruning."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:45
msgid "impurities"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path:33
msgid "Sum of the impurities of the subtree leaves for the corresponding alpha value in ``ccp_alphas``."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.decision_path:32
msgid "**indicator**"
msgstr "**indicator**"

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.decision_path:20
msgid "Return a node indicator CSR matrix where non zero elements indicates that the samples goes through the nodes."
msgstr ""

#: of sklearn.tree.ExtraTreeRegressor.feature_importances_:4
msgid "The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature. It is also known as the Gini importance."
msgstr ""

#: of sklearn.tree.ExtraTreeRegressor.feature_importances_:8
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.tree.ExtraTreeRegressor.feature_importances_:28
msgid "**feature_importances_**"
msgstr "**feature_importances_**"

#: of sklearn.tree.ExtraTreeRegressor.feature_importances_:16
msgid "Normalized total reduction of criteria by feature (Gini importance)."
msgstr ""

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:13
msgid "The target values (real numbers). Use ``dtype=np.float64`` and ``order='C'`` for maximum efficiency."
msgstr ""

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node."
msgstr ""

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:29
msgid "**X_idx_sorted**"
msgstr "**X_idx_sorted**"

#: of
msgid "deprecated, default=\"deprecated\""
msgstr ""

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:26
msgid "This parameter is deprecated and has no effect. It will be removed in 1.1 (renaming of 0.26)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.tree._classes.DecisionTreeRegressor.fit:45
msgid "**self**"
msgstr "**self**"

#: of
msgid "DecisionTreeRegressor"
msgstr ""

#: of sklearn.tree._classes.DecisionTreeRegressor.fit:34
msgid "Fitted estimator."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.get_depth:4
msgid "The depth of a tree is the maximum distance between the root and any leaf."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.get_depth:22
msgid "**self.tree_.max_depth**"
msgstr "**self.tree_.max_depth**"

#: of sklearn.tree._classes.BaseDecisionTree.get_depth:11
msgid "The maximum depth of the tree."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.get_n_leaves:20
msgid "**self.tree_.n_leaves**"
msgstr "**self.tree_.n_leaves**"

#: of sklearn.tree._classes.BaseDecisionTree.get_n_leaves:9
msgid "Number of leaves."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.predict:4
msgid "For a classification model, the predicted class for each sample in X is returned. For a regression model, the predicted value based on X is returned."
msgstr ""

#: of sklearn.tree._classes.BaseDecisionTree.predict:22
msgid "The predicted classes, or the predict values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ":math:`R^2` of ``self.predict(X)`` wrt. `y`."

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

