msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-18 22:42\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.po\n"
"X-Crowdin-File-ID: 5902\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst:2
msgid ":mod:`sklearn.ensemble`.HistGradientBoostingRegressor"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:2
msgid "Histogram-based Gradient Boosting Regression Tree."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:4
msgid "This estimator is much faster than :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>` for big datasets (n_samples >= 10 000)."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:8
msgid "This estimator has native support for missing values (NaNs). During training, the tree grower learns at each split point whether samples with missing values should go to the left or right child, based on the potential gain. When predicting, samples with missing values are assigned to the left or right child consequently. If no missing values were encountered for a given feature during training, then samples with missing values are mapped to whichever child has the most samples."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:16
msgid "This implementation is inspired by `LightGBM <https://github.com/Microsoft/LightGBM>`_."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:21
msgid "This estimator is still **experimental** for now: the predictions and the API might change without any deprecation cycle. To use it, you need to explicitly import ``enable_hist_gradient_boosting``::"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:30
msgid "Read more in the :ref:`User Guide <histogram_based_gradient_boosting>`."
msgstr "Leer más en el :ref:`Manual de Usuario <histogram_based_gradient_boosting>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict
msgid "Parameters"
msgstr "Parámetros"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:44
msgid "**loss**"
msgstr ""

#: of
msgid "{'least_squares', 'least_absolute_deviation', 'poisson'},             default='least_squares'"
msgstr "{'least_squares', 'least_absolute_deviation', 'poisson'},             default='least_squares'"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:37
msgid "The loss function to use in the boosting process. Note that the \"least squares\" and \"poisson\" losses actually implement \"half least squares loss\" and \"half poisson deviance\" to simplify the computation of the gradient. Furthermore, \"poisson\" loss internally uses a log-link and requires ``y >= 0``"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:43
msgid "Added option 'poisson'."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:49
msgid "**learning_rate**"
msgstr "**learning_rate**"

#: of
msgid "float, default=0.1"
msgstr "float, default=0.1"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:47
msgid "The learning rate, also known as *shrinkage*. This is used as a multiplicative factor for the leaves values. Use ``1`` for no shrinkage."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:53
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:52
msgid "The maximum number of iterations of the boosting process, i.e. the maximum number of trees."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:57
msgid "**max_leaf_nodes**"
msgstr "**max_leaf_nodes**"

#: of
msgid "int or None, default=31"
msgstr "int o None, default=31"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:56
msgid "The maximum number of leaves for each tree. Must be strictly greater than 1. If None, there is no maximum limit."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:62
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int or None, default=None"
msgstr "int o None, default=None"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:60
msgid "The maximum depth of each tree. The depth of a tree is the number of edges to go from the root to the deepest leaf. Depth isn't constrained by default."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:67
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int, default=20"
msgstr "int, default=20"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:65
msgid "The minimum number of samples per leaf. For small datasets with less than a few hundred samples, it is recommended to lower this value since only very shallow trees would be built."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:71
msgid "**l2_regularization**"
msgstr "**l2_regularization**"

#: of
msgid "float, default=0"
msgstr "float, default=0"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:70
msgid "The L2 regularization parameter. Use ``0`` for no regularization (default)."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:79
msgid "**max_bins**"
msgstr "**max_bins**"

#: of
msgid "int, default=255"
msgstr "int, default=255"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:74
msgid "The maximum number of bins to use for non-missing values. Before training, each feature of the input array `X` is binned into integer-valued bins, which allows for a much faster training stage. Features with a small number of unique values may use less than ``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin is always reserved for missing values. Must be no larger than 255."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:87
msgid "**monotonic_cst**"
msgstr "**monotonic_cst**"

#: of
msgid "array-like of int of shape (n_features), default=None"
msgstr "array-like de int de forma (n_features), default=None"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:82
msgid "Indicates the monotonic constraint to enforce on each feature. -1, 1 and 0 respectively correspond to a negative constraint, positive constraint and no constraint. Read more in the :ref:`User Guide <monotonic_cst_gbdt>`."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:102
msgid "**categorical_features**"
msgstr "**categorical_features**"

#: of
msgid "array-like of {bool, int} of shape (n_features)             or shape (n_categorical_features,), default=None."
msgstr "array-like de {bool, int} de forma (n_features)             o forma (n_categorical_features,), default=None."

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:90
msgid "Indicates the categorical features."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:92
msgid "None : no feature will be considered categorical."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:93
msgid "boolean array-like : boolean mask indicating categorical features."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:94
msgid "integer array-like : integer indices indicating categorical features."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:97
msgid "For each categorical feature, there must be at most `max_bins` unique categories, and each categorical value must be in [0, max_bins -1]."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:100
msgid "Read more in the :ref:`User Guide <categorical_support_gbdt>`."
msgstr "Leer más en el :ref:`Manual de Usuario <categorical_support_gbdt>`."

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:108
msgid "**warm_start**"
msgstr "**warm_start**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:105
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble. For results to be valid, the estimator should be re-trained on the same data only. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:115
msgid "**early_stopping**"
msgstr "**early_stopping**"

#: of
msgid "'auto' or bool, default='auto'"
msgstr "'auto' o bool, default='auto'"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:111
msgid "If 'auto', early stopping is enabled if the sample size is larger than 10000. If True, early stopping is enabled, otherwise early stopping is disabled."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:122
msgid "**scoring**"
msgstr "**scoring**"

#: of
msgid "str or callable or None, default='loss'"
msgstr "str o callable o None, default='loss'"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:118
msgid "Scoring parameter to use for early stopping. It can be a single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`). If None, the estimator's default scorer is used. If ``scoring='loss'``, early stopping is checked w.r.t the loss value. Only used if early stopping is performed."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:127
msgid "**validation_fraction**"
msgstr "**validation_fraction**"

#: of
msgid "int or float or None, default=0.1"
msgstr "int o float o None, default=0.1"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:125
msgid "Proportion (or absolute size) of training data to set aside as validation data for early stopping. If None, early stopping is done on the training data. Only used if early stopping is performed."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:133
msgid "**n_iter_no_change**"
msgstr "**n_iter_no_change**"

#: of
msgid "int, default=10"
msgstr "int, default=10"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:130
msgid "Used to determine when to \"early stop\". The fitting process is stopped when none of the last ``n_iter_no_change`` scores are better than the ``n_iter_no_change - 1`` -th-to-last one, up to some tolerance. Only used if early stopping is performed."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:139
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float or None, default=1e-7"
msgstr "float o None, default=1e-7"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:136
msgid "The absolute tolerance to use when comparing scores during early stopping. The higher the tolerance, the more likely we are to early stop: higher tolerance means that it will be harder for subsequent iterations to be considered an improvement upon the reference score."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:143
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:142
msgid "The verbosity level. If not zero, print some information about the fitting process."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:153
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, instancia RandomState o None, default=None"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:146
msgid "Pseudo-random number generator to control the subsampling in the binning process, and the train/validation data split if early stopping is enabled. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor
msgid "Attributes"
msgstr "Atributos"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:158
msgid "**do_early_stopping_**"
msgstr "**do_early_stopping_**"

#: of
msgid "bool"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:158
msgid "Indicates whether early stopping is used during training."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:162
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "int"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:161
msgid "The number of iterations as selected by early stopping, depending on the `early_stopping` parameter. Otherwise it corresponds to max_iter."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:166
msgid "**n_trees_per_iteration_**"
msgstr "**n_trees_per_iteration_**"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:165
msgid "The number of tree that are built at each iteration. For regressors, this is always 1."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:173
msgid "**train_score_**"
msgstr "**train_score_**"

#: of
msgid "ndarray, shape (n_iter_+1,)"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:169
msgid "The scores at each iteration on the training data. The first entry is the score of the ensemble before the first iteration. Scores are computed according to the ``scoring`` parameter. If ``scoring`` is not 'loss', scores are computed on a subset of at most 10 000 samples. Empty if no early stopping."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:179
msgid "**validation_score_**"
msgstr "**validation_score_**"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:176
msgid "The scores at each iteration on the held-out validation data. The first entry is the score of the ensemble before the first iteration. Scores are computed according to the ``scoring`` parameter. Empty if no early stopping or if ``validation_fraction`` is None."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:189
msgid "**is_categorical_**"
msgstr "**is_categorical_**"

#: of
msgid "ndarray, shape (n_features, ) or None"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:182
msgid "Boolean mask for the categorical features. ``None`` if there are no categorical features."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:192
msgid "Examples"
msgstr "Ejemplos"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:203
msgid "Methods"
msgstr "Métodos"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.HistGradientBoostingRegressor.fit>`\\"
msgstr ":obj:`fit <sklearn.ensemble.HistGradientBoostingRegressor.fit>`\\"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Fit the gradient boosting model."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.HistGradientBoostingRegressor.get_params>`\\"
msgstr ":obj:`get_params <sklearn.ensemble.HistGradientBoostingRegressor.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.HistGradientBoostingRegressor.predict>`\\"
msgstr ":obj:`predict <sklearn.ensemble.HistGradientBoostingRegressor.predict>`\\"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Predict values for X."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.HistGradientBoostingRegressor.score>`\\"
msgstr ":obj:`score <sklearn.ensemble.HistGradientBoostingRegressor.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.HistGradientBoostingRegressor.set_params>`\\"
msgstr ":obj:`set_params <sklearn.ensemble.HistGradientBoostingRegressor.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid ":obj:`staged_predict <sklearn.ensemble.HistGradientBoostingRegressor.staged_predict>`\\"
msgstr ":obj:`staged_predict <sklearn.ensemble.HistGradientBoostingRegressor.staged_predict>`\\"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:2
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor:212:<autosummary>:1
msgid "Predict regression target for each iteration"
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:8
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict:8
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:13
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:8
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict:8
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:12
msgid "The input samples."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:11
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict:24
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:28
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:16
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,) default=None"
msgstr "array-like de forma (n_samples,) default=None"

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:14
msgid "Weights of training data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit:32
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr ""

#: of
msgid "ndarray, shape (n_samples,)"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict:13
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr "Notas"

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:4
msgid "This method allows monitoring (i.e. determine error on testing set) after each stage."
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict
msgid "Yields"
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples,)"
msgstr ""

#: of
#: sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict:18
msgid "The predicted values of the input samples, for each iteration."
msgstr ""

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:4
msgid "Examples using ``sklearn.ensemble.HistGradientBoostingRegressor``"
msgstr "Ejemplos utilizando ``sklearn.ensemble.HistGradientBoostingRegressor``"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:15
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:34
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:42
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:53
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:61
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:72
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:80
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:91
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:99
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"

#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:110
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:118
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:129
#: ../modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.examples:137
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_partial_dependence.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_partial_dependence.py`"

