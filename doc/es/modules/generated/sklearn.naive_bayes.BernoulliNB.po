msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-11 00:58\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.naive_bayes.BernoulliNB.po\n"
"X-Crowdin-File-ID: 5116\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.naive_bayes.BernoulliNB.rst:2
msgid ":mod:`sklearn.naive_bayes`.BernoulliNB"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:2
msgid "Naive Bayes classifier for multivariate Bernoulli models."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:4
msgid "Like MultinomialNB, this classifier is suitable for discrete data. The difference is that while MultinomialNB works with occurrence counts, BernoulliNB is designed for binary/boolean features."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:8
msgid "Read more in the :ref:`User Guide <bernoulli_naive_bayes>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.BernoulliNB sklearn.naive_bayes._BaseDiscreteNB.fit
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:14
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:13
msgid "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:18
msgid "**binarize**"
msgstr ""

#: of
msgid "float or None, default=0.0"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:17
msgid "Threshold for binarizing (mapping to booleans) of sample features. If None, input is presumed to already consist of binary vectors."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:22
msgid "**fit_prior**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:21
msgid "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:29
msgid "**class_prior**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:25
msgid "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB
msgid "Attributes"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:35
msgid "**class_count_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes)"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:34
msgid "Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:38
msgid "**class_log_prior_**"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:38
msgid "Log probability of each class (smoothed)."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:41
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:41
msgid "Class labels known to the classifier"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:45
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes, n_features)"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:44
msgid "Mirrors ``feature_log_prob_`` for interpreting `BernoulliNB` as a linear model."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:50
msgid "**feature_count_**"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:48
msgid "Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:53
msgid "**feature_log_prob_**"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:53
msgid "Empirical log probability of features given a class, P(x_i|y)."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:57
msgid "**intercept_**"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:56
msgid "Mirrors ``class_log_prior_`` for interpreting `BernoulliNB` as a linear model."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:65
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:60
msgid "Number of features of each sample."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:68
msgid "References"
msgstr "Referencias"

#: of sklearn.naive_bayes.BernoulliNB:69
msgid "C.D. Manning, P. Raghavan and H. Schuetze (2008). Introduction to Information Retrieval. Cambridge University Press, pp. 234-265. https://nlp.stanford.edu/IR-book/html/htmledition/the-bernoulli-model-1.html"
msgstr "C.D. Manning, P. Raghavan and H. Schuetze (2008). Introduction to Information Retrieval. Cambridge University Press, pp. 234-265. https://nlp.stanford.edu/IR-book/html/htmledition/the-bernoulli-model-1.html"

#: of sklearn.naive_bayes.BernoulliNB:73
msgid "A. McCallum and K. Nigam (1998). A comparison of event models for naive Bayes text classification. Proc. AAAI/ICML-98 Workshop on Learning for Text Categorization, pp. 41-48."
msgstr "A. McCallum and K. Nigam (1998). `A comparison of event models for Naive Bayes text classification. `_ Proc. AAAI/ICML-98 Workshop on Learning for Text Categorization, pp. 41-48."

#: of sklearn.naive_bayes.BernoulliNB:77
msgid "V. Metsis, I. Androutsopoulos and G. Paliouras (2006). Spam filtering with naive Bayes -- Which naive Bayes? 3rd Conf. on Email and Anti-Spam (CEAS)."
msgstr "V. Metsis, I. Androutsopoulos and G. Paliouras (2006). `Spam filtering with Naive Bayes -- Which Naive Bayes? `_ 3rd Conf. on Email and Anti-Spam (CEAS)."

#: of sklearn.naive_bayes.BernoulliNB:85
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.naive_bayes.BernoulliNB:98
msgid "Methods"
msgstr "Métodos"

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`fit <sklearn.naive_bayes.BernoulliNB.fit>`\\"
msgstr ":obj:`fit <sklearn.naive_bayes.BernoulliNB.fit>`\\"

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
#: sklearn.naive_bayes._BaseDiscreteNB.fit:2
msgid "Fit Naive Bayes classifier according to X, y"
msgstr "Ajustar el clasificador Naive Bayes según X, y"

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`get_params <sklearn.naive_bayes.BernoulliNB.get_params>`\\"
msgstr ":obj:`get_params <sklearn.naive_bayes.BernoulliNB.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.naive_bayes.BernoulliNB.partial_fit>`\\"
msgstr ":obj:`partial_fit <sklearn.naive_bayes.BernoulliNB.partial_fit>`\\"

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:2
msgid "Incremental fit on a batch of samples."
msgstr "Ajuste incremental en un lote de muestras."

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`predict <sklearn.naive_bayes.BernoulliNB.predict>`\\"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict:2
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.naive_bayes.BernoulliNB.predict_log_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_log_proba:2
msgid "Return log-probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.naive_bayes.BernoulliNB.predict_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_proba:2
msgid "Return probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`score <sklearn.naive_bayes.BernoulliNB.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid ":obj:`set_params <sklearn.naive_bayes.BernoulliNB.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.naive_bayes.BernoulliNB:109:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.naive_bayes._BaseDiscreteNB.fit:9
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:19
#: sklearn.naive_bayes._BaseNB.predict:8
#: sklearn.naive_bayes._BaseNB.predict_log_proba:8
#: sklearn.naive_bayes._BaseNB.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:8
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:18
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.naive_bayes._BaseDiscreteNB.fit:12
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:22
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:12
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:22
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.naive_bayes._BaseDiscreteNB.fit:15
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:31
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:15
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:31
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes._BaseDiscreteNB.fit
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.naive_bayes._BaseDiscreteNB.fit:31
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:47
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:4
msgid "This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:8
msgid "This is especially useful when the whole dataset is too big to fit in memory at once."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:11
msgid "This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:28
msgid "**classes**"
msgstr ""

#: of
msgid "array-like of shape (n_classes), default=None"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:25
msgid "List of all the classes that can possibly appear in the y vector."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:27
msgid "Must be provided at the first call to partial_fit, can be omitted in subsequent calls."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:24
#: sklearn.naive_bayes._BaseNB.predict_log_proba:26
#: sklearn.naive_bayes._BaseNB.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:13
msgid "Predicted target values for X"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_log_proba:13
msgid "Returns the log-probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.BernoulliNB.examples:4
msgid "Examples using ``sklearn.naive_bayes.BernoulliNB``"
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.BernoulliNB.examples:15
#: ../modules/generated/sklearn.naive_bayes.BernoulliNB.examples:23
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
msgstr ""

