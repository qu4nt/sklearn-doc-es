msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-26 21:35\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.po\n"
"X-Crowdin-File-ID: 5414\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst:2
msgid ":mod:`sklearn.feature_extraction.text`.TfidfVectorizer"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:2
msgid "Convert a collection of raw documents to a matrix of TF-IDF features."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:4
msgid "Equivalent to :class:`CountVectorizer` followed by :class:`TfidfTransformer`."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:7
msgid "Read more in the :ref:`User Guide <text_feature_extraction>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.feature_extraction.text.CountVectorizer.inverse_transform
#: sklearn.feature_extraction.text.TfidfVectorizer
#: sklearn.feature_extraction.text.TfidfVectorizer.fit
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform
#: sklearn.feature_extraction.text.TfidfVectorizer.transform
#: sklearn.feature_extraction.text._VectorizerMixin.decode
msgid "Parameters"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:20
msgid "**input**"
msgstr "**input**"

#: of
msgid "{'filename', 'file', 'content'}, default='content'"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:12
msgid "If 'filename', the sequence passed as an argument to fit is expected to be a list of filenames that need reading to fetch the raw content to analyze."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:16
msgid "If 'file', the sequence items must have a 'read' method (file-like object) that is called to fetch the bytes in memory."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:19
msgid "Otherwise the input is expected to be a sequence of items that can be of type string or byte."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:24
msgid "**encoding**"
msgstr "**encoding**"

#: of
msgid "str, default='utf-8'"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:23
msgid "If bytes or files are given to analyze, this encoding is used to decode."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:30
msgid "**decode_error**"
msgstr "**decode_error**"

#: of
msgid "{'strict', 'ignore', 'replace'}, default='strict'"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:27
msgid "Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given `encoding`. By default, it is 'strict', meaning that a UnicodeDecodeError will be raised. Other values are 'ignore' and 'replace'."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:41
msgid "**strip_accents**"
msgstr "**strip_accents**"

#: of
msgid "{'ascii', 'unicode'}, default=None"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:33
msgid "Remove accents and perform other character normalization during the preprocessing step. 'ascii' is a fast method that only works on characters that have an direct ASCII mapping. 'unicode' is a slightly slower method that works on any characters. None (default) does nothing."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:40
msgid "Both 'ascii' and 'unicode' use NFKD normalization from :func:`unicodedata.normalize`."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:44
msgid "**lowercase**"
msgstr "**lowercase**"

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:44
msgid "Convert all characters to lowercase before tokenizing."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:49
msgid "**preprocessor**"
msgstr "**preprocessor**"

#: of
msgid "callable, default=None"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:47
msgid "Override the preprocessing (string transformation) stage while preserving the tokenizing and n-grams generation steps. Only applies if ``analyzer is not callable``."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:54
msgid "**tokenizer**"
msgstr "**tokenizer**"

#: of sklearn.feature_extraction.text.TfidfVectorizer:52
msgid "Override the string tokenization step while preserving the preprocessing and n-grams generation steps. Only applies if ``analyzer == 'word'``."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:68
msgid "**analyzer**"
msgstr "**analyzer**"

#: of
msgid "{'word', 'char', 'char_wb'} or callable, default='word'"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:57
msgid "Whether the feature should be made of word or character n-grams. Option 'char_wb' creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:61
msgid "If a callable is passed it is used to extract the sequence of features out of the raw, unprocessed input."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:66
msgid "Since v0.21, if ``input`` is ``filename`` or ``file``, the data is first read from the file and then passed to the given callable analyzer."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:83
msgid "**stop_words**"
msgstr "**stop_words**"

#: of
msgid "{'english'}, list, default=None"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:71
msgid "If a string, it is passed to _check_stop_list and the appropriate stop list is returned. 'english' is currently the only supported string value. There are several known issues with 'english' and you should consider an alternative (see :ref:`stop_words`)."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:77
msgid "If a list, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if ``analyzer == 'word'``."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:81
msgid "If None, no stop words will be used. max_df can be set to a value in the range [0.7, 1.0) to automatically detect and filter stop words based on intra corpus document frequency of terms."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:93
msgid "**token_pattern** : str, default=r\"(?u)\\\\b\\\\w\\\\w+\\\\b\""
msgstr "**token_pattern** : str, default=r\"(?u)\\\\b\\\\w\\\\w+\\\\b\""

#: of
msgid "str, default=r\"(?u)\\\\b\\\\w\\\\w+\\\\b\""
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:86
msgid "Regular expression denoting what constitutes a \"token\", only used if ``analyzer == 'word'``. The default regexp selects tokens of 2 or more alphanumeric characters (punctuation is completely ignored and always treated as a token separator)."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:91
msgid "If there is a capturing group in token_pattern then the captured group content, not the entire match, becomes the token. At most one capturing group is permitted."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:101
msgid "**ngram_range**"
msgstr "**ngram_range**"

#: of
msgid "tuple (min_n, max_n), default=(1, 1)"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:96
msgid "The lower and upper boundary of the range of n-values for different n-grams to be extracted. All values of n such that min_n <= n <= max_n will be used. For example an ``ngram_range`` of ``(1, 1)`` means only unigrams, ``(1, 2)`` means unigrams and bigrams, and ``(2, 2)`` means only bigrams. Only applies if ``analyzer is not callable``."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:109
msgid "**max_df**"
msgstr "**max_df**"

#: of
msgid "float or int, default=1.0"
msgstr "float o int, default=1.0"

#: of sklearn.feature_extraction.text.TfidfVectorizer:104
msgid "When building the vocabulary ignore terms that have a document frequency strictly higher than the given threshold (corpus-specific stop words). If float in range [0.0, 1.0], the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not None."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:117
msgid "**min_df**"
msgstr "**min_df**"

#: of
msgid "float or int, default=1"
msgstr "float o int, default=1"

#: of sklearn.feature_extraction.text.TfidfVectorizer:112
msgid "When building the vocabulary ignore terms that have a document frequency strictly lower than the given threshold. This value is also called cut-off in the literature. If float in range of [0.0, 1.0], the parameter represents a proportion of documents, integer absolute counts. This parameter is ignored if vocabulary is not None."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:123
msgid "**max_features**"
msgstr "**max_features**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.feature_extraction.text.TfidfVectorizer:120
msgid "If not None, build a vocabulary that only consider the top max_features ordered by term frequency across the corpus."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:123
msgid "This parameter is ignored if vocabulary is not None."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:128
msgid "**vocabulary**"
msgstr "**vocabulary**"

#: of
msgid "Mapping or iterable, default=None"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:126
msgid "Either a Mapping (e.g., a dict) where keys are terms and values are indices in the feature matrix, or an iterable over terms. If not given, a vocabulary is determined from the input documents."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:133
msgid "**binary**"
msgstr "**binary**"

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:131
msgid "If True, all non-zero term counts are set to 1. This does not mean outputs will have only 0/1 values, only that the tf term in tf-idf is binary. (Set idf and normalization to False to get 0/1 outputs)."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:136
msgid "**dtype**"
msgstr "**dtype**"

#: of
msgid "dtype, default=float64"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:136
msgid "Type of the matrix returned by fit_transform() or transform()."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:144
msgid "**norm**"
msgstr "**norm**"

#: of
msgid "{'l1', 'l2'}, default='l2'"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:139
msgid "Each output row will have unit norm, either: * 'l2': Sum of squares of vector elements is 1. The cosine similarity between two vectors is their dot product when l2 norm has been applied. * 'l1': Sum of absolute values of vector elements is 1. See :func:`preprocessing.normalize`."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:147
msgid "**use_idf**"
msgstr "**use_idf**"

#: of sklearn.feature_extraction.text.TfidfVectorizer:147
msgid "Enable inverse-document-frequency reweighting."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:152
msgid "**smooth_idf**"
msgstr "**smooth_idf**"

#: of sklearn.feature_extraction.text.TfidfVectorizer:150
msgid "Smooth idf weights by adding one to document frequencies, as if an extra document was seen containing every term in the collection exactly once. Prevents zero divisions."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:158
msgid "**sublinear_tf**"
msgstr "**sublinear_tf**"

#: of sklearn.feature_extraction.text.TfidfVectorizer:155
msgid "Apply sublinear tf scaling, i.e. replace tf with 1 + log(tf)."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.feature_extraction.text.TfidfVectorizer:163
msgid "**vocabulary_**"
msgstr "**vocabulary_**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.feature_extraction.text.TfidfVectorizer:163
msgid "A mapping of terms to feature indices."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:167
msgid "**fixed_vocabulary_: bool**"
msgstr "**fixed_vocabulary_: bool**"

#: of sklearn.feature_extraction.text.TfidfVectorizer:166
msgid "True if a fixed vocabulary of term to indices mapping is provided by the user"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:171
msgid "**idf_**"
msgstr "**idf_**"

#: of
msgid "array of shape (n_features,)"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:170
msgid "The inverse document frequency (IDF) vector; only defined if ``use_idf`` is True."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:183
msgid "**stop_words_**"
msgstr "**stop_words_**"

#: of
msgid "set"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:174
msgid "Terms that were ignored because they either:"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:176
msgid "occurred in too many documents (`max_df`)"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:177
msgid "occurred in too few documents (`min_df`)"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:178
msgid "were cut off by feature selection (`max_features`)."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:180
msgid "This is only available if no vocabulary was given."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:188
msgid ":obj:`CountVectorizer`"
msgstr ":obj:`CountVectorizer`"

#: of sklearn.feature_extraction.text.TfidfVectorizer:189
msgid "Transforms text into a sparse matrix of n-gram counts."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:190
msgid ":obj:`TfidfTransformer`"
msgstr ":obj:`TfidfTransformer`"

#: of sklearn.feature_extraction.text.TfidfVectorizer:191
msgid "Performs the TF-IDF transformation from a provided matrix of counts."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:195
msgid "Notes"
msgstr "Notas"

#: of sklearn.feature_extraction.text.TfidfVectorizer:196
msgid "The ``stop_words_`` attribute can get large and increase the model size when pickling. This attribute is provided only for introspection and can be safely removed using delattr or set to None before pickling."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:202
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.feature_extraction.text.TfidfVectorizer:218
msgid "Methods"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`build_analyzer <sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer>`\\"
msgstr ":obj:`build_analyzer <sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
#: sklearn.feature_extraction.text._VectorizerMixin.build_analyzer:2
msgid "Return a callable that handles preprocessing, tokenization and n-grams generation."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`build_preprocessor <sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor>`\\"
msgstr ":obj:`build_preprocessor <sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
#: sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor:2
msgid "Return a function to preprocess the text before tokenization."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`build_tokenizer <sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer>`\\"
msgstr ":obj:`build_tokenizer <sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
#: sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer:2
msgid "Return a function that splits a string into a sequence of tokens."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`decode <sklearn.feature_extraction.text.TfidfVectorizer.decode>`\\"
msgstr ":obj:`decode <sklearn.feature_extraction.text.TfidfVectorizer.decode>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
#: sklearn.feature_extraction.text._VectorizerMixin.decode:2
msgid "Decode the input into a string of unicode symbols."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`fit <sklearn.feature_extraction.text.TfidfVectorizer.fit>`\\"
msgstr ":obj:`fit <sklearn.feature_extraction.text.TfidfVectorizer.fit>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Learn vocabulary and idf from training set."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.feature_extraction.text.TfidfVectorizer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.feature_extraction.text.TfidfVectorizer.fit_transform>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Learn vocabulary and idf, return document-term matrix."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`get_feature_names <sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names>`\\"
msgstr ":obj:`get_feature_names <sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names>`\\"

#: of sklearn.feature_extraction.text.CountVectorizer.get_feature_names:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Array mapping from feature integer indices to feature name."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`get_params <sklearn.feature_extraction.text.TfidfVectorizer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.feature_extraction.text.TfidfVectorizer.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`get_stop_words <sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words>`\\"
msgstr ":obj:`get_stop_words <sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
#: sklearn.feature_extraction.text._VectorizerMixin.get_stop_words:2
msgid "Build or fetch the effective stop words list."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform>`\\"

#: of sklearn.feature_extraction.text.CountVectorizer.inverse_transform:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Return terms per document with nonzero entries in X."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`set_params <sklearn.feature_extraction.text.TfidfVectorizer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.feature_extraction.text.TfidfVectorizer.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid ":obj:`transform <sklearn.feature_extraction.text.TfidfVectorizer.transform>`\\"
msgstr ":obj:`transform <sklearn.feature_extraction.text.TfidfVectorizer.transform>`\\"

#: of sklearn.feature_extraction.text.TfidfVectorizer.transform:2
#: sklearn.feature_extraction.text.TfidfVectorizer:233:<autosummary>:1
msgid "Transform documents to document-term matrix."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.feature_extraction.text.CountVectorizer.get_feature_names
#: sklearn.feature_extraction.text.CountVectorizer.inverse_transform
#: sklearn.feature_extraction.text.TfidfVectorizer.fit
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform
#: sklearn.feature_extraction.text.TfidfVectorizer.transform
#: sklearn.feature_extraction.text._VectorizerMixin.build_analyzer
#: sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor
#: sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer
#: sklearn.feature_extraction.text._VectorizerMixin.decode
#: sklearn.feature_extraction.text._VectorizerMixin.get_stop_words
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.feature_extraction.text._VectorizerMixin.build_analyzer:22
msgid "analyzer: callable"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.build_analyzer:10
msgid "A function to handle preprocessing, tokenization and n-grams generation."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor:20
msgid "preprocessor: callable"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor:9
msgid "A function to preprocess the text before tokenization."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer:20
msgid "tokenizer: callable"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer:9
msgid "A function to split a string into a sequence of tokens."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.decode:4
msgid "The decoding strategy depends on the vectorizer parameters."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.decode:9
msgid "**doc**"
msgstr "**doc**"

#: of
msgid "str"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.decode:9
msgid "The string to decode."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.decode:25
msgid "doc: str"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.decode:14
msgid "A string of unicode symbols."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:8
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:10
#: sklearn.feature_extraction.text.TfidfVectorizer.transform:10
msgid "**raw_documents**"
msgstr "**raw_documents**"

#: of
msgid "iterable"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:8
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:10
#: sklearn.feature_extraction.text.TfidfVectorizer.transform:10
msgid "An iterable which yields either str, unicode or file objects."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:11
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:13
msgid "**y**"
msgstr "**y**"

#: of
msgid "None"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:11
msgid "This parameter is not needed to compute tfidf."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.feature_extraction.text.TfidfVectorizer.fit:27
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit:16
msgid "Fitted vectorizer."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:4
msgid "This is equivalent to fit followed by transform, but more efficiently implemented."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:13
msgid "This parameter is ignored."
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.inverse_transform:8
#: sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:29
#: sklearn.feature_extraction.text.TfidfVectorizer.transform:26
msgid "**X**"
msgstr "**X**"

#: of
msgid "sparse matrix of (n_samples, n_features)"
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.fit_transform:18
#: sklearn.feature_extraction.text.TfidfVectorizer.transform:15
msgid "Tf-idf-weighted document-term matrix."
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.get_feature_names:20
msgid "**feature_names**"
msgstr "**feature_names**"

#: of
msgid "list"
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.get_feature_names:9
msgid "A list of feature names."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.get_stop_words:20
msgid "stop_words: list or None"
msgstr ""

#: of sklearn.feature_extraction.text._VectorizerMixin.get_stop_words:9
msgid "A list of stop words."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.inverse_transform:8
msgid "Document-term matrix."
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.inverse_transform:24
msgid "**X_inv**"
msgstr "**X_inv**"

#: of
msgid "list of arrays of shape (n_samples,)"
msgstr ""

#: of sklearn.feature_extraction.text.CountVectorizer.inverse_transform:13
msgid "List of arrays of terms."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.feature_extraction.text.TfidfVectorizer.transform:4
msgid "Uses the vocabulary and document frequencies (df) learned by fit (or fit_transform)."
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:4
msgid "Examples using ``sklearn.feature_extraction.text.TfidfVectorizer``"
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:15
#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:23
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:34
#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:42
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_clustering.py`"
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:53
#: ../modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.examples:61
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
msgstr ""

