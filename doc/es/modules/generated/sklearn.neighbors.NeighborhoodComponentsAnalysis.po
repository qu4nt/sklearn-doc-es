msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-08 01:04\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.po\n"
"X-Crowdin-File-ID: 5240\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst:2
msgid ":mod:`sklearn.neighbors`.NeighborhoodComponentsAnalysis"
msgstr ":mod:`sklearn.neighbors`.NeighborhoodComponentsAnalysis"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:2
msgid "Neighborhood Components Analysis"
msgstr "Análisis de componentes de vecindad"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:4
msgid "Neighborhood Component Analysis (NCA) is a machine learning algorithm for metric learning. It learns a linear transformation in a supervised fashion to improve the classification accuracy of a stochastic nearest neighbors rule in the transformed space."
msgstr "El análisis de componentes de vecindad (NCA) es un algoritmo de aprendizaje automático para el aprendizaje métrico. Aprende una transformación lineal de forma supervisada para mejorar la precisión de la clasificación de una regla estocástica de vecinos más cercanos en el espacio transformado."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:9
msgid "Read more in the :ref:`User Guide <nca>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Parameters"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:15
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:14
msgid "Preferred dimensionality of the projected space. If None it will be set to ``n_features``."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:55
msgid "**init**"
msgstr ""

#: of
msgid "{'auto', 'pca', 'lda', 'identity', 'random'} or ndarray of shape             (n_features_a, n_features_b), default='auto'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:18
msgid "Initialization of the linear transformation. Possible options are 'auto', 'pca', 'lda', 'identity', 'random', and a numpy array of shape (n_features_a, n_features_b)."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:28
msgid "'auto'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:23
msgid "Depending on ``n_components``, the most reasonable initialization will be chosen. If ``n_components <= n_classes`` we use 'lda', as it uses labels information. If not, but ``n_components < min(n_features, n_samples)``, we use 'pca', as it projects data in meaningful directions (those of higher variance). Otherwise, we just use 'identity'."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:33
msgid "'pca'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:31
msgid "``n_components`` principal components of the inputs passed to :meth:`fit` will be used to initialize the transformation. (See :class:`~sklearn.decomposition.PCA`)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:40
msgid "'lda'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:36
msgid "``min(n_components, n_classes)`` most discriminative components of the inputs passed to :meth:`fit` will be used to initialize the transformation. (If ``n_components > n_classes``, the rest of the components will be zero.) (See :class:`~sklearn.discriminant_analysis.LinearDiscriminantAnalysis`)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:45
msgid "'identity'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:43
msgid "If ``n_components`` is strictly smaller than the dimensionality of the inputs passed to :meth:`fit`, the identity matrix will be truncated to the first ``n_components`` rows."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:50
msgid "'random'"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:48
msgid "The initial transformation will be a random array of shape `(n_components, n_features)`. Each value is sampled from the standard normal distribution."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:55
msgid "numpy array"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:53
msgid "n_features_b must match the dimensionality of the inputs passed to :meth:`fit` and n_features_a must be less than or equal to that. If ``n_components`` is not None, n_features_a must match it."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:60
msgid "**warm_start**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:58
msgid "If True and :meth:`fit` has been called before, the solution of the previous call to :meth:`fit` is used as the initial linear transformation (``n_components`` and ``init`` will be ignored)."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:63
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=50"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:63
msgid "Maximum number of iterations in the optimization."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:66
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-5"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:66
msgid "Convergence tolerance for the optimization."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:73
msgid "**callback**"
msgstr ""

#: of
msgid "callable, default=None"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:69
msgid "If not None, this function is called after every iteration of the optimizer, taking as arguments the current solution (flattened transformation matrix) and the number of iterations. This might be useful in case one wants to examine or store the transformation found after each iteration."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:80
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:76
msgid "If 0, no progress messages will be printed. If 1, progress messages will be printed to stdout. If > 1, progress messages will be printed and the ``disp`` parameter of :func:`scipy.optimize.minimize` will be set to ``verbose - 2``."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:91
msgid "**random_state**"
msgstr ""

#: of
msgid "int or numpy.RandomState, default=None"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:83
msgid "A pseudo random number generator object or a seed for it if int. If ``init='random'``, ``random_state`` is used to initialize the random transformation. If ``init='pca'``, ``random_state`` is passed as an argument to PCA when initializing the transformation. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis
msgid "Attributes"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:96
msgid "**components_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:96
msgid "The linear transformation learned during fitting."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:99
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:99
msgid "Counts the number of iterations performed by the optimizer."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:107
msgid "**random_state_**"
msgstr ""

#: of
msgid "numpy.RandomState"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:102
msgid "Pseudo random number generator object used during initialization."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:110
msgid "References"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:111
msgid "J. Goldberger, G. Hinton, S. Roweis, R. Salakhutdinov. \"Neighbourhood Components Analysis\". Advances in Neural Information Processing Systems. 17, 513-520, 2005. http://www.cs.nyu.edu/~roweis/papers/ncanips.pdf"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:116
msgid "Wikipedia entry on Neighborhood Components Analysis https://en.wikipedia.org/wiki/Neighbourhood_components_analysis"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:121
msgid "[Rf9b6baee8229-1]_, [Rf9b6baee8229-2]_"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:124
msgid "Examples"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:146
msgid "Methods"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit>`\\"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Fit the model according to the given training data."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`get_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`set_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.transform>`\\"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Applies the learned transformation to the given data."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:8
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:8
msgid "The training samples."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:11
msgid "The corresponding training labels."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:16
msgid "returns a trained NeighborhoodComponentsAnalysis model."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:8
msgid "Data samples."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:16
msgid "X_embedded: ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:13
msgid "The data samples transformed."
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Raises"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:28
msgid "NotFittedError"
msgstr ""

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:21
msgid "If :meth:`fit` has not been called before."
msgstr ""

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:4
msgid "Examples using ``sklearn.neighbors.NeighborhoodComponentsAnalysis``"
msgstr ""

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:15
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ""

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:34
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:42
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_illustration.py`"
msgstr ""

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:53
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:61
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_classification.py`"
msgstr ""

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:72
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:80
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
msgstr ""

