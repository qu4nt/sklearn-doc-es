msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-26 01:37\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.po\n"
"X-Crowdin-File-ID: 5240\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst:2
msgid ":mod:`sklearn.neighbors`.NeighborhoodComponentsAnalysis"
msgstr ":mod:`sklearn.neighbors`.NeighborhoodComponentsAnalysis"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:2
msgid "Neighborhood Components Analysis"
msgstr "Análisis de componentes de vecindad"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:4
msgid "Neighborhood Component Analysis (NCA) is a machine learning algorithm for metric learning. It learns a linear transformation in a supervised fashion to improve the classification accuracy of a stochastic nearest neighbors rule in the transformed space."
msgstr "El análisis de Componentes de Vecindario (Neighborhood Component Analysis, NCA) es un algoritmo de aprendizaje automático para el aprendizaje métrico. Aprende una transformación lineal de forma supervisada para mejorar la precisión de la clasificación de una regla estocástica de vecinos más cercanos en el espacio transformado."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:9
msgid "Read more in the :ref:`User Guide <nca>`."
msgstr "Más información en el :ref:`Manual de usuario <nca>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:15
msgid "**n_components**"
msgstr "**n_components**"

#: of
msgid "int, default=None"
msgstr "entero, default=None"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:14
msgid "Preferred dimensionality of the projected space. If None it will be set to ``n_features``."
msgstr "Dimensionalidad preferida del espacio proyectado. Si es None se establecerá en ``n_features``."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:55
msgid "**init**"
msgstr "**init**"

#: of
msgid "{'auto', 'pca', 'lda', 'identity', 'random'} or ndarray of shape             (n_features_a, n_features_b), default='auto'"
msgstr "{'auto', 'pca', 'lda', 'identity', 'random'} o ndarray de la forma (n_features_a, n_features_b), default='auto'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:18
msgid "Initialization of the linear transformation. Possible options are 'auto', 'pca', 'lda', 'identity', 'random', and a numpy array of shape (n_features_a, n_features_b)."
msgstr "Inicialización de la transformación lineal. Las opciones posibles son 'auto', 'pca', 'lda', 'identity', 'random' y una matriz numérica de forma (n_features_a, n_features_b)."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:28
msgid "'auto'"
msgstr "'auto'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:23
msgid "Depending on ``n_components``, the most reasonable initialization will be chosen. If ``n_components <= n_classes`` we use 'lda', as it uses labels information. If not, but ``n_components < min(n_features, n_samples)``, we use 'pca', as it projects data in meaningful directions (those of higher variance). Otherwise, we just use 'identity'."
msgstr "Dependiendo de ``n_components``, la inicialización más razonable será elegida. Si ``n_components <= n_classes`` usamos 'lda', ya que usa información de etiquetas. Si no, pero ``n_components < min(n_features, n_samples)``, usamos 'pca', ya que proyecta datos en direcciones significativas (aquellas de mayor varianza). De lo contrario, sólo utilizaremos la \"identity\"."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:33
msgid "'pca'"
msgstr "'pca'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:31
msgid "``n_components`` principal components of the inputs passed to :meth:`fit` will be used to initialize the transformation. (See :class:`~sklearn.decomposition.PCA`)"
msgstr "Los componentes principales ``n_components`` de las entradas pasadas a :meth:`fit` serán usados para inicializar la transformación. (Ver :class:`~sklearn.decomposition.PCA`)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:40
msgid "'lda'"
msgstr "'lda'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:36
msgid "``min(n_components, n_classes)`` most discriminative components of the inputs passed to :meth:`fit` will be used to initialize the transformation. (If ``n_components > n_classes``, the rest of the components will be zero.) (See :class:`~sklearn.discriminant_analysis.LinearDiscriminantAnalysis`)"
msgstr "``min(n_components, n_classes)`` los componentes más discriminativos de las entradas pasadas a :meth:`fit` serán usados para inicializar la transformación. (Si ``n_components > n_classes``, el resto de los componentes serán cero.) (Ver :class:`~sklearn.discriminant_analysis.LinearDiscriminantAnalysis`)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:45
msgid "'identity'"
msgstr "'identity'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:43
msgid "If ``n_components`` is strictly smaller than the dimensionality of the inputs passed to :meth:`fit`, the identity matrix will be truncated to the first ``n_components`` rows."
msgstr "Si ``n_components`` es estrictamente menor que la dimensionalidad de las entradas pasadas a :meth:`fit`, la matriz de identidad será truncada a las primeras filas ``n_components``."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:50
msgid "'random'"
msgstr "'random'"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:48
msgid "The initial transformation will be a random array of shape `(n_components, n_features)`. Each value is sampled from the standard normal distribution."
msgstr "La transformación inicial será un arreglo aleatorio de forma `(n_components, n_features)`. Cada valor es muestreado de la distribución normal estándar."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:55
msgid "numpy array"
msgstr "arreglo numpy"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:53
msgid "n_features_b must match the dimensionality of the inputs passed to :meth:`fit` and n_features_a must be less than or equal to that. If ``n_components`` is not None, n_features_a must match it."
msgstr "n_features_b debe coincidir con la dimensionalidad de las entradas pasadas a :meth:`fit` y n_features_a debe ser menor o igual a eso. Si ``n_components`` no es None, n_features_a debe coincidirlo."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:60
msgid "**warm_start**"
msgstr "**warm_start**"

#: of
msgid "bool, default=False"
msgstr "booleano, default=False"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:58
msgid "If True and :meth:`fit` has been called before, the solution of the previous call to :meth:`fit` is used as the initial linear transformation (``n_components`` and ``init`` will be ignored)."
msgstr "Si es True y :meth:`fit` ha sido llamado antes, la solución de la llamada anterior a :meth:`fit` se utiliza como la transformación lineal inicial (``n_components`` e ``init`` serán ignorados)."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:63
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=50"
msgstr "entero, default=50"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:63
msgid "Maximum number of iterations in the optimization."
msgstr "Número máximo de iteraciones en la optimización."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:66
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1e-5"
msgstr "flotante, default=1e-5"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:66
msgid "Convergence tolerance for the optimization."
msgstr "Tolerancia de conversión para la optimización."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:73
msgid "**callback**"
msgstr "**callback**"

#: of
msgid "callable, default=None"
msgstr "invocable, default=None"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:69
msgid "If not None, this function is called after every iteration of the optimizer, taking as arguments the current solution (flattened transformation matrix) and the number of iterations. This might be useful in case one wants to examine or store the transformation found after each iteration."
msgstr "Si no es None, esta función es llamada después de cada iteración del optimizador, tomando como argumentos la solución actual (matriz de transformación aplanada) y el número de iteraciones. Esto puede ser útil en caso de que uno quiera examinar o almacenar la transformación encontrada después de cada iteración."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:80
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "entero, default=0"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:76
msgid "If 0, no progress messages will be printed. If 1, progress messages will be printed to stdout. If > 1, progress messages will be printed and the ``disp`` parameter of :func:`scipy.optimize.minimize` will be set to ``verbose - 2``."
msgstr "Si es 0, no se imprimirán mensajes de progreso. Si es 1, los mensajes de progreso se imprimirán en stdout. Si > 1, los mensajes de progreso se imprimirán y el parámetro ``disp`` de :func:`scipy.optimize.minimize` se establecerá en ``verbose - 2``."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:91
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int or numpy.RandomState, default=None"
msgstr "entero o numpy.Randomstate, default=None"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:83
msgid "A pseudo random number generator object or a seed for it if int. If ``init='random'``, ``random_state`` is used to initialize the random transformation. If ``init='pca'``, ``random_state`` is passed as an argument to PCA when initializing the transformation. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr "Un objeto generador de números pseudoaleatorios o una semilla para él si es int. Si ``init='random'``, ``random_state`` se utiliza para inicializar la transformación aleatoria. Si ``init='pca'``, ``random_state`` se pasa como argumento a PCA cuando se inicializa la transformación. Pasa un entero para obtener resultados reproducibles a través de múltiples llamadas a la función. Ver :término: `Glosario <random_state>`."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:96
msgid "**components_**"
msgstr "**components_**"

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr "ndarray de forma (n_components, n_features)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:96
msgid "The linear transformation learned during fitting."
msgstr "La transformación lineal aprendida durante el ajuste."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:99
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "int"
msgstr "entero"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:99
msgid "Counts the number of iterations performed by the optimizer."
msgstr "Cuenta el número de iteraciones realizadas por el optimizador."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:107
msgid "**random_state_**"
msgstr "**random_state_**"

#: of
msgid "numpy.RandomState"
msgstr "numpy.RandomState"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:102
msgid "Pseudo random number generator object used during initialization."
msgstr "Objeto generador de números pseudoaleatorio utilizado durante la inicialización."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:110
msgid "References"
msgstr "Referencias"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:111
msgid "J. Goldberger, G. Hinton, S. Roweis, R. Salakhutdinov. \"Neighbourhood Components Analysis\". Advances in Neural Information Processing Systems. 17, 513-520, 2005. http://www.cs.nyu.edu/~roweis/papers/ncanips.pdf"
msgstr "J. Goldberger, G. Hinton, S. Roweis, R. Salakhutdinov. \"Neighbourhood Components Analysis\". Advances in Neural Information Processing Systems. 17, 513-520, 2005. http://www.cs.nyu.edu/~roweis/papers/ncanips.pdf"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:116
msgid "Wikipedia entry on Neighborhood Components Analysis https://en.wikipedia.org/wiki/Neighbourhood_components_analysis"
msgstr "Entrada de Wikipedia sobre el Análisis de Componentes de Vecindario https://en.wikipedia.org/wiki/Neighbourhood_components_analysis"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:121
msgid "[Rf9b6baee8229-1]_, [Rf9b6baee8229-2]_"
msgstr "[Rf9b6baee8229-1]_, [Rf9b6baee8229-2]_"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:124
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:146
msgid "Methods"
msgstr "Métodos"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit>`\\"
msgstr ":obj:`fit <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit>`\\"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Fit the model according to the given training data."
msgstr "Ajusta el modelo de acuerdo a los datos de entrenamiento dados."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform>`\\"

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr "Se ajustan los datos y luego se transforman."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`get_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params>`\\"
msgstr ":obj:`get_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros de este estimador."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`set_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params>`\\"
msgstr ":obj:`set_params <sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid ":obj:`transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.transform>`\\"
msgstr ":obj:`transform <sklearn.neighbors.NeighborhoodComponentsAnalysis.transform>`\\"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:2
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis:154:<autosummary>:1
msgid "Applies the learned transformation to the given data."
msgstr "Se aplica la transformación aprendida a los datos dados."

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:8
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples_X, n_features)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:8
msgid "The training samples."
msgstr "Las muestras de entrenamiento."

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:11
msgid "The corresponding training labels."
msgstr "Las etiquetas de entrenamiento correspondientes."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:27
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "objeto"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit:16
msgid "returns a trained NeighborhoodComponentsAnalysis model."
msgstr "devuelve un modelo de NeighborhoodComponentsAnalysis entrenado."

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr "Ajusta el transformador a `X` y `y` con los parámetros opcionales `fit_params` y devuelve una versión transformada de `X`."

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr "Muestras de entrada."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs),                 default=None"

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr "Valores objetivo (None para transformaciones no supervisadas)."

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "diccionario"

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr "Parámetros de ajuste adicionales."

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr "**X_new**"

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "ndarray arreglo de forma (n_samples, n_features_new)"

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr "Arreglo transformado."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "booleano, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto con estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia de estimador."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:8
msgid "Data samples."
msgstr "Muestras de datos."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:16
msgid "X_embedded: ndarray of shape (n_samples, n_components)"
msgstr "X_embedded: ndarray de la forma (n_samples, n_components)"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:13
msgid "The data samples transformed."
msgstr "Las muestras de datos transformadas."

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform
msgid "Raises"
msgstr "Plantea"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:28
msgid "NotFittedError"
msgstr "NotFittedError"

#: of sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform:21
msgid "If :meth:`fit` has not been called before."
msgstr "Si :meth:`fit` no ha sido llamado antes."

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:4
msgid "Examples using ``sklearn.neighbors.NeighborhoodComponentsAnalysis``"
msgstr "Ejemplos con ``sklearn.neighbors.NeighborhoodComponentsAnalysis``"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:15
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:34
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:42
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_illustration.py`"
msgstr ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_illustration.py`"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:53
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:61
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_classification.py`"
msgstr ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_classification.py`"

#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:72
#: ../modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.examples:80
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
msgstr ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"

