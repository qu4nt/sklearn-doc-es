msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-05-18 14:46\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.impute.IterativeImputer.po\n"
"X-Crowdin-File-ID: 5714\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.impute.IterativeImputer.rst:2
msgid ":mod:`sklearn.impute`.IterativeImputer"
msgstr ":mod:`sklearn.impute`.IterativeImputer"

#: of sklearn.impute._iterative.IterativeImputer:2
msgid "Multivariate imputer that estimates each feature from all the others."
msgstr "Imputador multivariante que estima cada característica a partir de todas las restantes."

#: of sklearn.impute._iterative.IterativeImputer:4
msgid "A strategy for imputing missing values by modeling each feature with missing values as a function of other features in a round-robin fashion."
msgstr "Una estrategia para la imputación de valores faltantes mediante la modelización de cada característica con valores perdidos en función de otras características de forma rotatoria."

#: of sklearn.impute._iterative.IterativeImputer:7
msgid "Read more in the :ref:`User Guide <iterative_imputer>`."
msgstr "Más información en el :ref:`Manual de usuario <iterative_imputer>`."

#: of sklearn.impute._iterative.IterativeImputer:13
msgid "This estimator is still **experimental** for now: the predictions and the API might change without any deprecation cycle. To use it, you need to explicitly import ``enable_iterative_imputer``::"
msgstr "Este estimador es todavía **experimental** por ahora: las predicciones y la API podrían cambiar sin ningún ciclo de depreciación. Para utilizarlo, es necesario importar explícitamente ``enable_iterative_imputer``::"

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.impute._iterative.IterativeImputer
#: sklearn.impute._iterative.IterativeImputer.fit
#: sklearn.impute._iterative.IterativeImputer.fit_transform
#: sklearn.impute._iterative.IterativeImputer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.impute._iterative.IterativeImputer:27
msgid "**estimator**"
msgstr "**estimator**"

#: of
msgid "estimator object, default=BayesianRidge()"
msgstr "estimator object, default=BayesianRidge()"

#: of sklearn.impute._iterative.IterativeImputer:25
msgid "The estimator to use at each step of the round-robin imputation. If ``sample_posterior`` is True, the estimator must support ``return_std`` in its ``predict`` method."
msgstr "El estimador que se va a utilizar en cada paso de la imputación round-robin. Si ``sample_posterior`` es True, el estimador debe soportar ``return_std`` en su método ``predict``."

#: of sklearn.impute._iterative.IterativeImputer:33
msgid "**missing_values**"
msgstr "**missing_values**"

#: of
msgid "int, np.nan, default=np.nan"
msgstr "int, np.nan, default=np.nan"

#: of sklearn.impute._iterative.IterativeImputer:30
msgid "The placeholder for the missing values. All occurrences of `missing_values` will be imputed. For pandas' dataframes with nullable integer dtypes with missing values, `missing_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`."
msgstr "El marcador de posición para los valores faltantes. Todas las ocurrencias de `missing_values` serán imputadas. Para los marcos de datos de pandas con dtypes enteros anulables con valores perdidos, `missing_values` debe establecerse en `np.nan`, ya que `pd.NA` se convertirá en `np.nan`."

#: of sklearn.impute._iterative.IterativeImputer:39
msgid "**sample_posterior**"
msgstr "**sample_posterior**"

#: of
msgid "boolean, default=False"
msgstr "boolean, default=False"

#: of sklearn.impute._iterative.IterativeImputer:36
msgid "Whether to sample from the (Gaussian) predictive posterior of the fitted estimator for each imputation. Estimator must support ``return_std`` in its ``predict`` method if set to ``True``. Set to ``True`` if using ``IterativeImputer`` for multiple imputations."
msgstr "Si se muestrea de la posterior predictiva (gaussiana) del estimador ajustado para cada imputación. El estimador debe soportar ``return_std`` en su método ``predict`` si se establece como ``True``. Establezca el valor ``True`` si utiliza ``IterativeImputer`` para múltiples imputaciones."

#: of sklearn.impute._iterative.IterativeImputer:47
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=10"
msgstr "int, default=10"

#: of sklearn.impute._iterative.IterativeImputer:42
msgid "Maximum number of imputation rounds to perform before returning the imputations computed during the final round. A round is a single imputation of each feature with missing values. The stopping criterion is met once `max(abs(X_t - X_{t-1}))/max(abs(X[known_vals]))` < tol, where `X_t` is `X` at iteration `t. Note that early stopping is only applied if ``sample_posterior=False``."
msgstr "Número máximo de rondas de imputación a realizar antes de devolver las imputaciones calculadas durante la ronda final. Una ronda es una única imputación de cada característica con valores faltantes. El criterio de parada se cumple cuando `max(abs(X_t - X_{t-1}))/max(abs(X[known_vals]))` < tol, donde `X_t` es `X` en la iteración `t. Nota que la parada temprana sólo se aplica si ``sample_posterior=False``."

#: of sklearn.impute._iterative.IterativeImputer:50
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1e-3"
msgstr "float, default=1e-3"

#: of sklearn.impute._iterative.IterativeImputer:50
msgid "Tolerance of the stopping condition."
msgstr "Tolerancia de la condición de parada."

#: of sklearn.impute._iterative.IterativeImputer:60
msgid "**n_nearest_features**"
msgstr "**n_nearest_features**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.impute._iterative.IterativeImputer:53
msgid "Number of other features to use to estimate the missing values of each feature column. Nearness between features is measured using the absolute correlation coefficient between each feature pair (after initial imputation). To ensure coverage of features throughout the imputation process, the neighbor features are not necessarily nearest, but are drawn with probability proportional to correlation for each imputed target feature. Can provide significant speed-up when the number of features is huge. If ``None``, all features will be used."
msgstr "Número de otras características que se utilizarán para estimar los valores faltantes de cada columna de características. La proximidad entre características se mide utilizando el coeficiente de correlación absoluta entre cada par de características (tras la imputación inicial). Para garantizar la cobertura de las características a lo largo del proceso de imputación, las características vecinas no son necesariamente las más cercanas, sino que se extraen con una probabilidad proporcional a la correlación para cada característica objetivo imputada. Puede proporcionar una velocidad significativa cuando el número de características es enorme. Si ``None``, se utilizarán todas las características."

#: of sklearn.impute._iterative.IterativeImputer:65
msgid "**initial_strategy**"
msgstr "**initial_strategy**"

#: of
msgid "str, default='mean'"
msgstr "str, default='mean'"

#: of sklearn.impute._iterative.IterativeImputer:63
msgid "Which strategy to use to initialize the missing values. Same as the ``strategy`` parameter in :class:`~sklearn.impute.SimpleImputer` Valid values: {\"mean\", \"median\", \"most_frequent\", or \"constant\"}."
msgstr "Qué estrategia utilizar para inicializar los valores perdidos. Igual que el parámetro ``strategy`` en :class:`~sklearn.impute.SimpleImputer` Valores válidos: {\" mean}, \"median\", \"most_frequent\", o \"constant\"}."

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "**imputation_order**"
msgstr "**imputation_order**"

#: of
msgid "str, default='ascending'"
msgstr "str, default='ascending'"

#: of sklearn.impute._iterative.IterativeImputer:68
msgid "The order in which the features will be imputed. Possible values:"
msgstr "El orden en que se imputarán las características. Valores posibles:"

#: of sklearn.impute._iterative.IterativeImputer:70
msgid "\"ascending\""
msgstr "\"ascending\""

#: of sklearn.impute._iterative.IterativeImputer:71
msgid "From features with fewest missing values to most."
msgstr "Desde características con menos valores faltantes hasta la mayoría."

#: of sklearn.impute._iterative.IterativeImputer:72
msgid "\"descending\""
msgstr "\"descending\""

#: of sklearn.impute._iterative.IterativeImputer:73
msgid "From features with most missing values to fewest."
msgstr "De las características con más valores faltantes a las menos."

#: of sklearn.impute._iterative.IterativeImputer:74
msgid "\"roman\""
msgstr "\"roman\""

#: of sklearn.impute._iterative.IterativeImputer:75
msgid "Left to right."
msgstr "Izquierda a derecha."

#: of sklearn.impute._iterative.IterativeImputer:76
msgid "\"arabic\""
msgstr "\"arabic\""

#: of sklearn.impute._iterative.IterativeImputer:77
msgid "Right to left."
msgstr "De derecha a izquierda."

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "\"random\""
msgstr "\"random\""

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "A random order for each round."
msgstr "Un orden aleatorio para cada ronda."

#: of sklearn.impute._iterative.IterativeImputer:86
msgid "**skip_complete**"
msgstr "**skip_complete**"

#: of sklearn.impute._iterative.IterativeImputer:82
msgid "If ``True`` then features with missing values during ``transform`` which did not have any missing values during ``fit`` will be imputed with the initial imputation method only. Set to ``True`` if you have many features with no missing values at both ``fit`` and ``transform`` time to save compute."
msgstr "Si es ``True`` entonces las características con valores faltantes durante ``transform`` que no tenían ningún valor faltante durante ``fit`` serán imputadas con el método de imputación inicial solamente. Establece en ``True`` si tiene muchas características sin valores faltantes en el tiempo ``fit`` y ``transform`` para guardar el cálculo."

#: of sklearn.impute._iterative.IterativeImputer:94
msgid "**min_value**"
msgstr "**min_value**"

#: of
msgid "float or array-like of shape (n_features,), default=-np.inf"
msgstr "float or array-like of shape (n_features,), default=-np.inf"

#: of sklearn.impute._iterative.IterativeImputer:89
msgid "Minimum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one min value for each feature. The default is `-np.inf`."
msgstr "Mínimo valor imputado posible. Transmitido a shape ( n_features,) si es escalar. Si es tipo array, espera shape (n_features,), un valor mínimo para cada característica. El valor por defecto es `-np.inf`."

#: of sklearn.impute._iterative.IterativeImputer:93
#: sklearn.impute._iterative.IterativeImputer:101
msgid "Added support for array-like."
msgstr "Added support for array-like."

#: of sklearn.impute._iterative.IterativeImputer:102
msgid "**max_value**"
msgstr "**max_value**"

#: of
msgid "float or array-like of shape (n_features,), default=np.inf"
msgstr "float or array-like of shape (n_features,), default=np.inf"

#: of sklearn.impute._iterative.IterativeImputer:97
msgid "Maximum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one max value for each feature. The default is `np.inf`."
msgstr "Máximo valor imputado posible. Transmitido a shape ( n_features,) si es escalar. Si es tipo array, espera shape (n_features,), un valor máximo para cada característica. El valor por defecto es `np.inf`."

#: of sklearn.impute._iterative.IterativeImputer:107
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.impute._iterative.IterativeImputer:105
msgid "Verbosity flag, controls the debug messages that are issued as functions are evaluated. The higher, the more verbose. Can be 0, 1, or 2."
msgstr "Indicador de verbosidad, controla los mensajes de depuración que se emiten a medida que se evalúan las funciones. Cuanto más alto, más verboso. Puede ser 0, 1 o 2."

#: of sklearn.impute._iterative.IterativeImputer:114
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, RandomState instance or None, default=None"

#: of sklearn.impute._iterative.IterativeImputer:110
msgid "The seed of the pseudo random number generator to use. Randomizes selection of estimator features if n_nearest_features is not None, the ``imputation_order`` if ``random``, and the sampling from posterior if ``sample_posterior`` is True. Use an integer for determinism. See :term:`the Glossary <random_state>`."
msgstr "La semilla del generador de números pseudoaleatorios a utilizar. Aleatoriza la selección de las características del estimador si n_nearest_features no es None, el ``imputation_order`` si ``random``, y el muestreo de la posterior si ``sample_posterior`` es True. Utiliza un número entero para el determinismo. Ver :term:`the Glossary <random_state>`."

#: of sklearn.impute._iterative.IterativeImputer:125
msgid "**add_indicator**"
msgstr "**add_indicator**"

#: of sklearn.impute._iterative.IterativeImputer:117
msgid "If True, a :class:`MissingIndicator` transform will stack onto output of the imputer's transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won't appear on the missing indicator even if there are missing values at transform/test time."
msgstr "Si es True, una transformación :class:`MissingIndicator` se apilará en la salida de la transformación del imputador. Esto permite que un estimador predictivo tenga en cuenta los valores faltantes a pesar de la imputación. Si una característica no tiene valores faltantes en el tiempo de ajuste/entrenamiento, la característica no aparecerá en el indicador de falta aunque haya valores faltantes en el tiempo de transformación/prueba."

#: of sklearn.impute._iterative.IterativeImputer
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.impute._iterative.IterativeImputer:130
msgid "**initial_imputer_** : object of type :class:`~sklearn.impute.SimpleImputer`"
msgstr "**initial_imputer_** : object of type :class:`~sklearn.impute.SimpleImputer`"

#: of
msgid "object of type"
msgstr "objeto de tipo"

#: of sklearn.impute._iterative.IterativeImputer:130
msgid "Imputer used to initialize the missing values."
msgstr "Imputación utilizada para inicializar los valores faltantes."

#: of sklearn.impute._iterative.IterativeImputer:138
msgid "**imputation_sequence_**"
msgstr "**imputation_sequence_**"

#: of
msgid "list of tuples"
msgstr "lista de tuplas"

#: of sklearn.impute._iterative.IterativeImputer:133
msgid "Each tuple has ``(feat_idx, neighbor_feat_idx, estimator)``, where ``feat_idx`` is the current feature to be imputed, ``neighbor_feat_idx`` is the array of other features used to impute the current feature, and ``estimator`` is the trained estimator used for the imputation. Length is ``self.n_features_with_missing_ * self.n_iter_``."
msgstr "Cada tupla tiene ``(feat_idx, neighbor_feat_idx, estimator)``, donde ``feat_idx`` es la característica actual a imputar, ``neighbor_feat_idx`` es el arreglo de otras características utilizadas para imputar la característica actual, y ``estimator`` es el estimador entrenado utilizado para la imputación. La longitud es ``self.n_features_with_missing_ * self.n_iter_``."

#: of sklearn.impute._iterative.IterativeImputer:142
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.impute._iterative.IterativeImputer:141
msgid "Number of iteration rounds that occurred. Will be less than ``self.max_iter`` if early stopping criterion was reached."
msgstr "Número de rondas de iteración que se produjeron. Será menor que ``self.max_iter`` si se alcanzó el criterio de parada anticipada."

#: of sklearn.impute._iterative.IterativeImputer:145
msgid "**n_features_with_missing_**"
msgstr "**n_features_with_missing_**"

#: of sklearn.impute._iterative.IterativeImputer:145
msgid "Number of features with missing values."
msgstr "Número de características con valores faltantes."

#: of sklearn.impute._iterative.IterativeImputer:149
msgid "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"
msgstr "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"

#: of sklearn.impute._iterative.IterativeImputer:148
msgid "MissingIndicator"
msgstr "MissingIndicator"

#: of sklearn.impute._iterative.IterativeImputer:148
msgid "Indicator used to add binary indicators for missing values. ``None`` if add_indicator is False."
msgstr "Indicador utilizado para añadir indicadores binarios para los valores faltantes. ``None`` si add_indicator es False."

#: of sklearn.impute._iterative.IterativeImputer:156
msgid "**random_state_**"
msgstr "**random_state_**"

#: of
msgid "RandomState instance"
msgstr "RandomState instance"

#: of sklearn.impute._iterative.IterativeImputer:152
msgid "RandomState instance that is generated either from a seed, the random number generator or by `np.random`."
msgstr "Instancia de RandomState que se genera a partir de una semilla, el generador de números aleatorios o por `np.random`."

#: of sklearn.impute._iterative.IterativeImputer:161
msgid ":obj:`SimpleImputer`"
msgstr ":obj:`SimpleImputer`"

#: of sklearn.impute._iterative.IterativeImputer:162
msgid "Univariate imputation of missing values."
msgstr "Imputación univariante de valores perdidos."

#: of sklearn.impute._iterative.IterativeImputer:166
msgid "Notes"
msgstr "Notas"

#: of sklearn.impute._iterative.IterativeImputer:167
msgid "To support imputation in inductive mode we store each feature's estimator during the ``fit`` phase, and predict without refitting (in order) during the ``transform`` phase."
msgstr "Para apoyar la imputación en modo inductivo, almacenamos el estimador de cada característica durante la fase de ``fit``, y predecimos sin reajustar (en orden) durante la fase de ``transform``."

#: of sklearn.impute._iterative.IterativeImputer:171
msgid "Features which contain all missing values at ``fit`` are discarded upon ``transform``."
msgstr "Las características que contienen todos los valores faltantes en ``fit`` se descartan al ``transform``."

#: of sklearn.impute._iterative.IterativeImputer:175
msgid "References"
msgstr "Referencias"

#: of sklearn.impute._iterative.IterativeImputer:176
msgid "`Stef van Buuren, Karin Groothuis-Oudshoorn (2011). \"mice: Multivariate Imputation by Chained Equations in R\". Journal of Statistical Software 45: 1-67. <https://www.jstatsoft.org/article/view/v045i03>`_"
msgstr "`Stef van Buuren, Karin Groothuis-Oudshoorn (2011). \"mice: Multivariate Imputation by Chained Equations in R\". Journal of Statistical Software 45: 1-67. <https://www.jstatsoft.org/article/view/v045i03>`_"

#: of sklearn.impute._iterative.IterativeImputer:181
msgid "`S. F. Buck, (1960). \"A Method of Estimation of Missing Values in Multivariate Data Suitable for use with an Electronic Computer\". Journal of the Royal Statistical Society 22(2): 302-306. <https://www.jstor.org/stable/2984099>`_"
msgstr "`S. F. Buck, (1960). \"A Method of Estimation of Missing Values in Multivariate Data Suitable for use with an Electronic Computer\". Journal of the Royal Statistical Society 22(2): 302-306. <https://www.jstor.org/stable/2984099>`_"

#: of sklearn.impute._iterative.IterativeImputer:188
msgid "[Rcd31b817a31e-1]_, [Rcd31b817a31e-2]_"
msgstr "[Rcd31b817a31e-1]_, [Rcd31b817a31e-2]_"

#: of sklearn.impute._iterative.IterativeImputer:191
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.impute._iterative.IterativeImputer:205
msgid "Methods"
msgstr "Métodos"

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`fit <sklearn.impute.IterativeImputer.fit>`\\"
msgstr ":obj:`fit <sklearn.impute.IterativeImputer.fit>`\\"

#: of sklearn.impute._iterative.IterativeImputer.fit:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Fits the imputer on X and return self."
msgstr "Ajusta la imputación en X y se devuelve a sí misma."

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.impute.IterativeImputer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.impute.IterativeImputer.fit_transform>`\\"

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Fits the imputer on X and return the transformed X."
msgstr "Ajusta la imputación en X y devuelve el X transformado."

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`get_params <sklearn.impute.IterativeImputer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.impute.IterativeImputer.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`set_params <sklearn.impute.IterativeImputer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.impute.IterativeImputer.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`transform <sklearn.impute.IterativeImputer.transform>`\\"
msgstr ":obj:`transform <sklearn.impute.IterativeImputer.transform>`\\"

#: of sklearn.impute._iterative.IterativeImputer.transform:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Imputes all missing values in X."
msgstr "Imputa todos los valores faltantes en X."

#: of sklearn.impute._iterative.IterativeImputer.fit:9
#: sklearn.impute._iterative.IterativeImputer.fit_transform:9
#: sklearn.impute._iterative.IterativeImputer.transform:10
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr "array-like, shape (n_samples, n_features)"

#: of sklearn.impute._iterative.IterativeImputer.fit:8
#: sklearn.impute._iterative.IterativeImputer.fit_transform:8
msgid "Input data, where \"n_samples\" is the number of samples and \"n_features\" is the number of features."
msgstr "Datos de entrada, donde \" n_samples \" es el número de muestras y \" n_features \" es el número de características."

#: of sklearn.impute._iterative.IterativeImputer.fit:12
#: sklearn.impute._iterative.IterativeImputer.fit_transform:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "ignored"
msgstr "ignored"

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.impute._iterative.IterativeImputer.fit
#: sklearn.impute._iterative.IterativeImputer.fit_transform
#: sklearn.impute._iterative.IterativeImputer.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.impute._iterative.IterativeImputer.fit:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.impute._iterative.IterativeImputer.fit:17
msgid "Returns self."
msgstr "Devuelve a sí mismo."

#: of
msgid "ignored."
msgstr "ignored."

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:28
#: sklearn.impute._iterative.IterativeImputer.transform:26
msgid "**Xt**"
msgstr "**Xt**"

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:17
#: sklearn.impute._iterative.IterativeImputer.transform:15
msgid "The imputed input data."
msgstr "Los datos de entrada imputados."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=False"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.impute._iterative.IterativeImputer.transform:4
msgid "Note that this is stochastic, and that if random_state is not fixed, repeated calls, or permuted input, will yield different results."
msgstr "Nota que esto es estocástico, y que si random_state no es fijo, las llamadas repetidas, o la entrada permutada, darán resultados diferentes."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like of shape (n_samples, n_features)"

#: of sklearn.impute._iterative.IterativeImputer.transform:10
msgid "The input data to complete."
msgstr "Los datos de entrada a completar."

#: ../modules/generated/sklearn.impute.IterativeImputer.examples:4
msgid "Examples using ``sklearn.impute.IterativeImputer``"
msgstr "Ejemplos usando ``sklearn.impute.IterativeImputer``"

#: ../modules/generated/sklearn.impute.IterativeImputer.examples:15
#: ../modules/generated/sklearn.impute.IterativeImputer.examples:23
msgid ":ref:`sphx_glr_auto_examples_impute_plot_iterative_imputer_variants_comparison.py`"
msgstr ":ref:`sphx_glr_auto_examples_impute_plot_iterative_imputer_variants_comparison.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_impute_plot_missing_values.py`"
#~ msgstr ""

