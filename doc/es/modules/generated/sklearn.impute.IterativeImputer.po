msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-04-14 23:58\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.impute.IterativeImputer.po\n"
"X-Crowdin-File-ID: 3224\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.impute.IterativeImputer.rst:2
msgid ":mod:`sklearn.impute`.IterativeImputer"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:2
msgid "Multivariate imputer that estimates each feature from all the others."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:4
msgid "A strategy for imputing missing values by modeling each feature with missing values as a function of other features in a round-robin fashion."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:7
msgid "Read more in the :ref:`User Guide <iterative_imputer>`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:13
msgid "This estimator is still **experimental** for now: the predictions and the API might change without any deprecation cycle. To use it, you need to explicitly import ``enable_iterative_imputer``::"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.impute._iterative.IterativeImputer
#: sklearn.impute._iterative.IterativeImputer.fit
#: sklearn.impute._iterative.IterativeImputer.fit_transform
#: sklearn.impute._iterative.IterativeImputer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:27
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object, default=BayesianRidge()"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:25
msgid "The estimator to use at each step of the round-robin imputation. If ``sample_posterior`` is True, the estimator must support ``return_std`` in its ``predict`` method."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:33
msgid "**missing_values**"
msgstr ""

#: of
msgid "int, np.nan, default=np.nan"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:30
msgid "The placeholder for the missing values. All occurrences of `missing_values` will be imputed. For pandas' dataframes with nullable integer dtypes with missing values, `missing_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:39
msgid "**sample_posterior**"
msgstr ""

#: of
msgid "boolean, default=False"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:36
msgid "Whether to sample from the (Gaussian) predictive posterior of the fitted estimator for each imputation. Estimator must support ``return_std`` in its ``predict`` method if set to ``True``. Set to ``True`` if using ``IterativeImputer`` for multiple imputations."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:47
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=10"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:42
msgid "Maximum number of imputation rounds to perform before returning the imputations computed during the final round. A round is a single imputation of each feature with missing values. The stopping criterion is met once `max(abs(X_t - X_{t-1}))/max(abs(X[known_vals]))` < tol, where `X_t` is `X` at iteration `t. Note that early stopping is only applied if ``sample_posterior=False``."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:50
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:50
msgid "Tolerance of the stopping condition."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:60
msgid "**n_nearest_features**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:53
msgid "Number of other features to use to estimate the missing values of each feature column. Nearness between features is measured using the absolute correlation coefficient between each feature pair (after initial imputation). To ensure coverage of features throughout the imputation process, the neighbor features are not necessarily nearest, but are drawn with probability proportional to correlation for each imputed target feature. Can provide significant speed-up when the number of features is huge. If ``None``, all features will be used."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:65
msgid "**initial_strategy**"
msgstr ""

#: of
msgid "str, default='mean'"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:63
msgid "Which strategy to use to initialize the missing values. Same as the ``strategy`` parameter in :class:`~sklearn.impute.SimpleImputer` Valid values: {\"mean\", \"median\", \"most_frequent\", or \"constant\"}."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "**imputation_order**"
msgstr ""

#: of
msgid "str, default='ascending'"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:68
msgid "The order in which the features will be imputed. Possible values:"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:70
msgid "\"ascending\""
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:71
msgid "From features with fewest missing values to most."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:72
msgid "\"descending\""
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:73
msgid "From features with most missing values to fewest."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:74
msgid "\"roman\""
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:75
msgid "Left to right."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:76
msgid "\"arabic\""
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:77
msgid "Right to left."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "\"random\""
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:79
msgid "A random order for each round."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:86
msgid "**skip_complete**"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:82
msgid "If ``True`` then features with missing values during ``transform`` which did not have any missing values during ``fit`` will be imputed with the initial imputation method only. Set to ``True`` if you have many features with no missing values at both ``fit`` and ``transform`` time to save compute."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:94
msgid "**min_value**"
msgstr ""

#: of
msgid "float or array-like of shape (n_features,), default=-np.inf"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:89
msgid "Minimum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one min value for each feature. The default is `-np.inf`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:93
#: sklearn.impute._iterative.IterativeImputer:101
msgid "Added support for array-like."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:102
msgid "**max_value**"
msgstr ""

#: of
msgid "float or array-like of shape (n_features,), default=np.inf"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:97
msgid "Maximum possible imputed value. Broadcast to shape (n_features,) if scalar. If array-like, expects shape (n_features,), one max value for each feature. The default is `np.inf`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:107
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:105
msgid "Verbosity flag, controls the debug messages that are issued as functions are evaluated. The higher, the more verbose. Can be 0, 1, or 2."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:114
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:110
msgid "The seed of the pseudo random number generator to use. Randomizes selection of estimator features if n_nearest_features is not None, the ``imputation_order`` if ``random``, and the sampling from posterior if ``sample_posterior`` is True. Use an integer for determinism. See :term:`the Glossary <random_state>`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:125
msgid "**add_indicator**"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:117
msgid "If True, a :class:`MissingIndicator` transform will stack onto output of the imputer's transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won't appear on the missing indicator even if there are missing values at transform/test time."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer
msgid "Attributes"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:130
msgid "**initial_imputer_** : object of type :class:`~sklearn.impute.SimpleImputer`"
msgstr ""

#: of
msgid "object of type"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:130
msgid "Imputer used to initialize the missing values."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:138
msgid "**imputation_sequence_**"
msgstr ""

#: of
msgid "list of tuples"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:133
msgid "Each tuple has ``(feat_idx, neighbor_feat_idx, estimator)``, where ``feat_idx`` is the current feature to be imputed, ``neighbor_feat_idx`` is the array of other features used to impute the current feature, and ``estimator`` is the trained estimator used for the imputation. Length is ``self.n_features_with_missing_ * self.n_iter_``."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:142
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:141
msgid "Number of iteration rounds that occurred. Will be less than ``self.max_iter`` if early stopping criterion was reached."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:145
msgid "**n_features_with_missing_**"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:145
msgid "Number of features with missing values."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:149
msgid "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:148
msgid "MissingIndicator"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:148
msgid "Indicator used to add binary indicators for missing values. ``None`` if add_indicator is False."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:156
msgid "**random_state_**"
msgstr ""

#: of
msgid "RandomState instance"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:152
msgid "RandomState instance that is generated either from a seed, the random number generator or by `np.random`."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:161
msgid ":obj:`SimpleImputer`"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:162
msgid "Univariate imputation of missing values."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:166
msgid "Notes"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:167
msgid "To support imputation in inductive mode we store each feature's estimator during the ``fit`` phase, and predict without refitting (in order) during the ``transform`` phase."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:171
msgid "Features which contain all missing values at ``fit`` are discarded upon ``transform``."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:175
msgid "References"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:176
msgid "`Stef van Buuren, Karin Groothuis-Oudshoorn (2011). \"mice: Multivariate Imputation by Chained Equations in R\". Journal of Statistical Software 45: 1-67. <https://www.jstatsoft.org/article/view/v045i03>`_"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:181
msgid "`S. F. Buck, (1960). \"A Method of Estimation of Missing Values in Multivariate Data Suitable for use with an Electronic Computer\". Journal of the Royal Statistical Society 22(2): 302-306. <https://www.jstor.org/stable/2984099>`_"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:188
msgid "[Rcd31b817a31e-1]_, [Rcd31b817a31e-2]_"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:191
msgid "Examples"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:205
msgid "Methods"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`fit <sklearn.impute.IterativeImputer.fit>`\\"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Fits the imputer on X and return self."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.impute.IterativeImputer.fit_transform>`\\"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Fits the imputer on X and return the transformed X."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`get_params <sklearn.impute.IterativeImputer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`set_params <sklearn.impute.IterativeImputer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid ":obj:`transform <sklearn.impute.IterativeImputer.transform>`\\"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.transform:2
#: sklearn.impute._iterative.IterativeImputer:213:<autosummary>:1
msgid "Imputes all missing values in X."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit:9
#: sklearn.impute._iterative.IterativeImputer.fit_transform:9
#: sklearn.impute._iterative.IterativeImputer.transform:10
msgid "**X**"
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit:8
#: sklearn.impute._iterative.IterativeImputer.fit_transform:8
msgid "Input data, where \"n_samples\" is the number of samples and \"n_features\" is the number of features."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit:12
#: sklearn.impute._iterative.IterativeImputer.fit_transform:12
msgid "**y**"
msgstr ""

#: of
msgid "ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.impute._iterative.IterativeImputer.fit
#: sklearn.impute._iterative.IterativeImputer.fit_transform
#: sklearn.impute._iterative.IterativeImputer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.impute._iterative.IterativeImputer.fit:28
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit:17
msgid "Returns self."
msgstr ""

#: of
msgid "ignored."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:28
#: sklearn.impute._iterative.IterativeImputer.transform:26
msgid "**Xt**"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.fit_transform:17
#: sklearn.impute._iterative.IterativeImputer.transform:15
msgid "The imputed input data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.transform:4
msgid "Note that this is stochastic, and that if random_state is not fixed, repeated calls, or permuted input, will yield different results."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.impute._iterative.IterativeImputer.transform:10
msgid "The input data to complete."
msgstr ""

#: ../modules/generated/sklearn.impute.IterativeImputer.examples:4
msgid "Examples using ``sklearn.impute.IterativeImputer``"
msgstr ""

#: ../modules/generated/sklearn.impute.IterativeImputer.examples:15
#: ../modules/generated/sklearn.impute.IterativeImputer.examples:23
msgid ":ref:`sphx_glr_auto_examples_impute_plot_iterative_imputer_variants_comparison.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_impute_plot_missing_values.py`"
#~ msgstr ""

