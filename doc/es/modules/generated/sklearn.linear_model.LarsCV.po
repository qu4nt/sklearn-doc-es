msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.LarsCV.po\n"
"X-Crowdin-File-ID: 5200\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.LarsCV.rst:2
msgid ":mod:`sklearn.linear_model`.LarsCV"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:2
msgid "Cross-validated Least Angle Regression model."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:4
msgid "See glossary entry for :term:`cross-validation estimator`."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:6
msgid "Read more in the :ref:`User Guide <least_angle_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.LarsCV
#: sklearn.linear_model._least_angle.LarsCV.fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:13
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:11
msgid "whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:16
msgid "**verbose**"
msgstr ""

#: of
msgid "bool or int, default=False"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:16
msgid "Sets the verbosity amount."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:19
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=500"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:19
msgid "Maximum number of iterations to perform."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:27
msgid "**normalize**"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:22
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:32
msgid "**precompute**"
msgstr ""

#: of
msgid "bool, 'auto' or array-like , default='auto'"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:30
msgid "Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix cannot be passed as argument since we will use only subsets of X."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:49
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:35
msgid "Determines the cross-validation splitting strategy. Possible inputs for cv are:"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:38
msgid "None, to use the default 5-fold cross-validation,"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:39
msgid "integer, to specify the number of folds."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:40
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:41
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:43
msgid "For integer/None inputs, :class:`KFold` is used."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:45
msgid "Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:48
msgid "``cv`` default value if None changed from 3-fold to 5-fold."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:53
msgid "**max_n_alphas**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:52
msgid "The maximum number of points on the path used to compute the residuals in the cross-validation"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:59
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int or None, default=None"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:56
msgid "Number of CPUs to use during the cross validation. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:66
msgid "**eps**"
msgstr ""

#: of
msgid "float, default=np.finfo(float).eps"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:62
msgid "The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the ``tol`` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:72
msgid "**copy_X**"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:69
msgid "If ``True``, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:78
msgid "**active_**"
msgstr ""

#: of
msgid "list of length n_alphas or list of such lists"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:77
msgid "Indices of active variables at the end of the path. If this is a list of lists, the outer list length is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:81
msgid "**coef_**"
msgstr ""

#: of
msgid "array-like of shape (n_features,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:81
msgid "parameter vector (w in the formulation formula)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:84
msgid "**intercept_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:84
msgid "independent term in decision function"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:87
msgid "**coef_path_**"
msgstr ""

#: of
msgid "array-like of shape (n_features, n_alphas)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:87
msgid "the varying values of the coefficients along the path"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:90
msgid "**alpha_**"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:90
msgid "the estimated regularization parameter alpha"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:93
msgid "**alphas_**"
msgstr ""

#: of
msgid "array-like of shape (n_alphas,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:93
msgid "the different values of alpha along the path"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:96
msgid "**cv_alphas_**"
msgstr ""

#: of
msgid "array-like of shape (n_cv_alphas,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:96
msgid "all the values of alpha along the path for the different folds"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:100
msgid "**mse_path_**"
msgstr ""

#: of
msgid "array-like of shape (n_folds, n_cv_alphas)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:99
msgid "the mean square error on left-out for each fold along the path (alpha values given by ``cv_alphas``)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:106
msgid "**n_iter_**"
msgstr ""

#: of
msgid "array-like or int"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:103
msgid "the number of iterations run by Lars with the optimal alpha."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:111
msgid ":obj:`lars_path`, :obj:`LassoLars`, :obj:`LassoLarsCV`"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:117
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:130
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.LarsCV.fit>`\\"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:2
#: sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid "Fit the model using X, y as training data."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.LarsCV.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.LarsCV.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.LarsCV.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.LarsCV.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._least_angle.LarsCV:138:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._least_angle.LarsCV.fit:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._least_angle.LarsCV.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.LarsCV.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._least_angle.LarsCV.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:16
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

