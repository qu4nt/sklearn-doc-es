msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-14 23:58\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.po\n"
"X-Crowdin-File-ID: 3192\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst:2
msgid ":mod:`sklearn.gaussian_process`.GaussianProcessRegressor"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:2
msgid "Gaussian process regression (GPR)."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:4
msgid "The implementation is based on Algorithm 2.1 of Gaussian Processes for Machine Learning (GPML) by Rasmussen and Williams."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:7
msgid "In addition to standard scikit-learn estimator API, GaussianProcessRegressor:"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:10
msgid "allows prediction without prior fitting (based on the GP prior)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:11
msgid "provides an additional method sample_y(X), which evaluates samples drawn from the GPR (prior or posterior) at given inputs"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:13
msgid "exposes a method log_marginal_likelihood(theta), which can be used externally for other ways of selecting hyperparameters, e.g., via Markov chain Monte Carlo."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:17
msgid "Read more in the :ref:`User Guide <gaussian_process>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y
msgid "Parameters"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:28
msgid "**kernel**"
msgstr ""

#: of
msgid "kernel instance, default=None"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:24
msgid "The kernel specifying the covariance function of the GP. If None is passed, the kernel ``ConstantKernel(1.0, constant_value_bounds=\"fixed\" * RBF(1.0, length_scale_bounds=\"fixed\")`` is used as default. Note that the kernel hyperparameters are optimized during fitting unless the bounds are marked as \"fixed\"."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:40
msgid "**alpha**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_samples,), default=1e-10"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:31
msgid "Value added to the diagonal of the kernel matrix during fitting. This can prevent a potential numerical issue during fitting, by ensuring that the calculated values form a positive definite matrix. It can also be interpreted as the variance of additional Gaussian measurement noise on the training observations. Note that this is different from using a `WhiteKernel`. If an array is passed, it must have the same number of entries as the data used for fitting and is used as datapoint-dependent noise level. Allowing to specify the noise level directly as a parameter is mainly for convenience and for consistency with Ridge."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:65
msgid "**optimizer**"
msgstr ""

#: of
msgid "\"fmin_l_bfgs_b\" or callable, default=\"fmin_l_bfgs_b\""
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:43
msgid "Can either be one of the internally supported optimizers for optimizing the kernel's parameters, specified by a string, or an externally defined optimizer passed as a callable. If a callable is passed, it must have the signature::"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:61
msgid "Per default, the 'L-BGFS-B' algorithm from scipy.optimize.minimize is used. If None is passed, the kernel's parameters are kept fixed. Available internal optimizers are::"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:74
msgid "**n_restarts_optimizer**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:68
msgid "The number of restarts of the optimizer for finding the kernel's parameters which maximize the log-marginal likelihood. The first run of the optimizer is performed from the kernel's initial parameters, the remaining ones (if any) from thetas sampled log-uniform randomly from the space of allowed theta-values. If greater than 0, all bounds must be finite. Note that n_restarts_optimizer == 0 implies that one run is performed."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:83
msgid "**normalize_y**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:77
msgid "Whether the target values y are normalized, the mean and variance of the target values are set equal to 0 and 1 respectively. This is recommended for cases where zero-mean, unit-variance priors are used. Note that, in this implementation, the normalisation is reversed before the GP predictions are reported."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:89
msgid "**copy_X_train**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:86
msgid "If True, a persistent copy of the training data is stored in the object. Otherwise, just a reference to the training data is stored, which might cause predictions to change if the data is modified externally."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:97
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:17
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:92
msgid "Determines random number generation used to initialize the centers. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:103
msgid "**X_train_**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features) or list of object"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:102
msgid "Feature vectors or other representations of training data (also required for prediction)."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:106
msgid "**y_train_**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:106
msgid "Target values in training data (also required for prediction)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:110
msgid "**kernel_**"
msgstr ""

#: of
msgid "kernel instance"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:109
msgid "The kernel used for prediction. The structure of the kernel is the same as the one passed as parameter but with optimized hyperparameters"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:113
msgid "**L_**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_samples)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:113
msgid "Lower-triangular Cholesky decomposition of the kernel in ``X_train_``"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:116
msgid "**alpha_**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:116
msgid "Dual coefficients of training data points in kernel space"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:125
msgid "**log_marginal_likelihood_value_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:119
msgid "The log-marginal-likelihood of ``self.kernel_.theta``"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:128
msgid "Examples"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor:142
msgid "Methods"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`fit <sklearn.gaussian_process.GaussianProcessRegressor.fit>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Fit Gaussian process regression model."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`get_params <sklearn.gaussian_process.GaussianProcessRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`log_marginal_likelihood <sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood>`\\"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Returns log-marginal likelihood of theta for training data."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`predict <sklearn.gaussian_process.GaussianProcessRegressor.predict>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Predict using the Gaussian process regression model"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`sample_y <sklearn.gaussian_process.GaussianProcessRegressor.sample_y>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Draw samples from Gaussian process and evaluate at X."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`score <sklearn.gaussian_process.GaussianProcessRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid ":obj:`set_params <sklearn.gaussian_process.GaussianProcessRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor:152:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:8
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:12
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:8
msgid "**X**"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:8
msgid "Feature vectors or other representations of training data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:11
msgid "**y**"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:11
msgid "Target values"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:10
msgid "**theta**"
msgstr ""

#: of
msgid "array-like of shape (n_kernel_params,) default=None"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:8
msgid "Kernel hyperparameters for which the log-marginal likelihood is evaluated. If None, the precomputed log_marginal_likelihood of ``self.kernel_.theta`` is returned."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:15
msgid "**eval_gradient**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:13
msgid "If True, the gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta is returned additionally. If True, theta must not be None."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:19
msgid "**clone_kernel**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:18
msgid "If True, the kernel attribute is copied. If False, the kernel attribute is modified, but may result in a performance improvement."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:24
msgid "**log_likelihood**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:24
msgid "Log-marginal likelihood of theta for training data."
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:40
msgid "**log_likelihood_gradient**"
msgstr ""

#: of
msgid "ndarray of shape (n_kernel_params,), optional"
msgstr ""

#: of
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood:27
msgid "Gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta. Only returned when eval_gradient is True."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:4
msgid "We can also predict based on an unfitted model by using the GP prior. In addition to the mean of the predictive distribution, also its standard deviation (return_std=True) or covariance (return_cov=True). Note that at most one of the two can be requested."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:12
#: sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:8
msgid "Query points where the GP is evaluated."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:16
msgid "**return_std**"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:15
msgid "If True, the standard-deviation of the predictive distribution at the query points is returned along with the mean."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:20
msgid "**return_cov**"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:19
msgid "If True, the covariance of the joint predictive distribution at the query points is returned along with the mean."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:25
msgid "**y_mean**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, [n_output_dims])"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:25
msgid "Mean of predictive distribution a query points."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:29
msgid "**y_std**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,), optional"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:28
msgid "Standard deviation of predictive distribution at query points. Only returned when `return_std` is True."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:44
msgid "**y_cov**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_samples), optional"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict:32
msgid "Covariance of joint predictive distribution a query points. Only returned when `return_cov` is True."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:11
msgid "**n_samples**"
msgstr ""

#: of
msgid "int, default=1"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:11
msgid "The number of samples drawn from the Gaussian process"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=0"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:14
msgid "Determines random number generation to randomly draw samples. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:34
msgid "**y_samples**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X, [n_output_dims], n_samples)"
msgstr ""

#: of sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y:22
msgid "Values of n_samples samples drawn from Gaussian process and evaluated at query points."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:4
msgid "Examples using ``sklearn.gaussian_process.GaussianProcessRegressor``"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:15
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_compare_gpr_krr.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:34
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:42
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_prior_posterior.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:53
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:61
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_noisy.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:72
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:80
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_noisy_targets.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:91
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:99
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_co2.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:110
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.examples:118
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_on_structured_data.py`"
msgstr ""

