msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-24 00:24\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.ExtraTreesClassifier.po\n"
"X-Crowdin-File-ID: 5140\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.ExtraTreesClassifier"
msgstr ":mod:`sklearn.ensemble`.ExtraTreesClassifier"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:2
msgid "An extra-trees classifier."
msgstr "Un clasificador extra-árbol."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:4
msgid "This class implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting."
msgstr "Esta clase implementa un metaestimador que se ajusta a un número de árboles de decisión aleatorios (alias extra-arboles) en varias submuestras del conjunto de datos y utiliza el promedio para mejorar la precisión predictiva y controlar el sobre-ajuste."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:9
msgid "Read more in the :ref:`User Guide <forest>`."
msgstr "Más información en :ref:`Guía de usuario <forest>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ExtraTreesClassifier
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:18
msgid "**n_estimators**"
msgstr "**n_estimators**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:14
msgid "The number of trees in the forest."
msgstr "El número de árboles en el bosque."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:16
msgid "The default value of ``n_estimators`` changed from 10 to 100 in 0.22."
msgstr "El valor predeterminado de ``n_estimators`` cambió de 10 a 100 en 0.22."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:22
msgid "**criterion**"
msgstr "**criterion**"

#: of
msgid "{\"gini\", \"entropy\"}, default=\"gini\""
msgstr "{\"gini\", \"entropy\"}, default=\"gini\""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:21
msgid "The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain."
msgstr "La función de medir la calidad de una división, los criterios soportados son \"gini\" para la impureza de Gini y \"entropy\" para la ganancia de información."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:27
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:25
msgid "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr "La profundidad máxima del árbol. Si None, entonces los nodos se expanden hasta que todas las hojas sean puras o hasta que todas contengan menos que min_samples_split muestras."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:38
msgid "**min_samples_split**"
msgstr "**min_samples_split**"

#: of
msgid "int or float, default=2"
msgstr "int o float, default=2"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:30
msgid "The minimum number of samples required to split an internal node:"
msgstr "El número mínimo de muestras requeridas para dividir un nodo interno:"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:32
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr "Si int, entonces considera `min_samples_split` como el número mínimo."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:33
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr "Si float, entonces `min_samples_split` es una fracción y `ceil(min_samples_split * n_samples)` son el número mínimo de muestras para cada división."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:37
#: sklearn.ensemble._forest.ExtraTreesClassifier:52
msgid "Added float values for fractions."
msgstr "Se añadieron valores flotantes para las fracciones."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:53
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int or float, default=1"
msgstr "int o float, default=1"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:41
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr "El número mínimo de muestras requeridas para estar en un nodo de hoja. Un punto dividido a cualquier profundidad sólo se considerará si deja al menos ``min_samples_leaf`` muestras de entrenamiento en cada una de las ramas izquierda y derecha. Esto puede tener el efecto de suavizar el modelo, especialmente en regresión."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:47
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr "Si int, entonces considera `min_samples_split` como el número mínimo."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:48
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr "Si float, entonces `min_samples_leaf` es una fracción y `ceil(min_samples_leaf * n_samples)` son el número mínimo de muestras para cada nodo."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:58
msgid "**min_weight_fraction_leaf**"
msgstr "**min_weight_fraction_leaf**"

#: of
msgid "float, default=0.0"
msgstr "float, default=0.0"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:56
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr "La fracción mínima ponderada de la suma total de las ponderaciones (de todas las muestras de entrada) requeridas para estar en un nodo de hoja. Las muestras tienen la misma ponderación cuando no se proporciona sample_weight."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:74
msgid "**max_features**"
msgstr "**max_features**"

#: of
msgid "{\"auto\", \"sqrt\", \"log2\"}, int or float, default=\"auto\""
msgstr "{\"auto\", \"sqrt\", \"log2\"}, int o float, default=\"auto\""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:61
msgid "The number of features to consider when looking for the best split:"
msgstr "El número de características a tener en cuenta cuando se busca la mejor división:"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:63
msgid "If int, then consider `max_features` features at each split."
msgstr "Si es int, entonces considere las características `max_features` en cada división."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:64
msgid "If float, then `max_features` is a fraction and `round(max_features * n_features)` features are considered at each split."
msgstr "Si float, entonces `max_features` es una fracción y las características `round(max_features * n_features)` son consideradas en cada división."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:67
msgid "If \"auto\", then `max_features=sqrt(n_features)`."
msgstr "Si \"auto\", entonces `max_features=sqrt(n_features)`."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:68
msgid "If \"sqrt\", then `max_features=sqrt(n_features)`."
msgstr "Si \"sqrt\", entonces `max_features=sqrt(n_features)`."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:69
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr "Si \"log2\", entonces `max_features=log2(n_features)`."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:70
msgid "If None, then `max_features=n_features`."
msgstr "Si None, entonces `max_features=n_features`."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:72
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr "Nota: la búsqueda de una división no se detiene hasta que se encuentre al menos una partición válida de las muestras de nodos, incluso si requiere inspeccionar eficazmente más de las características de ``max_features``."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:79
msgid "**max_leaf_nodes**"
msgstr "**max_leaf_nodes**"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:77
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr "Hacer crecer árboles con ``max_leaf_nodes`` en modo best-first. Los mejores nodos se definen como una reducción relativa de la impureza. Si no hay ninguno, el número de nodos hoja es ilimitado."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:97
msgid "**min_impurity_decrease**"
msgstr "**min_impurity_decrease**"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:82
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr "Un nodo se dividirá si esta división induce una disminución de la impureza mayor o igual a este valor."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:85
msgid "The weighted impurity decrease equation is the following::"
msgstr "La ecuación de disminución de impureza ponderada es la siguiente::"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:90
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr "donde ``N`` es el número total de muestras, ``N_t`` es el número de muestras en el nodo actual, ``N_t_L`` es el número de muestras en el hijo izquierdo, y ``N_t_R`` es el número de muestras en el hijo derecho."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:94
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr "``N``, ``N_t``, ``N_t_R`` y ``N_t_L`` se refieren a la suma ponderada, si ``sample_weight`` es pasada."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:108
msgid "**min_impurity_split**"
msgstr "**min_impurity_split**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:100
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr "Umbral para la detención temprana del crecimiento del árbol. Un nodo se dividirá si su impureza está por encima del umbral, de lo contrario es una hoja."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:103
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr "``min_impurity_split`` ha quedado obsoleto en favor de ``min_impurity_decrease`` en la versión 0.19. El valor por defecto de ``min_impurity_split`` ha cambiado de 1e-7 a 0 en 0.23 y se eliminará en 1.0 (cambio de nombre de 0.25). Utiliza ``min_impurity_decrease`` en su lugar."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:112
msgid "**bootstrap**"
msgstr "**bootstrap**"

#: of
msgid "bool, default=False"
msgstr "booleano, default=False"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:111
msgid "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
msgstr "Si se utilizan muestras por bootstrap al construir árboles. Si es False, todo el conjunto de datos se utiliza para construir cada árbol."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:116
msgid "**oob_score**"
msgstr "**oob_score**"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:115
msgid "Whether to use out-of-bag samples to estimate the generalization accuracy."
msgstr "Si se utilizan muestras fuera de la bolsa para estimar la precisión de la generalización."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:123
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:119
msgid "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "El número de trabajos a ejecutar en paralelo. :meth:`fit`, :meth:`predict`, :meth:`decision_path` y :meth:`apply` son todos paralelizados sobre los árboles. ``None`` significa 1 excepto en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa usar todos los procesadores. Ver :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:134
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, instancia RandomState, default=None"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:126
msgid "Controls 3 sources of randomness:"
msgstr "Controla 3 fuentes de aleatoriedad:"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:128
msgid "the bootstrapping of the samples used when building trees (if ``bootstrap=True``)"
msgstr "el bootstrapping de las muestras utilizadas al construir árboles (si ``bootstrap=True``)"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:130
msgid "the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``)"
msgstr "el muestreo de las características a considerar al buscar la mejor división en cada nodo (si ``max_features < n_features``)"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:132
msgid "the draw of the splits for each of the `max_features`"
msgstr "el sorteo de las divisiones para cada una de las `max_features`"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:134
msgid "See :term:`Glossary <random_state>` for details."
msgstr "Ver :term:`Glosario <random_state>` para más detalles."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:137
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:137
msgid "Controls the verbosity when fitting and predicting."
msgstr "Controla la verbosidad a la hora de ajustar y predecir."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:142
msgid "**warm_start**"
msgstr "**warm_start**"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:140
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
msgstr "Cuando se establece a ``True``, reutiliza la solución de la llamada anterior para ajustar y añadir más estimadores al conjunto, de lo contrario, solamente ajustara un nuevo bosque. Ver :term:`el Glosario <warm_start>`."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:167
msgid "**class_weight**"
msgstr "**class_weight**"

#: of
msgid "{\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None"
msgstr "{\"balanced\", \"balanced_subsample\"}, dict o lista de diccionarios,             default=None"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:145
msgid "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y."
msgstr "Ponderaciones asociadas a las clases de la forma ``{class_label: weight}``. Si no se da, se supone que todas las clases tienen una ponderación de uno. Para los problemas de varias salidas, se puede proporcionar una lista de diccionarios en el mismo orden que las columnas de y."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:150
msgid "Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}]."
msgstr "Ten en cuenta que para multi-salida (incluyendo multietiqueta) las ponderaciones deben ser definidas para cada clase de cada columna en su propio diccionario. Por ejemplo, para la clasificación múltiple de cuatro clases debe ser [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] en lugar de [{1:1}, {2:5}, {3:1}, {4:1}]."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:156
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``"
msgstr "El modo \"balanced\" utiliza los valores de y para ajustar automáticamente las ponderaciones inversamente proporcionales a las frecuencias de clase en los datos de entrada como ``n_samples / (n_classes * np.bincount(y))``"

#: of sklearn.ensemble._forest.ExtraTreesClassifier:160
msgid "The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown."
msgstr "El modo \"balanced_subsample\" es igual que \"balanced\", excepto que las ponderaciones se calculan basándose en la muestra de bootstrap para cada árbol que crece."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:164
msgid "For multi-output, the weights of each column of y will be multiplied."
msgstr "Para multisalida, las ponderaciones de cada columna de y se multiplicarán."

#: of sklearn.ensemble._forest.ExtraTreesClassifier:166
msgid "Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:175
msgid "**ccp_alpha**"
msgstr ""

#: of
msgid "non-negative float, default=0.0"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:170
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:189
msgid "**max_samples**"
msgstr ""

#: of
msgid "int or float, default=None"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:178
msgid "If bootstrap is True, the number of samples to draw from X to train each base estimator."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:181
msgid "If None (default), then draw `X.shape[0]` samples."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:182
msgid "If int, then draw `max_samples` samples."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:183
msgid "If float, then draw `max_samples * X.shape[0]` samples. Thus, `max_samples` should be in the interval `(0, 1)`."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:195
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "ExtraTreesClassifier"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:194
msgid "The child estimator template used to create the collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:198
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of DecisionTreeClassifier"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:198
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:202
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,) or a list of such arrays"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:201
msgid "The classes labels (single output problem), or a list of arrays of class labels (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:206
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int or list"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:205
msgid "The number of classes (single output problem), or a list containing the number of classes for each output (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:209
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.ExtraTreesClassifier.feature_importances_:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:209
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:212
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:212
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:215
msgid "**n_outputs_**"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:215
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:219
msgid "**oob_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:218
msgid "Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:229
msgid "**oob_decision_function_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:222
msgid "Decision function computed with out-of-bag estimate on the training set. If n_estimators is small it might be possible that a data point was never left out during the bootstrap. In this case, `oob_decision_function_` might contain NaN. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:234
msgid ":obj:`sklearn.tree.ExtraTreeClassifier`"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:235
msgid "Base classifier for this ensemble."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:236
msgid ":obj:`RandomForestClassifier`"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:237
msgid "Ensemble Classifier based on trees with optimal splits."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:241
msgid "Notes"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:242
msgid "The default values for the parameters controlling the size of the trees (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:249
msgid "References"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:250
msgid "P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\", Machine Learning, 63(1), 3-42, 2006."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:255
msgid "[Rc8f28bfad63f-1]_"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:258
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:269
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.ExtraTreesClassifier.apply>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`decision_path <sklearn.ensemble.ExtraTreesClassifier.decision_path>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Return the decision path in the forest."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.ExtraTreesClassifier.fit>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Build a forest of trees from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.ExtraTreesClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.ExtraTreesClassifier.predict>`\\"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
#: sklearn.ensemble._forest.ForestClassifier.predict:2
msgid "Predict class for X."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.ensemble.ExtraTreesClassifier.predict_log_proba>`\\"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:2
msgid "Predict class log-probabilities for X."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.ExtraTreesClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:2
msgid "Predict class probabilities for X."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.ExtraTreesClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.ExtraTreesClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._forest.ExtraTreesClassifier:281:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._forest.BaseForest.apply:10
#: sklearn.ensemble._forest.BaseForest.decision_path:11
#: sklearn.ensemble._forest.BaseForest.fit:10
#: sklearn.ensemble._forest.ForestClassifier.predict:14
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:13
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:14
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.ensemble._forest.BaseForest.apply:8
#: sklearn.ensemble._forest.BaseForest.decision_path:9
#: sklearn.ensemble._forest.ForestClassifier.predict:12
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:11
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:12
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.ExtraTreesClassifier.feature_importances_
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:27
msgid "**X_leaves**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_estimators)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:15
msgid "For each datapoint x in X and for each tree in the forest, return the index of the leaf x ends up in."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:18
msgid "**indicator**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:16
msgid "Return a node indicator matrix where non zero elements indicates that the samples goes through the nodes. The matrix is of CSR format."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:33
msgid "**n_nodes_ptr**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators + 1,)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:21
msgid "The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]] gives the indicator value for the i-th estimator."
msgstr ""

#: of sklearn.ensemble.ExtraTreesClassifier.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.ExtraTreesClassifier.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.ExtraTreesClassifier.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.ExtraTreesClassifier.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:8
msgid "The training input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csc_matrix``."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._forest.BaseForest.fit:14
#: sklearn.ensemble._forest.ForestClassifier.predict:30
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.ensemble._forest.BaseForest.fit:13
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._forest.BaseForest.fit:21
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.ensemble._forest.BaseForest.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._forest.BaseForest.fit:37
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict:4
msgid "The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict:19
msgid "The predicted classes."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:4
msgid "The predicted class log-probabilities of an input sample is computed as the log of the mean predicted class probabilities of the trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:31
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:32
msgid "**p**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes), or a list of n_outputs"
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:18
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:19
msgid "such arrays if n_outputs > 1. The class probabilities of the input samples. The order of the classes corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_proba:4
msgid "The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest. The class probability of a single tree is the fraction of samples of the same class in a leaf."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

