msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-05-18 21:47\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.impute.KNNImputer.po\n"
"X-Crowdin-File-ID: 5392\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.impute.KNNImputer.rst:2
msgid ":mod:`sklearn.impute`.KNNImputer"
msgstr ":mod:`sklearn.impute`.KNNImputer"

#: of sklearn.impute._knn.KNNImputer:2
msgid "Imputation for completing missing values using k-Nearest Neighbors."
msgstr "Imputación para completar los valores faltantes mediante vecinos más cercanos (k-Nearest Neighbors)."

#: of sklearn.impute._knn.KNNImputer:4
msgid "Each sample's missing values are imputed using the mean value from `n_neighbors` nearest neighbors found in the training set. Two samples are close if the features that neither is missing are close."
msgstr "Los valores faltantes en cada muestra se imputan utilizando el valor medio de los `n_neighbors` vecinos más cercanos encontrados en el conjunto de entrenamiento. Dos muestras son cercanas si las características que faltan están cerca."

#: of sklearn.impute._knn.KNNImputer:8
msgid "Read more in the :ref:`User Guide <knnimpute>`."
msgstr "Más información en el :ref:`Manual de usuario <knnimpute>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform sklearn.impute._knn.KNNImputer
#: sklearn.impute._knn.KNNImputer.fit sklearn.impute._knn.KNNImputer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.impute._knn.KNNImputer:18
msgid "**missing_values**"
msgstr "**missing_values**"

#: of
msgid "int, float, str, np.nan or None, default=np.nan"
msgstr "int, float, str, np.nan o None, default=np.nan"

#: of sklearn.impute._knn.KNNImputer:15
msgid "The placeholder for the missing values. All occurrences of `missing_values` will be imputed. For pandas' dataframes with nullable integer dtypes with missing values, `missing_values` should be set to np.nan, since `pd.NA` will be converted to np.nan."
msgstr "El marcador de posición para los valores faltantes. Todas las apariciones de `missing_values` serán imputadas. Para los marcos de datos de pandas con dtypes enteros anulables con valores perdidos, `missing_values` debe establecerse en np.nan, ya que `pd.NA` se convertirá en np.nan."

#: of sklearn.impute._knn.KNNImputer:21
msgid "**n_neighbors**"
msgstr "**n_neighbors**"

#: of
msgid "int, default=5"
msgstr "int, default=5"

#: of sklearn.impute._knn.KNNImputer:21
msgid "Number of neighboring samples to use for imputation."
msgstr "Número de muestras vecinas a utilizar para la imputación."

#: of sklearn.impute._knn.KNNImputer:33
msgid "**weights**"
msgstr "**weights**"

#: of
msgid "{'uniform', 'distance'} or callable, default='uniform'"
msgstr "{'uniform', 'distance'} or callable, default='uniform'"

#: of sklearn.impute._knn.KNNImputer:24
msgid "Weight function used in prediction.  Possible values:"
msgstr "Función de peso utilizada en la predicción.  Valores posibles:"

#: of sklearn.impute._knn.KNNImputer:26
msgid "'uniform' : uniform weights. All points in each neighborhood are weighted equally."
msgstr "'uniform' : ponderaciones uniformes. Todos los puntos de cada vecindad se ponderan por igual."

#: of sklearn.impute._knn.KNNImputer:28
msgid "'distance' : weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away."
msgstr "'distance' : ponderar los puntos por la inversa de su distancia. en este caso, los vecinos más cercanos de un punto de consulta tendrán una mayor influencia que los vecinos más alejados."

#: of sklearn.impute._knn.KNNImputer:31
msgid "callable : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights."
msgstr "callable : una función definida por el usuario que acepta un arreglo de distancias, y devuelve un arreglo de la misma forma que contiene los pesos."

#: of sklearn.impute._knn.KNNImputer:42
msgid "**metric**"
msgstr "**metric**"

#: of
msgid "{'nan_euclidean'} or callable, default='nan_euclidean'"
msgstr "{'nan_euclidean'} or callable, default='nan_euclidean'"

#: of sklearn.impute._knn.KNNImputer:36
msgid "Distance metric for searching neighbors. Possible values:"
msgstr "Métrica de distancia para la búsqueda de vecinos. Valores posibles:"

#: of sklearn.impute._knn.KNNImputer:38
msgid "'nan_euclidean'"
msgstr "'nan_euclidean'"

#: of sklearn.impute._knn.KNNImputer:39
msgid "callable : a user-defined function which conforms to the definition of ``_pairwise_callable(X, Y, metric, **kwds)``. The function accepts two arrays, X and Y, and a `missing_values` keyword in `kwds` and returns a scalar distance value."
msgstr "callable : una función definida por el usuario que se ajusta a la definición de ``_pairwise_callable(X, Y, metric, **kwds)``. La función acepta dos arreglos, X e Y, y una palabra clave `missing_values` en `kwds` y devuelve un valor de distancia escalar."

#: of sklearn.impute._knn.KNNImputer:46
msgid "**copy**"
msgstr "**copy**"

#: of
msgid "bool, default=True"
msgstr "bool, default=False"

#: of sklearn.impute._knn.KNNImputer:45
msgid "If True, a copy of X will be created. If False, imputation will be done in-place whenever possible."
msgstr "Si es True, se creará una copia de X. Si es False, la imputación se hará en el lugar siempre que sea posible."

#: of sklearn.impute._knn.KNNImputer:57
msgid "**add_indicator**"
msgstr "**add_indicator**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.impute._knn.KNNImputer:49
msgid "If True, a :class:`MissingIndicator` transform will stack onto the output of the imputer's transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won't appear on the missing indicator even if there are missing values at transform/test time."
msgstr "Si es True, una transformación :class:`MissingIndicator` se apilará en la salida de la transformación del imputador. Esto permite que un estimador predictivo tenga en cuenta los valores perdidos a pesar de la imputación. Si una característica no tiene valores perdidos en el tiempo de ajuste/entrenamiento, la característica no aparecerá en el indicador de falta aunque haya valores perdidos en el tiempo de transformación/prueba."

#: of sklearn.impute._knn.KNNImputer
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.impute._knn.KNNImputer:68
msgid "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"
msgstr "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"

#: of sklearn.impute._knn.KNNImputer:67
msgid "MissingIndicator"
msgstr "MissingIndicator"

#: of sklearn.impute._knn.KNNImputer:62
msgid "Indicator used to add binary indicators for missing values. ``None`` if add_indicator is False."
msgstr "Indicador utilizado para añadir indicadores binarios para los valores faltantes. ``None`` si add_indicator es False."

#: of sklearn.impute._knn.KNNImputer:71
msgid "References"
msgstr "Referencias"

#: of sklearn.impute._knn.KNNImputer:72
msgid "Olga Troyanskaya, Michael Cantor, Gavin Sherlock, Pat Brown, Trevor Hastie, Robert Tibshirani, David Botstein and Russ B. Altman, Missing value estimation methods for DNA microarrays, BIOINFORMATICS Vol. 17 no. 6, 2001 Pages 520-525."
msgstr "Olga Troyanskaya, Michael Cantor, Gavin Sherlock, Pat Brown, Trevor Hastie, Robert Tibshirani, David Botstein and Russ B. Altman, Missing value estimation methods for DNA microarrays, BIOINFORMATICS Vol. 17 no. 6, 2001 Pages 520-525."

#: of sklearn.impute._knn.KNNImputer:82
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.impute._knn.KNNImputer:94
msgid "Methods"
msgstr "Métodos"

#: of sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid ":obj:`fit <sklearn.impute.KNNImputer.fit>`\\"
msgstr ":obj:`fit <sklearn.impute.KNNImputer.fit>`\\"

#: of sklearn.impute._knn.KNNImputer.fit:2
#: sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid "Fit the imputer on X."
msgstr "Ajustar el imputer en X."

#: of sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.impute.KNNImputer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.impute.KNNImputer.fit_transform>`\\"

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr "Se ajustan los datos y luego se transforman."

#: of sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid ":obj:`get_params <sklearn.impute.KNNImputer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.impute.KNNImputer.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid ":obj:`set_params <sklearn.impute.KNNImputer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.impute.KNNImputer.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid ":obj:`transform <sklearn.impute.KNNImputer.transform>`\\"
msgstr ":obj:`transform <sklearn.impute.KNNImputer.transform>`\\"

#: of sklearn.impute._knn.KNNImputer.transform:2
#: sklearn.impute._knn.KNNImputer:102:<autosummary>:1
msgid "Impute all missing values in X."
msgstr "Imputa todos los valores faltantes en X."

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.impute._knn.KNNImputer.fit:9
#: sklearn.impute._knn.KNNImputer.transform:8
#: sklearn.impute._knn.KNNImputer.transform:25
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like shape of (n_samples, n_features)"
msgstr "array-like shape of (n_samples, n_features)"

#: of sklearn.impute._knn.KNNImputer.fit:8
msgid "Input data, where `n_samples` is the number of samples and `n_features` is the number of features."
msgstr "Datos de entrada, donde `n_samples` es el número de muestras y `n_features` es el número de características."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.impute._knn.KNNImputer.fit sklearn.impute._knn.KNNImputer.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.impute._knn.KNNImputer.fit:25
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr "Ajusta el transformador a `X` y `y` con los parámetros opcionales `fit_params` y devuelve una versión transformada de `X`."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like of shape (n_samples, n_features)"

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr "Muestras de entrada."

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr "Valores objetivo (None para transformaciones no supervisadas)."

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr "Parámetros de ajuste adicionales."

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr "**X_new**"

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "ndarray array of shape (n_samples, n_features_new)"

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr "Arreglo transformado."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.impute._knn.KNNImputer.transform:8
msgid "The input data to complete."
msgstr "Los datos de entrada a completar."

#: of
msgid "array-like of shape (n_samples, n_output_features)"
msgstr "array-like of shape (n_samples, n_output_features)"

#: of sklearn.impute._knn.KNNImputer.transform:13
msgid "The imputed dataset. `n_output_features` is the number of features that is not always missing during `fit`."
msgstr "El conjunto de datos imputados. `n_output_features` es el número de características que no siempre falta durante `fit`."

#: ../modules/generated/sklearn.impute.KNNImputer.examples:4
msgid "Examples using ``sklearn.impute.KNNImputer``"
msgstr "Ejemplos usando ``sklearn.impute.KNNImputer``"

#: ../modules/generated/sklearn.impute.KNNImputer.examples:15
#: ../modules/generated/sklearn.impute.KNNImputer.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_impute_plot_missing_values.py`"
#~ msgstr ""

