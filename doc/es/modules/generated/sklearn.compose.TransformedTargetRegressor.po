msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: 2021-05-11 22:57\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.compose.TransformedTargetRegressor.po\n"
"X-Crowdin-File-ID: 5404\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.compose.TransformedTargetRegressor.rst:2
msgid ":mod:`sklearn.compose`.TransformedTargetRegressor"
msgstr ":mod:`sklearn.compose`.TransformedTargetRegressor"

#: of sklearn.compose._target.TransformedTargetRegressor:2
msgid "Meta-estimator to regress on a transformed target."
msgstr "Meta-estimador para la regresión de un objetivo transformado."

#: of sklearn.compose._target.TransformedTargetRegressor:4
msgid "Useful for applying a non-linear transformation to the target ``y`` in regression problems. This transformation can be given as a Transformer such as the QuantileTransformer or as a function and its inverse such as ``log`` and ``exp``."
msgstr "Útil para aplicar una transformación no lineal al objetivo ``y`` en problemas de regresión. Esta transformación puede ser dada como un Transformador como el QuantileTransformer o como una función y su inversa como ``log`` y ``exp``."

#: of sklearn.compose._target.TransformedTargetRegressor:9
msgid "The computation during ``fit`` is::"
msgstr "El cálculo durante ``fit`` es::"

#: of sklearn.compose._target.TransformedTargetRegressor:13
#: sklearn.compose._target.TransformedTargetRegressor:21
msgid "or::"
msgstr "or::"

#: of sklearn.compose._target.TransformedTargetRegressor:17
msgid "The computation during ``predict`` is::"
msgstr "El cálculo durante ``predict`` es::"

#: of sklearn.compose._target.TransformedTargetRegressor:25
msgid "Read more in the :ref:`User Guide <transformed_target_regressor>`."
msgstr "Más información en el :ref:`Manual de usuario <transformed_target_regressor>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.compose._target.TransformedTargetRegressor
#: sklearn.compose._target.TransformedTargetRegressor.fit
#: sklearn.compose._target.TransformedTargetRegressor.predict
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.compose._target.TransformedTargetRegressor:34
msgid "**regressor**"
msgstr "**regressor**"

#: of
msgid "object, default=None"
msgstr "object, default=None"

#: of sklearn.compose._target.TransformedTargetRegressor:32
msgid "Regressor object such as derived from ``RegressorMixin``. This regressor will automatically be cloned each time prior to fitting. If regressor is ``None``, ``LinearRegression()`` is created and used."
msgstr "Objeto regressor tal como el derivado de ``RegressorMixin``. Este regressor sera automáticamente clonado cada vez antes del ajuste. Si el regressor es ``None``, ``LinearRegression()`` is creado y utilizado."

#: of sklearn.compose._target.TransformedTargetRegressor:42
msgid "**transformer**"
msgstr "**transformer**"

#: of sklearn.compose._target.TransformedTargetRegressor:37
msgid "Estimator object such as derived from ``TransformerMixin``. Cannot be set at the same time as ``func`` and ``inverse_func``. If ``transformer`` is ``None`` as well as ``func`` and ``inverse_func``, the transformer will be an identity transformer. Note that the transformer will be cloned during fitting. Also, the transformer is restricting ``y`` to be a numpy array."
msgstr "Objeto de estimador tal como el derivado de ``TransformerMixin``. No puede establecerse al mismo tiempo que ``func`` y ``inverse_func``. Si ``transformer`` es ``None`` igual que ``func`` y ``inverse_func``, el transformador sera un transformador de identidad. Note que el transformador sera clonado durante el ajuste. Además, el transformer esta restringiendo ``y`` a un array de numpy."

#: of sklearn.compose._target.TransformedTargetRegressor:48
msgid "**func**"
msgstr "**func**"

#: of
msgid "function, default=None"
msgstr "function, default=None"

#: of sklearn.compose._target.TransformedTargetRegressor:45
msgid "Function to apply to ``y`` before passing to ``fit``. Cannot be set at the same time as ``transformer``. The function needs to return a 2-dimensional array. If ``func`` is ``None``, the function used will be the identity function."
msgstr "Función a aplicar a ``y`` antes de pasar a ``fit``. No se puede establecer al mismo tiempo que ``transformer``. La función necesita devolver un array de dos dimensiones. Si ``func`` es ``None``, la función utilizada será la función de identidad."

#: of sklearn.compose._target.TransformedTargetRegressor:54
msgid "**inverse_func**"
msgstr "**inverse_func**"

#: of sklearn.compose._target.TransformedTargetRegressor:51
msgid "Function to apply to the prediction of the regressor. Cannot be set at the same time as ``transformer`` as well. The function needs to return a 2-dimensional array. The inverse function is used to return predictions to the same space of the original training labels."
msgstr "Función para aplicar a la predicción del regresor. Tampoco se puede establecer al mismo tiempo que ``transformer``. La función necesita devolver un array de dos dimensiones. La función inversa se utiliza para devolver las predicciones al mismo espacio de las etiquetas de entrenamiento originales."

#: of sklearn.compose._target.TransformedTargetRegressor:61
msgid "**check_inverse**"
msgstr "**check_inverse**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.compose._target.TransformedTargetRegressor:57
msgid "Whether to check that ``transform`` followed by ``inverse_transform`` or ``func`` followed by ``inverse_func`` leads to the original targets."
msgstr "Si comprobar que ``transform`` seguido de ``inverse_transform`` o ``func`` seguido de ``inverse_func`` conduce a los objetivos originales."

#: of sklearn.compose._target.TransformedTargetRegressor
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.compose._target.TransformedTargetRegressor:66
msgid "**regressor_**"
msgstr "**regressor_**"

#: of
msgid "object"
msgstr "objeto"

#: of sklearn.compose._target.TransformedTargetRegressor:66
msgid "Fitted regressor."
msgstr "Regresor ajustado."

#: of sklearn.compose._target.TransformedTargetRegressor:73
msgid "**transformer_**"
msgstr "**transformer_**"

#: of sklearn.compose._target.TransformedTargetRegressor:69
msgid "Transformer used in ``fit`` and ``predict``."
msgstr "Transformador usado en ``fit`` y ``predict``."

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.compose._target.TransformedTargetRegressor:76
msgid "Notes"
msgstr "Notas"

#: of sklearn.compose._target.TransformedTargetRegressor:77
msgid "Internally, the target ``y`` is always converted into a 2-dimensional array to be used by scikit-learn transformers. At the time of prediction, the output will be reshaped to a have the same number of dimensions as ``y``."
msgstr "Internamente, el objetivo ``y`` siempre es convertido a una matriz de 2 dimensiones para ser usada por transformadores de scikit-learn. En el tiempo de la predicción, la salida será remodelada para siempre tener el mismo número de dimensiones que ``y``."

#: of sklearn.compose._target.TransformedTargetRegressor:81
msgid "See :ref:`examples/compose/plot_transformed_target.py <sphx_glr_auto_examples_compose_plot_transformed_target.py>`."
msgstr "Vea :ref:`examples/compose/plot_transformed_target.py <sphx_glr_auto_examples_compose_plot_transformed_target.py>."

#: of sklearn.compose._target.TransformedTargetRegressor:86
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.compose._target.TransformedTargetRegressor:102
msgid "Methods"
msgstr "Métodos"

#: of sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid ":obj:`fit <sklearn.compose.TransformedTargetRegressor.fit>`\\"
msgstr ":obj:`fit <sklearn.compose.TransformedTargetRegressor.fit>`\\"

#: of sklearn.compose._target.TransformedTargetRegressor.fit:2
#: sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid "Fit the model according to the given training data."
msgstr "Ajusta el modelo de acuerdo a los datos de entrenamiento dados."

#: of sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid ":obj:`get_params <sklearn.compose.TransformedTargetRegressor.get_params>`\\"
msgstr ":obj:`get_params <sklearn.compose.TransformedTargetRegressor.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid ":obj:`predict <sklearn.compose.TransformedTargetRegressor.predict>`\\"
msgstr ":obj:`predict <sklearn.compose.TransformedTargetRegressor.predict>`\\"

#: of sklearn.compose._target.TransformedTargetRegressor.predict:2
#: sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid "Predict using the base regressor, applying inverse."
msgstr "Predice usando el regresor base, aplicando el inverso."

#: of sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid ":obj:`score <sklearn.compose.TransformedTargetRegressor.score>`\\"
msgstr ":obj:`score <sklearn.compose.TransformedTargetRegressor.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr "Devuelve el coeficiente de determinación :math:`R^2` de la predicción."

#: of sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid ":obj:`set_params <sklearn.compose.TransformedTargetRegressor.set_params>`\\"
msgstr ":obj:`set_params <sklearn.compose.TransformedTargetRegressor.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.compose._target.TransformedTargetRegressor:110:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.compose._target.TransformedTargetRegressor.fit:9
#: sklearn.compose._target.TransformedTargetRegressor.predict:10
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.compose._target.TransformedTargetRegressor.fit:8
msgid "Training vector, where n_samples is the number of samples and n_features is the number of features."
msgstr "Vector de entrenamiento, donde `n_samples` es el número de muestras y `n_features` es el número de características."

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.compose._target.TransformedTargetRegressor.fit:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.compose._target.TransformedTargetRegressor.fit:12
msgid "Target values."
msgstr "Valores objetivo."

#: of sklearn.compose._target.TransformedTargetRegressor.fit:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.compose._target.TransformedTargetRegressor.fit:15
msgid "Parameters passed to the ``fit`` method of the underlying regressor."
msgstr "Parámetros pasados al método ``fit`` del regresor subyacente."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.compose._target.TransformedTargetRegressor.fit
#: sklearn.compose._target.TransformedTargetRegressor.predict
msgid "Returns"
msgstr "Devoluciones"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.compose._target.TransformedTargetRegressor.fit:32
msgid "**self**"
msgstr "**self**"

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros asignados a sus valores."

#: of sklearn.compose._target.TransformedTargetRegressor.predict:4
msgid "The regressor is used to predict and the ``inverse_func`` or ``inverse_transform`` is applied before returning the prediction."
msgstr "El regresor se utiliza para predecir y la `ìnverse_func_`` o ``inverse_transform`` se aplica antes de devolver la predicción."

#: of sklearn.compose._target.TransformedTargetRegressor.predict:10
msgid "Samples."
msgstr "Muestras."

#: of sklearn.compose._target.TransformedTargetRegressor.predict:26
msgid "**y_hat**"
msgstr "**y_hat**"

#: of
msgid "ndarray of shape (n_samples,)"
msgstr "ndarray de forma (n_samples,)"

#: of sklearn.compose._target.TransformedTargetRegressor.predict:15
msgid "Predicted values."
msgstr "Valores predecidos."

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr "El coeficiente :math:`R^2` está definido como :math:`(1 - \\frac{u}{v})`, donde :math:`u` es la suma residual de cuadrados ``((y_true - y_pred) ** 2).sum()`` y :math:`v` es la suma total de cuadrados ``((y_true - y_true.mean()) ** 2).sum()``. La mejor puntuación posible es 1.0 y puede ser negativa (porque el modelo puede ser arbitrariamente peor). Un modelo constante que siempre predice el valor esperado de `y`, sin tener en cuenta las características de entrada, recibiría una puntuación :math:`R^2` de 0.0."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr "Muestras de prueba. Para algunos estimadores esta puede ser una matriz de kernel precalculada o una lista de objetos genéricos en su lugar con la forma ``(n_samples, n_samples_fitted)``, donde ``n_samples_fitted`` es el número de muestras usadas en el ajuste del estimador."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de la forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr "Valores reales para `X`."

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr "Ponderados de muestras."

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ":math:`R^2` de ``self.predict(X)`` wrt. `y`."

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr "La puntuación :math:`R^2` usada al llamar ``score`` en un regresor utiliza ``multioutput='uniform_average'`` desde la versión 0.23 para mantenerse consistente con el valor por defecto de :func:`~sklearn.metrics.r2_score`. Esto influencia el método ``score`` de todos los regresores multisalida (excepto :class:`~sklearn.multioutput.MultiOutputRegressor`)."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.compose.TransformedTargetRegressor.examples:4
msgid "Examples using ``sklearn.compose.TransformedTargetRegressor``"
msgstr "Ejemplos usando ``sklearn.compose.TransformedTargetRegressor``"

#: ../modules/generated/sklearn.compose.TransformedTargetRegressor.examples:15
#: ../modules/generated/sklearn.compose.TransformedTargetRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_transformed_target.py`"
#~ msgstr ""

