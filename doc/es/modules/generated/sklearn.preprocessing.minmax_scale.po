msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-07 02:28\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.minmax_scale.po\n"
"X-Crowdin-File-ID: 4926\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.minmax_scale.rst:2
msgid ":mod:`sklearn.preprocessing`.minmax_scale"
msgstr ":mod:`sklearn.preprocessing`.minmax_scale"

#: of sklearn.preprocessing._data.minmax_scale:2
msgid "Transform features by scaling each feature to a given range."
msgstr "Transforma las características escalando cada una de ellas a un rango determinado."

#: of sklearn.preprocessing._data.minmax_scale:4
msgid "This estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one."
msgstr "Este estimador escala y traduce cada característica individualmente de manera que se encuentre en el rango dado en el conjunto de entrenamiento, es decir, entre cero y uno."

#: of sklearn.preprocessing._data.minmax_scale:8
msgid "The transformation is given by (when ``axis=0``)::"
msgstr "La transformación viene dada por (cuando ``axis=0``)::"

#: of sklearn.preprocessing._data.minmax_scale:13
msgid "where min, max = feature_range."
msgstr "donde min, max = feature_range."

#: of sklearn.preprocessing._data.minmax_scale:15
msgid "The transformation is calculated as (when ``axis=0``)::"
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:20
msgid "This transformation is often used as an alternative to zero mean, unit variance scaling."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:23
msgid "Read more in the :ref:`User Guide <preprocessing_scaler>`."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:25
msgid "*minmax_scale* function interface to :class:`~sklearn.preprocessing.MinMaxScaler`."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._data.minmax_scale:32
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:32
msgid "The data."
msgstr "Los datos."

#: of sklearn.preprocessing._data.minmax_scale:35
msgid "**feature_range**"
msgstr "**feature_range**"

#: of
msgid "tuple (min, max), default=(0, 1)"
msgstr "tuple (min, max), default=(0, 1)"

#: of sklearn.preprocessing._data.minmax_scale:35
msgid "Desired range of transformed data."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:39
msgid "**axis**"
msgstr "**axis**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.preprocessing._data.minmax_scale:38
msgid "Axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:43
msgid "**copy**"
msgstr "**copy**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.preprocessing._data.minmax_scale:42
msgid "Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array)."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.preprocessing._data.minmax_scale:48
msgid "**X_tr**"
msgstr "**X_tr**"

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:48
msgid "The transformed data."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:50
msgid "Risk of data leak Do not use :func:`~sklearn.preprocessing.minmax_scale` unless you know what you are doing. A common mistake is to apply it to the entire data *before* splitting into training and test sets. This will bias the model evaluation because information would have leaked from the test set to the training set. In general, we recommend using :class:`~sklearn.preprocessing.MinMaxScaler` within a :ref:`Pipeline <pipeline>` in order to prevent most risks of data leaking: `pipe = make_pipeline(MinMaxScaler(), LogisticRegression())`."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:70
msgid ":obj:`MinMaxScaler`"
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:71
msgid "Performs scaling to a given range using the Transformer API (e.g. as part of a preprocessing :class:`~sklearn.pipeline.Pipeline`)."
msgstr ""

#: of sklearn.preprocessing._data.minmax_scale:75
msgid "Notes"
msgstr "Notas"

#: of sklearn.preprocessing._data.minmax_scale:76
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

#: ../modules/generated/sklearn.preprocessing.minmax_scale.examples:4
msgid "Examples using ``sklearn.preprocessing.minmax_scale``"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.minmax_scale.examples:15
#: ../modules/generated/sklearn.preprocessing.minmax_scale.examples:23
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
msgstr ""

