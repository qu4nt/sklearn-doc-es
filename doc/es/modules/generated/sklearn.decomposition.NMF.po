msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-26 00:40\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.decomposition.NMF.po\n"
"X-Crowdin-File-ID: 5158\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.decomposition.NMF.rst:2
msgid ":mod:`sklearn.decomposition`.NMF"
msgstr ":mod:`sklearn.decomposition`.NMF"

#: of sklearn.decomposition._nmf.NMF:2
msgid "Non-Negative Matrix Factorization (NMF)."
msgstr "Factorización de Matrices No Negativas (Non-Negative Matrix Factorization, NMF)."

#: of sklearn.decomposition._nmf.NMF:4
msgid "Find two non-negative matrices (W, H) whose product approximates the non- negative matrix X. This factorization can be used for example for dimensionality reduction, source separation or topic extraction."
msgstr "Encontrar dos matrices no negativas (W, H) cuyo producto se aproxime a la matriz no negativa X. Esta factorización se puede utilizar, por ejemplo, para la reducción de la dimensionalidad, la separación de fuentes o la extracción de temas."

#: of sklearn.decomposition._nmf.NMF:8
msgid "The objective function is:"
msgstr "La función objetivo es:"

#: of sklearn.decomposition._nmf.NMF:10
msgid "0.5 * ||X - WH||_{Fro}^2 + alpha * l1_{ratio} * ||vec(W)||_1\n\n"
"+ alpha * l1_{ratio} * ||vec(H)||_1\n\n"
"+ 0.5 * alpha * (1 - l1_{ratio}) * ||W||_{Fro}^2\n\n"
"+ 0.5 * alpha * (1 - l1_{ratio}) * ||H||_{Fro}^2"
msgstr "0.5 * ||X - WH||_{Fro}^2 + alpha * l1_{ratio} * ||vec(W)||_1\n\n"
"+ alpha * l1_{ratio} * ||vec(H)||_1\n\n"
"+ 0.5 * alpha * (1 - l1_{ratio}) * ||W||_{Fro}^2\n\n"
"+ 0.5 * alpha * (1 - l1_{ratio}) * ||H||_{Fro}^2"

#: of sklearn.decomposition._nmf.NMF:20
msgid "Where:"
msgstr "Donde:"

#: of sklearn.decomposition._nmf.NMF:22
msgid ":math:`||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2` (Frobenius norm)"
msgstr ":math:`||A||_{Fro}^2 = \\sum_{i,j} A_{ij}^2` (norma de Frobenius)"

#: of sklearn.decomposition._nmf.NMF:24
msgid ":math:`||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})` (Elementwise L1 norm)"
msgstr ":math:`||vec(A)||_1 = \\sum_{i,j} abs(A_{ij})` (Norma componente a componente L1)"

#: of sklearn.decomposition._nmf.NMF:26
msgid "For multiplicative-update ('mu') solver, the Frobenius norm (:math:`0.5 * ||X - WH||_{Fro}^2`) can be changed into another beta-divergence loss, by changing the beta_loss parameter."
msgstr "Para el solucionador de actualización multiplicativa ('mu'), la norma de Frobenius (:math:`0.5 * ||X - WH||_{Fro}^2`) puede cambiarse por otra función de pérdida de beta-divergencia, cambiando el parámetro beta_loss."

#: of sklearn.decomposition._nmf.NMF:30
msgid "The objective function is minimized with an alternating minimization of W and H."
msgstr "La función objetivo se minimiza con una minimización alterna de W y H."

#: of sklearn.decomposition._nmf.NMF:33
msgid "Read more in the :ref:`User Guide <NMF>`."
msgstr "Lee más en el :ref:`Manual de usuario <NMF>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.decomposition._nmf.NMF
#: sklearn.decomposition._nmf.NMF.fit
#: sklearn.decomposition._nmf.NMF.fit_transform
#: sklearn.decomposition._nmf.NMF.inverse_transform
#: sklearn.decomposition._nmf.NMF.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.decomposition._nmf.NMF:39
msgid "**n_components**"
msgstr "**n_components**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.decomposition._nmf.NMF:38
msgid "Number of components, if n_components is not set all features are kept."
msgstr "Número de componentes, si n_components no se establece se mantienen todas las características."

#: of sklearn.decomposition._nmf.NMF:62
msgid "**init**"
msgstr "**init**"

#: of
msgid "{'random', 'nndsvd', 'nndsvda', 'nndsvdar', 'custom'}, default=None"
msgstr "{'random', 'nndsvd', 'nndsvda', 'nndsvdar', 'custom'}, default=None"

#: of sklearn.decomposition._nmf.NMF:42
msgid "Method used to initialize the procedure. Default: None. Valid options:"
msgstr "Método utilizado para inicializar el procedimiento. Por defecto: None. Opciones válidas:"

#: of sklearn.decomposition._nmf.NMF:46
msgid "`None`: 'nndsvd' if n_components <= min(n_samples, n_features), otherwise random."
msgstr "`None`: 'nndsvd' si n_components <= min(n_samples, n_features), en caso contrario, aleatorio."

#: of sklearn.decomposition._nmf.NMF:49
msgid "`'random'`: non-negative random matrices, scaled with: sqrt(X.mean() / n_components)"
msgstr "`'random'`: matrices aleatorias no negativas, escaladas con: sqrt(X.mean() / n_components)"

#: of sklearn.decomposition._nmf.NMF:52
msgid "`'nndsvd'`: Nonnegative Double Singular Value Decomposition (NNDSVD) initialization (better for sparseness)"
msgstr "`'nndsvd'`: Inicialización de la Descomposición en Valores Singulares Doble no negativos (Nonnegative Double Singular Value Decomposition, NNDSVD) (mejor para la dispersión)"

#: of sklearn.decomposition._nmf.NMF:55
msgid "`'nndsvda'`: NNDSVD with zeros filled with the average of X (better when sparsity is not desired)"
msgstr "`'nndsvda'`: NNDSVD con ceros rellenados con el promedio de X (mejor cuando no se desea la dispersión)"

#: of sklearn.decomposition._nmf.NMF:58
msgid "`'nndsvdar'` NNDSVD with zeros filled with small random values (generally faster, less accurate alternative to NNDSVDa for when sparsity is not desired)"
msgstr "`'nndsvdar'` NNDSVD con ceros rellenados con pequeños valores aleatorios (generalmente una alternativa más rápida y menos precisa a NNDSVDa para cuando no se desea la dispersión)"

#: of sklearn.decomposition._nmf.NMF:62
msgid "`'custom'`: use custom matrices W and H"
msgstr "`'custom'`: utiliza matrices personalizadas W y H"

#: of sklearn.decomposition._nmf.NMF:73
msgid "**solver**"
msgstr "**solver**"

#: of
msgid "{'cd', 'mu'}, default='cd'"
msgstr "{'cd', 'mu'}, default='cd'"

#: of sklearn.decomposition._nmf.NMF:65
msgid "Numerical solver to use: 'cd' is a Coordinate Descent solver. 'mu' is a Multiplicative Update solver."
msgstr "Solver numérico a utilizar: 'cd' es un solucionador del Descenso Coordinado. 'mu' es un solucionador de Actualización Multiplicativa."

#: of sklearn.decomposition._nmf.NMF:69
msgid "Coordinate Descent solver."
msgstr "Solucionador del Descenso Coordinado."

#: of sklearn.decomposition._nmf.NMF:72
msgid "Multiplicative Update solver."
msgstr "Solucionador de Actualización Multiplicativa."

#: of sklearn.decomposition._nmf.NMF:82
msgid "**beta_loss**"
msgstr "**beta_loss**"

#: of
msgid "float or {'frobenius', 'kullback-leibler',             'itakura-saito'}, default='frobenius'"
msgstr "float or {'frobenius', 'kullback-leibler',             'itakura-saito'}, default='frobenius'"

#: of sklearn.decomposition._nmf.NMF:76
msgid "Beta divergence to be minimized, measuring the distance between X and the dot product WH. Note that values different from 'frobenius' (or 2) and 'kullback-leibler' (or 1) lead to significantly slower fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input matrix X cannot contain zeros. Used only in 'mu' solver."
msgstr "Se minimiza la Divergencia Beta, midiendo la distancia entre X y el producto punto WH. Ten en cuenta que los valores diferentes de 'frobenius' (o 2) y 'kullback-leibler' (o 1) conducen ajustes significativamente más lentos. Ten en cuenta que para beta_loss <= 0 (o 'itakura-saito'), la matriz de entrada X no puede contener ceros. Sólo se utiliza en el solucionador 'mu'."

#: of sklearn.decomposition._nmf.NMF:85
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1e-4"
msgstr "float, default=1e-4"

#: of sklearn.decomposition._nmf.NMF:85
msgid "Tolerance of the stopping condition."
msgstr "Tolerancia de la condición de parada."

#: of sklearn.decomposition._nmf.NMF:88
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=200"
msgstr "int, default=200"

#: of sklearn.decomposition._nmf.NMF:88
msgid "Maximum number of iterations before timing out."
msgstr "Número máximo de iteraciones antes de que se agote el tiempo."

#: of sklearn.decomposition._nmf.NMF:94
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, RandomState instance or None, default=None"

#: of sklearn.decomposition._nmf.NMF:91
msgid "Used for initialisation (when ``init`` == 'nndsvdar' or 'random'), and in Coordinate Descent. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
msgstr "Se utiliza para la inicialización (cuando ``init`` == 'nndsvdar' o 'random'), y en el Descenso Coordinado. Pasa un número entero (int) para resultados reproducibles a través de múltiples llamadas a la función. Ver :term:`Glosario <random_state>`."

#: of sklearn.decomposition._nmf.NMF:101
msgid "**alpha**"
msgstr "**alpha**"

#: of
msgid "float, default=0."
msgstr "float, default=0."

#: of sklearn.decomposition._nmf.NMF:97
msgid "Constant that multiplies the regularization terms. Set it to zero to have no regularization."
msgstr "Constante que multiplica los términos de regularización. Ponlo en cero para no tener regularización."

#: of sklearn.decomposition._nmf.NMF:100
msgid "*alpha* used in the Coordinate Descent solver."
msgstr "*alpha* utilizado en el solucionador del Descenso Coordinado."

#: of sklearn.decomposition._nmf.NMF:112
msgid "**l1_ratio**"
msgstr "**l1_ratio**"

#: of sklearn.decomposition._nmf.NMF:104
msgid "The regularization mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2."
msgstr "El parámetro de mezcla de la regularización, con 0 <= l1_ratio <= 1. Para l1_ratio = 0 la penalización es una penalización componente a componente L2 (también conocida como Norma de Frobenius). Para l1_ratio = 1 es una penalización componente a componente L1. Para 0 < l1_ratio < 1, la penalización es una combinación de L1 y L2."

#: of sklearn.decomposition._nmf.NMF:110
msgid "Regularization parameter *l1_ratio* used in the Coordinate Descent solver."
msgstr "El parámetro de regularización *l1_ratio* utilizado en el solucionador del Descenso Coordinado."

#: of sklearn.decomposition._nmf.NMF:115
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.decomposition._nmf.NMF:115
msgid "Whether to be verbose."
msgstr "Si debe ser verboso."

#: of sklearn.decomposition._nmf.NMF:121
msgid "**shuffle**"
msgstr "**shuffle**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.decomposition._nmf.NMF:118
msgid "If true, randomize the order of coordinates in the CD solver."
msgstr "Si es verdadero (True), aleatoriza el orden de las coordenadas en el solucionador del CD."

#: of sklearn.decomposition._nmf.NMF:120
msgid "*shuffle* parameter used in the Coordinate Descent solver."
msgstr "El parámetro *shuffle*Parámetro utilizado en el solucionador del Descenso Coordinado."

#: of sklearn.decomposition._nmf.NMF:130
msgid "**regularization**"
msgstr "**regularization**"

#: of
msgid "{'both', 'components', 'transformation', None},                      default='both'"
msgstr "{'both', 'components', 'transformation', None},                      default='both'"

#: of sklearn.decomposition._nmf.NMF:124
msgid "Select whether the regularization affects the components (H), the transformation (W), both or none of them."
msgstr "Selecciona si la regularización afecta a los componentes (H), a la transformación (W), a ambos o a ninguno de ellos."

#: of sklearn.decomposition._nmf.NMF
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.decomposition._nmf.NMF:135
msgid "**components_**"
msgstr "**components_**"

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr "ndarray de forma (n_components, n_features)"

#: of sklearn.decomposition._nmf.NMF:135
msgid "Factorization matrix, sometimes called 'dictionary'."
msgstr "Matriz de factorización, a veces llamada 'dictionary'."

#: of sklearn.decomposition._nmf.NMF:140
msgid "**n_components_**"
msgstr "**n_components_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.decomposition._nmf.NMF:138
msgid "The number of components. It is same as the `n_components` parameter if it was given. Otherwise, it will be same as the number of features."
msgstr "El número de componentes. Es el mismo que el parámetro `n_components` si fue dado. De lo contrario, será el mismo que el número de características."

#: of sklearn.decomposition._nmf.NMF:145
msgid "**reconstruction_err_**"
msgstr "**reconstruction_err_**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.decomposition._nmf.NMF:143
msgid "Frobenius norm of the matrix difference, or beta-divergence, between the training data ``X`` and the reconstructed data ``WH`` from the fitted model."
msgstr "La norma de Frobenius de la diferencia matricial, o beta-divergencia, entre los datos de entrenamiento ``X`` y los datos reconstruidos ``WH`` a partir del modelo ajustado."

#: of sklearn.decomposition._nmf.NMF:153
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of sklearn.decomposition._nmf.NMF:148
msgid "Actual number of iterations."
msgstr "Número real de iteraciones."

#: of sklearn.decomposition._nmf.NMF:156
msgid "References"
msgstr "Referencias"

#: of sklearn.decomposition._nmf.NMF:157
msgid "Cichocki, Andrzej, and P. H. A. N. Anh-Huy. \"Fast local algorithms for large scale nonnegative matrix and tensor factorizations.\" IEICE transactions on fundamentals of electronics, communications and computer sciences 92.3: 708-721, 2009."
msgstr "Cichocki, Andrzej, and P. H. A. N. Anh-Huy. \"Fast local algorithms for large scale nonnegative matrix and tensor factorizations.\" IEICE transactions on fundamentals of electronics, communications and computer sciences 92.3: 708-721, 2009."

#: of sklearn.decomposition._nmf.NMF:162
msgid "Fevotte, C., & Idier, J. (2011). Algorithms for nonnegative matrix factorization with the beta-divergence. Neural Computation, 23(9)."
msgstr "Fevotte, C., & Idier, J. (2011). Algorithms for nonnegative matrix factorization with the beta-divergence. Neural Computation, 23(9)."

#: of sklearn.decomposition._nmf.NMF:170
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.decomposition._nmf.NMF:179
msgid "Methods"
msgstr "Métodos"

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.NMF.fit>`\\"
msgstr ":obj:`fit <sklearn.decomposition.NMF.fit>`\\"

#: of sklearn.decomposition._nmf.NMF.fit:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Learn a NMF model for the data X."
msgstr "Aprende un modelo NMF para los datos X."

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.decomposition.NMF.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.decomposition.NMF.fit_transform>`\\"

#: of sklearn.decomposition._nmf.NMF.fit_transform:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Learn a NMF model for the data X and returns the transformed data."
msgstr "Aprende un modelo NMF para los datos X y devuelve los datos transformados."

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`get_params <sklearn.decomposition.NMF.get_params>`\\"
msgstr ":obj:`get_params <sklearn.decomposition.NMF.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtener los parámetros de este estimador."

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.decomposition.NMF.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.decomposition.NMF.inverse_transform>`\\"

#: of sklearn.decomposition._nmf.NMF.inverse_transform:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Transform data back to its original space."
msgstr "Transforma los datos a su espacio original."

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`set_params <sklearn.decomposition.NMF.set_params>`\\"
msgstr ":obj:`set_params <sklearn.decomposition.NMF.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.NMF.transform>`\\"
msgstr ":obj:`transform <sklearn.decomposition.NMF.transform>`\\"

#: of sklearn.decomposition._nmf.NMF.transform:2
#: sklearn.decomposition._nmf.NMF:188:<autosummary>:1
msgid "Transform the data X according to the fitted NMF model."
msgstr "Transforma los datos X según el modelo NMF ajustado."

#: of sklearn.decomposition._nmf.NMF.fit:8
#: sklearn.decomposition._nmf.NMF.fit_transform:9
#: sklearn.decomposition._nmf.NMF.inverse_transform:13
#: sklearn.decomposition._nmf.NMF.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.decomposition._nmf.NMF.fit:8
#: sklearn.decomposition._nmf.NMF.fit_transform:9
msgid "Data matrix to be decomposed"
msgstr "Matriz de datos a descomponer"

#: of sklearn.decomposition._nmf.NMF.fit:11
#: sklearn.decomposition._nmf.NMF.fit_transform:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "Ignored"
msgstr "Ignored"

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.decomposition._nmf.NMF.fit
#: sklearn.decomposition._nmf.NMF.fit_transform
#: sklearn.decomposition._nmf.NMF.inverse_transform
#: sklearn.decomposition._nmf.NMF.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.decomposition._nmf.NMF.fit:27
msgid "self"
msgstr "self"

#: of sklearn.decomposition._nmf.NMF.fit_transform:4
msgid "This is more efficient than calling fit followed by transform."
msgstr "Esto es más eficiente que llamar a fit seguido de transform."

#: of sklearn.decomposition._nmf.NMF.fit_transform:15
#: sklearn.decomposition._nmf.NMF.fit_transform:34
#: sklearn.decomposition._nmf.NMF.inverse_transform:8
#: sklearn.decomposition._nmf.NMF.transform:24
msgid "**W**"
msgstr "**W**"

#: of
msgid "array-like of shape (n_samples, n_components)"
msgstr "array-like de forma (n_samples, n_components)"

#: of sklearn.decomposition._nmf.NMF.fit_transform:15
#: sklearn.decomposition._nmf.NMF.fit_transform:18
msgid "If init='custom', it is used as initial guess for the solution."
msgstr "Si init='custom', se utiliza como conjetura inicial para la solución."

#: of sklearn.decomposition._nmf.NMF.fit_transform:18
msgid "**H**"
msgstr "**H**"

#: of
msgid "array-like of shape (n_components, n_features)"
msgstr "array-like de forma (n_components, n_features)"

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr "ndarray de forma (n_samples, n_components)"

#: of sklearn.decomposition._nmf.NMF.fit_transform:23
#: sklearn.decomposition._nmf.NMF.transform:13
msgid "Transformed data."
msgstr "Datos transformados."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_components)"
msgstr "{ndarray, sparse matrix} de forma (n_samples, n_components)"

#: of sklearn.decomposition._nmf.NMF.inverse_transform:8
msgid "Transformed data matrix."
msgstr "Matriz de datos transformada."

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr "{ndarray, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.decomposition._nmf.NMF.inverse_transform:13
msgid "Data matrix of original shape."
msgstr "Matriz de datos de la forma original."

#: of sklearn.decomposition._nmf.NMF.inverse_transform:15
msgid ".."
msgstr ".."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.decomposition._nmf.NMF.transform:8
msgid "Data matrix to be transformed by the model."
msgstr "La matriz de datos a transformar por el modelo."

#: ../modules/generated/sklearn.decomposition.NMF.examples:4
msgid "Examples using ``sklearn.decomposition.NMF``"
msgstr "Ejemplos utilizando ``sklearn.decomposition.NMF``"

#: ../modules/generated/sklearn.decomposition.NMF.examples:15
#: ../modules/generated/sklearn.decomposition.NMF.examples:23
msgid ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"

