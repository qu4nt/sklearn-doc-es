msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-06-24 15:20\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.RandomForestClassifier.po\n"
"X-Crowdin-File-ID: 5642\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.RandomForestClassifier"
msgstr ":mod:`sklearn.ensemble`.RandomForestClassifier"

#: of sklearn.ensemble._forest.RandomForestClassifier:2
msgid "A random forest classifier."
msgstr "Un clasificador de bosque aleatorio."

#: of sklearn.ensemble._forest.RandomForestClassifier:4
msgid "A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is controlled with the `max_samples` parameter if `bootstrap=True` (default), otherwise the whole dataset is used to build each tree."
msgstr "Un bosque aleatorio es un metaestimador que ajusta un número de clasificadores de árboles de decisión en varias submuestras del conjunto de datos y utiliza el promedio para mejorar la precisión predictiva y controlar el sobreajuste. El tamaño de la submuestra se controla con el parámetro `max_samples` si `bootstrap=True` (por defecto), de lo contrario se utiliza todo el conjunto de datos para construir cada árbol."

#: of sklearn.ensemble._forest.RandomForestClassifier:11
msgid "Read more in the :ref:`User Guide <forest>`."
msgstr "Leer más en el :ref:`Manual de Usuario <forest>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
#: sklearn.ensemble._forest.RandomForestClassifier
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.ensemble._forest.RandomForestClassifier:20
msgid "**n_estimators**"
msgstr "**n_estimators**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.ensemble._forest.RandomForestClassifier:16
msgid "The number of trees in the forest."
msgstr "El número de árboles en el bosque."

#: of sklearn.ensemble._forest.RandomForestClassifier:18
msgid "The default value of ``n_estimators`` changed from 10 to 100 in 0.22."
msgstr "El valor por defecto de ``n_estimators`` cambió de 10 a 100 en 0.22."

#: of sklearn.ensemble._forest.RandomForestClassifier:25
msgid "**criterion**"
msgstr "**criterion**"

#: of
msgid "{\"gini\", \"entropy\"}, default=\"gini\""
msgstr "{\"gini\", \"entropy\"}, default=\"gini\""

#: of sklearn.ensemble._forest.RandomForestClassifier:23
msgid "The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain. Note: this parameter is tree-specific."
msgstr "La función para medir la calidad de una división. Los criterios admitidos son \"gini\" para la impureza de Gini y \"entropy\" para la ganancia de información. Nota: este parámetro es específico del árbol."

#: of sklearn.ensemble._forest.RandomForestClassifier:30
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:28
msgid "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr "La profundidad máxima del árbol. Si es None, los nodos se expanden hasta que todas las hojas sean puras o hasta que todas las hojas contengan menos que min_samples_split muestras."

#: of sklearn.ensemble._forest.RandomForestClassifier:41
msgid "**min_samples_split**"
msgstr "**min_samples_split**"

#: of
msgid "int or float, default=2"
msgstr "int o float, default=2"

#: of sklearn.ensemble._forest.RandomForestClassifier:33
msgid "The minimum number of samples required to split an internal node:"
msgstr "El número mínimo de muestras necesarias para dividir un nodo interno:"

#: of sklearn.ensemble._forest.RandomForestClassifier:35
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr "Si es int, entonces considera `min_samples_split` como el número mínimo."

#: of sklearn.ensemble._forest.RandomForestClassifier:36
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr "Si es float, entonces `min_samples_split` es una fracción y `ceil(min_samples_split * n_samples)` son el número mínimo de muestras para cada división."

#: of sklearn.ensemble._forest.RandomForestClassifier:40
#: sklearn.ensemble._forest.RandomForestClassifier:55
msgid "Added float values for fractions."
msgstr "Se añadieron valores de punto flotante (float) para las fracciones."

#: of sklearn.ensemble._forest.RandomForestClassifier:56
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int or float, default=1"
msgstr "int o float, default=1"

#: of sklearn.ensemble._forest.RandomForestClassifier:44
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr "El número mínimo de muestras requerido para estar en un nodo hoja. Un punto de división a cualquier profundidad sólo se considerará si deja al menos ``min_samples_leaf`` muestras de entrenamiento en cada una de las ramas izquierda y derecha. Esto puede tener el efecto de suavizar el modelo, especialmente en la regresión."

#: of sklearn.ensemble._forest.RandomForestClassifier:50
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr "Si es int, entonces considera `min_samples_leaf` como el número mínimo."

#: of sklearn.ensemble._forest.RandomForestClassifier:51
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr "Si es float, entonces `min_samples_leaf` es una fracción y `ceil(min_samples_leaf * n_samples)` son el número mínimo de muestras para cada nodo."

#: of sklearn.ensemble._forest.RandomForestClassifier:61
msgid "**min_weight_fraction_leaf**"
msgstr "**min_weight_fraction_leaf**"

#: of
msgid "float, default=0.0"
msgstr "float, default=0.0"

#: of sklearn.ensemble._forest.RandomForestClassifier:59
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr "La fracción ponderada mínima de la suma total de ponderaciones (de todas las muestras de entrada) requeridas para estar en un nodo hoja. Las muestras tienen la misma ponderación cuando no se proporciona sample_weight."

#: of sklearn.ensemble._forest.RandomForestClassifier:77
msgid "**max_features**"
msgstr "**max_features**"

#: of
msgid "{\"auto\", \"sqrt\", \"log2\"}, int or float, default=\"auto\""
msgstr "{\"auto\", \"sqrt\", \"log2\"}, int o float, default=\"auto\""

#: of sklearn.ensemble._forest.RandomForestClassifier:64
msgid "The number of features to consider when looking for the best split:"
msgstr "El número de características a considerar a la hora de buscar la mejor división:"

#: of sklearn.ensemble._forest.RandomForestClassifier:66
msgid "If int, then consider `max_features` features at each split."
msgstr "Si es int, entonces considera `max_features` características en cada división."

#: of sklearn.ensemble._forest.RandomForestClassifier:67
msgid "If float, then `max_features` is a fraction and `round(max_features * n_features)` features are considered at each split."
msgstr "Si es float, entonces `max_features` es una fracción y `round(max_features * n_features)` características se consideran en cada división."

#: of sklearn.ensemble._forest.RandomForestClassifier:70
msgid "If \"auto\", then `max_features=sqrt(n_features)`."
msgstr "Si es \"auto\", entonces `max_features=sqrt(n_features)`."

#: of sklearn.ensemble._forest.RandomForestClassifier:71
msgid "If \"sqrt\", then `max_features=sqrt(n_features)` (same as \"auto\")."
msgstr "Si es \"sqrt\", entonces `max_features=sqrt(n_features)` (igual que \"auto\")."

#: of sklearn.ensemble._forest.RandomForestClassifier:72
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr "Si es \"log2\", entonces `max_features=log2(n_features)`."

#: of sklearn.ensemble._forest.RandomForestClassifier:73
msgid "If None, then `max_features=n_features`."
msgstr "Si es None, entonces `max_features=n_features`."

#: of sklearn.ensemble._forest.RandomForestClassifier:75
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr "Nota: la búsqueda de una división no se detiene hasta que se encuentre al menos una partición válida de las muestras de nodos, incluso si requiere inspeccionar efectivamente más de ``max_features`` características."

#: of sklearn.ensemble._forest.RandomForestClassifier:82
msgid "**max_leaf_nodes**"
msgstr "**max_leaf_nodes**"

#: of sklearn.ensemble._forest.RandomForestClassifier:80
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr "Hace crecer árboles con ``max_leaf_nodes`` en forma best-first. Los mejores nodos se definen como una reducción relativa de la impureza. Si es None, entonces el número de nodos hoja es ilimitado."

#: of sklearn.ensemble._forest.RandomForestClassifier:100
msgid "**min_impurity_decrease**"
msgstr "**min_impurity_decrease**"

#: of sklearn.ensemble._forest.RandomForestClassifier:85
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr "Un nodo se dividirá si esta división induce una disminución de la impureza mayor o igual a este valor."

#: of sklearn.ensemble._forest.RandomForestClassifier:88
msgid "The weighted impurity decrease equation is the following::"
msgstr "La ecuación de disminución de impurezas ponderada es la siguiente::"

#: of sklearn.ensemble._forest.RandomForestClassifier:93
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr "donde ``N`` es el número total de muestras, ``N_t`` es el número de muestras en el nodo actual, ``N_t_L`` es el número de muestras en el hijo izquierdo, y ``N_t_R`` es el número de muestras en el hijo derecho."

#: of sklearn.ensemble._forest.RandomForestClassifier:97
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr "``N``, ``N_t``, ``N_t_R`` y ``N_t_L`` se refieren a la suma ponderada, si se pasa ``sample_weight``."

#: of sklearn.ensemble._forest.RandomForestClassifier:111
msgid "**min_impurity_split**"
msgstr "**min_impurity_split**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:103
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr "Umbral para la parada anticipada en el crecimiento del árbol. Un nodo se dividirá si su impureza está por encima del umbral, de lo contrario es una hoja."

#: of sklearn.ensemble._forest.RandomForestClassifier:106
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr "``min_impurity_split`` ha quedado obsoleto en favor de ``min_impurity_decrease`` en 0.19. El valor por defecto de ``min_impurity_split`` ha cambiado de 1e-7 a 0 en 0.23 y se eliminará en 1.0 (renombrado de 0.25). Utiliza ``min_impurity_decrease`` en su lugar."

#: of sklearn.ensemble._forest.RandomForestClassifier:115
msgid "**bootstrap**"
msgstr "**bootstrap**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.ensemble._forest.RandomForestClassifier:114
msgid "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
msgstr "Si se utilizan muestras bootstrap al construir los árboles. Si es False, se utiliza todo el conjunto de datos para construir cada árbol."

#: of sklearn.ensemble._forest.RandomForestClassifier:119
msgid "**oob_score**"
msgstr "**oob_score**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.ensemble._forest.RandomForestClassifier:118
msgid "Whether to use out-of-bag samples to estimate the generalization accuracy."
msgstr "Si se utilizan muestras out-of-bag para estimar la precisión de la generalización."

#: of sklearn.ensemble._forest.RandomForestClassifier:126
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of sklearn.ensemble._forest.RandomForestClassifier:122
msgid "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "El número de trabajos que se ejecutan en paralelo. :meth:`fit`, :meth:`predict`, :meth:`decision_path` y :meth:`apply` son todos paralelizados sobre los árboles. ``None`` significa 1 a menos que esté en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa que se utilizan todos los procesadores. Ver :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.ensemble._forest.RandomForestClassifier:133
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, instancia RandomState o None, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:129
msgid "Controls both the randomness of the bootstrapping of the samples used when building trees (if ``bootstrap=True``) and the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``). See :term:`Glossary <random_state>` for details."
msgstr "Controla tanto la aleatoriedad del bootstrapping de las muestras utilizadas al construir los árboles (si ``bootstrap=True``) como el muestreo de las características a considerar al buscar la mejor división en cada nodo (si ``max_features < n_features``). Ver :term:`Glosario <random_state>` para obtener detalles."

#: of sklearn.ensemble._forest.RandomForestClassifier:136
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.ensemble._forest.RandomForestClassifier:136
msgid "Controls the verbosity when fitting and predicting."
msgstr "Controla la verbosidad al ajustar y predecir."

#: of sklearn.ensemble._forest.RandomForestClassifier:141
msgid "**warm_start**"
msgstr "**warm_start**"

#: of sklearn.ensemble._forest.RandomForestClassifier:139
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
msgstr "Cuando se establece como ``True``, reutiliza la solución de la llamada previa para ajustar y añadir más estimadores al ensemble, de lo contrario, sólo se ajusta un bosque nuevo. Ver :term:`el Glosario <warm_start>`."

#: of sklearn.ensemble._forest.RandomForestClassifier:166
msgid "**class_weight**"
msgstr "**class_weight**"

#: of
msgid "{\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None"
msgstr "{\"balanced\", \"balanced_subsample\"}, dict o list de dicts,             default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:144
msgid "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y."
msgstr "Ponderaciones asociadas a las clases de la forma ``{class_label: weight}``. Si no se da, se supone que todas las clases tienen ponderación uno. Para los problemas de salida múltiple, se puede proporcionar una lista de dicts en el mismo orden que las columnas de y."

#: of sklearn.ensemble._forest.RandomForestClassifier:149
msgid "Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}]."
msgstr "Ten en cuenta que para la salida múltiple (incluyendo la multietiqueta) las ponderaciones deben ser definidas para cada clase de cada columna en su propio diccionario. Por ejemplo, para la clasificación multietiqueta de cuatro clases las ponderaciones deben ser [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] en lugar de [{1:1}, {2:5}, {3:1}, {4:1}]."

#: of sklearn.ensemble._forest.RandomForestClassifier:155
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``"
msgstr "El modo \"balanced\" utiliza los valores de y para ajustar automáticamente las ponderaciones de forma inversamente proporcional a las frecuencias de las clases en los datos de entrada como ``n_samples / (n_classes * np.bincount(y))``"

#: of sklearn.ensemble._forest.RandomForestClassifier:159
msgid "The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown."
msgstr "El modo \"balanced_subsample\" es el mismo que \"balanced\", excepto que las ponderaciones se calculan en base a la muestra bootstrap para cada árbol que crece."

#: of sklearn.ensemble._forest.RandomForestClassifier:163
msgid "For multi-output, the weights of each column of y will be multiplied."
msgstr "Para la salida múltiple, las ponderaciones de cada columna de y se multiplicarán."

#: of sklearn.ensemble._forest.RandomForestClassifier:165
msgid "Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
msgstr "Ten en cuenta que estas ponderaciones se multiplicarán con sample_weight (pasado por el método de ajuste) si se especifica sample_weight."

#: of sklearn.ensemble._forest.RandomForestClassifier:174
msgid "**ccp_alpha**"
msgstr "**ccp_alpha**"

#: of
msgid "non-negative float, default=0.0"
msgstr "float no negativo, default=0.0"

#: of sklearn.ensemble._forest.RandomForestClassifier:169
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr "Parámetro de complejidad utilizado para la Poda de Costo-Complejidad Mínimo. Se elegirá el subárbol con el mayor costo-complejidad que sea menor que ``ccp_alpha``. Por defecto, no se realiza ninguna poda. Ver :ref:`minimal_cost_complexity_pruning` para obtener detalles."

#: of sklearn.ensemble._forest.RandomForestClassifier:188
msgid "**max_samples**"
msgstr "**max_samples**"

#: of
msgid "int or float, default=None"
msgstr "int o float, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:177
msgid "If bootstrap is True, the number of samples to draw from X to train each base estimator."
msgstr "Si bootstrap es True, el número de muestras a extraer de X para entrenar cada estimador base."

#: of sklearn.ensemble._forest.RandomForestClassifier:180
msgid "If None (default), then draw `X.shape[0]` samples."
msgstr "Si es None (por defecto), entonces extrae `X.shape[0]` muestras."

#: of sklearn.ensemble._forest.RandomForestClassifier:181
msgid "If int, then draw `max_samples` samples."
msgstr "Si es int, entonces extrae `max_samples` muestras."

#: of sklearn.ensemble._forest.RandomForestClassifier:182
msgid "If float, then draw `max_samples * X.shape[0]` samples. Thus, `max_samples` should be in the interval `(0, 1)`."
msgstr "Si es float, entonces extrae `max_samples * X.shape[0]` muestras. Por lo tanto, `max_samples` debería estar en el intervalo `(0, 1)`."

#: of sklearn.ensemble._forest.RandomForestClassifier
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.ensemble._forest.RandomForestClassifier:194
msgid "**base_estimator_**"
msgstr "**base_estimator_**"

#: of
msgid "DecisionTreeClassifier"
msgstr "DecisionTreeClassifier"

#: of sklearn.ensemble._forest.RandomForestClassifier:193
msgid "The child estimator template used to create the collection of fitted sub-estimators."
msgstr "La plantilla del estimador hijo utilizada para crear la colección de subestimadores ajustados."

#: of sklearn.ensemble._forest.RandomForestClassifier:197
msgid "**estimators_**"
msgstr "**estimators_**"

#: of
msgid "list of DecisionTreeClassifier"
msgstr "list de DecisionTreeClassifier"

#: of sklearn.ensemble._forest.RandomForestClassifier:197
msgid "The collection of fitted sub-estimators."
msgstr "La colección de subestimadores ajustados."

#: of sklearn.ensemble._forest.RandomForestClassifier:201
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "ndarray of shape (n_classes,) or a list of such arrays"
msgstr "ndarray de forma (n_classes,) o una list de dichos arreglos"

#: of sklearn.ensemble._forest.RandomForestClassifier:200
msgid "The classes labels (single output problem), or a list of arrays of class labels (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:205
msgid "**n_classes_**"
msgstr "**n_classes_**"

#: of
msgid "int or list"
msgstr "int o list"

#: of sklearn.ensemble._forest.RandomForestClassifier:204
msgid "The number of classes (single output problem), or a list containing the number of classes for each output (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:208
msgid "**n_features_**"
msgstr "**n_features_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.ensemble._forest.RandomForestClassifier:208
msgid "The number of features when ``fit`` is performed."
msgstr "El número de características cuando ``fit`` es realizado."

#: of sklearn.ensemble._forest.RandomForestClassifier:211
msgid "**n_outputs_**"
msgstr "**n_outputs_**"

#: of sklearn.ensemble._forest.RandomForestClassifier:211
msgid "The number of outputs when ``fit`` is performed."
msgstr "El número de salidas cuando se realiza el ``fit``."

#: of sklearn.ensemble._forest.RandomForestClassifier:214
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ":obj:`feature_importances_ <feature_importances_>`"

#: of
msgid "ndarray of shape (n_features,)"
msgstr "ndarray de forma (n_features,)"

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:2
#: sklearn.ensemble._forest.RandomForestClassifier:214
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:218
msgid "**oob_score_**"
msgstr "**oob_score_**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.ensemble._forest.RandomForestClassifier:217
msgid "Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:228
msgid "**oob_decision_function_**"
msgstr "**oob_decision_function_**"

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr "ndarray de forma (n_samples, n_classes)"

#: of sklearn.ensemble._forest.RandomForestClassifier:221
msgid "Decision function computed with out-of-bag estimate on the training set. If n_estimators is small it might be possible that a data point was never left out during the bootstrap. In this case, `oob_decision_function_` might contain NaN. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:233
msgid ":obj:`DecisionTreeClassifier`, :obj:`ExtraTreesClassifier`"
msgstr ":obj:`DecisionTreeClassifier`, :obj:`ExtraTreesClassifier`"

#: of sklearn.ensemble._forest.RandomForestClassifier:237
msgid "Notes"
msgstr "Notas"

#: of sklearn.ensemble._forest.RandomForestClassifier:238
msgid "The default values for the parameters controlling the size of the trees (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:244
msgid "The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data, ``max_features=n_features`` and ``bootstrap=False``, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, ``random_state`` has to be fixed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:252
msgid "References"
msgstr "Referencias"

#: of sklearn.ensemble._forest.RandomForestClassifier:253
msgid "Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001."
msgstr "Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001."

#: of sklearn.ensemble._forest.RandomForestClassifier:257
msgid "[R45f14345c000-1]_"
msgstr "[R45f14345c000-1]_"

#: of sklearn.ensemble._forest.RandomForestClassifier:260
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.ensemble._forest.RandomForestClassifier:273
msgid "Methods"
msgstr "Métodos"

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.RandomForestClassifier.apply>`\\"
msgstr ":obj:`apply <sklearn.ensemble.RandomForestClassifier.apply>`\\"

#: of sklearn.ensemble._forest.BaseForest.apply:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`decision_path <sklearn.ensemble.RandomForestClassifier.decision_path>`\\"
msgstr ":obj:`decision_path <sklearn.ensemble.RandomForestClassifier.decision_path>`\\"

#: of sklearn.ensemble._forest.BaseForest.decision_path:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Return the decision path in the forest."
msgstr "Devuelve la trayectoria de decisión en el bosque."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.RandomForestClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.ensemble.RandomForestClassifier.fit>`\\"

#: of sklearn.ensemble._forest.BaseForest.fit:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Build a forest of trees from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.RandomForestClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.ensemble.RandomForestClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.RandomForestClassifier.predict>`\\"
msgstr ":obj:`predict <sklearn.ensemble.RandomForestClassifier.predict>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class for X."
msgstr "Predice la clase para X."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.ensemble.RandomForestClassifier.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.ensemble.RandomForestClassifier.predict_log_proba>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class log-probabilities for X."
msgstr "Predice las probabilidades logarítmicas de clase para X."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.RandomForestClassifier.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.ensemble.RandomForestClassifier.predict_proba>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict_proba:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class probabilities for X."
msgstr "Predice las probabilidades de clase para X."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.RandomForestClassifier.score>`\\"
msgstr ":obj:`score <sklearn.ensemble.RandomForestClassifier.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos de prueba y las etiquetas dadas."

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.RandomForestClassifier.set_params>`\\"
msgstr ":obj:`set_params <sklearn.ensemble.RandomForestClassifier.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._forest.BaseForest.apply:10
#: sklearn.ensemble._forest.BaseForest.decision_path:11
#: sklearn.ensemble._forest.BaseForest.fit:10
#: sklearn.ensemble._forest.ForestClassifier.predict:14
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:13
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:14
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.ensemble._forest.BaseForest.apply:8
#: sklearn.ensemble._forest.BaseForest.decision_path:9
#: sklearn.ensemble._forest.ForestClassifier.predict:12
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:11
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:12
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csr_matrix``."
msgstr "Las muestras de entrada. Internamente, se convertirá a ``dtype=np.float32``. Si se proporciona una matriz dispersa, se convertirá a una ``csr_matrix`` dispersa."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.RandomForestClassifier.feature_importances_
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.ensemble._forest.BaseForest.apply:27
msgid "**X_leaves**"
msgstr "**X_leaves**"

#: of
msgid "ndarray of shape (n_samples, n_estimators)"
msgstr "ndarray de forma (n_samples, n_estimators)"

#: of sklearn.ensemble._forest.BaseForest.apply:15
msgid "For each datapoint x in X and for each tree in the forest, return the index of the leaf x ends up in."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:18
msgid "**indicator**"
msgstr "**indicator**"

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr "matriz dispersa de forma (n_samples, n_nodes)"

#: of sklearn.ensemble._forest.BaseForest.decision_path:16
msgid "Return a node indicator matrix where non zero elements indicates that the samples goes through the nodes. The matrix is of CSR format."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:33
msgid "**n_nodes_ptr**"
msgstr "**n_nodes_ptr**"

#: of
msgid "ndarray of shape (n_estimators + 1,)"
msgstr "ndarray de forma (n_estimators + 1,)"

#: of sklearn.ensemble._forest.BaseForest.decision_path:21
msgid "The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]] gives the indicator value for the i-th estimator."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:30
msgid "**feature_importances_**"
msgstr "**feature_importances_**"

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:8
msgid "The training input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csc_matrix``."
msgstr "Las muestras de entrada de entrenamiento. Internamente, su dtype se convertirá a ``dtype=np.float32``. Si se proporciona una matriz dispersa, se convertirá a una ``csc_matrix`` dispersa."

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._forest.BaseForest.fit:14
#: sklearn.ensemble._forest.ForestClassifier.predict:30
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.ensemble._forest.BaseForest.fit:13
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr "Los valores objetivo (etiquetas de clase en clasificación, números reales en regresión)."

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._forest.BaseForest.fit:21
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.ensemble._forest.BaseForest.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr "Ponderación de las muestras. Si es None, las muestras se ponderan por igual. Las divisiones que crearían nodos hijos con peso neto cero o negativo se ignoran al buscar una división en cada nodo. En el caso de la clasificación, las divisiones también se ignoran si dan lugar a que una sola clase tenga un peso negativo en cualquiera de los nodos hijos."

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._forest.BaseForest.fit:37
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.ensemble._forest.ForestClassifier.predict:4
msgid "The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "ndarray de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.ensemble._forest.ForestClassifier.predict:19
msgid "The predicted classes."
msgstr "Las clases predichas."

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:4
msgid "The predicted class log-probabilities of an input sample is computed as the log of the mean predicted class probabilities of the trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:31
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:32
msgid "**p**"
msgstr "**p**"

#: of
msgid "ndarray of shape (n_samples, n_classes), or a list of n_outputs"
msgstr "ndarray de forma (n_samples, n_classes), o una list de n_outputs"

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:18
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:19
msgid "such arrays if n_outputs > 1. The class probabilities of the input samples. The order of the classes corresponds to that in the attribute :term:`classes_`."
msgstr "tales arreglos si n_outputs > 1. Las probabilidades de clase de las muestras de entrada. El orden de las clases corresponde al del atributo :term:`classes_`."

#: of sklearn.ensemble._forest.ForestClassifier.predict_proba:4
msgid "The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest. The class probability of a single tree is the fraction of samples of the same class in a leaf."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr "En la clasificación multietiqueta, se trata de la precisión del subconjunto, que es una métrica rigurosa, ya que se requiere para cada muestra que cada conjunto de etiquetas sea predicho correctamente."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas verdaderas para `X`."

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderaciones de muestras."

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr "**score**"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:4
msgid "Examples using ``sklearn.ensemble.RandomForestClassifier``"
msgstr "Ejemplos utilizando ``sklearn.ensemble.RandomForestClassifier``"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:15
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:34
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:42
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:53
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:61
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:72
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:80
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_iterations.py`"
msgstr ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_iterations.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance_multicollinear.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_roc_curve_visualization_api.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_det.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
#~ msgstr ""

