msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-06-18 22:42\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.RandomForestClassifier.po\n"
"X-Crowdin-File-ID: 5642\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.RandomForestClassifier"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:2
msgid "A random forest classifier."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:4
msgid "A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is controlled with the `max_samples` parameter if `bootstrap=True` (default), otherwise the whole dataset is used to build each tree."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:11
msgid "Read more in the :ref:`User Guide <forest>`."
msgstr "Leer más en el :ref:`Manual de Usuario <forest>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
#: sklearn.ensemble._forest.RandomForestClassifier
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.ensemble._forest.RandomForestClassifier:20
msgid "**n_estimators**"
msgstr "**n_estimators**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.ensemble._forest.RandomForestClassifier:16
msgid "The number of trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:18
msgid "The default value of ``n_estimators`` changed from 10 to 100 in 0.22."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:25
msgid "**criterion**"
msgstr "**criterion**"

#: of
msgid "{\"gini\", \"entropy\"}, default=\"gini\""
msgstr "{\"gini\", \"entropy\"}, default=\"gini\""

#: of sklearn.ensemble._forest.RandomForestClassifier:23
msgid "The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain. Note: this parameter is tree-specific."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:30
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:28
msgid "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:41
msgid "**min_samples_split**"
msgstr "**min_samples_split**"

#: of
msgid "int or float, default=2"
msgstr "int o float, default=2"

#: of sklearn.ensemble._forest.RandomForestClassifier:33
msgid "The minimum number of samples required to split an internal node:"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:35
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:36
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:40
#: sklearn.ensemble._forest.RandomForestClassifier:55
msgid "Added float values for fractions."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:56
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int or float, default=1"
msgstr "int o float, default=1"

#: of sklearn.ensemble._forest.RandomForestClassifier:44
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:50
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:51
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:61
msgid "**min_weight_fraction_leaf**"
msgstr "**min_weight_fraction_leaf**"

#: of
msgid "float, default=0.0"
msgstr "float, default=0.0"

#: of sklearn.ensemble._forest.RandomForestClassifier:59
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:77
msgid "**max_features**"
msgstr "**max_features**"

#: of
msgid "{\"auto\", \"sqrt\", \"log2\"}, int or float, default=\"auto\""
msgstr "{\"auto\", \"sqrt\", \"log2\"}, int o float, default=\"auto\""

#: of sklearn.ensemble._forest.RandomForestClassifier:64
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:66
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:67
msgid "If float, then `max_features` is a fraction and `round(max_features * n_features)` features are considered at each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:70
msgid "If \"auto\", then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:71
msgid "If \"sqrt\", then `max_features=sqrt(n_features)` (same as \"auto\")."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:72
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:73
msgid "If None, then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:75
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:82
msgid "**max_leaf_nodes**"
msgstr "**max_leaf_nodes**"

#: of sklearn.ensemble._forest.RandomForestClassifier:80
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:100
msgid "**min_impurity_decrease**"
msgstr "**min_impurity_decrease**"

#: of sklearn.ensemble._forest.RandomForestClassifier:85
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:88
msgid "The weighted impurity decrease equation is the following::"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:93
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:97
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:111
msgid "**min_impurity_split**"
msgstr ""

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:103
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:106
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:115
msgid "**bootstrap**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.ensemble._forest.RandomForestClassifier:114
msgid "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:119
msgid "**oob_score**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.ensemble._forest.RandomForestClassifier:118
msgid "Whether to use out-of-bag samples to estimate the generalization accuracy."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:126
msgid "**n_jobs**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:122
msgid "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:133
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, instancia RandomState o None, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:129
msgid "Controls both the randomness of the bootstrapping of the samples used when building trees (if ``bootstrap=True``) and the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``). See :term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:136
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.ensemble._forest.RandomForestClassifier:136
msgid "Controls the verbosity when fitting and predicting."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:141
msgid "**warm_start**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:139
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:166
msgid "**class_weight**"
msgstr ""

#: of
msgid "{\"balanced\", \"balanced_subsample\"}, dict or list of dicts,             default=None"
msgstr "{\"balanced\", \"balanced_subsample\"}, dict o list de dicts,             default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:144
msgid "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:149
msgid "Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}]."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:155
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:159
msgid "The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:163
msgid "For multi-output, the weights of each column of y will be multiplied."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:165
msgid "Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:174
msgid "**ccp_alpha**"
msgstr ""

#: of
msgid "non-negative float, default=0.0"
msgstr "float no negativo, default=0.0"

#: of sklearn.ensemble._forest.RandomForestClassifier:169
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:188
msgid "**max_samples**"
msgstr ""

#: of
msgid "int or float, default=None"
msgstr "int o float, default=None"

#: of sklearn.ensemble._forest.RandomForestClassifier:177
msgid "If bootstrap is True, the number of samples to draw from X to train each base estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:180
msgid "If None (default), then draw `X.shape[0]` samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:181
msgid "If int, then draw `max_samples` samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:182
msgid "If float, then draw `max_samples * X.shape[0]` samples. Thus, `max_samples` should be in the interval `(0, 1)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.ensemble._forest.RandomForestClassifier:194
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "DecisionTreeClassifier"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:193
msgid "The child estimator template used to create the collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:197
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of DecisionTreeClassifier"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:197
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:201
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,) or a list of such arrays"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:200
msgid "The classes labels (single output problem), or a list of arrays of class labels (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:205
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int or list"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:204
msgid "The number of classes (single output problem), or a list containing the number of classes for each output (multi-output problem)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:208
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:208
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:211
msgid "**n_outputs_**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:211
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:214
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ":obj:`feature_importances_ <feature_importances_>`"

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:2
#: sklearn.ensemble._forest.RandomForestClassifier:214
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:218
msgid "**oob_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:217
msgid "Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:228
msgid "**oob_decision_function_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:221
msgid "Decision function computed with out-of-bag estimate on the training set. If n_estimators is small it might be possible that a data point was never left out during the bootstrap. In this case, `oob_decision_function_` might contain NaN. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:233
msgid ":obj:`DecisionTreeClassifier`, :obj:`ExtraTreesClassifier`"
msgstr ":obj:`DecisionTreeClassifier`, :obj:`ExtraTreesClassifier`"

#: of sklearn.ensemble._forest.RandomForestClassifier:237
msgid "Notes"
msgstr "Notas"

#: of sklearn.ensemble._forest.RandomForestClassifier:238
msgid "The default values for the parameters controlling the size of the trees (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:244
msgid "The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data, ``max_features=n_features`` and ``bootstrap=False``, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, ``random_state`` has to be fixed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:252
msgid "References"
msgstr "Referencias"

#: of sklearn.ensemble._forest.RandomForestClassifier:253
msgid "Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:257
msgid "[R45f14345c000-1]_"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:260
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.ensemble._forest.RandomForestClassifier:273
msgid "Methods"
msgstr "Métodos"

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.RandomForestClassifier.apply>`\\"
msgstr ":obj:`apply <sklearn.ensemble.RandomForestClassifier.apply>`\\"

#: of sklearn.ensemble._forest.BaseForest.apply:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`decision_path <sklearn.ensemble.RandomForestClassifier.decision_path>`\\"
msgstr ":obj:`decision_path <sklearn.ensemble.RandomForestClassifier.decision_path>`\\"

#: of sklearn.ensemble._forest.BaseForest.decision_path:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Return the decision path in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.RandomForestClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.ensemble.RandomForestClassifier.fit>`\\"

#: of sklearn.ensemble._forest.BaseForest.fit:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Build a forest of trees from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.RandomForestClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.ensemble.RandomForestClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.RandomForestClassifier.predict>`\\"
msgstr ":obj:`predict <sklearn.ensemble.RandomForestClassifier.predict>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class for X."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.ensemble.RandomForestClassifier.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.ensemble.RandomForestClassifier.predict_log_proba>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class log-probabilities for X."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.RandomForestClassifier.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.ensemble.RandomForestClassifier.predict_proba>`\\"

#: of sklearn.ensemble._forest.ForestClassifier.predict_proba:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Predict class probabilities for X."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.RandomForestClassifier.score>`\\"
msgstr ":obj:`score <sklearn.ensemble.RandomForestClassifier.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.RandomForestClassifier.set_params>`\\"
msgstr ":obj:`set_params <sklearn.ensemble.RandomForestClassifier.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._forest.RandomForestClassifier:285:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._forest.BaseForest.apply:10
#: sklearn.ensemble._forest.BaseForest.decision_path:11
#: sklearn.ensemble._forest.BaseForest.fit:10
#: sklearn.ensemble._forest.ForestClassifier.predict:14
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:13
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:14
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:8
#: sklearn.ensemble._forest.BaseForest.decision_path:9
#: sklearn.ensemble._forest.ForestClassifier.predict:12
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba:11
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:12
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.RandomForestClassifier.feature_importances_
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestClassifier.predict
#: sklearn.ensemble._forest.ForestClassifier.predict_log_proba
#: sklearn.ensemble._forest.ForestClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:27
msgid "**X_leaves**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_estimators)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:15
msgid "For each datapoint x in X and for each tree in the forest, return the index of the leaf x ends up in."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:18
msgid "**indicator**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:16
msgid "Return a node indicator matrix where non zero elements indicates that the samples goes through the nodes. The matrix is of CSR format."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:33
msgid "**n_nodes_ptr**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators + 1,)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:21
msgid "The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]] gives the indicator value for the i-th estimator."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.RandomForestClassifier.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:8
msgid "The training input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csc_matrix``."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._forest.BaseForest.fit:14
#: sklearn.ensemble._forest.ForestClassifier.predict:30
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:13
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._forest.BaseForest.fit:21
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.ensemble._forest.BaseForest.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._forest.BaseForest.fit:37
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict:4
msgid "The predicted class of an input sample is a vote by the trees in the forest, weighted by their probability estimates. That is, the predicted class is the one with highest mean probability estimate across the trees."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict:19
msgid "The predicted classes."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:4
msgid "The predicted class log-probabilities of an input sample is computed as the log of the mean predicted class probabilities of the trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:31
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:32
msgid "**p**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes), or a list of n_outputs"
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_log_proba:18
#: sklearn.ensemble._forest.ForestClassifier.predict_proba:19
msgid "such arrays if n_outputs > 1. The class probabilities of the input samples. The order of the classes corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.ensemble._forest.ForestClassifier.predict_proba:4
msgid "The predicted class probabilities of an input sample are computed as the mean predicted class probabilities of the trees in the forest. The class probability of a single tree is the fraction of samples of the same class in a leaf."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:4
msgid "Examples using ``sklearn.ensemble.RandomForestClassifier``"
msgstr "Ejemplos utilizando ``sklearn.ensemble.RandomForestClassifier``"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:15
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:34
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:42
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:53
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:61
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"

#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:72
#: ../modules/generated/sklearn.ensemble.RandomForestClassifier.examples:80
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_iterations.py`"
msgstr ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_iterations.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance_multicollinear.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_roc_curve_visualization_api.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_det.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
#~ msgstr ""

