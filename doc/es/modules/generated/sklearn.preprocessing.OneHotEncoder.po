msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: 2021-06-09 05:24\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.OneHotEncoder.po\n"
"X-Crowdin-File-ID: 5470\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.OneHotEncoder.rst:2
msgid ":mod:`sklearn.preprocessing`.OneHotEncoder"
msgstr ":mod:`sklearn.preprocessing`.OneHotEncoder"

#: of sklearn.preprocessing._encoders.OneHotEncoder:2
msgid "Encode categorical features as a one-hot numeric array."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:4
msgid "The input to this transformer should be an array-like of integers or strings, denoting the values taken on by categorical (discrete) features. The features are encoded using a one-hot (aka 'one-of-K' or 'dummy') encoding scheme. This creates a binary column for each category and returns a sparse matrix or dense array (depending on the ``sparse`` parameter)"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:11
msgid "By default, the encoder derives the categories based on the unique values in each feature. Alternatively, you can also specify the `categories` manually."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:15
msgid "This encoding is needed for feeding categorical data to many scikit-learn estimators, notably linear models and SVMs with the standard kernels."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:18
msgid "Note: a one-hot encoding of y labels should use a LabelBinarizer instead."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:21
msgid "Read more in the :ref:`User Guide <preprocessing_categorical_features>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._encoders.OneHotEncoder
#: sklearn.preprocessing._encoders.OneHotEncoder.fit
#: sklearn.preprocessing._encoders.OneHotEncoder.fit_transform
#: sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names
#: sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform
#: sklearn.preprocessing._encoders.OneHotEncoder.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._encoders.OneHotEncoder:38
msgid "**categories**"
msgstr "**categories**"

#: of
msgid "'auto' or a list of array-like, default='auto'"
msgstr "'auto' o una list de array-like, default='auto'"

#: of sklearn.preprocessing._encoders.OneHotEncoder:28
msgid "Categories (unique values) per feature:"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:30
msgid "'auto' : Determine categories automatically from the training data."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:31
msgid "list : ``categories[i]`` holds the categories expected in the ith column. The passed categories should not mix strings and numeric values within a single feature, and should be sorted in case of numeric values."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:36
msgid "The used categories can be found in the ``categories_`` attribute."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:60
msgid "**drop**"
msgstr "**drop**"

#: of
msgid "{'first', 'if_binary'} or a array-like of shape (n_features,),             default=None"
msgstr "{'first', 'if_binary'} o un array-like de forma (n_features,),             default=None"

#: of sklearn.preprocessing._encoders.OneHotEncoder:41
msgid "Specifies a methodology to use to drop one of the categories per feature. This is useful in situations where perfectly collinear features cause problems, such as when feeding the resulting data into a neural network or an unregularized regression."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:46
msgid "However, dropping one category breaks the symmetry of the original representation and can therefore induce a bias in downstream models, for instance for penalized linear classification or regression models."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:50
msgid "None : retain all features (the default)."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:51
msgid "'first' : drop the first category in each feature. If only one category is present, the feature will be dropped entirely."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:53
msgid "'if_binary' : drop the first category in each feature with two categories. Features with 1 or more than 2 categories are left intact."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:56
msgid "array : ``drop[i]`` is the category in feature ``X[:, i]`` that should be dropped."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:59
msgid "Added option 'if_binary'."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:63
msgid "**sparse**"
msgstr "**sparse**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.preprocessing._encoders.OneHotEncoder:63
msgid "Will return sparse matrix if set True else will return an array."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:66
msgid "**dtype**"
msgstr "**dtype**"

#: of
msgid "number type, default=float"
msgstr "number type, default=float"

#: of sklearn.preprocessing._encoders.OneHotEncoder:66
msgid "Desired dtype of output."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:77
msgid "**handle_unknown**"
msgstr "**handle_unknown**"

#: of
msgid "{'error', 'ignore'}, default='error'"
msgstr "{'error', 'ignore'}, default='error'"

#: of sklearn.preprocessing._encoders.OneHotEncoder:69
msgid "Whether to raise an error or ignore if an unknown categorical feature is present during transform (default is to raise). When this parameter is set to 'ignore' and an unknown category is encountered during transform, the resulting one-hot encoded columns for this feature will be all zeros. In the inverse transform, an unknown category will be denoted as None."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.preprocessing._encoders.OneHotEncoder:85
msgid "**categories_**"
msgstr "**categories_**"

#: of
msgid "list of arrays"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:82
msgid "The categories of each feature determined during fitting (in order of the features in X and corresponding with the output of ``transform``). This includes the category specified in ``drop`` (if any)."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:100
msgid "**drop_idx_**"
msgstr "**drop_idx_**"

#: of
msgid "array of shape (n_features,)"
msgstr "array de forma (n_features,)"

#: of sklearn.preprocessing._encoders.OneHotEncoder:88
msgid "``drop_idx_[i]`` is the index in ``categories_[i]`` of the category to be dropped for each feature."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:90
msgid "``drop_idx_[i] = None`` if no category is to be dropped from the feature with index ``i``, e.g. when `drop='if_binary'` and the feature isn't binary."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:93
msgid "``drop_idx_ = None`` if all the transformed features will be retained."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:96
msgid "Added the possibility to contain `None` values."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:105
msgid ":obj:`OrdinalEncoder`"
msgstr ":obj:`OrdinalEncoder`"

#: of sklearn.preprocessing._encoders.OneHotEncoder:106
msgid "Performs an ordinal (integer) encoding of the categorical features."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:107
msgid ":obj:`sklearn.feature_extraction.DictVectorizer`"
msgstr ":obj:`sklearn.feature_extraction.DictVectorizer`"

#: of sklearn.preprocessing._encoders.OneHotEncoder:108
msgid "Performs a one-hot encoding of dictionary items (also handles string-valued features)."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:109
msgid ":obj:`sklearn.feature_extraction.FeatureHasher`"
msgstr ":obj:`sklearn.feature_extraction.FeatureHasher`"

#: of sklearn.preprocessing._encoders.OneHotEncoder:110
msgid "Performs an approximate one-hot encoding of dictionary items or strings."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:111
msgid ":obj:`LabelBinarizer`"
msgstr ":obj:`LabelBinarizer`"

#: of sklearn.preprocessing._encoders.OneHotEncoder:112
msgid "Binarizes labels in a one-vs-all fashion."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:113
msgid ":obj:`MultiLabelBinarizer`"
msgstr ":obj:`MultiLabelBinarizer`"

#: of sklearn.preprocessing._encoders.OneHotEncoder:114
msgid "Transforms between iterable of iterables and a multilabel format, e.g. a (samples x classes) binary matrix indicating the presence of a class label."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:120
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.preprocessing._encoders.OneHotEncoder:121
msgid "Given a dataset with two features, we let the encoder find the unique values per feature and transform the data to a binary one-hot encoding."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:126
msgid "One can discard categories not seen during `fit`:"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:144
msgid "One can always drop the first column for each feature:"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:153
msgid "Or drop a column for feature only having 2 categories:"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:161
msgid "Methods"
msgstr "Métodos"

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.OneHotEncoder.fit>`\\"
msgstr ":obj:`fit <sklearn.preprocessing.OneHotEncoder.fit>`\\"

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Fit OneHotEncoder to X."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.OneHotEncoder.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.preprocessing.OneHotEncoder.fit_transform>`\\"

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Fit OneHotEncoder to X, then transform X."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`get_feature_names <sklearn.preprocessing.OneHotEncoder.get_feature_names>`\\"
msgstr ":obj:`get_feature_names <sklearn.preprocessing.OneHotEncoder.get_feature_names>`\\"

#: of sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Return feature names for output features."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.OneHotEncoder.get_params>`\\"
msgstr ":obj:`get_params <sklearn.preprocessing.OneHotEncoder.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.OneHotEncoder.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.preprocessing.OneHotEncoder.inverse_transform>`\\"

#: of sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Convert the data back to the original representation."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.OneHotEncoder.set_params>`\\"
msgstr ":obj:`set_params <sklearn.preprocessing.OneHotEncoder.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.OneHotEncoder.transform>`\\"
msgstr ":obj:`transform <sklearn.preprocessing.OneHotEncoder.transform>`\\"

#: of sklearn.preprocessing._encoders.OneHotEncoder.transform:2
#: sklearn.preprocessing._encoders.OneHotEncoder:171:<autosummary>:1
msgid "Transform X using one-hot encoding."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:8
#: sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:9
#: sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:10
#: sklearn.preprocessing._encoders.OneHotEncoder.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like, shape [n_samples, n_features]"
msgstr "array-like, forma [n_samples, n_features]"

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:8
msgid "The data to determine the categories of each feature."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:12
#: sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:13
msgid "**y**"
msgstr "**y**"

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:11
#: sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:12
msgid "Ignored. This parameter exists only for compatibility with :class:`~sklearn.pipeline.Pipeline`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._encoders.OneHotEncoder.fit
#: sklearn.preprocessing._encoders.OneHotEncoder.fit_transform
#: sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names
#: sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform
#: sklearn.preprocessing._encoders.OneHotEncoder.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit:28
msgid "self"
msgstr "self"

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:4
msgid "Equivalent to fit(X).transform(X) but more convenient."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:9
#: sklearn.preprocessing._encoders.OneHotEncoder.transform:8
msgid "The data to encode."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:29
#: sklearn.preprocessing._encoders.OneHotEncoder.transform:24
msgid "**X_out**"
msgstr "**X_out**"

#: of
msgid "sparse matrix if sparse=True else a 2-d array"
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.fit_transform:18
#: sklearn.preprocessing._encoders.OneHotEncoder.transform:13
msgid "Transformed input."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names:9
msgid "**input_features**"
msgstr "**input_features**"

#: of
msgid "list of str of shape (n_features,)"
msgstr "list de str de forma (n_features,)"

#: of sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names:8
msgid "String names for input features if available. By default, \"x0\", \"x1\", ... \"xn_features\" is used."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names:25
msgid "**output_feature_names**"
msgstr "**output_feature_names**"

#: of
msgid "ndarray of shape (n_output_features,)"
msgstr "ndarray de forma (n_output_features,)"

#: of sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names:14
msgid "Array of feature names."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:4
msgid "In case unknown categories are encountered (all zeros in the one-hot encoding), ``None`` is used to represent this category."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape [n_samples, n_encoded_features]"
msgstr "array-like o sparse matrix, forma [n_samples, n_encoded_features]"

#: of sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:10
msgid "The transformed data."
msgstr "Los datos transformados."

#: of sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:26
msgid "**X_tr**"
msgstr "**X_tr**"

#: of sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform:15
msgid "Inverse transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.preprocessing.OneHotEncoder.examples:4
msgid "Examples using ``sklearn.preprocessing.OneHotEncoder``"
msgstr "Ejemplos utilizando ``sklearn.preprocessing.OneHotEncoder``"

#: ../modules/generated/sklearn.preprocessing.OneHotEncoder.examples:15
#: ../modules/generated/sklearn.preprocessing.OneHotEncoder.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
#~ msgstr ""

