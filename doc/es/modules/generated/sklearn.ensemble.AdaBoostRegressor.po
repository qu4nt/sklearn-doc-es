msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:02\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.AdaBoostRegressor.po\n"
"X-Crowdin-File-ID: 3080\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.AdaBoostRegressor.rst:2
msgid ":mod:`sklearn.ensemble`.AdaBoostRegressor"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:2
msgid "An AdaBoost regressor."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:4
msgid "An AdaBoost [1] regressor is a meta-estimator that begins by fitting a regressor on the original dataset and then fits additional copies of the regressor on the same dataset but where the weights of instances are adjusted according to the error of the current prediction. As such, subsequent regressors focus more on difficult cases."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:10
msgid "This class implements the algorithm known as AdaBoost.R2 [2]."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:12
msgid "Read more in the :ref:`User Guide <adaboost>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:22
msgid "**base_estimator**"
msgstr ""

#: of
msgid "object, default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:19
msgid "The base estimator from which the boosted ensemble is built. If ``None``, then the base estimator is :class:`~sklearn.tree.DecisionTreeRegressor` initialized with `max_depth=3`."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:26
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=50"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:25
msgid "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:31
msgid "**learning_rate**"
msgstr ""

#: of
msgid "float, default=1."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:29
msgid "Learning rate shrinks the contribution of each regressor by ``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:35
msgid "**loss**"
msgstr ""

#: of
msgid "{'linear', 'square', 'exponential'}, default='linear'"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:34
msgid "The loss function to use when updating the weights after each boosting iteration."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:47
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:38
msgid "Controls the random seed given at each `base_estimator` at each boosting iteration. Thus, it is only used when `base_estimator` exposes a `random_state`. In addition, it controls the bootstrap of the weights used to train the `base_estimator` at each boosting iteration. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:52
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:52
msgid "The base estimator from which the ensemble is grown."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:55
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of classifiers"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:55
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:58
msgid "**estimator_weights_**"
msgstr ""

#: of
msgid "ndarray of floats"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:58
msgid "Weights for each estimator in the boosted ensemble."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:61
msgid "**estimator_errors_**"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:61
msgid "Regression error for each estimator in the boosted ensemble."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:67
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.AdaBoostRegressor.feature_importances_:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:64
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:72
msgid ":obj:`AdaBoostClassifier`, :obj:`GradientBoostingRegressor`"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:74
msgid ":obj:`sklearn.tree.DecisionTreeRegressor`"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:79
msgid "References"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:80
msgid "Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of on-Line Learning and an Application to Boosting\", 1995."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:83
msgid "Drucker, \"Improving Regressors using Boosting Techniques\", 1997."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:87
msgid "[R0c261b7dee9d-1]_, [R0c261b7dee9d-2]_"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:90
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:104
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.AdaBoostRegressor.fit>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Build a boosted regressor from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.AdaBoostRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.AdaBoostRegressor.predict>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Predict regression value for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.AdaBoostRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.AdaBoostRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`staged_predict <sklearn.ensemble.AdaBoostRegressor.staged_predict>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:2
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid "Return staged predictions for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
msgid ":obj:`staged_score <sklearn.ensemble.AdaBoostRegressor.staged_score>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor:114:<autosummary>:1
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:2
msgid "Return staged scores for X, y."
msgstr ""

#: of sklearn.ensemble.AdaBoostRegressor.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.AdaBoostRegressor.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble.AdaBoostRegressor.feature_importances_
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict
msgid "Returns"
msgstr ""

#: of sklearn.ensemble.AdaBoostRegressor.feature_importances_:28
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.AdaBoostRegressor.feature_importances_:17
msgid "The feature importances."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:9
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:11
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:15
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:8
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:10
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:11
msgid "The training input samples. Sparse matrix can be CSC, CSR, COO, DOK, or LIL. COO, DOK, and LIL are converted to CSR."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:12
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:27
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:30
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:15
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:12
msgid "The target values (real numbers)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:16
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:15
msgid "Sample weights. If None, the sample weights are initialized to 1 / n_samples."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.fit:32
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:4
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:4
msgid "The predicted regression value of an input sample is computed as the weighted median prediction of the classifiers in the ensemble."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict:16
#: sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:20
msgid "The predicted regression values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:18
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:7
msgid "This generator method yields the ensemble prediction after each iteration of boosting and therefore allows monitoring, such as to determine the prediction on a test set after each boost."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict:14
msgid "The training input samples."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score
msgid "Yields"
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:4
msgid "This generator method yields the ensemble score after each iteration of boosting and therefore allows monitoring, such as to determine the score on a test set after each boost."
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:15
msgid "Labels for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:34
msgid "**z**"
msgstr ""

