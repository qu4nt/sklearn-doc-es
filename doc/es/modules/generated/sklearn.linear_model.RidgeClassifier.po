msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-07 23:58\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.RidgeClassifier.po\n"
"X-Crowdin-File-ID: 5684\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.RidgeClassifier.rst:2
msgid ":mod:`sklearn.linear_model`.RidgeClassifier"
msgstr ":mod:`sklearn.linear_model`.RidgeClassifier"

#: of sklearn.linear_model._ridge.RidgeClassifier:2
msgid "Classifier using Ridge regression."
msgstr "Clasificador mediante regresión Ridge."

#: of sklearn.linear_model._ridge.RidgeClassifier:4
msgid "This classifier first converts the target values into ``{-1, 1}`` and then treats the problem as a regression task (multi-output regression in the multiclass case)."
msgstr "Este clasificador convierte primero los valores objetivo en ``{-1, 1}`` y luego trata el problema como una tarea de regresión (regresión de múltiples salidas en el caso de las clases múltiples)."

#: of sklearn.linear_model._ridge.RidgeClassifier:8
msgid "Read more in the :ref:`User Guide <ridge_regression>`."
msgstr "Más información en el :ref:`Manual de usuario <ridge_regression>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._ridge.RidgeClassifier
#: sklearn.linear_model._ridge.RidgeClassifier.fit
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.linear_model._ridge.RidgeClassifier:18
msgid "**alpha**"
msgstr "**alpha**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.linear_model._ridge.RidgeClassifier:13
msgid "Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``1 / (2C)`` in other linear models such as :class:`~sklearn.linear_model.LogisticRegression` or :class:`~sklearn.svm.LinearSVC`."
msgstr "Fuerza de regularización; debe ser un flotante (float) positivo. La regularización mejora el condicionamiento del problema y reduce la varianza de las estimaciones. Los valores más grandes especifican una regularización más fuerte. Alpha corresponde a ``1 / (2C)`` en otros modelos lineales como :class:`~sklearn.linear_model.LogisticRegression` o :class:`~sklearn.svm.LinearSVC`."

#: of sklearn.linear_model._ridge.RidgeClassifier:23
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._ridge.RidgeClassifier:21
msgid "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered)."
msgstr "Si se calcula el intercepto para este modelo. Si se establece en False, no se utilizará ningún intercepto en los cálculos (por ejemplo, se espera que los datos ya estén centrados)."

#: of sklearn.linear_model._ridge.RidgeClassifier:31
msgid "**normalize**"
msgstr "**normalize**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._ridge.RidgeClassifier:26
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr "Este parámetro es ignorado cuando ``fit_intercept`` se establece como False. Si True, los regresores X serán normalizados antes de la regresión restando la media y dividiendo por la norma l2. Si tu deseas estandarizar, por favor utiliza :class:`~sklearn.preprocessing.StandardScaler` antes de llamar ``fit`` en un estimador con ``normalize=False``."

#: of sklearn.linear_model._ridge.RidgeClassifier:34
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._ridge.RidgeClassifier:34
msgid "If True, X will be copied; else, it may be overwritten."
msgstr "Si es True, X se copiará; si no, puede ser sobrescrito."

#: of sklearn.linear_model._ridge.RidgeClassifier:38
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.linear_model._ridge.RidgeClassifier:37
msgid "Maximum number of iterations for conjugate gradient solver. The default value is determined by scipy.sparse.linalg."
msgstr "Número máximo de iteraciones para el solucionador de gradiente conjugado (conjugate gradient solver). El valor por defecto está determinado por scipy.sparse.linalg."

#: of sklearn.linear_model._ridge.RidgeClassifier:41
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:41
msgid "Precision of the solution."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:49
msgid "**class_weight**"
msgstr ""

#: of
msgid "dict or 'balanced', default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:44
msgid "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:47
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:82
msgid "**solver**"
msgstr ""

#: of
msgid "{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'},         default='auto'"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:52
msgid "Solver to use in the computational routines:"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:54
msgid "'auto' chooses the solver automatically based on the type of data."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:56
msgid "'svd' uses a Singular Value Decomposition of X to compute the Ridge coefficients. More stable for singular matrices than 'cholesky'."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:59
msgid "'cholesky' uses the standard scipy.linalg.solve function to obtain a closed-form solution."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:62
msgid "'sparse_cg' uses the conjugate gradient solver as found in scipy.sparse.linalg.cg. As an iterative algorithm, this solver is more appropriate than 'cholesky' for large-scale data (possibility to set `tol` and `max_iter`)."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:67
msgid "'lsqr' uses the dedicated regularized least-squares routine scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative procedure."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:71
msgid "'sag' uses a Stochastic Average Gradient descent, and 'saga' uses its unbiased and more flexible version named SAGA. Both methods use an iterative procedure, and are often faster than other solvers when both n_samples and n_features are large. Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:79
msgid "Stochastic Average Gradient descent solver."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:81
msgid "SAGA solver."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:89
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:85
msgid "Used when ``solver`` == 'sag' or 'saga' to shuffle the data. See :term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:96
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features) or (n_classes, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:94
msgid "Coefficient of the features in the decision function."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:96
msgid "``coef_`` is of shape (1, n_features) when the given problem is binary."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:100
msgid "**intercept_**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:99
msgid "Independent term in decision function. Set to 0.0 if ``fit_intercept = False``."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:104
msgid "**n_iter_**"
msgstr ""

#: of
msgid "None or ndarray of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:103
msgid "Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return None."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:110
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:107
msgid "The classes labels."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:115
msgid ":obj:`Ridge`"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:116
msgid "Ridge regression."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:117
msgid ":obj:`RidgeClassifierCV`"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:118
msgid "Ridge classifier with built-in cross validation."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:122
msgid "Notes"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:123
msgid "For multi-class classification, n_class classifiers are trained in a one-versus-all approach. Concretely, this is implemented by taking advantage of the multi-variate response support in Ridge."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:129
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:138
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`decision_function <sklearn.linear_model.RidgeClassifier.decision_function>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Predict confidence scores for samples."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.RidgeClassifier.fit>`\\"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Fit Ridge classifier model."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.RidgeClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.RidgeClassifier.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Predict class labels for samples in X."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.RidgeClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.RidgeClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._ridge.RidgeClassifier:147:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:4
msgid "The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
#: sklearn.linear_model._ridge.RidgeClassifier.fit:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._ridge.RidgeClassifier.fit
msgid "Returns"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:28
msgid "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:15
msgid "Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted."
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.linear_model._ridge.RidgeClassifier.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.linear_model._ridge.RidgeClassifier.fit:18
msgid "**sample_weight**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:14
msgid "Individual weights for each sample. If given a float, every sample will have the same weight."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:17
msgid "*sample_weight* support to Classifier."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._ridge.RidgeClassifier.fit:34
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifier.fit:23
msgid "Instance of the estimator."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.linear_model.RidgeClassifier.examples:4
msgid "Examples using ``sklearn.linear_model.RidgeClassifier``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.RidgeClassifier.examples:15
#: ../modules/generated/sklearn.linear_model.RidgeClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
msgstr ""

