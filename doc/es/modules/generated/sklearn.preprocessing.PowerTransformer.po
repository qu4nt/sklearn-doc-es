msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-03 03:54\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.PowerTransformer.po\n"
"X-Crowdin-File-ID: 5552\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.rst:2
msgid ":mod:`sklearn.preprocessing`.PowerTransformer"
msgstr ":mod:`sklearn.preprocessing`.PowerTransformer"

#: of sklearn.preprocessing._data.PowerTransformer:2
msgid "Apply a power transform featurewise to make data more Gaussian-like."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:4
msgid "Power transforms are a family of parametric, monotonic transformations that are applied to make data more Gaussian-like. This is useful for modeling issues related to heteroscedasticity (non-constant variance), or other situations where normality is desired."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:9
msgid "Currently, PowerTransformer supports the Box-Cox transform and the Yeo-Johnson transform. The optimal parameter for stabilizing variance and minimizing skewness is estimated through maximum likelihood."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:13
msgid "Box-Cox requires input data to be strictly positive, while Yeo-Johnson supports both positive or negative data."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:16
msgid "By default, zero-mean, unit-variance normalization is applied to the transformed data."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:19
msgid "Read more in the :ref:`User Guide <preprocessing_transformer>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._data.PowerTransformer
#: sklearn.preprocessing._data.PowerTransformer.fit
#: sklearn.preprocessing._data.PowerTransformer.fit_transform
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform
#: sklearn.preprocessing._data.PowerTransformer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:29
msgid "**method**"
msgstr ""

#: of
msgid "{'yeo-johnson', 'box-cox'}, default='yeo-johnson'"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:26
msgid "The power transform method. Available methods are:"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:28
msgid "'yeo-johnson' [Rf3e1504535de-1]_, works with positive and negative values"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:29
msgid "'box-cox' [Rf3e1504535de-2]_, only works with strictly positive values"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:33
msgid "**standardize**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:32
msgid "Set to True to apply zero-mean, unit-variance normalization to the transformed output."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:39
msgid "**copy**"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:36
msgid "Set to False to perform inplace computation during transformation."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer
msgid "Attributes"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:47
msgid "**lambdas_**"
msgstr ""

#: of
msgid "ndarray of float of shape (n_features,)"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:44
msgid "The parameters of the power transformation for the selected features."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:52
msgid ":obj:`power_transform`"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:53
msgid "Equivalent function without the estimator API."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:54
msgid ":obj:`QuantileTransformer`"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:55
msgid "Maps data to a standard normal distribution with the parameter `output_distribution='normal'`."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:59
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:60
msgid "NaNs are treated as missing values: disregarded in ``fit``, and maintained in ``transform``."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:63
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:68
msgid "References"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:69
msgid "I.K. Yeo and R.A. Johnson, \"A new family of power transformations to improve normality or symmetry.\" Biometrika, 87(4), pp.954-959, (2000)."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:73
msgid "G.E.P. Box and D.R. Cox, \"An Analysis of Transformations\", Journal of the Royal Statistical Society B, 26, 211-252 (1964)."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:78
msgid "[Rf3e1504535de-1]_, [Rf3e1504535de-2]_"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:81
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:96
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.PowerTransformer.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Estimate the optimal parameter lambda for each feature."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.PowerTransformer.fit_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.PowerTransformer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.PowerTransformer.inverse_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Apply the inverse power transformation using the fitted lambdas."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.PowerTransformer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.PowerTransformer.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Apply the power transform to each feature using the fitted lambdas."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:4
msgid "The optimal lambda parameter for minimizing skewness is estimated on each feature independently using maximum likelihood."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:10
#: sklearn.preprocessing._data.PowerTransformer.fit_transform:10
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform:25
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform:41
#: sklearn.preprocessing._data.PowerTransformer.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:10
msgid "The data used to estimate the optimal transformation parameters."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:13
#: sklearn.preprocessing._data.PowerTransformer.fit_transform:13
msgid "**y**"
msgstr ""

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:13
msgid "Ignored."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._data.PowerTransformer.fit
#: sklearn.preprocessing._data.PowerTransformer.fit_transform
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform
#: sklearn.preprocessing._data.PowerTransformer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._data.PowerTransformer.fit:29
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit:18
msgid "Fitted transformer."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:4
msgid "The inverse of the Box-Cox transformation is given by::"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:11
msgid "The inverse of the Yeo-Johnson transformation is given by::"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:25
#: sklearn.preprocessing._data.PowerTransformer.transform:13
msgid "The transformed data."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:30
msgid "The original data."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.transform:8
msgid "The data to be transformed using a power transformation."
msgstr ""

#: of sklearn.preprocessing._data.PowerTransformer.transform:24
msgid "**X_trans**"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:4
msgid "Examples using ``sklearn.preprocessing.PowerTransformer``"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:15
#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_map_data_to_normal.py`"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:34
#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
msgstr ""

