msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-09-01 21:51\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.PowerTransformer.po\n"
"X-Crowdin-File-ID: 5552\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.rst:2
msgid ":mod:`sklearn.preprocessing`.PowerTransformer"
msgstr ":mod:`sklearn.preprocessing`.PowerTransformer"

#: of sklearn.preprocessing._data.PowerTransformer:2
msgid "Apply a power transform featurewise to make data more Gaussian-like."
msgstr "Aplica una transformación de potencia en función de las características para que los datos sean más Gaussianos."

#: of sklearn.preprocessing._data.PowerTransformer:4
msgid "Power transforms are a family of parametric, monotonic transformations that are applied to make data more Gaussian-like. This is useful for modeling issues related to heteroscedasticity (non-constant variance), or other situations where normality is desired."
msgstr "Las transformaciones de potencia son una familia de transformaciones paramétricas y monótonas que se aplican para que los datos sean más Gaussianos. Esto es útil para modelar problemas relacionados con la heteroscedasticidad (varianza no constante), u otras situaciones en las que se desea la normalidad."

#: of sklearn.preprocessing._data.PowerTransformer:9
msgid "Currently, PowerTransformer supports the Box-Cox transform and the Yeo-Johnson transform. The optimal parameter for stabilizing variance and minimizing skewness is estimated through maximum likelihood."
msgstr "Actualmente, PowerTransformer admite la transformación Box-Cox y la transformación Yeo-Johnson. El parámetro óptimo para estabilizar la varianza y minimizar la asimetría se estima mediante la máxima verosimilitud."

#: of sklearn.preprocessing._data.PowerTransformer:13
msgid "Box-Cox requires input data to be strictly positive, while Yeo-Johnson supports both positive or negative data."
msgstr "Box-Cox requiere que los datos de entrada sean estrictamente positivos, mientras que Yeo-Johnson admite tanto datos positivos como negativos."

#: of sklearn.preprocessing._data.PowerTransformer:16
msgid "By default, zero-mean, unit-variance normalization is applied to the transformed data."
msgstr "Por defecto, se aplica a los datos transformados una normalización de media cero y varianza unitaria."

#: of sklearn.preprocessing._data.PowerTransformer:19
msgid "Read more in the :ref:`User Guide <preprocessing_transformer>`."
msgstr "Lee más en el :ref:`Manual de usuario <preprocessing_transformer>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._data.PowerTransformer
#: sklearn.preprocessing._data.PowerTransformer.fit
#: sklearn.preprocessing._data.PowerTransformer.fit_transform
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform
#: sklearn.preprocessing._data.PowerTransformer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._data.PowerTransformer:29
msgid "**method**"
msgstr "**method**"

#: of
msgid "{'yeo-johnson', 'box-cox'}, default='yeo-johnson'"
msgstr "{'yeo-johnson', 'box-cox'}, default='yeo-johnson'"

#: of sklearn.preprocessing._data.PowerTransformer:26
msgid "The power transform method. Available methods are:"
msgstr "El método de transformación de potencia. Los métodos disponibles son:"

#: of sklearn.preprocessing._data.PowerTransformer:28
msgid "'yeo-johnson' [Rf3e1504535de-1]_, works with positive and negative values"
msgstr "'yeo-johnson' [Rf3e1504535de-1]_, funciona con valores positivos y negativos"

#: of sklearn.preprocessing._data.PowerTransformer:29
msgid "'box-cox' [Rf3e1504535de-2]_, only works with strictly positive values"
msgstr "'box-cox' [Rf3e1504535de-2]_, sólo funciona con valores estrictamente positivos"

#: of sklearn.preprocessing._data.PowerTransformer:33
msgid "**standardize**"
msgstr "**standardize**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.preprocessing._data.PowerTransformer:32
msgid "Set to True to apply zero-mean, unit-variance normalization to the transformed output."
msgstr "Establecélo en True para aplicar una normalización de media cero y varianza unitaria a la salida transformada."

#: of sklearn.preprocessing._data.PowerTransformer:39
msgid "**copy**"
msgstr "**copy**"

#: of sklearn.preprocessing._data.PowerTransformer:36
msgid "Set to False to perform inplace computation during transformation."
msgstr "Establécelo en False para realizar cálculos in place durante la transformación."

#: of sklearn.preprocessing._data.PowerTransformer
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.preprocessing._data.PowerTransformer:47
msgid "**lambdas_**"
msgstr "**lambdas_**"

#: of
msgid "ndarray of float of shape (n_features,)"
msgstr "ndarray de float de forma (n_features,)"

#: of sklearn.preprocessing._data.PowerTransformer:44
msgid "The parameters of the power transformation for the selected features."
msgstr "Los parámetros de la transformación de potencia para las características seleccionadas."

#: of sklearn.preprocessing._data.PowerTransformer:52
msgid ":obj:`power_transform`"
msgstr ":obj:`power_transform`"

#: of sklearn.preprocessing._data.PowerTransformer:53
msgid "Equivalent function without the estimator API."
msgstr "Función equivalente sin la API del estimador."

#: of sklearn.preprocessing._data.PowerTransformer:54
msgid ":obj:`QuantileTransformer`"
msgstr ":obj:`QuantileTransformer`"

#: of sklearn.preprocessing._data.PowerTransformer:55
msgid "Maps data to a standard normal distribution with the parameter `output_distribution='normal'`."
msgstr "Mapea los datos a una distribución normal estándar con el parámetro `output_distribution='normal'`."

#: of sklearn.preprocessing._data.PowerTransformer:59
msgid "Notes"
msgstr "Notas"

#: of sklearn.preprocessing._data.PowerTransformer:60
msgid "NaNs are treated as missing values: disregarded in ``fit``, and maintained in ``transform``."
msgstr "Los NaNs son tratados como valores faltantes: no se tienen en cuenta en ``fit`` y se mantienen en ``transform``."

#: of sklearn.preprocessing._data.PowerTransformer:63
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr "Para una comparación de los diferentes escaladores, transformadores y normalizadores, consulta :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."

#: of sklearn.preprocessing._data.PowerTransformer:68
msgid "References"
msgstr "Referencias"

#: of sklearn.preprocessing._data.PowerTransformer:69
msgid "I.K. Yeo and R.A. Johnson, \"A new family of power transformations to improve normality or symmetry.\" Biometrika, 87(4), pp.954-959, (2000)."
msgstr "I.K. Yeo and R.A. Johnson, \"A new family of power transformations to improve normality or symmetry.\" Biometrika, 87(4), pp.954-959, (2000)."

#: of sklearn.preprocessing._data.PowerTransformer:73
msgid "G.E.P. Box and D.R. Cox, \"An Analysis of Transformations\", Journal of the Royal Statistical Society B, 26, 211-252 (1964)."
msgstr "G.E.P. Box and D.R. Cox, \"An Analysis of Transformations\", Journal of the Royal Statistical Society B, 26, 211-252 (1964)."

#: of sklearn.preprocessing._data.PowerTransformer:78
msgid "[Rf3e1504535de-1]_, [Rf3e1504535de-2]_"
msgstr "[Rf3e1504535de-1]_, [Rf3e1504535de-2]_"

#: of sklearn.preprocessing._data.PowerTransformer:81
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.preprocessing._data.PowerTransformer:96
msgid "Methods"
msgstr "Métodos"

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.PowerTransformer.fit>`\\"
msgstr ":obj:`fit <sklearn.preprocessing.PowerTransformer.fit>`\\"

#: of sklearn.preprocessing._data.PowerTransformer.fit:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Estimate the optimal parameter lambda for each feature."
msgstr "Estima el parámetro óptimo lambda para cada característica."

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.PowerTransformer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.preprocessing.PowerTransformer.fit_transform>`\\"

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr "Ajusta a los datos y luego los transforma."

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.PowerTransformer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.preprocessing.PowerTransformer.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.PowerTransformer.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.preprocessing.PowerTransformer.inverse_transform>`\\"

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Apply the inverse power transformation using the fitted lambdas."
msgstr "Aplica la transformación de potencia inversa utilizando las lambdas ajustadas."

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.PowerTransformer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.preprocessing.PowerTransformer.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.PowerTransformer.transform>`\\"
msgstr ":obj:`transform <sklearn.preprocessing.PowerTransformer.transform>`\\"

#: of sklearn.preprocessing._data.PowerTransformer.transform:2
#: sklearn.preprocessing._data.PowerTransformer:105:<autosummary>:1
msgid "Apply the power transform to each feature using the fitted lambdas."
msgstr "Aplica la transformación de potencia a cada característica utilizando las lambdas ajustadas."

#: of sklearn.preprocessing._data.PowerTransformer.fit:4
msgid "The optimal lambda parameter for minimizing skewness is estimated on each feature independently using maximum likelihood."
msgstr "El parámetro óptimo de lambda para minimizar la asimetría se estima en cada característica de forma independiente utilizando la máxima verosimilitud."

#: of sklearn.preprocessing._data.PowerTransformer.fit:10
#: sklearn.preprocessing._data.PowerTransformer.fit_transform:10
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform:25
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform:41
#: sklearn.preprocessing._data.PowerTransformer.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.preprocessing._data.PowerTransformer.fit:10
msgid "The data used to estimate the optimal transformation parameters."
msgstr "Los datos utilizados para estimar los parámetros óptimos de transformación."

#: of sklearn.preprocessing._data.PowerTransformer.fit:13
#: sklearn.preprocessing._data.PowerTransformer.fit_transform:13
msgid "**y**"
msgstr "**y**"

#: of
msgid "None"
msgstr "None"

#: of sklearn.preprocessing._data.PowerTransformer.fit:13
msgid "Ignored."
msgstr "Ignorado."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._data.PowerTransformer.fit
#: sklearn.preprocessing._data.PowerTransformer.fit_transform
#: sklearn.preprocessing._data.PowerTransformer.inverse_transform
#: sklearn.preprocessing._data.PowerTransformer.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._data.PowerTransformer.fit:29
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.preprocessing._data.PowerTransformer.fit:18
msgid "Fitted transformer."
msgstr "Transformador ajustado."

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr "Ajusta el transformador a `X` e `y` con los parámetros opcionales `fit_params` y devuelve una versión transformada de `X`."

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:10
msgid "Input samples."
msgstr "Muestras de entrada."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs),                 default=None"

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr "Valores objetivo (None para transformaciones no supervisadas)."

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:16
msgid "Additional fit parameters."
msgstr "Parámetros de ajuste adicionales."

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:32
msgid "**X_new**"
msgstr "**X_new**"

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "arreglo ndarray de forma (n_samples, n_features_new)"

#: of sklearn.preprocessing._data.PowerTransformer.fit_transform:21
msgid "Transformed array."
msgstr "Arreglo transformado."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Los nombres de los parámetros mapeados a sus valores."

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:4
msgid "The inverse of the Box-Cox transformation is given by::"
msgstr "La inversa de la transformación Box-Cox viene dada por::"

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:11
msgid "The inverse of the Yeo-Johnson transformation is given by::"
msgstr "La inversa de la transformación de Yeo-Johnson viene dada por::"

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:25
#: sklearn.preprocessing._data.PowerTransformer.transform:13
msgid "The transformed data."
msgstr "Los datos transformados."

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr "ndarray de forma (n_samples, n_features)"

#: of sklearn.preprocessing._data.PowerTransformer.inverse_transform:30
msgid "The original data."
msgstr "Los datos originales."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.preprocessing._data.PowerTransformer.transform:8
msgid "The data to be transformed using a power transformation."
msgstr "Los datos a transformar mediante una transformación de potencia."

#: of sklearn.preprocessing._data.PowerTransformer.transform:24
msgid "**X_trans**"
msgstr "**X_trans**"

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:4
msgid "Examples using ``sklearn.preprocessing.PowerTransformer``"
msgstr "Ejemplos utilizando ``sklearn.preprocessing.PowerTransformer``"

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:15
#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_map_data_to_normal.py`"
msgstr ":ref:`sphx_glr_auto_examples_preprocessing_plot_map_data_to_normal.py`"

#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:34
#: ../modules/generated/sklearn.preprocessing.PowerTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
msgstr ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"

