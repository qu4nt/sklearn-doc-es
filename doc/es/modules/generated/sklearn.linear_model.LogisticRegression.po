msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-07-02 21:26\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.LogisticRegression.po\n"
"X-Crowdin-File-ID: 5432\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.rst:2
msgid ":mod:`sklearn.linear_model`.LogisticRegression"
msgstr ":mod:`sklearn.linear_model`.LogisticRegression"

#: of sklearn.linear_model._logistic.LogisticRegression:2
msgid "Logistic Regression (aka logit, MaxEnt) classifier."
msgstr "Clasificador de Regresión Logística (conocido como logit, MaxEnt)."

#: of sklearn.linear_model._logistic.LogisticRegression:4
msgid "In the multiclass case, the training algorithm uses the one-vs-rest (OvR) scheme if the 'multi_class' option is set to 'ovr', and uses the cross-entropy loss if the 'multi_class' option is set to 'multinomial'. (Currently the 'multinomial' option is supported only by the 'lbfgs', 'sag', 'saga' and 'newton-cg' solvers.)"
msgstr "En el caso multiclase, el algoritmo de entrenamiento utiliza el esquema uno contra el resto (one-vs-rest, OvR) si la opción 'multi_class' se establece en 'ovr', y utiliza la pérdida de entropía cruzada si la opción 'multi_class' se establece en 'multinomial'. (Actualmente la opción 'multinomial' es soportada sólo por los solucionadores 'lbfgs', 'sag', 'saga' y 'newton-cg')"

#: of sklearn.linear_model._logistic.LogisticRegression:10
msgid "This class implements regularized logistic regression using the 'liblinear' library, 'newton-cg', 'sag', 'saga' and 'lbfgs' solvers. **Note that regularization is applied by default**. It can handle both dense and sparse input. Use C-ordered arrays or CSR matrices containing 64-bit floats for optimal performance; any other input format will be converted (and copied)."
msgstr "Esta clase implementa la regresión logística regularizada utilizando la biblioteca 'liblinear', los solucionadores 'newton-cg', 'sag', 'saga' y 'lbfgs'. **Ten en cuenta que la regularización se aplica por defecto**. Puede manejar tanto entradas densas como dispersas. Utiliza arreglos ordenados en C o matrices CSR que contengan números de punto flotante (floats) de 64 bits para un rendimiento óptimo; cualquier otro formato de entrada será convertido (y copiado)."

#: of sklearn.linear_model._logistic.LogisticRegression:17
msgid "The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization with primal formulation, or no regularization. The 'liblinear' solver supports both L1 and L2 regularization, with a dual formulation only for the L2 penalty. The Elastic-Net regularization is only supported by the 'saga' solver."
msgstr "Los solucionadores 'newton-cg', 'sag' y 'lbfgs' sólo soportan la regularización L2 con formulación primal, o ninguna regularización. El solucionador 'liblinear' soporta tanto la regularización L1 como la L2, con una formulación dual sólo para la penalización L2. La regularización Elastic-Net sólo es compatible con el solucionador 'saga'."

#: of sklearn.linear_model._logistic.LogisticRegression:23
msgid "Read more in the :ref:`User Guide <logistic_regression>`."
msgstr "Leer más en el :ref:`Manual de Usuario <logistic_regression>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._logistic.LogisticRegression
#: sklearn.linear_model._logistic.LogisticRegression.fit
#: sklearn.linear_model._logistic.LogisticRegression.predict_log_proba
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.linear_model._logistic.LogisticRegression:34
msgid "**penalty**"
msgstr "**penalty**"

#: of
msgid "{'l1', 'l2', 'elasticnet', 'none'}, default='l2'"
msgstr "{'l1', 'l2', 'elasticnet', 'none'}, default='l2'"

#: of sklearn.linear_model._logistic.LogisticRegression:28
msgid "Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties. 'elasticnet' is only supported by the 'saga' solver. If 'none' (not supported by the liblinear solver), no regularization is applied."
msgstr "Utilizado para especificar la norma usada en la penalización. Los solucionadores 'newton-cg', 'sag' y 'lbfgs' sólo soportan penalizaciones l2. 'elasticnet' sólo es soportado por el solucionador 'saga'. Si es 'none' (no soportado por el solucionador liblinear), no se aplica ninguna regularización."

#: of sklearn.linear_model._logistic.LogisticRegression:33
msgid "l1 penalty with SAGA solver (allowing 'multinomial' + L1)"
msgstr "penalización l1 con el solucionador SAGA (permitiendo 'multinomial' + L1)"

#: of sklearn.linear_model._logistic.LogisticRegression:39
msgid "**dual**"
msgstr "**dual**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._logistic.LogisticRegression:37
msgid "Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features."
msgstr "Formulación dual o primal. La formulación dual sólo se implementa para la penalización l2 con el solucionador liblinear. Preferir dual=False cuando n_samples > n_features."

#: of sklearn.linear_model._logistic.LogisticRegression:42
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1e-4"
msgstr "float, default=1e-4"

#: of sklearn.linear_model._logistic.LogisticRegression:42
msgid "Tolerance for stopping criteria."
msgstr "Tolerancia para el criterio de parada."

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:24
#: sklearn.linear_model._logistic.LogisticRegression:47
msgid "**C**"
msgstr "**C**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.linear_model._logistic.LogisticRegression:45
msgid "Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization."
msgstr "Inverso a la fuerza de regularización; debe ser un número de punto flotante (float) positivo. Como en las máquinas de vectores de soporte, los valores más pequeños especifican una regularización más fuerte."

#: of sklearn.linear_model._logistic.LogisticRegression:51
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._logistic.LogisticRegression:50
msgid "Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function."
msgstr "Especifica si una constante (también conocida como sesgo o intercepto) se debe añadir a la función de decisión."

#: of sklearn.linear_model._logistic.LogisticRegression:64
msgid "**intercept_scaling**"
msgstr "**intercept_scaling**"

#: of
msgid "float, default=1"
msgstr "float, default=1"

#: of sklearn.linear_model._logistic.LogisticRegression:54
msgid "Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``."
msgstr "Útil sólo cuando se usa el solucionador 'liblinear' y self.fit_intercept se establece en True. En este caso, x se convierte en [x, self.intercept_scaling], es decir, una característica \"sintética\" con valor constante igual a intercept_scaling se añade al vector de la instancia. El intercepto se convierte en ``intercept_scaling * synthetic_feature_weight``."

#: of sklearn.linear_model._logistic.LogisticRegression:61
msgid "Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased."
msgstr "Nota: la ponderación de la característica sintética está sujeta a la regularización l1/l2 como todas las demás características. Para disminuir el efecto de la regularización en la ponderación de la característica sintética (y por lo tanto en el intercepto) el intercept_scaling tiene que aumentarse."

#: of sklearn.linear_model._logistic.LogisticRegression:78
msgid "**class_weight**"
msgstr "**class_weight**"

#: of
msgid "dict or 'balanced', default=None"
msgstr "dict o 'balanced', default=None"

#: of sklearn.linear_model._logistic.LogisticRegression:67
msgid "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one."
msgstr "Ponderaciones asociadas a las clases de la forma ``{class_label: weight}``. Si no se da, se supone que todas las clases tienen ponderación uno."

#: of sklearn.linear_model._logistic.LogisticRegression:70
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``."
msgstr "El modo \"balanced\" utiliza los valores de y para ajustar automáticamente las ponderaciones de forma inversamente proporcional a las frecuencias de las clases en los datos de entrada como ``n_samples / (n_classes * np.bincount(y))``."

#: of sklearn.linear_model._logistic.LogisticRegression:74
msgid "Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
msgstr "Ten en cuenta que estas ponderaciones se multiplicarán por sample_weight (pasado por el método de ajuste) si se especifica sample_weight."

#: of sklearn.linear_model._logistic.LogisticRegression:77
msgid "*class_weight='balanced'*"
msgstr "*class_weight='balanced'*"

#: of sklearn.linear_model._logistic.LogisticRegression:82
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance, default=None"
msgstr "int, instancia RandomState, default=None"

#: of sklearn.linear_model._logistic.LogisticRegression:81
msgid "Used when ``solver`` == 'sag', 'saga' or 'liblinear' to shuffle the data. See :term:`Glossary <random_state>` for details."
msgstr "Utilizado cuando ``solver`` == 'sag', 'saga' o 'liblinear' para revolver los datos. Ver :term:`Glosario <random_state>` para obtener detalles."

#: of sklearn.linear_model._logistic.LogisticRegression:106
msgid "**solver**"
msgstr "**solver**"

#: of
msgid "{'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'},             default='lbfgs'"
msgstr "{'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'},             default='lbfgs'"

#: of sklearn.linear_model._logistic.LogisticRegression:85
msgid "Algorithm to use in the optimization problem."
msgstr "Algoritmo a utilizar en el problema de optimización."

#: of sklearn.linear_model._logistic.LogisticRegression:87
msgid "For small datasets, 'liblinear' is a good choice, whereas 'sag' and 'saga' are faster for large ones."
msgstr "Para conjuntos de datos pequeños, 'liblinear' es una buena elección, mientras que 'sag' y 'saga' son más rápidos para los grandes."

#: of sklearn.linear_model._logistic.LogisticRegression:89
msgid "For multiclass problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs' handle multinomial loss; 'liblinear' is limited to one-versus-rest schemes."
msgstr "Para los problemas multiclase, sólo 'newton-cg', 'sag', 'saga' y 'lbfgs' manejan la pérdida multinomial; 'liblinear' se limita a los esquemas de uno contra el resto."

#: of sklearn.linear_model._logistic.LogisticRegression:92
msgid "'newton-cg', 'lbfgs', 'sag' and 'saga' handle L2 or no penalty"
msgstr "'newton-cg', 'lbfgs', 'sag' y 'saga' manejan L2 o ninguna penalización"

#: of sklearn.linear_model._logistic.LogisticRegression:93
msgid "'liblinear' and 'saga' also handle L1 penalty"
msgstr "'liblinear' y 'saga' también manejan la penalización L1"

#: of sklearn.linear_model._logistic.LogisticRegression:94
msgid "'saga' also supports 'elasticnet' penalty"
msgstr "'saga' también soporta la penalización 'elasticnet'"

#: of sklearn.linear_model._logistic.LogisticRegression:95
msgid "'liblinear' does not support setting ``penalty='none'``"
msgstr "'liblinear' no soporta establecer ``penalty='none'``"

#: of sklearn.linear_model._logistic.LogisticRegression:97
msgid "Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing."
msgstr "Ten en cuenta que la convergencia rápida de 'sag' y 'saga' sólo está garantizada en características con aproximadamente la misma escala. Puedes preprocesar los datos con un escalador de sklearn.preprocessing."

#: of sklearn.linear_model._logistic.LogisticRegression:101
msgid "Stochastic Average Gradient descent solver."
msgstr "Solucionador de descenso de Gradiente Medio Estocástico (Stochastic Average Gradient descent solver)."

#: of sklearn.linear_model._logistic.LogisticRegression:103
msgid "SAGA solver."
msgstr "Solucionador SAGA."

#: of sklearn.linear_model._logistic.LogisticRegression:105
msgid "The default solver changed from 'liblinear' to 'lbfgs' in 0.22."
msgstr "El solucionador por defecto cambió de 'liblinear' a 'lbfgs' en 0.22."

#: of sklearn.linear_model._logistic.LogisticRegression:109
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.linear_model._logistic.LogisticRegression:109
msgid "Maximum number of iterations taken for the solvers to converge."
msgstr "Número máximo de iteraciones tomadas para que los solucionadores converjan."

#: of sklearn.linear_model._logistic.LogisticRegression:122
msgid "**multi_class**"
msgstr "**multi_class**"

#: of
msgid "{'auto', 'ovr', 'multinomial'}, default='auto'"
msgstr "{'auto', 'ovr', 'multinomial'}, default='auto'"

#: of sklearn.linear_model._logistic.LogisticRegression:112
msgid "If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'."
msgstr "Si la opción elegida es 'ovr', entonces se ajusta un problema binario para cada etiqueta. Para 'multinomial' la pérdida minimizada es la pérdida multinomial ajustada a través de toda la distribución de probabilidad, *incluso cuando los datos son binarios*. 'multinomial' no está disponible cuando solver='liblinear'. auto' selecciona 'ovr' si los datos son binarios, o si solver='liblinear', y en caso contrario selecciona 'multinomial'."

#: of sklearn.linear_model._logistic.LogisticRegression:119
msgid "Stochastic Average Gradient descent solver for 'multinomial' case."
msgstr "Solucionador de descenso de Gradiente Medio Estocástico para el caso 'multinomial'."

#: of sklearn.linear_model._logistic.LogisticRegression:121
msgid "Default changed from 'ovr' to 'auto' in 0.22."
msgstr "Por defecto cambió de 'ovr' a 'auto' en 0.22."

#: of sklearn.linear_model._logistic.LogisticRegression:126
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.linear_model._logistic.LogisticRegression:125
msgid "For the liblinear and lbfgs solvers set verbose to any positive number for verbosity."
msgstr "Para los solucionadores liblinear y lbfgs establezca verbose a cualquier número positivo para la verbosidad."

#: of sklearn.linear_model._logistic.LogisticRegression:134
msgid "**warm_start**"
msgstr "**warm_start**"

#: of sklearn.linear_model._logistic.LogisticRegression:129
msgid "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver. See :term:`the Glossary <warm_start>`."
msgstr "Cuando se establece en True, reutiliza la solución de la llamada previa a fit como inicialización, de lo contrario, sólo borra la solución previa. Inútil para el solucionador liblinear. Ver :term:`el Glosario <warm_start>`."

#: of sklearn.linear_model._logistic.LogisticRegression:133
msgid "*warm_start* to support *lbfgs*, *newton-cg*, *sag*, *saga* solvers."
msgstr "*warm_start* para soportar los solucionadores *lbfgs*, *newton-cg*, *sag*, *saga*."

#: of sklearn.linear_model._logistic.LogisticRegression:142
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.linear_model._logistic.LogisticRegression:137
msgid "Number of CPU cores used when parallelizing over classes if multi_class='ovr'\". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "Número de núcleos de CPU utilizados al paralelizar sobre las clases si multi_class='ovr'\". Este parámetro se ignora cuando el ``solver`` se establece como 'liblinear', independientemente de si se especifica 'multi_class' o no. ``None`` significa 1 a menos que esté en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa que se utilizan todos los procesadores. Ver :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.linear_model._logistic.LogisticRegression:152
msgid "**l1_ratio**"
msgstr "**l1_ratio**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.linear_model._logistic.LogisticRegression:145
msgid "The Elastic-Net mixing parameter, with ``0 <= l1_ratio <= 1``. Only used if ``penalty='elasticnet'``. Setting ``l1_ratio=0`` is equivalent to using ``penalty='l2'``, while setting ``l1_ratio=1`` is equivalent to using ``penalty='l1'``. For ``0 < l1_ratio <1``, the penalty is a combination of L1 and L2."
msgstr "El parámetro de mezcla de Elastic-Net, con ``0 < l1_ratio <= 1``. Sólo se utiliza si ``penalty='elasticnet'``. Establecer ``l1_ratio=0`` es equivalente a utilizar ``penalty='l2'``, mientras que establecer ``l1_ratio=1`` es equivalente a utilizar ``penalty='l1'``. Para ``0 < l1_ratio < 1``, la penalización es una combinación de L1 y L2."

#: of sklearn.linear_model._logistic.LogisticRegression
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._logistic.LogisticRegression:157
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "ndarray of shape (n_classes, )"
msgstr "ndarray de forma (n_classes, )"

#: of sklearn.linear_model._logistic.LogisticRegression:157
msgid "A list of class labels known to the classifier."
msgstr "Una lista de etiquetas de clase conocidas por el clasificador."

#: of sklearn.linear_model._logistic.LogisticRegression:164
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "ndarray of shape (1, n_features) or (n_classes, n_features)"
msgstr "ndarray de forma (1, n_features) o (n_classes, n_features)"

#: of sklearn.linear_model._logistic.LogisticRegression:160
msgid "Coefficient of the features in the decision function."
msgstr "Coeficiente de las características en la función de decisión."

#: of sklearn.linear_model._logistic.LogisticRegression:162
msgid "`coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False)."
msgstr "`coef_` es de forma (1, n_features) cuando el problema dado es binario. En particular, cuando `multi_class='multinomial'`, `coef_` corresponde al resultado 1 (True) y `-coef_` corresponde al resultado 0 (False)."

#: of sklearn.linear_model._logistic.LogisticRegression:173
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "ndarray of shape (1,) or (n_classes,)"
msgstr "ndarray de forma (1,) o (n_classes,)"

#: of sklearn.linear_model._logistic.LogisticRegression:167
msgid "Intercept (a.k.a. bias) added to the decision function."
msgstr "Intercepto (también conocido como sesgo) añadido a la función de decisión."

#: of sklearn.linear_model._logistic.LogisticRegression:169
msgid "If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False)."
msgstr "Si `fit_intercept` se establece en False, el intercepto se establece en cero. `intercept_` es de forma (1,) cuando el problema es binario. En particular, cuando `multi_class='multinomial'`, `intercept_` corresponde al resultado 1 (True) y `-intercept_` corresponde al resultado 0 (False)."

#: of sklearn.linear_model._logistic.LogisticRegression:186
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "ndarray of shape (n_classes,) or (1, )"
msgstr "ndarray de forma (1,) o (n_classes,)"

#: of sklearn.linear_model._logistic.LogisticRegression:176
msgid "Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given."
msgstr "Número real de iteraciones para todas las clases. Si es binario o multinomial, devuelve sólo 1 elemento. Para el solucionador liblinear, sólo se da el número máximo de iteraciones en todas las clases."

#: of sklearn.linear_model._logistic.LogisticRegression:182
msgid "In SciPy <= 1.0.0 the number of lbfgs iterations may exceed ``max_iter``. ``n_iter_`` will now report at most ``max_iter``."
msgstr "En SciPy <= 1.0.0 el número de iteraciones de lbfgs puede exceder ``max_iter``. Ahora ``n_iter_`` presentará como máximo ``max_iter``."

#: of sklearn.linear_model._logistic.LogisticRegression:191
msgid ":obj:`SGDClassifier`"
msgstr ":obj:`SGDClassifier`"

#: of sklearn.linear_model._logistic.LogisticRegression:192
msgid "Incrementally trained logistic regression (when given the parameter ``loss=\"log\"``)."
msgstr "Regresión logística entrenada de forma incremental (cuando se le da el parámetro ``loss=\"log\"``)."

#: of sklearn.linear_model._logistic.LogisticRegression:193
msgid ":obj:`LogisticRegressionCV`"
msgstr ":obj:`LogisticRegressionCV`"

#: of sklearn.linear_model._logistic.LogisticRegression:194
msgid "Logistic regression with built-in cross validation."
msgstr "Regresión logística con validación cruzada incorporada."

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:24
#: sklearn.linear_model._logistic.LogisticRegression:198
#: sklearn.linear_model._logistic.LogisticRegression.fit:34
msgid "Notes"
msgstr "Notas"

#: of sklearn.linear_model._logistic.LogisticRegression:199
msgid "The underlying C implementation uses a random number generator to select features when fitting the model. It is thus not uncommon, to have slightly different results for the same input data. If that happens, try with a smaller tol parameter."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:204
msgid "Predict output may not match that of standalone liblinear in certain cases. See :ref:`differences from liblinear <liblinear_differences>` in the narrative documentation."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:209
msgid "References"
msgstr "Referencias"

#: of sklearn.linear_model._logistic.LogisticRegression:212
msgid "L-BFGS-B -- Software for Large-scale Bound-constrained Optimization"
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:211
msgid "Ciyou Zhu, Richard Byrd, Jorge Nocedal and Jose Luis Morales. http://users.iems.northwestern.edu/~nocedal/lbfgsb.html"
msgstr "Ciyou Zhu, Richard Byrd, Jorge Nocedal y Jose Luis Morales. http://users.iems.northwestern.edu/~nocedal/lbfgsb.html"

#: of sklearn.linear_model._logistic.LogisticRegression:215
msgid "LIBLINEAR -- A Library for Large Linear Classification"
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:215
msgid "https://www.csie.ntu.edu.tw/~cjlin/liblinear/"
msgstr "https://www.csie.ntu.edu.tw/~cjlin/liblinear/"

#: of sklearn.linear_model._logistic.LogisticRegression:219
msgid "SAG -- Mark Schmidt, Nicolas Le Roux, and Francis Bach"
msgstr "SAG -- Mark Schmidt, Nicolas Le Roux, y Francis Bach"

#: of sklearn.linear_model._logistic.LogisticRegression:218
msgid "Minimizing Finite Sums with the Stochastic Average Gradient https://hal.inria.fr/hal-00860051/document"
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:224
msgid "SAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014)."
msgstr "SAGA -- Defazio, A., Bach F. & Lacoste-Julien S. (2014)."

#: of sklearn.linear_model._logistic.LogisticRegression:222
msgid "SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives https://arxiv.org/abs/1407.0202"
msgstr "SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives https://arxiv.org/abs/1407.0202"

#: of sklearn.linear_model._logistic.LogisticRegression:229
msgid "Hsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent"
msgstr "Hsiang-Fu Yu, Fang-Lan Huang, Chih-Jen Lin (2011). Dual coordinate descent"

#: of sklearn.linear_model._logistic.LogisticRegression:227
msgid "methods for logistic regression and maximum entropy models. Machine Learning 85(1-2):41-75. https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf"
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:236
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._logistic.LogisticRegression:250
msgid "Methods"
msgstr "Métodos"

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`decision_function <sklearn.linear_model.LogisticRegression.decision_function>`\\"
msgstr ":obj:`decision_function <sklearn.linear_model.LogisticRegression.decision_function>`\\"

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Predict confidence scores for samples."
msgstr "Predice las puntuaciones de confianza de las muestras."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`densify <sklearn.linear_model.LogisticRegression.densify>`\\"
msgstr ":obj:`densify <sklearn.linear_model.LogisticRegression.densify>`\\"

#: of sklearn.linear_model._base.SparseCoefMixin.densify:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Convert coefficient matrix to dense array format."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.LogisticRegression.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.LogisticRegression.fit>`\\"

#: of sklearn.linear_model._logistic.LogisticRegression.fit:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Fit the model according to the given training data."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.LogisticRegression.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.LogisticRegression.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.LogisticRegression.predict>`\\"
msgstr ":obj:`predict <sklearn.linear_model.LogisticRegression.predict>`\\"

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Predict class labels for samples in X."
msgstr "Predice las etiquetas de clase para las muestras en X."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.linear_model.LogisticRegression.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.linear_model.LogisticRegression.predict_log_proba>`\\"

#: of sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Predict logarithm of probability estimates."
msgstr "Predice el logaritmo de las estimaciones de probabilidad."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.linear_model.LogisticRegression.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.linear_model.LogisticRegression.predict_proba>`\\"

#: of sklearn.linear_model._logistic.LogisticRegression.predict_proba:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Probability estimates."
msgstr "Estimaciones de probabilidad."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.LogisticRegression.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.LogisticRegression.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.LogisticRegression.set_params>`\\"
msgstr ":obj:`set_params <sklearn.linear_model.LogisticRegression.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid ":obj:`sparsify <sklearn.linear_model.LogisticRegression.sparsify>`\\"
msgstr ":obj:`sparsify <sklearn.linear_model.LogisticRegression.sparsify>`\\"

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:2
#: sklearn.linear_model._logistic.LogisticRegression:263:<autosummary>:1
msgid "Convert coefficient matrix to sparse format."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:4
msgid "The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
#: sklearn.linear_model._logistic.LogisticRegression.fit:9
#: sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:11
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba:18
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr "array-like o sparse matrix, forma (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr "Muestras."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._base.SparseCoefMixin.densify
#: sklearn.linear_model._base.SparseCoefMixin.sparsify
#: sklearn.linear_model._logistic.LogisticRegression.fit
#: sklearn.linear_model._logistic.LogisticRegression.predict_log_proba
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:28
msgid "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"
msgstr "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:15
msgid "Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:4
msgid "Converts the ``coef_`` member (back) to a numpy.ndarray. This is the default format of ``coef_`` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:24
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:21
#: sklearn.linear_model._logistic.LogisticRegression.fit:31
msgid "self"
msgstr "self"

#: of sklearn.linear_model._base.SparseCoefMixin.densify:13
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:14
#: sklearn.linear_model._logistic.LogisticRegression.fit:24
msgid "Fitted estimator."
msgstr "Estimador ajustado."

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.linear_model._logistic.LogisticRegression.fit:8
msgid "Training vector, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.linear_model._logistic.LogisticRegression.fit:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.linear_model._logistic.LogisticRegression.fit:12
msgid "Target vector relative to X."
msgstr "Vector objetivo relativo a X."

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.linear_model._logistic.LogisticRegression.fit:19
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,) default=None"
msgstr "array-like de forma (n_samples,) default=None"

#: of sklearn.linear_model._logistic.LogisticRegression.fit:15
msgid "Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression.fit:18
msgid "*sample_weight* support to LogisticRegression."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression.fit:35
msgid "The SAGA solver supports both float64 and float32 bit arrays."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
msgid "array, shape [n_samples]"
msgstr "array, forma [n_samples]"

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr "Etiqueta de clase predicha por muestra."

#: of sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:4
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba:4
msgid "The returned estimates for all classes are ordered by the label of classes."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:10
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba:17
msgid "Vector to be scored, where `n_samples` is the number of samples and `n_features` is the number of features."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:28
#: sklearn.linear_model._logistic.LogisticRegression.predict_proba:35
msgid "**T**"
msgstr "**T**"

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr "array-like de forma (n_samples, n_classes)"

#: of sklearn.linear_model._logistic.LogisticRegression.predict_log_proba:16
msgid "Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression.predict_proba:7
msgid "For a multi_class problem, if multi_class is set to be \"multinomial\" the softmax function is used to find the predicted probability of each class. Else use a one-vs-rest approach, i.e calculate the probability of each class assuming it to be positive using the logistic function. and normalize these values across all the classes."
msgstr ""

#: of sklearn.linear_model._logistic.LogisticRegression.predict_proba:23
msgid "Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``self.classes_``."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas verdaderas para `X`."

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderaciones de muestras."

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:4
msgid "Converts the ``coef_`` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:8
msgid "The ``intercept_`` member is not converted."
msgstr "El miembro ``intercept_`` no se convierte."

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:25
#, python-format
msgid "For non-sparse models, i.e. when there are not many zeros in ``coef_``, this may actually *increase* memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with ``(coef_ == 0).sum()``, must be more than 50% for this to provide significant benefits."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:31
msgid "After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify."
msgstr ""

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:4
msgid "Examples using ``sklearn.linear_model.LogisticRegression``"
msgstr "Ejemplos utilizando ``sklearn.linear_model.LogisticRegression``"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:15
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:34
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:42
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:53
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:61
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_display_object_visualization.py`"
msgstr ":ref:`sphx_glr_auto_examples_miscellaneous_plot_display_object_visualization.py`"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:72
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:80
msgid ":ref:`sphx_glr_auto_examples_multioutput_plot_classifier_chain_yeast.py`"
msgstr ":ref:`sphx_glr_auto_examples_multioutput_plot_classifier_chain_yeast.py`"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:91
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:99
msgid ":ref:`sphx_glr_auto_examples_compose_plot_digits_pipe.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_digits_pipe.py`"

#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:110
#: ../modules/generated/sklearn.linear_model.LogisticRegression.examples:118
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic_path.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_iris_logistic.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sgd_comparison.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sparse_logistic_regression_mnist.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic_multinomial.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic_l1_l2_sparsity.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sparse_logistic_regression_20newsgroups.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_changed_only_pprint_parameter.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neural_networks_plot_rbm_logistic_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_exercises_plot_digits_classification_exercise.py`"
#~ msgstr ""

