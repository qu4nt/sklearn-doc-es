msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:07\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.TheilSenRegressor.po\n"
"X-Crowdin-File-ID: 5566\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.TheilSenRegressor.rst:2
msgid ":mod:`sklearn.linear_model`.TheilSenRegressor"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:2
msgid "Theil-Sen Estimator: robust multivariate regression model."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:4
msgid "The algorithm calculates least square solutions on subsets with size n_subsamples of the samples in X. Any value of n_subsamples between the number of features and samples leads to an estimator with a compromise between robustness and efficiency. Since the number of least square solutions is \"n_samples choose n_subsamples\", it can be extremely large and can therefore be limited with max_subpopulation. If this limit is reached, the subsets are chosen randomly. In a final step, the spatial median (or L1 median) is calculated of all least square solutions."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:13
msgid "Read more in the :ref:`User Guide <theil_sen_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._theil_sen.TheilSenRegressor
#: sklearn.linear_model._theil_sen.TheilSenRegressor.fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:19
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:18
msgid "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:22
msgid "**copy_X**"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:22
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:30
msgid "**max_subpopulation**"
msgstr ""

#: of
msgid "int, default=1e4"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:25
msgid "Instead of computing with a set of cardinality 'n choose k', where n is the number of samples and k is the number of subsamples (at least number of features), consider only a stochastic subpopulation of a given maximal size if 'n choose k' is larger than max_subpopulation. For other than small problem sizes this parameter will determine memory usage and runtime if n_subsamples is not changed."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:40
msgid "**n_subsamples**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:33
msgid "Number of samples to calculate the parameters. This is at least the number of features (plus 1 if fit_intercept=True) and the number of samples as a maximum. A lower number leads to a higher breakdown point and a low efficiency while a high number leads to a low breakdown point and a high efficiency. If None, take the minimum number of subsamples leading to maximal robustness. If n_subsamples is set to n_samples, Theil-Sen is identical to least squares."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:43
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=300"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:43
msgid "Maximum number of iterations for the calculation of spatial median."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:46
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1.e-3"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:46
msgid "Tolerance when calculating spatial median."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:52
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:49
msgid "A random number generator instance to define the state of the random permutations generator. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:58
msgid "**n_jobs**"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:55
msgid "Number of CPUs to use during the cross validation. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:64
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:61
msgid "Verbose mode when fitting the model."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:69
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:69
msgid "Coefficients of the regression model (median of distribution)."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:72
msgid "**intercept_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:72
msgid "Estimated intercept of regression model."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:75
msgid "**breakdown_**"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:75
msgid "Approximated breakdown point."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:78
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:78
msgid "Number of iterations needed for the spatial median."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:87
msgid "**n_subpopulation_**"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:81
msgid "Number of combinations taken into account from 'n choose k', where n is the number of samples and k is the number of subsamples."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:90
msgid "References"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:91
msgid "Theil-Sen Estimators in a Multiple Linear Regression Model, 2009 Xin Dang, Hanxiang Peng, Xueqin Wang and Heping Zhang http://home.olemiss.edu/~xdang/papers/MTSE.pdf"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:100
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:112
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.TheilSenRegressor.fit>`\\"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor.fit:2
#: sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid "Fit linear model."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.TheilSenRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.TheilSenRegressor.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.TheilSenRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.TheilSenRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._theil_sen.TheilSenRegressor:120:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._theil_sen.TheilSenRegressor.fit:8
msgid "**X**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._theil_sen.TheilSenRegressor.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._theil_sen.TheilSenRegressor.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._theil_sen.TheilSenRegressor.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._theil_sen.TheilSenRegressor.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.linear_model.TheilSenRegressor.examples:4
msgid "Examples using ``sklearn.linear_model.TheilSenRegressor``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.TheilSenRegressor.examples:15
#: ../modules/generated/sklearn.linear_model.TheilSenRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_robust_fit.py`"
msgstr ""

