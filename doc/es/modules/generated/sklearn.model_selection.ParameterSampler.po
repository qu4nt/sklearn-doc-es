msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-31 23:30\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.model_selection.ParameterSampler.po\n"
"X-Crowdin-File-ID: 5342\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.model_selection.ParameterSampler.rst:2
msgid ":mod:`sklearn.model_selection`.ParameterSampler"
msgstr ":mod:`sklearn.model_selection`.ParameterSampler"

#: of sklearn.model_selection._search.ParameterSampler:2
msgid "Generator on parameters sampled from given distributions."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:4
msgid "Non-deterministic iterable over random candidate combinations for hyper- parameter search. If all parameters are presented as a list, sampling without replacement is performed. If at least one parameter is given as a distribution, sampling with replacement is used. It is highly recommended to use continuous distributions for continuous parameters."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:11
msgid "Read more in the :ref:`User Guide <grid_search>`."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler
msgid "Parameters"
msgstr "Par√°metros"

#: of sklearn.model_selection._search.ParameterSampler:21
msgid "**param_distributions**"
msgstr "**param_distributions**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:16
msgid "Dictionary with parameters names (`str`) as keys and distributions or lists of parameters to try. Distributions must provide a ``rvs`` method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly. If a list of dicts is given, first a dict is sampled uniformly, and then a parameter is sampled using that dict as above."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:24
msgid "**n_iter**"
msgstr "**n_iter**"

#: of
msgid "int"
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:24
msgid "Number of parameter settings that are produced."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:31
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:27
msgid "Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.model_selection._search.ParameterSampler:46
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict of str to any"
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:36
msgid "**Yields** dictionaries mapping each estimator parameter to as sampled value."
msgstr ""

#: of sklearn.model_selection._search.ParameterSampler:49
msgid "Examples"
msgstr ""

