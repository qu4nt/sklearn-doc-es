msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-05-14 00:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.compose.ColumnTransformer.po\n"
"X-Crowdin-File-ID: 5172\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.compose.ColumnTransformer.rst:2
msgid ":mod:`sklearn.compose`.ColumnTransformer"
msgstr ":mod:`sklearn.compose`.ColumnTransformer"

#: of sklearn.compose._column_transformer.ColumnTransformer:2
msgid "Applies transformers to columns of an array or pandas DataFrame."
msgstr "Aplica transformadores a las columnas de un arreglo o DataFrame de pandas."

#: of sklearn.compose._column_transformer.ColumnTransformer:4
msgid "This estimator allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer."
msgstr "Este estimador permite transformar por separado diferentes columnas o subconjuntos de columnas de la entrada y las características generadas por cada transformador se concatenarán para formar un único espacio de características. Esto es útil para datos heterogéneos o columnares, para combinar varios mecanismos de extracción de características o transformaciones en un solo transformador."

#: of sklearn.compose._column_transformer.ColumnTransformer:10
msgid "Read more in the :ref:`User Guide <column_transformer>`."
msgstr "Más información en el :ref:`Manual de usuario <column_transformer>`."

#: of sklearn.compose._column_transformer.ColumnTransformer
#: sklearn.compose._column_transformer.ColumnTransformer.fit
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform
#: sklearn.compose._column_transformer.ColumnTransformer.get_params
#: sklearn.compose._column_transformer.ColumnTransformer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.compose._column_transformer.ColumnTransformer:37
msgid "**transformers**"
msgstr "**transformers**"

#: of
msgid "list of tuples"
msgstr "list of tuples"

#: of sklearn.compose._column_transformer.ColumnTransformer:17
msgid "List of (name, transformer, columns) tuples specifying the transformer objects to be applied to subsets of the data."
msgstr "Lista de tuplas (nombre, transformador, columnas) que especifican los objetos transformadores que se aplicarán a subconjuntos de los datos."

#: of sklearn.compose._column_transformer.ColumnTransformer:22
msgid "name"
msgstr "name"

#: of
msgid "str"
msgstr "str"

#: of sklearn.compose._column_transformer.ColumnTransformer:21
msgid "Like in Pipeline and FeatureUnion, this allows the transformer and its parameters to be set using ``set_params`` and searched in grid search."
msgstr "Al igual que en Pipeline y FeatureUnion, esto permite que el transformador y sus parámetros se establezcan usando ``set_params`` y se encuentren en la búsqueda de cuadrículas."

#: of sklearn.compose._column_transformer.ColumnTransformer:27
msgid "transformer"
msgstr "transformer"

#: of
msgid "{'drop', 'passthrough'} or estimator"
msgstr "{'drop', 'passthrough'} or estimator"

#: of sklearn.compose._column_transformer.ColumnTransformer:25
msgid "Estimator must support :term:`fit` and :term:`transform`. Special-cased strings 'drop' and 'passthrough' are accepted as well, to indicate to drop the columns or to pass them through untransformed, respectively."
msgstr "El estimador debe soportar :term:`fit` y :term:`transform`. También se aceptan las cadenas especiales 'drop' y 'passthrough', para indicar que se eliminen las columnas o que se pasen sin transformar, respectivamente."

#: of sklearn.compose._column_transformer.ColumnTransformer:37
msgid "columns"
msgstr "columns"

#: of
msgid "str, array-like of str, int, array-like of int,                 array-like of bool, slice or callable"
msgstr "str, array-like of str, int, array-like of int,                 array-like of bool, slice or callable"

#: of sklearn.compose._column_transformer.ColumnTransformer:30
msgid "Indexes the data on its second axis. Integers are interpreted as positional columns, while strings can reference DataFrame columns by name.  A scalar string or int should be used where ``transformer`` expects X to be a 1d array-like (vector), otherwise a 2d array will be passed to the transformer. A callable is passed the input data `X` and can return any of the above. To select multiple columns by name or dtype, you can use :obj:`make_column_selector`."
msgstr "Indexa los datos en su segundo eje. Los enteros se interpretan como columnas posicionales, mientras que las cadenas pueden hacer referencia a las columnas del DataFrame por su nombre.  Se debe utilizar una cadena escalar o un int cuando ``transformer`` espera que X sea un arreglo 1d (vector), de lo contrario se pasará un arreglo 2d al transformador. A un callable se le pasan los datos de entrada `X` y puede devolver cualquiera de los anteriores. Para seleccionar varias columnas por nombre o tipo de datos, puede utilizar :obj:`make_column_selector`."

#: of sklearn.compose._column_transformer.ColumnTransformer:51
msgid "**remainder**"
msgstr "**remainder**"

#: of
msgid "{'drop', 'passthrough'} or estimator, default='drop'"
msgstr "{'drop', 'passthrough'} or estimator, default='drop'"

#: of sklearn.compose._column_transformer.ColumnTransformer:40
msgid "By default, only the specified columns in `transformers` are transformed and combined in the output, and the non-specified columns are dropped. (default of ``'drop'``). By specifying ``remainder='passthrough'``, all remaining columns that were not specified in `transformers` will be automatically passed through. This subset of columns is concatenated with the output of the transformers. By setting ``remainder`` to be an estimator, the remaining non-specified columns will use the ``remainder`` estimator. The estimator must support :term:`fit` and :term:`transform`. Note that using this feature requires that the DataFrame columns input at :term:`fit` and :term:`transform` have identical order."
msgstr "Por defecto, sólo las columnas especificadas en `transformers` son transformadas y combinadas en la salida, y las columnas no especificadas son descartadas. (por defecto ``'drop'``). Especificando ``remainder='passthrough'``, todas las columnas restantes que no fueron especificadas en `transformers` serán automáticamente pasadas. Este subconjunto de columnas se concatena con la salida de los transformadores. Al establecer que ``remainder`` sea un estimador, las columnas restantes no especificadas utilizarán el estimador ``remainder``. El estimador debe soportar :term:`fit` y :term:`transform`. Toma en cuenta que el uso de esta función requiere que las columnas del DataFrame introducidas en :term:`fit` y :term:`transform` tengan un orden idéntico."

#: of sklearn.compose._column_transformer.ColumnTransformer:58
msgid "**sparse_threshold**"
msgstr "**sparse_threshold**"

#: of
msgid "float, default=0.3"
msgstr "float, default=0.3"

#: of sklearn.compose._column_transformer.ColumnTransformer:54
msgid "If the output of the different transformers contains sparse matrices, these will be stacked as a sparse matrix if the overall density is lower than this value. Use ``sparse_threshold=0`` to always return dense.  When the transformed output consists of all dense data, the stacked result will be dense, and this keyword will be ignored."
msgstr "Si la salida de los diferentes transformadores contiene matrices dispersas, éstas se apilarán como una matriz dispersa si la densidad global es menor que este valor. Utiliza ``sparse_threshold=0`` para obtener siempre una matriz densa.  Cuando la salida transformada consiste en todos los datos densos, el resultado apilado será denso, y esta palabra clave será ignorada."

#: of sklearn.compose._column_transformer.ColumnTransformer:64
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.compose._column_transformer.ColumnTransformer:61
msgid "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "Número de trabajos a ejecutar en paralelo. ``None`` significa 1 a menos que esté en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa utilizar todos los procesadores. Ver :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.compose._column_transformer.ColumnTransformer:69
msgid "**transformer_weights**"
msgstr "**transformer_weights**"

#: of
msgid "dict, default=None"
msgstr "dict, default=None"

#: of sklearn.compose._column_transformer.ColumnTransformer:67
msgid "Multiplicative weights for features per transformer. The output of the transformer is multiplied by these weights. Keys are transformer names, values the weights."
msgstr "Los ponderados multiplicativos de las características por transformador. La salida del transformador se multiplica por estos ponderados. Las claves son los nombres de los transformadores, los valores de los ponderados."

#: of sklearn.compose._column_transformer.ColumnTransformer:76
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.compose._column_transformer.ColumnTransformer:72
msgid "If True, the time elapsed while fitting each transformer will be printed as it is completed."
msgstr "Si es True, se mostrará el tiempo transcurrido durante el ajuste de cada transformador a medida que se vaya completando."

#: of sklearn.compose._column_transformer.ColumnTransformer
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.compose._column_transformer.ColumnTransformer:90
msgid "**transformers_**"
msgstr "**transformers_**"

#: of
msgid "list"
msgstr "list"

#: of sklearn.compose._column_transformer.ColumnTransformer:81
msgid "The collection of fitted transformers as tuples of (name, fitted_transformer, column). `fitted_transformer` can be an estimator, 'drop', or 'passthrough'. In case there were no columns selected, this will be the unfitted transformer. If there are remaining columns, the final element is a tuple of the form: ('remainder', transformer, remaining_columns) corresponding to the ``remainder`` parameter. If there are remaining columns, then ``len(transformers_)==len(transformers)+1``, otherwise ``len(transformers_)==len(transformers)``."
msgstr "La colección de transformadores ajustados como tuplas de (name, fitted_transformer, column). `fitted_transformer` puede ser un estimador, `drop`, o `passthrough`. Si no hay columnas seleccionadas, será el transformador no ajustado. Si hay columnas restantes, el elemento final es una tupla de la forma ('remainder', transformer, remaining_columns) correspondiente al parámetro ``remainder``. Si hay columnas restantes, entonces ``len(transformers_)==len(transformers)+1``, en caso contrario ``len(transformers_)==len(transformers)``."

#: of sklearn.compose._column_transformer.ColumnTransformer:93
msgid ":obj:`named_transformers_ <named_transformers_>` : :class:`~sklearn.utils.Bunch`"
msgstr ":obj:`named_transformers_ <named_transformers_>` : :class:`~sklearn.utils.Bunch`"

#: of sklearn.compose._column_transformer.ColumnTransformer:92
msgid "Bunch"
msgstr "Bunch"

#: of sklearn.compose.ColumnTransformer.named_transformers_:2
#: sklearn.compose._column_transformer.ColumnTransformer:93
msgid "Access the fitted transformer by name."
msgstr "Accede al transformador ajustado por nombre."

#: of sklearn.compose._column_transformer.ColumnTransformer:101
msgid "**sparse_output_**"
msgstr "**sparse_output_**"

#: of
msgid "bool"
msgstr "bool"

#: of sklearn.compose._column_transformer.ColumnTransformer:96
msgid "Boolean flag indicating whether the output of ``transform`` is a sparse matrix or a dense numpy array, which depends on the output of the individual transformers and the `sparse_threshold` keyword."
msgstr "El indicador booleano que indica si la salida de ``transform`` es una matriz dispersa o un arreglo numpy denso, que depende de la salida de los transformadores individuales y de la palabra clave ``esparse_threshold``."

#: of sklearn.compose._column_transformer.ColumnTransformer:106
msgid ":obj:`make_column_transformer`"
msgstr ":obj:`make_column_transformer`"

#: of sklearn.compose._column_transformer.ColumnTransformer:107
msgid "Convenience function for combining the outputs of multiple transformer objects applied to column subsets of the original feature space."
msgstr "Función de conveniencia para combinar las salidas de múltiples objetos transformadores aplicados a subconjuntos de columnas del espacio de características original."

#: of sklearn.compose._column_transformer.ColumnTransformer:108
msgid ":obj:`make_column_selector`"
msgstr ":obj:`make_column_selector`"

#: of sklearn.compose._column_transformer.ColumnTransformer:109
msgid "Convenience function for selecting columns based on datatype or the columns name with a regex pattern."
msgstr "Función de conveniencia para seleccionar columnas basadas en el tipo de datos o el nombre de las columnas con un patrón regex."

#: of sklearn.compose._column_transformer.ColumnTransformer:113
msgid "Notes"
msgstr "Notas"

#: of sklearn.compose._column_transformer.ColumnTransformer:114
msgid "The order of the columns in the transformed feature matrix follows the order of how the columns are specified in the `transformers` list. Columns of the original feature matrix that are not specified are dropped from the resulting transformed feature matrix, unless specified in the `passthrough` keyword. Those columns specified with `passthrough` are added at the right to the output of the transformers."
msgstr "El orden de las columnas en la matriz de características transformada sigue el orden de cómo se especifican las columnas en la lista de `transformers`. Las columnas de la matriz de características original que no se especifican se eliminan de la matriz de características transformada resultante, a menos que se especifique en la palabra clave `passthrough`. Las columnas especificadas con `passthrough` se añaden a la derecha a la salida de los transformadores."

#: of sklearn.compose._column_transformer.ColumnTransformer:123
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.compose._column_transformer.ColumnTransformer:140
msgid "Methods"
msgstr "Métodos"

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`fit <sklearn.compose.ColumnTransformer.fit>`\\"
msgstr ":obj:`fit <sklearn.compose.ColumnTransformer.fit>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Fit all transformers using X."
msgstr "Ajustar a todos los transformadores usando X."

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.compose.ColumnTransformer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.compose.ColumnTransformer.fit_transform>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Fit all transformers, transform the data and concatenate results."
msgstr "Ajusta todos los transformadores, transforma los datos y concatena los resultados."

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`get_feature_names <sklearn.compose.ColumnTransformer.get_feature_names>`\\"
msgstr ":obj:`get_feature_names <sklearn.compose.ColumnTransformer.get_feature_names>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Get feature names from all transformers."
msgstr "Obtiene los nombres de las características de todos los transformadores."

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`get_params <sklearn.compose.ColumnTransformer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.compose.ColumnTransformer.get_params>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`set_params <sklearn.compose.ColumnTransformer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.compose.ColumnTransformer.set_params>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`transform <sklearn.compose.ColumnTransformer.transform>`\\"
msgstr ":obj:`transform <sklearn.compose.ColumnTransformer.transform>`\\"

#: of sklearn.compose._column_transformer.ColumnTransformer.transform:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Transform X separately by each transformer, concatenate results."
msgstr "Transforma X por separado por cada transformador, concatena los resultados."

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:9
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:9
#: sklearn.compose._column_transformer.ColumnTransformer.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, dataframe} of shape (n_samples, n_features)"
msgstr "{array-like, dataframe} de forma (n_samples, n_features)"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:8
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:8
msgid "Input data, of which specified subsets are used to fit the transformers."
msgstr "Datos de entrada, de los cuales se utilizan subconjuntos especificados para ajustar los transformadores."

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:12
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,...), default=None"
msgstr "array-like de forma (n_samples,...), default=None"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:12
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:12
msgid "Targets for supervised learning."
msgstr "Objetivos para el aprendizaje supervisado."

#: of sklearn.compose._column_transformer.ColumnTransformer.fit
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform
#: sklearn.compose._column_transformer.ColumnTransformer.get_feature_names
#: sklearn.compose._column_transformer.ColumnTransformer.get_params
#: sklearn.compose._column_transformer.ColumnTransformer.set_params
#: sklearn.compose._column_transformer.ColumnTransformer.transform
msgid "Returns"
msgstr "Salida"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "ColumnTransformer"
msgstr "ColumnTransformer"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:17
msgid "This estimator"
msgstr "Este estimador"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:31
#: sklearn.compose._column_transformer.ColumnTransformer.transform:27
msgid "**X_t**"
msgstr "**X_t**"

#: of
msgid "{array-like, sparse matrix} of                 shape (n_samples, sum_n_components)"
msgstr "{array-like, sparse matrix} de                 forma (n_samples, sum_n_components)"

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:17
#: sklearn.compose._column_transformer.ColumnTransformer.transform:13
msgid "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices."
msgstr "hstack de resultados de transformadores. sum_n_components es la suma de n_components (dimensión de salida) sobre transformadores. Si algún resultado es una matriz dispersa, todo se convertirá en matrices dispersas."

#: of
#: sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:20
msgid "**feature_names**"
msgstr "**feature_names**"

#: of
msgid "list of strings"
msgstr "list of strings"

#: of sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:9
msgid "Names of the features produced by transform."
msgstr "Nombres de las características producidas por transformación."

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:4
msgid "Returns the parameters given in the constructor as well as the estimators contained within the `transformers` of the `ColumnTransformer`."
msgstr "Devuelve los parámetros dados en el constructor así como los estimadores contenidos en el `transformers` del `ColumnTransformer`."

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:12
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:11
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:28
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:17
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros asignados a sus valores."

#: of sklearn.compose.ColumnTransformer.named_transformers_:4
msgid "Read-only attribute to access any transformer by given name. Keys are transformer names and values are the fitted transformer objects."
msgstr "Atributo de sólo lectura para acceder a cualquier transformador con un nombre determinado. Las claves son los nombres de los transformadores y los valores son los objetos transformadores ajustados."

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:4
msgid "Valid parameter keys can be listed with ``get_params()``. Note that you can directly set the parameters of the estimators contained in `transformers` of `ColumnTransformer`."
msgstr "Las claves de los parámetros válidos se pueden listar con ``get_params()``. Ten en cuenta que puede establecer directamente los parámetros de los estimadores contenidos en `transformers` de `ColumnTransformer`."

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:23
msgid "self"
msgstr "self"

#: of sklearn.compose._column_transformer.ColumnTransformer.transform:8
msgid "The data to be transformed by subset."
msgstr "Los datos que serán transformados por subconjunto."

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:4
msgid "Examples using ``sklearn.compose.ColumnTransformer``"
msgstr "Ejemplos usando ``sklearn.compose.ColumnTransformer``"

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:15
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:34
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:53
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:61
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
msgstr ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:72
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:80
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
#~ msgstr ""

