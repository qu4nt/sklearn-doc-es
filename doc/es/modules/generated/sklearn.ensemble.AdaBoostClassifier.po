msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:02\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.AdaBoostClassifier.po\n"
"X-Crowdin-File-ID: 3078\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.AdaBoostClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.AdaBoostClassifier"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:2
msgid "An AdaBoost classifier."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:4
msgid "An AdaBoost [1] classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:10
msgid "This class implements the algorithm known as AdaBoost-SAMME [2]."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:12
msgid "Read more in the :ref:`User Guide <adaboost>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:23
msgid "**base_estimator**"
msgstr ""

#: of
msgid "object, default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:19
msgid "The base estimator from which the boosted ensemble is built. Support for sample weighting is required, as well as proper ``classes_`` and ``n_classes_`` attributes. If ``None``, then the base estimator is :class:`~sklearn.tree.DecisionTreeClassifier` initialized with `max_depth=1`."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:27
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=50"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:26
msgid "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:32
msgid "**learning_rate**"
msgstr ""

#: of
msgid "float, default=1."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:30
msgid "Learning rate shrinks the contribution of each classifier by ``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:39
msgid "**algorithm**"
msgstr ""

#: of
msgid "{'SAMME', 'SAMME.R'}, default='SAMME.R'"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:35
msgid "If 'SAMME.R' then use the SAMME.R real boosting algorithm. ``base_estimator`` must support calculation of class probabilities. If 'SAMME' then use the SAMME discrete boosting algorithm. The SAMME.R algorithm typically converges faster than SAMME, achieving a lower test error with fewer boosting iterations."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:49
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:42
msgid "Controls the random seed given at each `base_estimator` at each boosting iteration. Thus, it is only used when `base_estimator` exposes a `random_state`. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:54
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:54
msgid "The base estimator from which the ensemble is grown."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:57
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of classifiers"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:57
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:60
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:60
msgid "The classes labels."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:63
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:63
msgid "The number of classes."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:66
msgid "**estimator_weights_**"
msgstr ""

#: of
msgid "ndarray of floats"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:66
msgid "Weights for each estimator in the boosted ensemble."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:70
msgid "**estimator_errors_**"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:69
msgid "Classification error for each estimator in the boosted ensemble."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:76
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.AdaBoostClassifier.feature_importances_:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:73
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:81
msgid ":obj:`AdaBoostRegressor`"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:82
msgid "An AdaBoost regressor that begins by fitting a regressor on the original dataset and then fits additional copies of the regressor on the same dataset but where the weights of instances are adjusted according to the error of the current prediction."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:83
msgid ":obj:`GradientBoostingClassifier`"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:84
msgid "GB builds an additive model in a forward stage-wise fashion. Regression trees are fit on the negative gradient of the binomial or multinomial deviance loss function. Binary classification is a special case where only a single regression tree is induced."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:85
msgid ":obj:`sklearn.tree.DecisionTreeClassifier`"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:86
msgid "A non-parametric supervised learning method used for classification. Creates a model that predicts the value of a target variable by learning simple decision rules inferred from the data features."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:91
msgid "References"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:92
msgid "Y. Freund, R. Schapire, \"A Decision-Theoretic Generalization of on-Line Learning and an Application to Boosting\", 1995."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:95
msgid "Zhu, H. Zou, S. Rosset, T. Hastie, \"Multi-class AdaBoost\", 2009."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:99
msgid "[R33e4ec8c4ad5-1]_, [R33e4ec8c4ad5-2]_"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:102
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:117
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`decision_function <sklearn.ensemble.AdaBoostClassifier.decision_function>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Compute the decision function of ``X``."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.AdaBoostClassifier.fit>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Build a boosted classifier from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.AdaBoostClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.AdaBoostClassifier.predict>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Predict classes for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.ensemble.AdaBoostClassifier.predict_log_proba>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Predict class log-probabilities for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.AdaBoostClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Predict class probabilities for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.AdaBoostClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.AdaBoostClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`staged_decision_function <sklearn.ensemble.AdaBoostClassifier.staged_decision_function>`\\"
msgstr ""

#: of
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Compute decision function of ``X`` for each boosting iteration."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`staged_predict <sklearn.ensemble.AdaBoostClassifier.staged_predict>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:2
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid "Return staged predictions for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`staged_predict_proba <sklearn.ensemble.AdaBoostClassifier.staged_predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
msgid ":obj:`staged_score <sklearn.ensemble.AdaBoostClassifier.staged_score>`\\"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier:132:<autosummary>:1
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:2
msgid "Return staged scores for X, y."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function:9
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:9
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:11
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:12
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:12
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:12
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:16
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:18
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function:8
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:8
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:10
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:11
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:11
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:10
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:16
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:11
msgid "The training input samples. Sparse matrix can be CSC, CSR, COO, DOK, or LIL. COO, DOK, and LIL are converted to CSR."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.AdaBoostClassifier.feature_importances_
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function:30
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:32
msgid "**score**"
msgstr ""

#: of
msgid "ndarray of shape of (n_samples, k)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function:14
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:17
msgid "The decision function of the input samples. The order of outputs is the same of that of the :term:`classes_` attribute. Binary classification is a special cases with ``k == 1``, otherwise ``k==n_classes``. For binary classification, values closer to -1 or 1 mean more like the first or second class in ``classes_``, respectively."
msgstr ""

#: of sklearn.ensemble.AdaBoostClassifier.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.AdaBoostClassifier.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.AdaBoostClassifier.feature_importances_:28
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.AdaBoostClassifier.feature_importances_:17
msgid "The feature importances."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:12
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:27
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:31
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:15
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:12
msgid "The target values (class labels)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:16
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:15
msgid "Sample weights. If None, the sample weights are initialized to ``1 / n_samples``."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:32
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.fit:21
msgid "Fitted estimator."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:4
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:4
msgid "The predicted class of an input sample is computed as the weighted mean prediction of the classifiers in the ensemble."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict:16
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:21
msgid "The predicted classes."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:4
msgid "The predicted class log-probabilities of an input sample is computed as the weighted mean predicted class log-probabilities of the classifiers in the ensemble."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:29
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:29
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:34
msgid "**p**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba:17
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:17
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:23
msgid "The class probabilities of the input samples. The order of outputs is the same of that of the :term:`classes_` attribute."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba:4
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:4
msgid "The predicted class probabilities of an input sample is computed as the weighted mean predicted class probabilities of the classifiers in the ensemble."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:18
msgid "Sample weights."
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function:4
msgid "This method allows monitoring (i.e. determine error on testing set) after each boosting iteration."
msgstr ""

#: of
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba
#: sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score
msgid "Yields"
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples, k)"
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:7
msgid "This generator method yields the ensemble prediction after each iteration of boosting and therefore allows monitoring, such as to determine the prediction on a test set after each boost."
msgstr ""

#: of sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict:14
msgid "The input samples. Sparse matrix can be CSC, CSR, COO, DOK, or LIL. COO, DOK, and LIL are converted to CSR."
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples,)"
msgstr ""

#: of
#: sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba:8
msgid "This generator method yields the ensemble predicted class probabilities after each iteration of boosting and therefore allows monitoring, such as to determine the predicted class probabilities on a test set after each boost."
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:4
msgid "This generator method yields the ensemble score after each iteration of boosting and therefore allows monitoring, such as to determine the score on a test set after each boost."
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:15
msgid "Labels for X."
msgstr ""

#: of sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score:34
msgid "**z**"
msgstr ""

