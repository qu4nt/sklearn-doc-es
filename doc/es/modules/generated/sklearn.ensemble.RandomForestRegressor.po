msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-04-15 06:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.RandomForestRegressor.po\n"
"X-Crowdin-File-ID: 5744\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.rst:2
msgid ":mod:`sklearn.ensemble`.RandomForestRegressor"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:2
msgid "A random forest regressor."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:4
msgid "A random forest is a meta estimator that fits a number of classifying decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is controlled with the `max_samples` parameter if `bootstrap=True` (default), otherwise the whole dataset is used to build each tree."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:11
msgid "Read more in the :ref:`User Guide <forest>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestRegressor.predict
#: sklearn.ensemble._forest.RandomForestRegressor
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:20
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:16
msgid "The number of trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:18
msgid "The default value of ``n_estimators`` changed from 10 to 100 in 0.22."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:29
msgid "**criterion**"
msgstr ""

#: of
msgid "{\"mse\", \"mae\"}, default=\"mse\""
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:23
msgid "The function to measure the quality of a split. Supported criteria are \"mse\" for the mean squared error, which is equal to variance reduction as feature selection criterion, and \"mae\" for the mean absolute error."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:28
msgid "Mean Absolute Error (MAE) criterion."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:34
msgid "**max_depth**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:32
msgid "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:45
msgid "**min_samples_split**"
msgstr ""

#: of
msgid "int or float, default=2"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:37
msgid "The minimum number of samples required to split an internal node:"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:39
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:40
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:44
#: sklearn.ensemble._forest.RandomForestRegressor:59
msgid "Added float values for fractions."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:60
msgid "**min_samples_leaf**"
msgstr ""

#: of
msgid "int or float, default=1"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:48
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:54
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:55
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:65
msgid "**min_weight_fraction_leaf**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:63
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:81
msgid "**max_features**"
msgstr ""

#: of
msgid "{\"auto\", \"sqrt\", \"log2\"}, int or float, default=\"auto\""
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:68
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:70
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:71
msgid "If float, then `max_features` is a fraction and `round(max_features * n_features)` features are considered at each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:74
msgid "If \"auto\", then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:75
msgid "If \"sqrt\", then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:76
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:77
msgid "If None, then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:79
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:86
msgid "**max_leaf_nodes**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:84
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:104
msgid "**min_impurity_decrease**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:89
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:92
msgid "The weighted impurity decrease equation is the following::"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:97
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:101
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:115
msgid "**min_impurity_split**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:107
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:110
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:119
msgid "**bootstrap**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:118
msgid "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:123
msgid "**oob_score**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:122
msgid "whether to use out-of-bag samples to estimate the R^2 on unseen data."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:130
msgid "**n_jobs**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:126
msgid "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:137
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:133
msgid "Controls both the randomness of the bootstrapping of the samples used when building trees (if ``bootstrap=True``) and the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``). See :term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:140
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:140
msgid "Controls the verbosity when fitting and predicting."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:145
msgid "**warm_start**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:143
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:153
msgid "**ccp_alpha**"
msgstr ""

#: of
msgid "non-negative float, default=0.0"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:148
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:167
msgid "**max_samples**"
msgstr ""

#: of
msgid "int or float, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:156
msgid "If bootstrap is True, the number of samples to draw from X to train each base estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:159
msgid "If None (default), then draw `X.shape[0]` samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:160
msgid "If int, then draw `max_samples` samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:161
msgid "If float, then draw `max_samples * X.shape[0]` samples. Thus, `max_samples` should be in the interval `(0, 1)`."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:173
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "DecisionTreeRegressor"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:172
msgid "The child estimator template used to create the collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:176
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of DecisionTreeRegressor"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:176
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:179
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.RandomForestRegressor.feature_importances_:2
#: sklearn.ensemble._forest.RandomForestRegressor:179
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:182
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:182
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:185
msgid "**n_outputs_**"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:185
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:189
msgid "**oob_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:188
msgid "Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:196
msgid "**oob_prediction_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:192
msgid "Prediction computed with out-of-bag estimate on the training set. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:201
msgid ":obj:`DecisionTreeRegressor`, :obj:`ExtraTreesRegressor`"
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.ensemble._forest.RandomForestRegressor:205
msgid "Notes"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:206
msgid "The default values for the parameters controlling the size of the trees (e.g. ``max_depth``, ``min_samples_leaf``, etc.) lead to fully grown and unpruned trees which can potentially be very large on some data sets. To reduce memory consumption, the complexity and size of the trees should be controlled by setting those parameter values."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:212
msgid "The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data, ``max_features=n_features`` and ``bootstrap=False``, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, ``random_state`` has to be fixed."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:219
msgid "The default value ``max_features=\"auto\"`` uses ``n_features`` rather than ``n_features / 3``. The latter was originally suggested in [1], whereas the former was more recently justified empirically in [2]."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:224
msgid "References"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:225
msgid "Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32, 2001."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:227
msgid "P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\", Machine Learning, 63(1), 3-42, 2006."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:232
msgid "[Rf91cab2dc427-1]_, [Rf91cab2dc427-2]_"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:235
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:247
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.RandomForestRegressor.apply>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`decision_path <sklearn.ensemble.RandomForestRegressor.decision_path>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Return the decision path in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.RandomForestRegressor.fit>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Build a forest of trees from the training set (X, y)."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.RandomForestRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.RandomForestRegressor.predict>`\\"
msgstr ""

#: of sklearn.ensemble._forest.ForestRegressor.predict:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Predict regression target for X."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.RandomForestRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.RandomForestRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._forest.RandomForestRegressor:257:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.ensemble._forest.BaseForest.apply:10
#: sklearn.ensemble._forest.BaseForest.decision_path:11
#: sklearn.ensemble._forest.BaseForest.fit:10
#: sklearn.ensemble._forest.ForestRegressor.predict:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:8
#: sklearn.ensemble._forest.BaseForest.decision_path:9
#: sklearn.ensemble._forest.ForestRegressor.predict:10
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble.RandomForestRegressor.feature_importances_
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.BaseForest.fit
#: sklearn.ensemble._forest.ForestRegressor.predict
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:27
msgid "**X_leaves**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_estimators)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:15
msgid "For each datapoint x in X and for each tree in the forest, return the index of the leaf x ends up in."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:18
msgid "**indicator**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:16
msgid "Return a node indicator matrix where non zero elements indicates that the samples goes through the nodes. The matrix is of CSR format."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:33
msgid "**n_nodes_ptr**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators + 1,)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:21
msgid "The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]] gives the indicator value for the i-th estimator."
msgstr ""

#: of sklearn.ensemble.RandomForestRegressor.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.RandomForestRegressor.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.RandomForestRegressor.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.RandomForestRegressor.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:8
msgid "The training input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csc_matrix``."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.ensemble._forest.BaseForest.fit:14
#: sklearn.ensemble._forest.ForestRegressor.predict:28
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:13
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._forest.BaseForest.fit:21
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._forest.BaseForest.fit:37
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._forest.ForestRegressor.predict:4
msgid "The predicted regression target of an input sample is computed as the mean predicted regression targets of the trees in the forest."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.ensemble._forest.ForestRegressor.predict:17
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.examples:4
msgid "Examples using ``sklearn.ensemble.RandomForestRegressor``"
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.examples:15
#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.examples:34
#: ../modules/generated/sklearn.ensemble.RandomForestRegressor.examples:42
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_applications_plot_prediction_latency.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_impute_plot_missing_values.py`"
#~ msgstr ""

