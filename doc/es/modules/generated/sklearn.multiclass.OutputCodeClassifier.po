msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-10 00:22\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.multiclass.OutputCodeClassifier.po\n"
"X-Crowdin-File-ID: 5796\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.multiclass.OutputCodeClassifier.rst:2
msgid ":mod:`sklearn.multiclass`.OutputCodeClassifier"
msgstr ":mod:`sklearn.multiclass`.OutputCodeClassifier"

#: of sklearn.multiclass.OutputCodeClassifier:2
msgid "(Error-Correcting) Output-Code multiclass strategy"
msgstr "(Corrección de errores) Estrategia de código de salida (Output-Code) multiclase"

#: of sklearn.multiclass.OutputCodeClassifier:4
msgid "Output-code based strategies consist in representing each class with a binary code (an array of 0s and 1s). At fitting time, one binary classifier per bit in the code book is fitted.  At prediction time, the classifiers are used to project new points in the class space and the class closest to the points is chosen. The main advantage of these strategies is that the number of classifiers used can be controlled by the user, either for compressing the model (0 < code_size < 1) or for making the model more robust to errors (code_size > 1). See the documentation for more details."
msgstr "Las estrategias basadas en el código de salida (Output-Code) consisten en representar cada clase con un código binario (un arreglo de 0s y 1s). En el momento del ajuste, se ajusta un clasificador binario por cada bit del libro de códigos (code book).  En el momento de la predicción, los clasificadores se utilizan para proyectar nuevos puntos en el espacio de clases y se elige la clase más cercana a los puntos. La principal ventaja de estas estrategias es que el número de clasificadores utilizados puede ser controlado por el usuario, ya sea para comprimir el modelo (0 < code_size < 1) o para hacer el modelo más robusto a los errores (code_size > 1). Consulta la documentación para obtener más detalles."

#: of sklearn.multiclass.OutputCodeClassifier:13
msgid "Read more in the :ref:`User Guide <ecoc>`."
msgstr "Más información en el :ref:`Manual de usuario <ecoc>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OutputCodeClassifier
#: sklearn.multiclass.OutputCodeClassifier.fit
#: sklearn.multiclass.OutputCodeClassifier.predict
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.multiclass.OutputCodeClassifier:19
msgid "**estimator**"
msgstr "**estimator**"

#: of
msgid "estimator object"
msgstr "estimator object"

#: of sklearn.multiclass.OutputCodeClassifier:18
msgid "An estimator object implementing :term:`fit` and one of :term:`decision_function` or :term:`predict_proba`."
msgstr "Un objeto estimador que implementa :term:`fit` y uno de :term:`decision_function` o :term:`predict_proba`."

#: of sklearn.multiclass.OutputCodeClassifier:25
msgid "**code_size**"
msgstr "**code_size**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.multiclass.OutputCodeClassifier:22
msgid "Percentage of the number of classes to be used to create the code book. A number between 0 and 1 will require fewer classifiers than one-vs-the-rest. A number greater than 1 will require more classifiers than one-vs-the-rest."
msgstr "Porcentaje del número de clases que se utilizará para crear el libro de códigos. Un número entre 0 y 1 requerirá menos clasificadores que uno contra el resto (one-vs-the-rest). Un número mayor que 1 requerirá más clasificadores que uno contra el resto."

#: of sklearn.multiclass.OutputCodeClassifier:30
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance, default=None"
msgstr "int, instancia RandomState, default=None"

#: of sklearn.multiclass.OutputCodeClassifier:28
msgid "The generator used to initialize the codebook. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr "El generador utilizado para inicializar el libro de códigos (code_book). Pasa un int para una salida reproducible a través de múltiples llamadas a la función. Véase :term:`Glossary <random_state>`."

#: of sklearn.multiclass.OutputCodeClassifier:41
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.multiclass.OutputCodeClassifier:33
msgid "The number of jobs to use for the computation: the multiclass problems are computed in parallel."
msgstr "El número de trabajos a utilizar para el cómputo: los problemas multiclase se calculan en paralelo."

#: of sklearn.multiclass.OutputCodeClassifier:36
msgid "``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "``None`` significa 1 a menos que esté en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa que se utilizan todos los procesadores. Consulta :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.multiclass.OutputCodeClassifier
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.multiclass.OutputCodeClassifier:46
msgid "**estimators_** : list of `int(n_classes * code_size)` estimators"
msgstr "**estimators_** : lista de `int(n_classes * code_size)` estimadores"

#: of
msgid "list of"
msgstr "lista de"

#: of sklearn.multiclass.OutputCodeClassifier:46
msgid "Estimators used for predictions."
msgstr "Estimadores usados para predicciones."

#: of sklearn.multiclass.OutputCodeClassifier:49
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "numpy array of shape [n_classes]"
msgstr "arreglo de numpy de forma [n_classes]"

#: of sklearn.multiclass.OutputCodeClassifier:49
msgid "Array containing labels."
msgstr "Arreglo que contiene etiquetas."

#: of sklearn.multiclass.OutputCodeClassifier:57
msgid "**code_book_**"
msgstr "**code_book_**"

#: of
msgid "numpy array of shape [n_classes, code_size]"
msgstr "arreglo de numpy de forma [n_classes, code_size]"

#: of sklearn.multiclass.OutputCodeClassifier:52
msgid "Binary array containing the code of each class."
msgstr "Arreglo binario que contiene el código de cada clase."

#: of sklearn.multiclass.OutputCodeClassifier:60
msgid "References"
msgstr "Referencias"

#: of sklearn.multiclass.OutputCodeClassifier:61
msgid "\"Solving multiclass learning problems via error-correcting output codes\", Dietterich T., Bakiri G., Journal of Artificial Intelligence Research 2, 1995."
msgstr "\"Solving multiclass learning problems via error-correcting output codes\", Dietterich T., Bakiri G., Journal of Artificial Intelligence Research 2, 1995."

#: of sklearn.multiclass.OutputCodeClassifier:67
msgid "\"The error coding method and PICTs\", James G., Hastie T., Journal of Computational and Graphical statistics 7, 1998."
msgstr "\"The error coding method and PICTs\", James G., Hastie T., Journal of Computational and Graphical statistics 7, 1998."

#: of sklearn.multiclass.OutputCodeClassifier:72
msgid "\"The Elements of Statistical Learning\", Hastie T., Tibshirani R., Friedman J., page 606 (second-edition) 2008."
msgstr "\"The Elements of Statistical Learning\", Hastie T., Tibshirani R., Friedman J., page 606 (second-edition) 2008."

#: of sklearn.multiclass.OutputCodeClassifier:78
msgid "[R2eddaeec0849-1]_, [R2eddaeec0849-2]_, [R2eddaeec0849-3]_"
msgstr "[R2eddaeec0849-1]_, [R2eddaeec0849-2]_, [R2eddaeec0849-3]_"

#: of sklearn.multiclass.OutputCodeClassifier:81
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.multiclass.OutputCodeClassifier:95
msgid "Methods"
msgstr "Métodos"

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`fit <sklearn.multiclass.OutputCodeClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.multiclass.OutputCodeClassifier.fit>`\\"

#: of sklearn.multiclass.OutputCodeClassifier.fit:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Fit underlying estimators."
msgstr "Ajustar estimadores subyacentes."

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`get_params <sklearn.multiclass.OutputCodeClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.multiclass.OutputCodeClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtener los parámetros de este estimador."

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`predict <sklearn.multiclass.OutputCodeClassifier.predict>`\\"
msgstr ":obj:`predict <sklearn.multiclass.OutputCodeClassifier.predict>`\\"

#: of sklearn.multiclass.OutputCodeClassifier.predict:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Predict multi-class targets using underlying estimators."
msgstr "Predecir objetivos multiclase utilizando estimadores subyacentes."

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`score <sklearn.multiclass.OutputCodeClassifier.score>`\\"
msgstr ":obj:`score <sklearn.multiclass.OutputCodeClassifier.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos y etiquetas de prueba dados."

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`set_params <sklearn.multiclass.OutputCodeClassifier.set_params>`\\"
msgstr ":obj:`set_params <sklearn.multiclass.OutputCodeClassifier.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.multiclass.OutputCodeClassifier.fit:8
#: sklearn.multiclass.OutputCodeClassifier.predict:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "(sparse) array-like of shape (n_samples, n_features)"
msgstr "(sparse) array-like de forma (n_samples, n_features)"

#: of sklearn.multiclass.OutputCodeClassifier.fit:8
#: sklearn.multiclass.OutputCodeClassifier.predict:8
msgid "Data."
msgstr "Datos."

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.multiclass.OutputCodeClassifier.fit:11
#: sklearn.multiclass.OutputCodeClassifier.predict:24
msgid "**y**"
msgstr "**y**"

#: of
msgid "numpy array of shape [n_samples]"
msgstr "arreglo de numpy de forma [n_samples]"

#: of sklearn.multiclass.OutputCodeClassifier.fit:11
msgid "Multi-class targets."
msgstr "Objetivos multiclase."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OutputCodeClassifier.fit
#: sklearn.multiclass.OutputCodeClassifier.predict
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.multiclass.OutputCodeClassifier.fit:27
msgid "self"
msgstr "self"

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los sub objetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.multiclass.OutputCodeClassifier.predict:13
msgid "Predicted multi-class targets."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

