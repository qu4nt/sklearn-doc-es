msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:09\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.multiclass.OutputCodeClassifier.po\n"
"X-Crowdin-File-ID: 5796\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.multiclass.OutputCodeClassifier.rst:2
msgid ":mod:`sklearn.multiclass`.OutputCodeClassifier"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:2
msgid "(Error-Correcting) Output-Code multiclass strategy"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:4
msgid "Output-code based strategies consist in representing each class with a binary code (an array of 0s and 1s). At fitting time, one binary classifier per bit in the code book is fitted.  At prediction time, the classifiers are used to project new points in the class space and the class closest to the points is chosen. The main advantage of these strategies is that the number of classifiers used can be controlled by the user, either for compressing the model (0 < code_size < 1) or for making the model more robust to errors (code_size > 1). See the documentation for more details."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:13
msgid "Read more in the :ref:`User Guide <ecoc>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OutputCodeClassifier
#: sklearn.multiclass.OutputCodeClassifier.fit
#: sklearn.multiclass.OutputCodeClassifier.predict
msgid "Parameters"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:19
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:18
msgid "An estimator object implementing :term:`fit` and one of :term:`decision_function` or :term:`predict_proba`."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:25
msgid "**code_size**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:22
msgid "Percentage of the number of classes to be used to create the code book. A number between 0 and 1 will require fewer classifiers than one-vs-the-rest. A number greater than 1 will require more classifiers than one-vs-the-rest."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:30
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:28
msgid "The generator used to initialize the codebook. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:41
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:33
msgid "The number of jobs to use for the computation: the multiclass problems are computed in parallel."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:36
msgid "``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:46
msgid "**estimators_** : list of `int(n_classes * code_size)` estimators"
msgstr ""

#: of
msgid "list of"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:46
msgid "Estimators used for predictions."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:49
msgid "**classes_**"
msgstr ""

#: of
msgid "numpy array of shape [n_classes]"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:49
msgid "Array containing labels."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:57
msgid "**code_book_**"
msgstr ""

#: of
msgid "numpy array of shape [n_classes, code_size]"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:52
msgid "Binary array containing the code of each class."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:60
msgid "References"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:61
msgid "\"Solving multiclass learning problems via error-correcting output codes\", Dietterich T., Bakiri G., Journal of Artificial Intelligence Research 2, 1995."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:67
msgid "\"The error coding method and PICTs\", James G., Hastie T., Journal of Computational and Graphical statistics 7, 1998."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:72
msgid "\"The Elements of Statistical Learning\", Hastie T., Tibshirani R., Friedman J., page 606 (second-edition) 2008."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:78
msgid "[R2eddaeec0849-1]_, [R2eddaeec0849-2]_, [R2eddaeec0849-3]_"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:81
msgid "Examples"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:95
msgid "Methods"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`fit <sklearn.multiclass.OutputCodeClassifier.fit>`\\"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.fit:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Fit underlying estimators."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`get_params <sklearn.multiclass.OutputCodeClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`predict <sklearn.multiclass.OutputCodeClassifier.predict>`\\"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.predict:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Predict multi-class targets using underlying estimators."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`score <sklearn.multiclass.OutputCodeClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid ":obj:`set_params <sklearn.multiclass.OutputCodeClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multiclass.OutputCodeClassifier:103:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.multiclass.OutputCodeClassifier.fit:8
#: sklearn.multiclass.OutputCodeClassifier.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "(sparse) array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.fit:8
#: sklearn.multiclass.OutputCodeClassifier.predict:8
msgid "Data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.multiclass.OutputCodeClassifier.fit:11
#: sklearn.multiclass.OutputCodeClassifier.predict:24
msgid "**y**"
msgstr ""

#: of
msgid "numpy array of shape [n_samples]"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.fit:11
msgid "Multi-class targets."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OutputCodeClassifier.fit
#: sklearn.multiclass.OutputCodeClassifier.predict
msgid "Returns"
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.fit:27
msgid "self"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multiclass.OutputCodeClassifier.predict:13
msgid "Predicted multi-class targets."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

