msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.svm.SVR.po\n"
"X-Crowdin-File-ID: 3758\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.svm.SVR.rst:2
msgid ":mod:`sklearn.svm`.SVR"
msgstr ""

#: of sklearn.svm._classes.SVR:2
msgid "Epsilon-Support Vector Regression."
msgstr ""

#: of sklearn.svm._classes.SVR:4
msgid "The free parameters in the model are C and epsilon."
msgstr ""

#: of sklearn.svm._classes.SVR:6
msgid "The implementation is based on libsvm. The fit time complexity is more than quadratic with the number of samples which makes it hard to scale to datasets with more than a couple of 10000 samples. For large datasets consider using :class:`~sklearn.svm.LinearSVR` or :class:`~sklearn.linear_model.SGDRegressor` instead, possibly after a :class:`~sklearn.kernel_approximation.Nystroem` transformer."
msgstr ""

#: of sklearn.svm._classes.SVR:13
msgid "Read more in the :ref:`User Guide <svm_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseLibSVM.predict
#: sklearn.svm._classes.SVR
msgid "Parameters"
msgstr ""

#: of sklearn.svm._classes.SVR:22
msgid "**kernel**"
msgstr ""

#: of
msgid "{'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'}, default='rbf'"
msgstr ""

#: of sklearn.svm._classes.SVR:18
msgid "Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix."
msgstr ""

#: of sklearn.svm._classes.SVR:26
msgid "**degree**"
msgstr ""

#: of
msgid "int, default=3"
msgstr ""

#: of sklearn.svm._classes.SVR:25
msgid "Degree of the polynomial kernel function ('poly'). Ignored by all other kernels."
msgstr ""

#: of sklearn.svm._classes.SVR:36
msgid "**gamma**"
msgstr ""

#: of
msgid "{'scale', 'auto'} or float, default='scale'"
msgstr ""

#: of sklearn.svm._classes.SVR:29
msgid "Kernel coefficient for 'rbf', 'poly' and 'sigmoid'."
msgstr ""

#: of sklearn.svm._classes.SVR:31
msgid "if ``gamma='scale'`` (default) is passed then it uses 1 / (n_features * X.var()) as value of gamma,"
msgstr ""

#: of sklearn.svm._classes.SVR:33
msgid "if 'auto', uses 1 / n_features."
msgstr ""

#: of sklearn.svm._classes.SVR:35
msgid "The default value of ``gamma`` changed from 'auto' to 'scale'."
msgstr ""

#: of sklearn.svm._classes.SVR:40
msgid "**coef0**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.svm._classes.SVR:39
msgid "Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'."
msgstr ""

#: of sklearn.svm._classes.SVR:43
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.svm._classes.SVR:43
msgid "Tolerance for stopping criterion."
msgstr ""

#: of sklearn.svm._classes.SVR:48
msgid "**C**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.svm._classes.SVR:46
msgid "Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. The penalty is a squared l2 penalty."
msgstr ""

#: of sklearn.svm._classes.SVR:54
msgid "**epsilon**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.svm._classes.SVR:51
msgid "Epsilon in the epsilon-SVR model. It specifies the epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value."
msgstr ""

#: of sklearn.svm._classes.SVR:58
msgid "**shrinking**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.svm._classes.SVR:57
msgid "Whether to use the shrinking heuristic. See the :ref:`User Guide <shrinking_svm>`."
msgstr ""

#: of sklearn.svm._classes.SVR:61
msgid "**cache_size**"
msgstr ""

#: of
msgid "float, default=200"
msgstr ""

#: of sklearn.svm._classes.SVR:61
msgid "Specify the size of the kernel cache (in MB)."
msgstr ""

#: of sklearn.svm._classes.SVR:66
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.svm._classes.SVR:64
msgid "Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context."
msgstr ""

#: of sklearn.svm._classes.SVR:72
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=-1"
msgstr ""

#: of sklearn.svm._classes.SVR:69
msgid "Hard limit on iterations within solver, or -1 for no limit."
msgstr ""

#: of sklearn.svm._classes.SVR
msgid "Attributes"
msgstr ""

#: of sklearn.svm._classes.SVR:78
msgid "**class_weight_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.svm._classes.SVR:77
msgid "Multipliers of parameter C for each class. Computed based on the ``class_weight`` parameter."
msgstr ""

#: of sklearn.svm._classes.SVR:85
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features)"
msgstr ""

#: of sklearn.svm._classes.SVR:81
msgid "Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel."
msgstr ""

#: of sklearn.svm._classes.SVR:84
msgid "`coef_` is readonly property derived from `dual_coef_` and `support_vectors_`."
msgstr ""

#: of sklearn.svm._classes.SVR:88
msgid "**dual_coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_SV)"
msgstr ""

#: of sklearn.svm._classes.SVR:88
msgid "Coefficients of the support vector in the decision function."
msgstr ""

#: of sklearn.svm._classes.SVR:91
msgid "**fit_status_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.svm._classes.SVR:91
msgid "0 if correctly fitted, 1 otherwise (will raise warning)"
msgstr ""

#: of sklearn.svm._classes.SVR:94
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (1,)"
msgstr ""

#: of sklearn.svm._classes.SVR:94
msgid "Constants in decision function."
msgstr ""

#: of sklearn.svm._classes.SVR:97
msgid "**n_support_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,), dtype=int32"
msgstr ""

#: of sklearn.svm._classes.SVR:97
msgid "Number of support vectors for each class."
msgstr ""

#: of sklearn.svm._classes.SVR:100
msgid "**shape_fit_**"
msgstr ""

#: of
msgid "tuple of int of shape (n_dimensions_of_X,)"
msgstr ""

#: of sklearn.svm._classes.SVR:100
msgid "Array dimensions of training vector ``X``."
msgstr ""

#: of sklearn.svm._classes.SVR:103
msgid "**support_**"
msgstr ""

#: of
msgid "ndarray of shape (n_SV,)"
msgstr ""

#: of sklearn.svm._classes.SVR:103
msgid "Indices of support vectors."
msgstr ""

#: of sklearn.svm._classes.SVR:109
msgid "**support_vectors_**"
msgstr ""

#: of
msgid "ndarray of shape (n_SV, n_features)"
msgstr ""

#: of sklearn.svm._classes.SVR:106
msgid "Support vectors."
msgstr ""

#: of sklearn.svm._classes.SVR:114
msgid ":obj:`NuSVR`"
msgstr ""

#: of sklearn.svm._classes.SVR:115
msgid "Support Vector Machine for regression implemented using libsvm using a parameter to control the number of support vectors."
msgstr ""

#: of sklearn.svm._classes.SVR:116
msgid ":obj:`LinearSVR`"
msgstr ""

#: of sklearn.svm._classes.SVR:117
msgid "Scalable Linear Support Vector Machine for regression implemented using liblinear."
msgstr ""

#: of sklearn.svm._classes.SVR:122
msgid "References"
msgstr ""

#: of sklearn.svm._classes.SVR:123
msgid "`LIBSVM: A Library for Support Vector Machines <http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf>`_"
msgstr ""

#: of sklearn.svm._classes.SVR:126
msgid "`Platt, John (1999). \"Probabilistic outputs for support vector machines and comparison to regularizedlikelihood methods.\" <http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.1639>`_"
msgstr ""

#: of sklearn.svm._classes.SVR:132
msgid "[R4ae6a8049c28-1]_, [R4ae6a8049c28-2]_"
msgstr ""

#: of sklearn.svm._classes.SVR:135
msgid "Examples"
msgstr ""

#: of sklearn.svm._classes.SVR:150
msgid "Methods"
msgstr ""

#: of sklearn.svm._classes.SVR:158:<autosummary>:1
msgid ":obj:`fit <sklearn.svm.SVR.fit>`\\"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:2
#: sklearn.svm._classes.SVR:158:<autosummary>:1
msgid "Fit the SVM model according to the given training data."
msgstr ""

#: of sklearn.svm._classes.SVR:158:<autosummary>:1
msgid ":obj:`get_params <sklearn.svm.SVR.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.svm._classes.SVR:158:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.svm._classes.SVR:158:<autosummary>:1
msgid ":obj:`predict <sklearn.svm.SVR.predict>`\\"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:2
#: sklearn.svm._classes.SVR:158:<autosummary>:1
msgid "Perform regression on samples in X."
msgstr ""

#: of sklearn.svm._classes.SVR:158:<autosummary>:1
msgid ":obj:`score <sklearn.svm.SVR.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.svm._classes.SVR:158:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.svm._classes.SVR:158:<autosummary>:1
msgid ":obj:`set_params <sklearn.svm.SVR.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.svm._classes.SVR:158:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20 sklearn.svm._base.BaseLibSVM.fit:11
#: sklearn.svm._base.BaseLibSVM.predict:10
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)                 or (n_samples, n_samples)"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:8
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23 sklearn.svm._base.BaseLibSVM.fit:15
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:14
msgid "Target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26 sklearn.svm._base.BaseLibSVM.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:18
msgid "Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseLibSVM.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.svm._base.BaseLibSVM.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.RegressorMixin.score:41 sklearn.svm._base.BaseLibSVM.fit:34
msgid "Notes"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:35
msgid "If X and y are not C-ordered and contiguous arrays of np.float64 and X is not a scipy.sparse.csr_matrix, X and/or y may be copied."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:38
msgid "If X is a dense array, then the other methods will not support sparse matrices as input."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:4
msgid "For an one-class model, +1 (inlier) or -1 (outlier) is returned."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:9
msgid "For kernel=\"precomputed\", the expected shape of X is (n_samples_test, n_samples_train)."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:26
msgid "**y_pred**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.svm.SVR.examples:4
msgid "Examples using ``sklearn.svm.SVR``"
msgstr ""

#: ../modules/generated/sklearn.svm.SVR.examples:15
#: ../modules/generated/sklearn.svm.SVR.examples:23
#: ../modules/generated/sklearn.svm.SVR.examples:34
#: ../modules/generated/sklearn.svm.SVR.examples:42
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_ridge_regression.py`"
msgstr ""

#: ../modules/generated/sklearn.svm.SVR.examples:53
#: ../modules/generated/sklearn.svm.SVR.examples:61
msgid ":ref:`sphx_glr_auto_examples_svm_plot_svm_regression.py`"
msgstr ""

