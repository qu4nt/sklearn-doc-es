msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.po\n"
"X-Crowdin-File-ID: 4958\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst:2
msgid ":mod:`sklearn.preprocessing`.MultiLabelBinarizer"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:2
msgid "Transform between iterable of iterables and a multilabel format."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:4
msgid "Although a list of sets or tuples is a very intuitive format for multilabel data, it is unwieldy to process. This transformer converts between this intuitive format and the supported multilabel format: a (samples x classes) binary matrix indicating the presence of a class label."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._label.MultiLabelBinarizer
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform
#: sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform
#: sklearn.preprocessing._label.MultiLabelBinarizer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:13
msgid "**classes**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:12
msgid "Indicates an ordering for the class labels. All entries should be unique (cannot contain duplicate classes)."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:19
msgid "**sparse_output**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:16
msgid "Set to True if output binary array is desired in CSR sparse format."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer
msgid "Attributes"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:29
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:24
msgid "A copy of the `classes` parameter when provided. Otherwise it corresponds to the sorted set of classes found when fitting."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:34
msgid ":obj:`OneHotEncoder`"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:35
msgid "Encode categorical features using a one-hot aka one-of-K scheme."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:41
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:56
msgid "A common mistake is to pass in a list, which leads to the following issue:"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:65
msgid "To correct this, the list of labels should be passed in as:"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:74
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.MultiLabelBinarizer.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Fit the label sets binarizer, storing :term:`classes_`."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.MultiLabelBinarizer.fit_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Fit the label sets binarizer and transform the given label sets."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.MultiLabelBinarizer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.MultiLabelBinarizer.inverse_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Transform the given indicator matrix into label sets."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.MultiLabelBinarizer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.MultiLabelBinarizer.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.transform:2
#: sklearn.preprocessing._label.MultiLabelBinarizer:83:<autosummary>:1
msgid "Transform the given label sets."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit:10
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform:10
#: sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform:25
#: sklearn.preprocessing._label.MultiLabelBinarizer.transform:10
msgid "**y**"
msgstr ""

#: of
msgid "iterable of iterables"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit:8
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform:8
#: sklearn.preprocessing._label.MultiLabelBinarizer.transform:8
msgid "A set of labels (any orderable and hashable object) for each sample. If the `classes` parameter is set, `y` will not be iterated."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform
#: sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform
#: sklearn.preprocessing._label.MultiLabelBinarizer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._label.MultiLabelBinarizer.fit:26
msgid "**self**"
msgstr ""

#: of
msgid "returns this MultiLabelBinarizer instance"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform:28
#: sklearn.preprocessing._label.MultiLabelBinarizer.transform:27
msgid "**y_indicator**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform:15
msgid "A matrix such that `y_indicator[i, j] = 1` i.f.f. `classes_[j]` is in `y[i]`, and 0 otherwise. Sparse matrix will be of CSR format."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform:8
msgid "**yt**"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform:8
msgid "A matrix containing only 1s ands 0s."
msgstr ""

#: of
msgid "list of tuples"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform:13
msgid "The set of labels for each sample such that `y[i]` consists of `classes_[j]` for each `yt[i, j] == 1`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "array or CSR matrix, shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.preprocessing._label.MultiLabelBinarizer.transform:15
msgid "A matrix such that `y_indicator[i, j] = 1` iff `classes_[j]` is in `y[i]`, and 0 otherwise."
msgstr ""

