msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.naive_bayes.CategoricalNB.po\n"
"X-Crowdin-File-ID: 5236\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.naive_bayes.CategoricalNB.rst:2
msgid ":mod:`sklearn.naive_bayes`.CategoricalNB"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:2
msgid "Naive Bayes classifier for categorical features"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:4
msgid "The categorical Naive Bayes classifier is suitable for classification with discrete features that are categorically distributed. The categories of each feature are drawn from a categorical distribution."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:8
msgid "Read more in the :ref:`User Guide <categorical_naive_bayes>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.CategoricalNB sklearn.naive_bayes.CategoricalNB.fit
#: sklearn.naive_bayes.CategoricalNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:14
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:13
msgid "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:18
msgid "**fit_prior**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:17
msgid "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:22
msgid "**class_prior**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:21
msgid "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:37
msgid "**min_categories**"
msgstr ""

#: of
msgid "int or array-like of shape (n_features,), default=None"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:25
msgid "Minimum number of categories per feature."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:27
msgid "integer: Sets the minimum number of categories per feature to `n_categories` for each features."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:29
msgid "array-like: shape (n_features,) where `n_categories[i]` holds the minimum number of categories for the ith column of the input."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:31
msgid "None (default): Determines the number of categories automatically from the training data."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB
msgid "Attributes"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:44
msgid "**category_count_**"
msgstr ""

#: of
msgid "list of arrays of shape (n_features,)"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:42
msgid "Holds arrays of shape (n_classes, n_categories of respective feature) for each feature. Each array provides the number of samples encountered for each class and category of the specific feature."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:48
msgid "**class_count_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:47
msgid "Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:51
msgid "**class_log_prior_**"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:51
msgid "Smoothed empirical log probability for each class."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:54
msgid "**classes_**"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:54
msgid "Class labels known to the classifier"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:59
msgid "**feature_log_prob_**"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:57
msgid "Holds arrays of shape (n_classes, n_categories of respective feature) for each feature. Each array provides the empirical log probability of categories given the respective feature and class, ``P(x_i|y)``."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:62
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:62
msgid "Number of features of each sample."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:74
msgid "**n_categories_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,), dtype=np.int64"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:65
msgid "Number of categories for each feature. This value is inferred from the data or set by the minimum number of categories."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:77
msgid "Examples"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:90
msgid "Methods"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`fit <sklearn.naive_bayes.CategoricalNB.fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.fit:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Fit Naive Bayes classifier according to X, y"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`get_params <sklearn.naive_bayes.CategoricalNB.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.naive_bayes.CategoricalNB.partial_fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Incremental fit on a batch of samples."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict <sklearn.naive_bayes.CategoricalNB.predict>`\\"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict:2
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.naive_bayes.CategoricalNB.predict_log_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_log_proba:2
msgid "Return log-probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.naive_bayes.CategoricalNB.predict_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_proba:2
msgid "Return probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`score <sklearn.naive_bayes.CategoricalNB.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`set_params <sklearn.naive_bayes.CategoricalNB.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.naive_bayes.CategoricalNB.fit:14
#: sklearn.naive_bayes.CategoricalNB.partial_fit:24
#: sklearn.naive_bayes._BaseNB.predict:8
#: sklearn.naive_bayes._BaseNB.predict_log_proba:8
#: sklearn.naive_bayes._BaseNB.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.fit:8
#: sklearn.naive_bayes.CategoricalNB.partial_fit:18
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features. Here, each feature of X is assumed to be from a different categorical distribution. It is further assumed that all categories of each feature are represented by the numbers 0, ..., n - 1, where n refers to the total number of categories for the given feature. This can, for instance, be achieved with the help of OrdinalEncoder."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.naive_bayes.CategoricalNB.fit:17
#: sklearn.naive_bayes.CategoricalNB.partial_fit:27
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.fit:17
#: sklearn.naive_bayes.CategoricalNB.partial_fit:27
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.naive_bayes.CategoricalNB.fit:20
#: sklearn.naive_bayes.CategoricalNB.partial_fit:36
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples), default=None"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.fit:20
#: sklearn.naive_bayes.CategoricalNB.partial_fit:36
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.CategoricalNB.fit
#: sklearn.naive_bayes.CategoricalNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.naive_bayes.CategoricalNB.fit:36
#: sklearn.naive_bayes.CategoricalNB.partial_fit:52
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:4
msgid "This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:8
msgid "This is especially useful when the whole dataset is too big to fit in memory at once."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:11
msgid "This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead."
msgstr ""

#: of
msgid "array-like of shape (n_samples)"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:33
msgid "**classes**"
msgstr ""

#: of
msgid "array-like of shape (n_classes), default=None"
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:30
msgid "List of all the classes that can possibly appear in the y vector."
msgstr ""

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:32
msgid "Must be provided at the first call to partial_fit, can be omitted in subsequent calls."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:24
#: sklearn.naive_bayes._BaseNB.predict_log_proba:26
#: sklearn.naive_bayes._BaseNB.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:13
msgid "Predicted target values for X"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_log_proba:13
msgid "Returns the log-probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

