msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-13 21:15\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.naive_bayes.CategoricalNB.po\n"
"X-Crowdin-File-ID: 5236\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.naive_bayes.CategoricalNB.rst:2
msgid ":mod:`sklearn.naive_bayes`.CategoricalNB"
msgstr ":mod:`sklearn.naive_bayes`.CategoricalNB"

#: of sklearn.naive_bayes.CategoricalNB:2
msgid "Naive Bayes classifier for categorical features"
msgstr "Clasificador Naive Bayes para características categóricas"

#: of sklearn.naive_bayes.CategoricalNB:4
msgid "The categorical Naive Bayes classifier is suitable for classification with discrete features that are categorically distributed. The categories of each feature are drawn from a categorical distribution."
msgstr "El clasificador categórico de Naive Bayes es adecuado para la clasificación con características discretas que se distribuyen categóricamente. Las categorías de cada característica se extraen de una distribución categórica."

#: of sklearn.naive_bayes.CategoricalNB:8
msgid "Read more in the :ref:`User Guide <categorical_naive_bayes>`."
msgstr "Más información en :ref:`Manual de usuario <categorical_naive_bayes>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.CategoricalNB sklearn.naive_bayes.CategoricalNB.fit
#: sklearn.naive_bayes.CategoricalNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.naive_bayes.CategoricalNB:14
msgid "**alpha**"
msgstr "**alpha**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.naive_bayes.CategoricalNB:13
msgid "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
msgstr "Parámetro de suavizado aditivo (Laplace/Lidstone) (0 para no suavizar)."

#: of sklearn.naive_bayes.CategoricalNB:18
msgid "**fit_prior**"
msgstr "**fit_prior**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.naive_bayes.CategoricalNB:17
msgid "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
msgstr "Si se aprenden las probabilidades a priori de la clase o no. Si es falso, se utilizará una prioridad uniforme."

#: of sklearn.naive_bayes.CategoricalNB:22
msgid "**class_prior**"
msgstr "**class_prior**"

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr "array-like de forma (n_classes), default=None"

#: of sklearn.naive_bayes.CategoricalNB:21
msgid "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
msgstr "Probabilidades a priori de las clases. Si se especifica, las probabilidades previas no se ajustan en función de los datos."

#: of sklearn.naive_bayes.CategoricalNB:37
msgid "**min_categories**"
msgstr "**min_categories**"

#: of
msgid "int or array-like of shape (n_features,), default=None"
msgstr "entero o array-like de forma (n_features,), default=None"

#: of sklearn.naive_bayes.CategoricalNB:25
msgid "Minimum number of categories per feature."
msgstr "Número mínimo de categorías por característica."

#: of sklearn.naive_bayes.CategoricalNB:27
msgid "integer: Sets the minimum number of categories per feature to `n_categories` for each features."
msgstr "entero: Establece el número mínimo de categorías por característica a `n_categories` para cada característica."

#: of sklearn.naive_bayes.CategoricalNB:29
msgid "array-like: shape (n_features,) where `n_categories[i]` holds the minimum number of categories for the ith column of the input."
msgstr "array-like: forma (n_features,) donde `n_categories[i]` contiene el número mínimo de categorías para la i-ésima columna de la entrada."

#: of sklearn.naive_bayes.CategoricalNB:31
msgid "None (default): Determines the number of categories automatically from the training data."
msgstr "None (predeterminado): Determina el número de categorías automáticamente a partir de los datos de entrenamiento."

#: of sklearn.naive_bayes.CategoricalNB
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.naive_bayes.CategoricalNB:44
msgid "**category_count_**"
msgstr "**category_count_**"

#: of
msgid "list of arrays of shape (n_features,)"
msgstr "list de arrays de forma (n_features,)"

#: of sklearn.naive_bayes.CategoricalNB:42
msgid "Holds arrays of shape (n_classes, n_categories of respective feature) for each feature. Each array provides the number of samples encountered for each class and category of the specific feature."
msgstr "Contiene arreglos de forma (n_classes, n_categories de la característica respectiva) para cada característica. Cada arreglo proporciona el número de muestras encontradas para cada clase y categoría de la característica específica."

#: of sklearn.naive_bayes.CategoricalNB:48
msgid "**class_count_**"
msgstr "**class_count_**"

#: of
msgid "ndarray of shape (n_classes,)"
msgstr "ndarray de forma (n_classes,)"

#: of sklearn.naive_bayes.CategoricalNB:47
msgid "Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided."
msgstr "Número de muestras encontradas para cada clase durante el ajuste. Este valor es ponderado por el peso de la muestra cuando se proporciona."

#: of sklearn.naive_bayes.CategoricalNB:51
msgid "**class_log_prior_**"
msgstr "**class_log_prior_**"

#: of sklearn.naive_bayes.CategoricalNB:51
msgid "Smoothed empirical log probability for each class."
msgstr "Probabilidad logarítmica empírica suavizada para cada clase."

#: of sklearn.naive_bayes.CategoricalNB:54
msgid "**classes_**"
msgstr "**classes_**"

#: of sklearn.naive_bayes.CategoricalNB:54
msgid "Class labels known to the classifier"
msgstr "Etiquetas de clase conocidas por el clasificador"

#: of sklearn.naive_bayes.CategoricalNB:59
msgid "**feature_log_prob_**"
msgstr "**feature_log_prob_**"

#: of sklearn.naive_bayes.CategoricalNB:57
msgid "Holds arrays of shape (n_classes, n_categories of respective feature) for each feature. Each array provides the empirical log probability of categories given the respective feature and class, ``P(x_i|y)``."
msgstr "Contiene arreglos de forma (n_classes, n_categories de la característica respectiva) para cada característica. Cada arreglo proporciona la probabilidad logarítmica empírica de las categorías dada la característica y la clase respectivas, ``P(x_i|y)``."

#: of sklearn.naive_bayes.CategoricalNB:62
msgid "**n_features_**"
msgstr "**n_features_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.naive_bayes.CategoricalNB:62
msgid "Number of features of each sample."
msgstr "Número de características de cada muestra."

#: of sklearn.naive_bayes.CategoricalNB:74
msgid "**n_categories_**"
msgstr "**n_categories_**"

#: of
msgid "ndarray of shape (n_features,), dtype=np.int64"
msgstr "ndarray de forma (n_features,), dtype=np.int64"

#: of sklearn.naive_bayes.CategoricalNB:65
msgid "Number of categories for each feature. This value is inferred from the data or set by the minimum number of categories."
msgstr "Número de categorías para cada característica. Este valor es inferido de los datos o es establecido por el número mínimo de categorías."

#: of sklearn.naive_bayes.CategoricalNB:77
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.naive_bayes.CategoricalNB:90
msgid "Methods"
msgstr "Métodos"

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`fit <sklearn.naive_bayes.CategoricalNB.fit>`\\"
msgstr ":obj:`fit <sklearn.naive_bayes.CategoricalNB.fit>`\\"

#: of sklearn.naive_bayes.CategoricalNB.fit:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Fit Naive Bayes classifier according to X, y"
msgstr "Ajustar el clasificador Naive Bayes según X, y"

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`get_params <sklearn.naive_bayes.CategoricalNB.get_params>`\\"
msgstr ":obj:`get_params <sklearn.naive_bayes.CategoricalNB.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.naive_bayes.CategoricalNB.partial_fit>`\\"
msgstr ":obj:`partial_fit <sklearn.naive_bayes.CategoricalNB.partial_fit>`\\"

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Incremental fit on a batch of samples."
msgstr "Ajuste incremental en un lote de muestras."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict <sklearn.naive_bayes.CategoricalNB.predict>`\\"
msgstr ":obj:`predict <sklearn.naive_bayes.CategoricalNB.predict>`\\"

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict:2
msgid "Perform classification on an array of test vectors X."
msgstr "Realiza la clasificación en un arreglo de vectores de prueba X."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.naive_bayes.CategoricalNB.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.naive_bayes.CategoricalNB.predict_log_proba>`\\"

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_log_proba:2
msgid "Return log-probability estimates for the test vector X."
msgstr "Devuelve estimaciones de probabilidad logarítmica para el vector de prueba X."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.naive_bayes.CategoricalNB.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.naive_bayes.CategoricalNB.predict_proba>`\\"

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_proba:2
msgid "Return probability estimates for the test vector X."
msgstr "Devuelve estimaciones de probabilidad para el vector de prueba X."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`score <sklearn.naive_bayes.CategoricalNB.score>`\\"
msgstr ":obj:`score <sklearn.naive_bayes.CategoricalNB.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos de prueba y las etiquetas dados."

#: of sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid ":obj:`set_params <sklearn.naive_bayes.CategoricalNB.set_params>`\\"
msgstr ":obj:`set_params <sklearn.naive_bayes.CategoricalNB.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.naive_bayes.CategoricalNB:101:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.naive_bayes.CategoricalNB.fit:14
#: sklearn.naive_bayes.CategoricalNB.partial_fit:24
#: sklearn.naive_bayes._BaseNB.predict:8
#: sklearn.naive_bayes._BaseNB.predict_log_proba:8
#: sklearn.naive_bayes._BaseNB.predict_proba:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.naive_bayes.CategoricalNB.fit:8
#: sklearn.naive_bayes.CategoricalNB.partial_fit:18
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features. Here, each feature of X is assumed to be from a different categorical distribution. It is further assumed that all categories of each feature are represented by the numbers 0, ..., n - 1, where n refers to the total number of categories for the given feature. This can, for instance, be achieved with the help of OrdinalEncoder."
msgstr "Vectores de entrenamiento, donde n_samples es el número de muestras y n_features es el número de características. Aquí, se supone que cada característica de X pertenece a una distribución categórica diferente. Además, se supone que todas las categorías de cada característica están representadas por los números 0, ..., n - 1, donde n se refiere al número total de categorías para la característica dada. Esto puede lograrse, por ejemplo, con la ayuda de OrdinalEncoder."

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.naive_bayes.CategoricalNB.fit:17
#: sklearn.naive_bayes.CategoricalNB.partial_fit:27
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.naive_bayes.CategoricalNB.fit:17
#: sklearn.naive_bayes.CategoricalNB.partial_fit:27
msgid "Target values."
msgstr "Valores objetivo."

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.naive_bayes.CategoricalNB.fit:20
#: sklearn.naive_bayes.CategoricalNB.partial_fit:36
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.naive_bayes.CategoricalNB.fit:20
#: sklearn.naive_bayes.CategoricalNB.partial_fit:36
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr "Ponderaciones aplicadas a las muestras individuales (1. para las no ponderadas)."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.CategoricalNB.fit
#: sklearn.naive_bayes.CategoricalNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.naive_bayes.CategoricalNB.fit:36
#: sklearn.naive_bayes.CategoricalNB.partial_fit:52
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los sub objetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:4
msgid "This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning."
msgstr "Se espera que este método sea llamado varias veces consecutivamente en diferentes trozos de un conjunto de datos para implementar el aprendizaje fuera del núcleo o en línea."

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:8
msgid "This is especially useful when the whole dataset is too big to fit in memory at once."
msgstr "Esto es especialmente útil cuando todo el conjunto de datos es demasiado grande para caber en la memoria de una sola vez."

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:11
msgid "This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead."
msgstr "Este método tiene una cierta sobrecarga de rendimiento, por lo que es mejor llamar a partial_fit en porciones de datos tan grandes como sea posible (siempre que se ajusten al presupuesto de memoria) para ocultar la sobrecarga."

#: of
msgid "array-like of shape (n_samples)"
msgstr "array-like de forma (n_samples)"

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:33
msgid "**classes**"
msgstr "**classes**"

#: of
msgid "array-like of shape (n_classes), default=None"
msgstr "array-like de forma (n_classes), default=None"

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:30
msgid "List of all the classes that can possibly appear in the y vector."
msgstr "Lista de todas las clases que pueden aparecer en el vector y."

#: of sklearn.naive_bayes.CategoricalNB.partial_fit:32
msgid "Must be provided at the first call to partial_fit, can be omitted in subsequent calls."
msgstr "Debe proporcionarse en la primera llamada a partial_fit, puede omitirse en las invocaciones posteriores."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples_X, n_features)"

#: of sklearn.naive_bayes._BaseNB.predict:24
#: sklearn.naive_bayes._BaseNB.predict_log_proba:26
#: sklearn.naive_bayes._BaseNB.predict_proba:26
msgid "**C**"
msgstr "**C**"

#: of
msgid "ndarray of shape (n_samples,)"
msgstr "ndarray de forma (n_samples,)"

#: of sklearn.naive_bayes._BaseNB.predict:13
msgid "Predicted target values for X"
msgstr "Valores objetivo predichos para X"

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr "array-like de forma (n_samples, n_classes)"

#: of sklearn.naive_bayes._BaseNB.predict_log_proba:13
msgid "Returns the log-probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr "Devuelve la probabilidad logarítmica de las muestras para cada clase del modelo. Las columnas corresponden a las clases ordenadas, tal y como aparecen en el atributo :term:`classes_`."

#: of sklearn.naive_bayes._BaseNB.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr "Devuelve la probabilidad de las muestras para cada clase del modelo. Las columnas corresponden a las clases ordenadas, tal y como aparecen en el atributo :term:`classes_`."

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr "En la clasificación multietiqueta, se trata de la precisión del subconjunto que es una métrica rigurosa, ya que se requiere para cada muestra que cada conjunto de etiquetas sea predicho correctamente."

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas True para `X`."

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderaciones de la muestra."

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto con estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia de estimador."

