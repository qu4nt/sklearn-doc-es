msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-05 15:09\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.Lars.po\n"
"X-Crowdin-File-ID: 5210\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.Lars.rst:2
msgid ":mod:`sklearn.linear_model`.Lars"
msgstr ":mod:`sklearn.linear_model`.Lars"

#: of sklearn.linear_model._least_angle.Lars:2
msgid "Least Angle Regression model a.k.a. LAR"
msgstr "Modelo de Regresión de Ángulo Mínimo también conocido como LAR"

#: of sklearn.linear_model._least_angle.Lars:4
msgid "Read more in the :ref:`User Guide <least_angle_regression>`."
msgstr "Más información en el :ref:`Manual de usuario <least_angle_regression>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars
#: sklearn.linear_model._least_angle.Lars.fit
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.linear_model._least_angle.Lars:11
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._least_angle.Lars:9
msgid "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr "Si se calcula el intercepto para este modelo. Si se establece en false, no se utilizará ningún intercepto en los cálculos (es decir, se espera que los datos estén centrados)."

#: of sklearn.linear_model._least_angle.Lars:14
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "bool or int, default=False"
msgstr "bool o int, default=False"

#: of sklearn.linear_model._least_angle.Lars:14
msgid "Sets the verbosity amount."
msgstr "Establece la cantidad de verbosidad."

#: of sklearn.linear_model._least_angle.Lars:22
msgid "**normalize**"
msgstr "**normalize**"

#: of sklearn.linear_model._least_angle.Lars:17
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr "Este parámetro es ignorado cuando ``fit_intercept`` se establece como False. Si es True, los regresores X serán normalizados antes de la regresión restando la media y dividiendo por la norma l2. Si deseas estandarizar, por favor utiliza :class:`~sklearn.preprocessing.StandardScaler` antes de llamar a ``fit`` en un estimador con ``normalize=False``."

#: of sklearn.linear_model._least_angle.Lars:27
msgid "**precompute**"
msgstr "**precompute**"

#: of
msgid "bool, 'auto' or array-like , default='auto'"
msgstr "bool, 'auto' o array-like , default='auto'"

#: of sklearn.linear_model._least_angle.Lars:25
msgid "Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument."
msgstr "Si se utiliza una matriz de Gram precalculada para acelerar los cálculos. Si se establece como ``'auto'`` podemos decidir. La matriz de Gram también se puede pasar como argumento."

#: of sklearn.linear_model._least_angle.Lars:30
msgid "**n_nonzero_coefs**"
msgstr "**n_nonzero_coefs**"

#: of
msgid "int, default=500"
msgstr "int, default=500"

#: of sklearn.linear_model._least_angle.Lars:30
msgid "Target number of non-zero coefficients. Use ``np.inf`` for no limit."
msgstr "Número objetivo de coeficientes distintos de cero. Utilice ``np.inf`` para no tener límite."

#: of sklearn.linear_model._least_angle.Lars:37
msgid "**eps**"
msgstr "**eps**"

#: of
msgid "float, default=np.finfo(float).eps"
msgstr "float, default=np.finfo(float).eps"

#: of sklearn.linear_model._least_angle.Lars:33
msgid "The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the ``tol`` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization."
msgstr "La regularización de máquina-precisión en el cálculo de los factores diagonales de Cholesky. Aumenta este parámetro para sistemas muy mal condicionados. A diferencia del parámetro ``tol`` en algunos algoritmos basados en la optimización iterativa, este parámetro no controla la tolerancia de la optimización."

#: of sklearn.linear_model._least_angle.Lars:40
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._least_angle.Lars:40
msgid "If ``True``, X will be copied; else, it may be overwritten."
msgstr "Si es ``True``, X se copiará; si no, puede sobrescribirse."

#: of sklearn.linear_model._least_angle.Lars:46
msgid "**fit_path**"
msgstr "**fit_path**"

#: of sklearn.linear_model._least_angle.Lars:43
msgid "If True the full path is stored in the ``coef_path_`` attribute. If you compute the solution for a large problem or many targets, setting ``fit_path`` to ``False`` will lead to a speedup, especially with a small alpha."
msgstr "Si es True, la ruta completa se almacena en el atributo ``coef_path_``. Si calculas la solución para un problema grande o muchos objetivos, establecer ``fit_path`` como ``False`` conducirá a una aceleración, especialmente con un alfa pequeño."

#: of sklearn.linear_model._least_angle.Lars:53
msgid "**jitter**"
msgstr "**jitter**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.linear_model._least_angle.Lars:49
msgid "Upper bound on a uniform noise parameter to be added to the `y` values, to satisfy the model's assumption of one-at-a-time computations. Might help with stability."
msgstr "Límite superior de un parámetro de ruido uniforme que se añadirá a los valores de `y`, para satisfacer la suposición del modelo de cálculos de uno en uno. Podría ayudar a la estabilidad."

#: of sklearn.linear_model._least_angle.Lars:63
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "entero, instancia de RandomState o None, default=None"

#: of sklearn.linear_model._least_angle.Lars:56
msgid "Determines random number generation for jittering. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`. Ignored if `jitter` is None."
msgstr "Determina la generación de números aleatorios para el jittering. Pasa un número entero (int) para una salida reproducible a través de múltiples llamadas a la función. Véase :term:`Glosario <random_state>`. Se ignora si `jitter` es None."

#: of sklearn.linear_model._least_angle.Lars
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._least_angle.Lars:72
msgid "**alphas_**"
msgstr "**alphas_**"

#: of
msgid "array-like of shape (n_alphas + 1,) or list of such arrays"
msgstr "array-like de forma (n_alphas + 1,) o lista de dichos arreglos"

#: of sklearn.linear_model._least_angle.Lars:68
msgid "Maximum of covariances (in absolute value) at each iteration. ``n_alphas`` is either ``max_iter``, ``n_features`` or the number of nodes in the path with ``alpha >= alpha_min``, whichever is smaller. If this is a list of array-like, the length of the outer list is `n_targets`."
msgstr "Máximo de covarianzas (en valor absoluto) en cada iteración. ``n_alphas`` es ``max_iter``, ``n_features`` o el número de nodos de la ruta con ``alpha >= alpha_min``, lo que sea menor. Si se trata de una lista de tipo array, la longitud de la lista exterior es `n_targets`."

#: of sklearn.linear_model._least_angle.Lars:76
msgid "**active_**"
msgstr "**active_**"

#: of
msgid "list of shape (n_alphas,) or list of such lists"
msgstr "lista(list) de forma (n_alphas,) o lista de tales listas"

#: of sklearn.linear_model._least_angle.Lars:75
msgid "Indices of active variables at the end of the path. If this is a list of list, the length of the outer list is `n_targets`."
msgstr "Índices de las variables activas al final de la ruta. Si se trata de una lista de listas, la longitud de la lista exterior es `n_targets`."

#: of sklearn.linear_model._least_angle.Lars:81
msgid "**coef_path_**"
msgstr "**coef_path_**"

#: of
msgid "array-like of shape (n_features, n_alphas + 1) or list             of such arrays"
msgstr "array-like de forma (n_features, n_alphas + 1) o lista             de dichos arrays"

#: of sklearn.linear_model._least_angle.Lars:79
msgid "The varying values of the coefficients along the path. It is not present if the ``fit_path`` parameter is ``False``. If this is a list of array-like, the length of the outer list is `n_targets`."
msgstr "Los valores variables de los coeficientes a lo largo de la ruta. No está presente si el parámetro ``fit_path`` es ``False``. Si se trata de una lista de tipo array, la longitud de la lista exterior es `n_targets`."

#: of sklearn.linear_model._least_angle.Lars:84
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "array-like of shape (n_features,) or (n_targets, n_features)"
msgstr "array-like de forma (n_features,) o (n_targets, n_features)"

#: of sklearn.linear_model._least_angle.Lars:84
msgid "Parameter vector (w in the formulation formula)."
msgstr "Vector de parámetros (w en la fórmula de formulación)."

#: of sklearn.linear_model._least_angle.Lars:87
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "float or array-like of shape (n_targets,)"
msgstr "float o array-like de forma (n_targets,)"

#: of sklearn.linear_model._least_angle.Lars:87
msgid "Independent term in decision function."
msgstr "Término independiente en la función de decisión."

#: of sklearn.linear_model._least_angle.Lars:94
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "array-like or int"
msgstr "array-like o int"

#: of sklearn.linear_model._least_angle.Lars:90
msgid "The number of iterations taken by lars_path to find the grid of alphas for each target."
msgstr "El número de iteraciones que toma lars_path para encontrar la cuadrícula de alfas para cada objetivo."

#: of sklearn.linear_model._least_angle.Lars:99
msgid ":obj:`lars_path`, :obj:`LarsCV`"
msgstr ":obj:`lars_path`, :obj:`LarsCV`"

#: of sklearn.linear_model._least_angle.Lars:101
msgid ":obj:`sklearn.decomposition.sparse_encode`"
msgstr ":obj:`sklearn.decomposition.sparse_encode`"

#: of sklearn.linear_model._least_angle.Lars:107
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._least_angle.Lars:116
msgid "Methods"
msgstr "Métodos"

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.Lars.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.Lars.fit>`\\"

#: of sklearn.linear_model._least_angle.Lars.fit:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Fit the model using X, y as training data."
msgstr "Ajusta el modelo utilizando X, y como datos de entrenamiento."

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.Lars.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.Lars.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.Lars.predict>`\\"
msgstr ":obj:`predict <sklearn.linear_model.Lars.predict>`\\"

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Predict using the linear model."
msgstr "Predice utilizando el modelo lineal."

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.Lars.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.Lars.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr "Devuelve el coeficiente de determinación :math:`R^2` de la predicción."

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.Lars.set_params>`\\"
msgstr ":obj:`set_params <sklearn.linear_model.Lars.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._least_angle.Lars.fit:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.linear_model._least_angle.Lars.fit:8
msgid "Training data."
msgstr "Datos de entrenamiento."

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._least_angle.Lars.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_targets)"

#: of sklearn.linear_model._least_angle.Lars.fit:11
msgid "Target values."
msgstr "Valores objetivo."

#: of sklearn.linear_model._least_angle.Lars.fit:15
msgid "**Xy**"
msgstr "**Xy**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_targets),                 default=None"

#: of sklearn.linear_model._least_angle.Lars.fit:14
msgid "Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed."
msgstr "Xy = np.dot(X.T, y) que puede ser precalculado. Es útil sólo cuando la matriz de Gram está precalculada."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars.fit
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._least_angle.Lars.fit:31
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr "object"

#: of sklearn.linear_model._least_angle.Lars.fit:20
msgid "returns an instance of self."
msgstr "devuelve una instancia de sí misma."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr "array-like o sparse matrix, shape (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr "Muestras."

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "array, shape (n_samples,)"
msgstr "array, shape (n_samples,)"

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr "Devuelve los valores predichos."

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr "El coeficiente :math:`R^2` se define como :math:`(1 - \\frac{u}{v})`, donde :math:`u` es la suma de cuadrados de los residuos ``((y_true - y_pred) ** 2).sum()`` y :math:`v` es la suma total de cuadrados ``((y_true - y_true.mean()) ** 2).sum()``. La mejor puntuación posible es 1.0 y puede ser negativa (porque el modelo puede ser arbitrariamente peor). Un modelo constante que siempre predice el valor esperado de `y`, sin tener en cuenta las características de entrada, obtendría una puntuación :math:`R^2` de 0.0."

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr "Muestras de prueba. Para algunos estimadores puede ser una matriz de núcleo precalculada o una lista de objetos genéricos en su lugar con forma ``(n_samples, n_samples_fitted)``, donde ``n_samples_fitted`` es el número de muestras utilizadas en el ajuste para el estimador."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr "Valores verdaderos para X`."

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr "Ponderaciones de la muestra."

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ":math:`R^2` de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr "Notas"

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr "La puntuación :math:`R^2` utilizada al llamar a ``score`` en un regresor utiliza ``multioutput='uniform_average'`` desde la versión 0.23 para mantener la consistencia con el valor predeterminado de :func:`~sklearn.metrics.r2_score`. Esto influye en el método ``score`` de todos los regresores de salida múltiple (excepto para :class:`~sklearn.multioutput.MultiOutputRegressor`)."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto con estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

