msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-04-15 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.svm.LinearSVC.po\n"
"X-Crowdin-File-ID: 3746\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.svm.LinearSVC.rst:2
msgid ":mod:`sklearn.svm`.LinearSVC"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:2
msgid "Linear Support Vector Classification."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:4
msgid "Similar to SVC with parameter kernel='linear', but implemented in terms of liblinear rather than libsvm, so it has more flexibility in the choice of penalties and loss functions and should scale better to large numbers of samples."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:9
msgid "This class supports both dense and sparse input and the multiclass support is handled according to a one-vs-the-rest scheme."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:12
msgid "Read more in the :ref:`User Guide <svm_classification>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.svm._classes.LinearSVC sklearn.svm._classes.LinearSVC.fit
msgid "Parameters"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:19
msgid "**penalty**"
msgstr ""

#: of
msgid "{'l1', 'l2'}, default='l2'"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:17
msgid "Specifies the norm used in the penalization. The 'l2' penalty is the standard used in SVC. The 'l1' leads to ``coef_`` vectors that are sparse."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:25
msgid "**loss**"
msgstr ""

#: of
msgid "{'hinge', 'squared_hinge'}, default='squared_hinge'"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:22
msgid "Specifies the loss function. 'hinge' is the standard SVM loss (used e.g. by the SVC class) while 'squared_hinge' is the square of the hinge loss. The combination of ``penalty='l1'`` and ``loss='hinge'`` is not supported."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:29
msgid "**dual**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:28
msgid "Select the algorithm to either solve the dual or primal optimization problem. Prefer dual=False when n_samples > n_features."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:32
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-4"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:32
msgid "Tolerance for stopping criteria."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:24
#: sklearn.svm._classes.LinearSVC:36
msgid "**C**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:35
msgid "Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:47
msgid "**multi_class**"
msgstr ""

#: of
msgid "{'ovr', 'crammer_singer'}, default='ovr'"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:39
msgid "Determines the multi-class strategy if `y` contains more than two classes. ``\"ovr\"`` trains n_classes one-vs-rest classifiers, while ``\"crammer_singer\"`` optimizes a joint objective over all classes. While `crammer_singer` is interesting from a theoretical perspective as it is consistent, it is seldom used in practice as it rarely leads to better accuracy and is more expensive to compute. If ``\"crammer_singer\"`` is chosen, the options loss, penalty and dual will be ignored."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:52
msgid "**fit_intercept**"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:50
msgid "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be already centered)."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:63
msgid "**intercept_scaling**"
msgstr ""

#: of
msgid "float, default=1"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:55
msgid "When self.fit_intercept is True, instance vector x becomes ``[x, self.intercept_scaling]``, i.e. a \"synthetic\" feature with constant value equals to intercept_scaling is appended to the instance vector. The intercept becomes intercept_scaling * synthetic feature weight Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:71
msgid "**class_weight**"
msgstr ""

#: of
msgid "dict or 'balanced', default=None"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:66
msgid "Set the parameter C of class i to ``class_weight[i]*C`` for SVC. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:76
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:74
msgid "Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in liblinear that, if enabled, may not work properly in a multithreaded context."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:84
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:79
msgid "Controls the pseudo random number generation for shuffling the data for the dual coordinate descent (if ``dual=True``). When ``dual=False`` the underlying implementation of :class:`LinearSVC` is not random and ``random_state`` has no effect on the results. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:90
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:87
msgid "The maximum number of iterations to be run."
msgstr ""

#: of sklearn.svm._classes.LinearSVC
msgid "Attributes"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:99
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features) if n_classes == 2             else (n_classes, n_features)"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:95
msgid "Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:98
msgid "``coef_`` is a readonly property derived from ``raw_coef_`` that follows the internal memory layout of liblinear."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:102
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (1,) if n_classes == 2 else (n_classes,)"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:102
msgid "Constants in decision function."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:105
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:105
msgid "The unique classes labels."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:111
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:108
msgid "Maximum number of iterations run across all classes."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:116
msgid ":obj:`SVC`"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:117
msgid "Implementation of Support Vector Machine classifier using libsvm: the kernel can be non-linear but its SMO algorithm does not scale to large number of samples as LinearSVC does. Furthermore SVC multi-class mode is implemented using one vs one scheme while LinearSVC uses one vs the rest. It is possible to implement one vs the rest with SVC by using the :class:`~sklearn.multiclass.OneVsRestClassifier` wrapper. Finally SVC can fit dense data without memory copy if the input is C-contiguous. Sparse data will still incur memory copy though."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:118
msgid ":obj:`sklearn.linear_model.SGDClassifier`"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:119
msgid "SGDClassifier can optimize the same cost function as LinearSVC by adjusting the penalty and loss parameters. In addition it requires less memory, allows incremental (online) learning, and implements various loss functions and regularization regimes."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:24
#: sklearn.svm._classes.LinearSVC:123
msgid "Notes"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:124
msgid "The underlying C implementation uses a random number generator to select features when fitting the model. It is thus not uncommon to have slightly different results for the same input data. If that happens, try with a smaller ``tol`` parameter."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:129
msgid "The underlying implementation, liblinear, uses a sparse internal representation for the data that will incur a memory copy."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:132
msgid "Predict output may not match that of standalone liblinear in certain cases. See :ref:`differences from liblinear <liblinear_differences>` in the narrative documentation."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:137
msgid "References"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:138
msgid "`LIBLINEAR: A Library for Large Linear Classification <https://www.csie.ntu.edu.tw/~cjlin/liblinear/>`__"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:146
msgid "Examples"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:167
msgid "Methods"
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`decision_function <sklearn.svm.LinearSVC.decision_function>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Predict confidence scores for samples."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`densify <sklearn.svm.LinearSVC.densify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Convert coefficient matrix to dense array format."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`fit <sklearn.svm.LinearSVC.fit>`\\"
msgstr ""

#: of sklearn.svm._classes.LinearSVC.fit:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Fit the model according to the given training data."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`get_params <sklearn.svm.LinearSVC.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`predict <sklearn.svm.LinearSVC.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Predict class labels for samples in X."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`score <sklearn.svm.LinearSVC.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`set_params <sklearn.svm.LinearSVC.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid ":obj:`sparsify <sklearn.svm.LinearSVC.sparsify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:2
#: sklearn.svm._classes.LinearSVC:178:<autosummary>:1
msgid "Convert coefficient matrix to sparse format."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:4
msgid "The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
#: sklearn.svm._classes.LinearSVC.fit:9
msgid "**X**"
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._base.SparseCoefMixin.densify
#: sklearn.linear_model._base.SparseCoefMixin.sparsify
#: sklearn.svm._classes.LinearSVC.fit
msgid "Returns"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:28
msgid "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:15
msgid "Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:4
msgid "Converts the ``coef_`` member (back) to a numpy.ndarray. This is the default format of ``coef_`` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:24
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:21
msgid "self"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:13
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:14
msgid "Fitted estimator."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.svm._classes.LinearSVC.fit:8
msgid "Training vector, where n_samples in the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.svm._classes.LinearSVC.fit:12
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.svm._classes.LinearSVC.fit:12
msgid "Target vector relative to X."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.svm._classes.LinearSVC.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.svm._classes.LinearSVC.fit:15
msgid "Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.svm._classes.LinearSVC.fit:35
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.svm._classes.LinearSVC.fit:24
msgid "An instance of the estimator."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:4
msgid "Converts the ``coef_`` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:8
msgid "The ``intercept_`` member is not converted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:25
#, python-format
msgid "For non-sparse models, i.e. when there are not many zeros in ``coef_``, this may actually *increase* memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with ``(coef_ == 0).sum()``, must be more than 50% for this to provide significant benefits."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:31
msgid "After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify."
msgstr ""

#: ../modules/generated/sklearn.svm.LinearSVC.examples:4
msgid "Examples using ``sklearn.svm.LinearSVC``"
msgstr ""

#: ../modules/generated/sklearn.svm.LinearSVC.examples:15
#: ../modules/generated/sklearn.svm.LinearSVC.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection_pipeline.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_kernel_approximation_plot_scalable_poly_kernels.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_approximation.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_det.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_grid_search_refit_callable.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_precision_recall.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_svm_plot_linearsvc_support_vectors.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_svm_plot_iris_svc.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_svm_plot_svm_scale_c.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
#~ msgstr ""

