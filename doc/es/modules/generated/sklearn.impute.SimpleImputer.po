msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-05-18 21:47\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.impute.SimpleImputer.po\n"
"X-Crowdin-File-ID: 5604\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.impute.SimpleImputer.rst:2
msgid ":mod:`sklearn.impute`.SimpleImputer"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:2
msgid "Imputation transformer for completing missing values."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:4
msgid "Read more in the :ref:`User Guide <impute>`."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:6
msgid "`SimpleImputer` replaces the previous `sklearn.preprocessing.Imputer` estimator which is now removed."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.impute._base.SimpleImputer sklearn.impute._base.SimpleImputer.fit
#: sklearn.impute._base.SimpleImputer.inverse_transform
#: sklearn.impute._base.SimpleImputer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:16
msgid "**missing_values**"
msgstr ""

#: of
msgid "int, float, str, np.nan or None, default=np.nan"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:13
msgid "The placeholder for the missing values. All occurrences of `missing_values` will be imputed. For pandas' dataframes with nullable integer dtypes with missing values, `missing_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:32
msgid "**strategy**"
msgstr ""

#: of
msgid "string, default='mean'"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:19
msgid "The imputation strategy."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:21
msgid "If \"mean\", then replace missing values using the mean along each column. Can only be used with numeric data."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:23
msgid "If \"median\", then replace missing values using the median along each column. Can only be used with numeric data."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:25
msgid "If \"most_frequent\", then replace missing using the most frequent value along each column. Can be used with strings or numeric data. If there is more than one such value, only the smallest is returned."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:28
msgid "If \"constant\", then replace missing values with fill_value. Can be used with strings or numeric data."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:31
msgid "strategy=\"constant\" for fixed value imputation."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:38
msgid "**fill_value**"
msgstr ""

#: of
msgid "string or numerical value, default=None"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:35
msgid "When strategy == \"constant\", fill_value is used to replace all occurrences of missing_values. If left to the default, fill_value will be 0 when imputing numerical data and \"missing_value\" for strings or object data types."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:41
msgid "**verbose**"
msgstr ""

#: of
msgid "integer, default=0"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:41
msgid "Controls the verbosity of the imputer."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:50
msgid "**copy**"
msgstr ""

#: of
msgid "boolean, default=True"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:44
msgid "If True, a copy of X will be created. If False, imputation will be done in-place whenever possible. Note that, in the following cases, a new copy will always be made, even if `copy=False`:"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:48
msgid "If X is not an array of floating values;"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:49
msgid "If X is encoded as a CSR matrix;"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:50
msgid "If add_indicator=True."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:61
msgid "**add_indicator**"
msgstr ""

#: of
msgid "boolean, default=False"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:53
msgid "If True, a :class:`MissingIndicator` transform will stack onto output of the imputer's transform. This allows a predictive estimator to account for missingness despite imputation. If a feature has no missing values at fit/train time, the feature won't appear on the missing indicator even if there are missing values at transform/test time."
msgstr ""

#: of sklearn.impute._base.SimpleImputer
msgid "Attributes"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:69
msgid "**statistics_**"
msgstr ""

#: of
msgid "array of shape (n_features,)"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:66
msgid "The imputation fill value for each feature. Computing statistics can result in `np.nan` values. During :meth:`transform`, features corresponding to `np.nan` statistics will be discarded."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:76
msgid "**indicator_** : :class:`~sklearn.impute.MissingIndicator`"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:75
msgid "MissingIndicator"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:72
msgid "Indicator used to add binary indicators for missing values. ``None`` if add_indicator is False."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:81
msgid ":obj:`IterativeImputer`"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:82
msgid "Multivariate imputation of missing values."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:86
msgid "Notes"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:87
msgid "Columns which only contained missing values at :meth:`fit` are discarded upon :meth:`transform` if strategy is not \"constant\"."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:92
msgid "Examples"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:105
msgid "Methods"
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`fit <sklearn.impute.SimpleImputer.fit>`\\"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.fit:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Fit the imputer on X."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.impute.SimpleImputer.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`get_params <sklearn.impute.SimpleImputer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.impute.SimpleImputer.inverse_transform>`\\"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Convert the data back to the original representation."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`set_params <sklearn.impute.SimpleImputer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid ":obj:`transform <sklearn.impute.SimpleImputer.transform>`\\"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.transform:2
#: sklearn.impute._base.SimpleImputer:114:<autosummary>:1
msgid "Impute all missing values in X."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.impute._base.SimpleImputer.fit:9
#: sklearn.impute._base.SimpleImputer.inverse_transform:20
#: sklearn.impute._base.SimpleImputer.transform:20
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix}, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.fit:8
msgid "Input data, where ``n_samples`` is the number of samples and ``n_features`` is the number of features."
msgstr "Datos de entrada, donde ``n_samples`` es el número de muestras y ``n_features`` es el número de características."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.impute._base.SimpleImputer.fit
#: sklearn.impute._base.SimpleImputer.inverse_transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.impute._base.SimpleImputer.fit:25
msgid "**self**"
msgstr ""

#: of
msgid "SimpleImputer"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:4
msgid "Inverts the `transform` operation performed on an array. This operation can only be performed after :class:`SimpleImputer` is instantiated with `add_indicator=True`."
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:8
msgid "Note that ``inverse_transform`` can only invert the transform in features that have binary indicators for missing values. If a feature has no missing values at ``fit`` time, the feature won't have a binary indicator, and the imputation done at ``transform`` time won't be inverted."
msgstr ""

#: of
msgid "array-like of shape                 (n_samples, n_features + n_features_missing_indicator)"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:19
msgid "The imputed data to be reverted to original data. It has to be an augmented array of imputed data and the missing indicator mask."
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:37
msgid "**X_original**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.impute._base.SimpleImputer.inverse_transform:25
msgid "The original X with missing values as it was prior to imputation."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.impute._base.SimpleImputer.transform:8
msgid "The input data to complete."
msgstr ""

#: ../modules/generated/sklearn.impute.SimpleImputer.examples:4
msgid "Examples using ``sklearn.impute.SimpleImputer``"
msgstr ""

#: ../modules/generated/sklearn.impute.SimpleImputer.examples:15
#: ../modules/generated/sklearn.impute.SimpleImputer.examples:23
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
msgstr ""

#: ../modules/generated/sklearn.impute.SimpleImputer.examples:34
#: ../modules/generated/sklearn.impute.SimpleImputer.examples:42
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
msgstr ""

#: ../modules/generated/sklearn.impute.SimpleImputer.examples:53
#: ../modules/generated/sklearn.impute.SimpleImputer.examples:61
msgid ":ref:`sphx_glr_auto_examples_impute_plot_iterative_imputer_variants_comparison.py`"
msgstr ""

#: ../modules/generated/sklearn.impute.SimpleImputer.examples:72
#: ../modules/generated/sklearn.impute.SimpleImputer.examples:80
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_impute_plot_missing_values.py`"
#~ msgstr ""

