msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-04-15 06:11\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.decomposition.PCA.po\n"
"X-Crowdin-File-ID: 5122\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.decomposition.PCA.rst:2
msgid ":mod:`sklearn.decomposition`.PCA"
msgstr ""

#: of sklearn.decomposition._pca.PCA:2
msgid "Principal component analysis (PCA)."
msgstr ""

#: of sklearn.decomposition._pca.PCA:4
msgid "Linear dimensionality reduction using Singular Value Decomposition of the data to project it to a lower dimensional space. The input data is centered but not scaled for each feature before applying the SVD."
msgstr ""

#: of sklearn.decomposition._pca.PCA:8
msgid "It uses the LAPACK implementation of the full SVD or a randomized truncated SVD by the method of Halko et al. 2009, depending on the shape of the input data and the number of components to extract."
msgstr ""

#: of sklearn.decomposition._pca.PCA:12
msgid "It can also use the scipy.sparse.linalg ARPACK implementation of the truncated SVD."
msgstr ""

#: of sklearn.decomposition._pca.PCA:15
msgid "Notice that this class does not support sparse input. See :class:`TruncatedSVD` for an alternative with sparse data."
msgstr ""

#: of sklearn.decomposition._pca.PCA:18
msgid "Read more in the :ref:`User Guide <PCA>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.decomposition._base._BasePCA.inverse_transform
#: sklearn.decomposition._base._BasePCA.transform
#: sklearn.decomposition._pca.PCA sklearn.decomposition._pca.PCA.fit
#: sklearn.decomposition._pca.PCA.fit_transform
#: sklearn.decomposition._pca.PCA.score
#: sklearn.decomposition._pca.PCA.score_samples
msgid "Parameters"
msgstr ""

#: of sklearn.decomposition._pca.PCA:41
msgid "**n_components**"
msgstr ""

#: of
msgid "int, float or 'mle', default=None"
msgstr ""

#: of sklearn.decomposition._pca.PCA:23
msgid "Number of components to keep. if n_components is not set all components are kept::"
msgstr ""

#: of sklearn.decomposition._pca.PCA:28
msgid "If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's MLE is used to guess the dimension. Use of ``n_components == 'mle'`` will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``."
msgstr ""

#: of sklearn.decomposition._pca.PCA:32
msgid "If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components."
msgstr ""

#: of sklearn.decomposition._pca.PCA:36
msgid "If ``svd_solver == 'arpack'``, the number of components must be strictly less than the minimum of n_features and n_samples."
msgstr ""

#: of sklearn.decomposition._pca.PCA:39
msgid "Hence, the None case results in::"
msgstr ""

#: of sklearn.decomposition._pca.PCA:46
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.decomposition._pca.PCA:44
msgid "If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead."
msgstr ""

#: of sklearn.decomposition._pca.PCA:56
msgid "**whiten**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.decomposition._pca.PCA:49
msgid "When True (False by default) the `components_` vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances."
msgstr ""

#: of sklearn.decomposition._pca.PCA:53
msgid "Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions."
msgstr ""

#: of sklearn.decomposition._pca.PCA:76
msgid "**svd_solver**"
msgstr ""

#: of
msgid "{'auto', 'full', 'arpack', 'randomized'}, default='auto'"
msgstr ""

#: of sklearn.decomposition._pca.PCA:64
msgid "If auto :"
msgstr ""

#: of sklearn.decomposition._pca.PCA:60
#, python-format
msgid "The solver is selected by a default policy based on `X.shape` and `n_components`: if the input data is larger than 500x500 and the number of components to extract is lower than 80% of the smallest dimension of the data, then the more efficient 'randomized' method is enabled. Otherwise the exact full SVD is computed and optionally truncated afterwards."
msgstr ""

#: of sklearn.decomposition._pca.PCA:67
msgid "If full :"
msgstr ""

#: of sklearn.decomposition._pca.PCA:67
msgid "run exact full SVD calling the standard LAPACK solver via `scipy.linalg.svd` and select the components by postprocessing"
msgstr ""

#: of sklearn.decomposition._pca.PCA:71
msgid "If arpack :"
msgstr ""

#: of sklearn.decomposition._pca.PCA:70
msgid "run SVD truncated to n_components calling ARPACK solver via `scipy.sparse.linalg.svds`. It requires strictly 0 < n_components < min(X.shape)"
msgstr ""

#: of sklearn.decomposition._pca.PCA:74
msgid "If randomized :"
msgstr ""

#: of sklearn.decomposition._pca.PCA:74
msgid "run randomized SVD by the method of Halko et al."
msgstr ""

#: of sklearn.decomposition._pca.PCA:82
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.decomposition._pca.PCA:79
msgid "Tolerance for singular values computed by svd_solver == 'arpack'. Must be of range [0.0, infinity)."
msgstr ""

#: of sklearn.decomposition._pca.PCA:89
msgid "**iterated_power**"
msgstr ""

#: of
msgid "int or 'auto', default='auto'"
msgstr ""

#: of sklearn.decomposition._pca.PCA:85
msgid "Number of iterations for the power method computed by svd_solver == 'randomized'. Must be of range [0, infinity)."
msgstr ""

#: of sklearn.decomposition._pca.PCA:99
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.decomposition._pca.PCA:92
msgid "Used when the 'arpack' or 'randomized' solvers are used. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.decomposition._pca.PCA
msgid "Attributes"
msgstr ""

#: of sklearn.decomposition._pca.PCA:106
msgid "**components_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr ""

#: of sklearn.decomposition._pca.PCA:104
msgid "Principal axes in feature space, representing the directions of maximum variance in the data. The components are sorted by ``explained_variance_``."
msgstr ""

#: of sklearn.decomposition._pca.PCA:114
msgid "**explained_variance_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components,)"
msgstr ""

#: of sklearn.decomposition._pca.PCA:109
msgid "The amount of variance explained by each of the selected components."
msgstr ""

#: of sklearn.decomposition._pca.PCA:111
msgid "Equal to n_components largest eigenvalues of the covariance matrix of X."
msgstr ""

#: of sklearn.decomposition._pca.PCA:120
msgid "**explained_variance_ratio_**"
msgstr ""

#: of sklearn.decomposition._pca.PCA:117
msgid "Percentage of variance explained by each of the selected components."
msgstr ""

#: of sklearn.decomposition._pca.PCA:119
msgid "If ``n_components`` is not set then all components are stored and the sum of the ratios is equal to 1.0."
msgstr ""

#: of sklearn.decomposition._pca.PCA:127
msgid "**singular_values_**"
msgstr ""

#: of sklearn.decomposition._pca.PCA:123
msgid "The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space."
msgstr ""

#: of sklearn.decomposition._pca.PCA:132
msgid "**mean_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.decomposition._pca.PCA:130
msgid "Per-feature empirical mean, estimated from the training set."
msgstr ""

#: of sklearn.decomposition._pca.PCA:132
msgid "Equal to `X.mean(axis=0)`."
msgstr ""

#: of sklearn.decomposition._pca.PCA:139
msgid "**n_components_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.decomposition._pca.PCA:135
msgid "The estimated number of components. When n_components is set to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this number is estimated from input data. Otherwise it equals the parameter n_components, or the lesser value of n_features and n_samples if n_components is None."
msgstr ""

#: of sklearn.decomposition._pca.PCA:142
msgid "**n_features_**"
msgstr ""

#: of sklearn.decomposition._pca.PCA:142
msgid "Number of features in the training data."
msgstr ""

#: of sklearn.decomposition._pca.PCA:145
msgid "**n_samples_**"
msgstr ""

#: of sklearn.decomposition._pca.PCA:145
msgid "Number of samples in the training data."
msgstr ""

#: of sklearn.decomposition._pca.PCA:158
msgid "**noise_variance_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.decomposition._pca.PCA:148
msgid "The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See \"Pattern Recognition and Machine Learning\" by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples."
msgstr ""

#: of sklearn.decomposition._pca.PCA:154
msgid "Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X."
msgstr ""

#: of sklearn.decomposition._pca.PCA:163
msgid ":obj:`KernelPCA`"
msgstr ""

#: of sklearn.decomposition._pca.PCA:164
msgid "Kernel Principal Component Analysis."
msgstr ""

#: of sklearn.decomposition._pca.PCA:165
msgid ":obj:`SparsePCA`"
msgstr ""

#: of sklearn.decomposition._pca.PCA:166
msgid "Sparse Principal Component Analysis."
msgstr ""

#: of sklearn.decomposition._pca.PCA:167
msgid ":obj:`TruncatedSVD`"
msgstr ""

#: of sklearn.decomposition._pca.PCA:168
msgid "Dimensionality reduction using truncated SVD."
msgstr ""

#: of sklearn.decomposition._pca.PCA:169
msgid ":obj:`IncrementalPCA`"
msgstr ""

#: of sklearn.decomposition._pca.PCA:170
msgid "Incremental Principal Component Analysis."
msgstr ""

#: of sklearn.decomposition._pca.PCA:175
msgid "References"
msgstr ""

#: of sklearn.decomposition._pca.PCA:176
msgid "For n_components == 'mle', this class uses the method of *Minka, T. P. \"Automatic choice of dimensionality for PCA\". In NIPS, pp. 598-604*"
msgstr ""

#: of sklearn.decomposition._pca.PCA:179
msgid "Implements the probabilistic PCA model from: Tipping, M. E., and Bishop, C. M. (1999). \"Probabilistic principal component analysis\". Journal of the Royal Statistical Society: Series B (Statistical Methodology), 61(3), 611-622. via the score and score_samples methods. See http://www.miketipping.com/papers/met-mppca.pdf"
msgstr ""

#: of sklearn.decomposition._pca.PCA:186
msgid "For svd_solver == 'arpack', refer to `scipy.sparse.linalg.svds`."
msgstr ""

#: of sklearn.decomposition._pca.PCA:188
msgid "For svd_solver == 'randomized', see: *Halko, N., Martinsson, P. G., and Tropp, J. A. (2011). \"Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions\". SIAM review, 53(2), 217-288.* and also *Martinsson, P. G., Rokhlin, V., and Tygert, M. (2011). \"A randomized algorithm for the decomposition of matrices\". Applied and Computational Harmonic Analysis, 30(1), 47-68.*"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.transform:28
#: sklearn.decomposition._pca.PCA:202
msgid "Examples"
msgstr ""

#: of sklearn.decomposition._pca.PCA:231
msgid "Methods"
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.PCA.fit>`\\"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Fit the model with X."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.decomposition.PCA.fit_transform>`\\"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit_transform:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Fit the model with X and apply the dimensionality reduction on X."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`get_covariance <sklearn.decomposition.PCA.get_covariance>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Compute data covariance with the generative model."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`get_params <sklearn.decomposition.PCA.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`get_precision <sklearn.decomposition.PCA.get_precision>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Compute data precision matrix with the generative model."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.decomposition.PCA.inverse_transform>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Transform data back to its original space."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`score <sklearn.decomposition.PCA.score>`\\"
msgstr ""

#: of sklearn.decomposition._pca.PCA.score:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Return the average log-likelihood of all samples."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`score_samples <sklearn.decomposition.PCA.score_samples>`\\"
msgstr ""

#: of sklearn.decomposition._pca.PCA.score_samples:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Return the log-likelihood of each sample."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`set_params <sklearn.decomposition.PCA.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.PCA.transform>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.transform:2
#: sklearn.decomposition._pca.PCA:244:<autosummary>:1
msgid "Apply dimensionality reduction to X."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:10
#: sklearn.decomposition._base._BasePCA.transform:11
#: sklearn.decomposition._pca.PCA.fit:9
#: sklearn.decomposition._pca.PCA.fit_transform:9
#: sklearn.decomposition._pca.PCA.score:11
#: sklearn.decomposition._pca.PCA.score_samples:11
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit:8
#: sklearn.decomposition._pca.PCA.fit_transform:8
msgid "Training data, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit:12
#: sklearn.decomposition._pca.PCA.fit_transform:12
#: sklearn.decomposition._pca.PCA.score:14
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.decomposition._base._BasePCA.get_covariance
#: sklearn.decomposition._base._BasePCA.get_precision
#: sklearn.decomposition._base._BasePCA.inverse_transform
#: sklearn.decomposition._base._BasePCA.transform
#: sklearn.decomposition._pca.PCA.fit
#: sklearn.decomposition._pca.PCA.fit_transform
#: sklearn.decomposition._pca.PCA.score
#: sklearn.decomposition._pca.PCA.score_samples
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.decomposition._pca.PCA.fit:28
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit:17
msgid "Returns the instance itself."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.transform:25
#: sklearn.decomposition._pca.PCA.fit_transform:24
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit_transform:17
msgid "Transformed values."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:25
#: sklearn.decomposition._pca.PCA.fit_transform:27
msgid "Notes"
msgstr ""

#: of sklearn.decomposition._pca.PCA.fit_transform:28
msgid "This method returns a Fortran-ordered array. To convert it to a C-ordered array, use 'np.ascontiguousarray'."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:4
msgid "``cov = components_.T * S**2 * components_ + sigma2 * eye(n_features)`` where S**2 contains the explained variances, and sigma2 contains the noise variances."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:23
msgid "**cov**"
msgstr ""

#: of
msgid "array, shape=(n_features, n_features)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:12
msgid "Estimated covariance of data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:4
msgid "Equals the inverse of the covariance but computed with the matrix inversion lemma for efficiency."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:22
msgid "**precision**"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:11
msgid "Estimated precision of data."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:4
msgid "In other words, return an input X_original whose transform would be X."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_components)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:9
msgid "New data, where n_samples is the number of samples and n_components is the number of components."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:22
msgid "X_original array-like, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:26
msgid "If whitening is enabled, inverse_transform will compute the exact inverse operation, which includes reversing whitening."
msgstr ""

#: of sklearn.decomposition._pca.PCA.score:4
#: sklearn.decomposition._pca.PCA.score_samples:4
msgid "See. \"Pattern Recognition and Machine Learning\" by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf"
msgstr ""

#: of sklearn.decomposition._pca.PCA.score:11
#: sklearn.decomposition._pca.PCA.score_samples:11
msgid "The data."
msgstr ""

#: of sklearn.decomposition._pca.PCA.score:30
#: sklearn.decomposition._pca.PCA.score_samples:27
msgid "**ll**"
msgstr ""

#: of sklearn.decomposition._pca.PCA.score:19
msgid "Average log-likelihood of the samples under the current model."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.decomposition._pca.PCA.score_samples:16
msgid "Log-likelihood of each sample under the current model."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.transform:4
msgid "X is projected on the first principal components previously extracted from a training set."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.transform:10
msgid "New data, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: ../modules/generated/sklearn.decomposition.PCA.examples:4
msgid "Examples using ``sklearn.decomposition.PCA``"
msgstr ""

#: ../modules/generated/sklearn.decomposition.PCA.examples:15
#: ../modules/generated/sklearn.decomposition.PCA.examples:23
msgid ":ref:`sphx_glr_auto_examples_compose_plot_digits_pipe.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_applications_plot_face_recognition.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_manifold_plot_mds.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_multilabel.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_approximation.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_grid_search_refit_callable.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_digits_kde_sampling.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_feature_union.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_scaling_importance.py`"
#~ msgstr ""

