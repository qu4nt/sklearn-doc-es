msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:04\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.neural_network.MLPRegressor.po\n"
"X-Crowdin-File-ID: 3666\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.neural_network.MLPRegressor.rst:2
msgid ":mod:`sklearn.neural_network`.MLPRegressor"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:2
msgid "Multi-layer Perceptron regressor."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:4
msgid "This model optimizes the squared-loss using LBFGS or stochastic gradient descent."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.neural_network.MLPRegressor.partial_fit
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict
msgid "Parameters"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:13
msgid "**hidden_layer_sizes**"
msgstr ""

#: of
msgid "tuple, length = n_layers - 2, default=(100,)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:12
msgid "The ith element represents the number of neurons in the ith hidden layer."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:28
msgid "**activation**"
msgstr ""

#: of
msgid "{'identity', 'logistic', 'tanh', 'relu'}, default='relu'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:16
msgid "Activation function for the hidden layer."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:18
msgid "'identity', no-op activation, useful to implement linear bottleneck, returns f(x) = x"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:21
msgid "'logistic', the logistic sigmoid function, returns f(x) = 1 / (1 + exp(-x))."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:24
msgid "'tanh', the hyperbolic tan function, returns f(x) = tanh(x)."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:27
msgid "'relu', the rectified linear unit function, returns f(x) = max(0, x)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:44
msgid "**solver**"
msgstr ""

#: of
msgid "{'lbfgs', 'sgd', 'adam'}, default='adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:31
msgid "The solver for weight optimization."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:33
msgid "'lbfgs' is an optimizer in the family of quasi-Newton methods."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:35
msgid "'sgd' refers to stochastic gradient descent."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:37
msgid "'adam' refers to a stochastic gradient-based optimizer proposed by Kingma, Diederik, and Jimmy Ba"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:40
msgid "Note: The default solver 'adam' works pretty well on relatively large datasets (with thousands of training samples or more) in terms of both training time and validation score. For small datasets, however, 'lbfgs' can converge faster and perform better."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:47
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=0.0001"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:47
msgid "L2 penalty (regularization term) parameter."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:52
msgid "**batch_size**"
msgstr ""

#: of
msgid "int, default='auto'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:50
msgid "Size of minibatches for stochastic optimizers. If the solver is 'lbfgs', the classifier will not use minibatch. When set to \"auto\", `batch_size=min(200, n_samples)`"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:70
msgid "**learning_rate**"
msgstr ""

#: of
msgid "{'constant', 'invscaling', 'adaptive'}, default='constant'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:55
msgid "Learning rate schedule for weight updates."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:57
msgid "'constant' is a constant learning rate given by 'learning_rate_init'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:60
msgid "'invscaling' gradually decreases the learning rate ``learning_rate_`` at each time step 't' using an inverse scaling exponent of 'power_t'. effective_learning_rate = learning_rate_init / pow(t, power_t)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:64
msgid "'adaptive' keeps the learning rate constant to 'learning_rate_init' as long as training loss keeps decreasing. Each time two consecutive epochs fail to decrease training loss by at least tol, or fail to increase validation score by at least tol if 'early_stopping' is on, the current learning rate is divided by 5."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:70
msgid "Only used when solver='sgd'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:74
msgid "**learning_rate_init**"
msgstr ""

#: of
msgid "double, default=0.001"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:73
msgid "The initial learning rate used. It controls the step-size in updating the weights. Only used when solver='sgd' or 'adam'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:79
msgid "**power_t**"
msgstr ""

#: of
msgid "double, default=0.5"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:77
msgid "The exponent for inverse scaling learning rate. It is used in updating effective learning rate when the learning_rate is set to 'invscaling'. Only used when solver='sgd'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:86
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=200"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:82
msgid "Maximum number of iterations. The solver iterates until convergence (determined by 'tol') or this number of iterations. For stochastic solvers ('sgd', 'adam'), note that this determines the number of epochs (how many times each data point will be used), not the number of gradient steps."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:90
msgid "**shuffle**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:89
msgid "Whether to shuffle samples in each iteration. Only used when solver='sgd' or 'adam'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:97
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:93
msgid "Determines random number generation for weights and bias initialization, train-test split if early stopping is used, and batch sampling when solver='sgd' or 'adam'. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:103
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-4"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:100
msgid "Tolerance for the optimization. When the loss or score is not improving by at least ``tol`` for ``n_iter_no_change`` consecutive iterations, unless ``learning_rate`` is set to 'adaptive', convergence is considered to be reached and training stops."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:106
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:106
msgid "Whether to print progress messages to stdout."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:111
msgid "**warm_start**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:109
msgid "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:115
msgid "**momentum**"
msgstr ""

#: of
msgid "float, default=0.9"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:114
msgid "Momentum for gradient descent update.  Should be between 0 and 1. Only used when solver='sgd'."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:119
msgid "**nesterovs_momentum**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:118
msgid "Whether to use Nesterov's momentum. Only used when solver='sgd' and momentum > 0."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:127
msgid "**early_stopping**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:122
#, python-format
msgid "Whether to use early stopping to terminate training when validation score is not improving. If set to true, it will automatically set aside 10% of training data as validation and terminate training when validation score is not improving by at least ``tol`` for ``n_iter_no_change`` consecutive epochs. Only effective when solver='sgd' or 'adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:132
msgid "**validation_fraction**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:130
msgid "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:136
msgid "**beta_1**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:135
msgid "Exponential decay rate for estimates of first moment vector in adam, should be in [0, 1). Only used when solver='adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:140
msgid "**beta_2**"
msgstr ""

#: of
msgid "float, default=0.999"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:139
msgid "Exponential decay rate for estimates of second moment vector in adam, should be in [0, 1). Only used when solver='adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:143
msgid "**epsilon**"
msgstr ""

#: of
msgid "float, default=1e-8"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:143
msgid "Value for numerical stability in adam. Only used when solver='adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:149
msgid "**n_iter_no_change**"
msgstr ""

#: of
msgid "int, default=10"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:146
msgid "Maximum number of epochs to not meet ``tol`` improvement. Only effective when solver='sgd' or 'adam'"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:161
msgid "**max_fun**"
msgstr ""

#: of
msgid "int, default=15000"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:152
msgid "Only used when solver='lbfgs'. Maximum number of function calls. The solver iterates until convergence (determined by 'tol'), number of iterations reaches max_iter, or this number of function calls. Note that number of function calls will be greater than or equal to the number of iterations for the MLPRegressor."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:166
msgid "**loss_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:166
msgid "The current loss computed with the loss function."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:169
msgid "**best_loss_**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:169
msgid "The minimum loss reached by the solver throughout fitting."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:172
msgid "**loss_curve_** : list of shape (`n_iter_`,)"
msgstr ""

#: of
msgid "list of shape ("
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:172
msgid "The ith element in the list represents the loss at the ith iteration."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:175
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:206
msgid "**t_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:175
msgid "The number of training samples seen by the solver during fitting."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:179
msgid "**coefs_**"
msgstr ""

#: of
msgid "list of shape (n_layers - 1,)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:178
msgid "The ith element in the list represents the weight matrix corresponding to layer i."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:183
msgid "**intercepts_**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:182
msgid "The ith element in the list represents the bias vector corresponding to layer i + 1."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:186
msgid "**n_iter_**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:186
msgid "The number of iterations the solver has ran."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:189
msgid "**n_layers_**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:189
msgid "Number of layers."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:192
msgid "**n_outputs_**"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:192
msgid "Number of outputs."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:195
msgid "**out_activation_**"
msgstr ""

#: of
msgid "str"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:195
msgid "Name of the output activation function."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:198
msgid "**loss_curve_**"
msgstr ""

#: of
msgid "list of shape (n_iters,)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:198
msgid "Loss value evaluated at the end of each training step."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:201
msgid "Mathematically equals `n_iters * X.shape[0]`, it means `time_step` and it is used by optimizer's learning rate scheduler."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:209
msgid "Notes"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:210
msgid "MLPRegressor trains iteratively since at each time step the partial derivatives of the loss function with respect to the model parameters are computed to update the parameters."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:214
msgid "It can also have a regularization term added to the loss function that shrinks model parameters to prevent overfitting."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:217
msgid "This implementation works with data represented as dense and sparse numpy arrays of floating point values."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:221
msgid "References"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:224
msgid "Hinton, Geoffrey E."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:223
msgid "\"Connectionist learning procedures.\" Artificial intelligence 40.1 (1989): 185-234."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:228
msgid "Glorot, Xavier, and Yoshua Bengio. \"Understanding the difficulty of"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:227
msgid "training deep feedforward neural networks.\" International Conference on Artificial Intelligence and Statistics. 2010."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:232
msgid "He, Kaiming, et al. \"Delving deep into rectifiers: Surpassing human-level"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:231
msgid "performance on imagenet classification.\" arXiv preprint arXiv:1502.01852 (2015)."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:235
msgid "Kingma, Diederik, and Jimmy Ba. \"Adam: A method for stochastic"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:235
msgid "optimization.\" arXiv preprint arXiv:1412.6980 (2014)."
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:242
msgid "Examples"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor:256
msgid "Methods"
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid ":obj:`fit <sklearn.neural_network.MLPRegressor.fit>`\\"
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:2
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid "Fit the model to data matrix X and target(s) y."
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid ":obj:`get_params <sklearn.neural_network.MLPRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid ":obj:`predict <sklearn.neural_network.MLPRegressor.predict>`\\"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict:2
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid "Predict using the multi-layer perceptron model."
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid ":obj:`score <sklearn.neural_network.MLPRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid ":obj:`set_params <sklearn.neural_network.MLPRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor:264:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.neural_network.MLPRegressor.partial_fit:8
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:8
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "ndarray or sparse matrix of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.neural_network.MLPRegressor.partial_fit:8
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:8
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict:8
msgid "The input data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.neural_network.MLPRegressor.partial_fit:11
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:12
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict:24
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:11
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.neural_network.MLPRegressor.partial_fit
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit
#: sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neural_network.MLPRegressor.partial_fit:27
#: sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit:28
msgid "**self**"
msgstr ""

#: of
msgid "returns a trained MLP model."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.neural_network.MLPRegressor.partial_fit:2
msgid "Update the model with a single iteration over the given data."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.neural_network.MLPRegressor.partial_fit:11
msgid "The target values."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_outputs)"
msgstr ""

#: of sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict:13
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:4
msgid "Examples using ``sklearn.neural_network.MLPRegressor``"
msgstr ""

#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:15
#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_partial_dependence.py`"
msgstr ""

#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:34
#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:42
#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:53
#: ../modules/generated/sklearn.neural_network.MLPRegressor.examples:61
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py`"
msgstr ""

