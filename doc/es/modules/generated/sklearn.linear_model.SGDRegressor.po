msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-14 23:59\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.SGDRegressor.po\n"
"X-Crowdin-File-ID: 3322\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.SGDRegressor.rst:2
msgid ":mod:`sklearn.linear_model`.SGDRegressor"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:2
msgid "Linear model fitted by minimizing a regularized empirical loss with SGD"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:4
msgid "SGD stands for Stochastic Gradient Descent: the gradient of the loss is estimated each sample at a time and the model is updated along the way with a decreasing strength schedule (aka learning rate)."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:8
msgid "The regularizer is a penalty added to the loss function that shrinks model parameters towards the zero vector using either the squared euclidean norm L2 or the absolute norm L1 or a combination of both (Elastic Net). If the parameter update crosses the 0.0 value because of the regularizer, the update is truncated to 0.0 to allow for learning sparse models and achieve online feature selection."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:15
msgid "This implementation works with data represented as dense numpy arrays of floating point values for the features."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:18
msgid "Read more in the :ref:`User Guide <sgd>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._stochastic_gradient.BaseSGD.set_params
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict
#: sklearn.linear_model._stochastic_gradient.SGDRegressor
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:35
msgid "**loss**"
msgstr ""

#: of
msgid "str, default='squared_loss'"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:23
msgid "The loss function to be used. The possible values are 'squared_loss', 'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:26
msgid "The 'squared_loss' refers to the ordinary least squares fit. 'huber' modifies 'squared_loss' to focus less on getting outliers correct by switching from squared to linear loss past a distance of epsilon. 'epsilon_insensitive' ignores errors less than epsilon and is linear past that; this is the loss function used in SVR. 'squared_epsilon_insensitive' is the same but becomes squared loss past a tolerance of epsilon."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:34
msgid "More details about the losses formulas can be found in the :ref:`User Guide <sgd_mathematical_formulation>`."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:41
msgid "**penalty**"
msgstr ""

#: of
msgid "{'l2', 'l1', 'elasticnet'}, default='l2'"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:38
msgid "The penalty (aka regularization term) to be used. Defaults to 'l2' which is the standard regularizer for linear SVM models. 'l1' and 'elasticnet' might bring sparsity to the model (feature selection) not achievable with 'l2'."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:47
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=0.0001"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:44
msgid "Constant that multiplies the regularization term. The higher the value, the stronger the regularization. Also used to compute the learning rate when set to `learning_rate` is set to 'optimal'."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:52
msgid "**l1_ratio**"
msgstr ""

#: of
msgid "float, default=0.15"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:50
msgid "The Elastic Net mixing parameter, with 0 <= l1_ratio <= 1. l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1. Only used if `penalty` is 'elasticnet'."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:56
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:55
msgid "Whether the intercept should be estimated or not. If False, the data is assumed to be already centered."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:63
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:59
msgid "The maximum number of passes over the training data (aka epochs). It only impacts the behavior in the ``fit`` method, and not the :meth:`partial_fit` method."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:70
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:66
msgid "The stopping criterion. If it is not None, training will stop when (loss > best_loss - tol) for ``n_iter_no_change`` consecutive epochs."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:73
msgid "**shuffle**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:73
msgid "Whether or not the training data should be shuffled after each epoch."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:76
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:76
msgid "The verbosity level."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:84
msgid "**epsilon**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:79
msgid "Epsilon in the epsilon-insensitive loss functions; only if `loss` is 'huber', 'epsilon_insensitive', or 'squared_epsilon_insensitive'. For 'huber', determines the threshold at which it becomes less important to get the prediction exactly right. For epsilon-insensitive, any differences between the current prediction and the correct label are ignored if they are less than this threshold."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:89
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:87
msgid "Used for shuffling the data, when ``shuffle`` is set to ``True``. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:104
msgid "**learning_rate**"
msgstr ""

#: of
msgid "string, default='invscaling'"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:92
msgid "The learning rate schedule:"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:94
msgid "'constant': `eta = eta0`"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:95
msgid "'optimal': `eta = 1.0 / (alpha * (t + t0))` where t0 is chosen by a heuristic proposed by Leon Bottou."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:97
msgid "'invscaling': `eta = eta0 / pow(t, power_t)`"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:98
msgid "'adaptive': eta = eta0, as long as the training keeps decreasing. Each time n_iter_no_change consecutive epochs fail to decrease the training loss by tol or fail to increase validation score by tol if early_stopping is True, the current learning rate is divided by 5."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:103
msgid "Added 'adaptive' option"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:108
msgid "**eta0**"
msgstr ""

#: of
msgid "double, default=0.01"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:107
msgid "The initial learning rate for the 'constant', 'invscaling' or 'adaptive' schedules. The default value is 0.01."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:111
msgid "**power_t**"
msgstr ""

#: of
msgid "double, default=0.25"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:111
msgid "The exponent for inverse scaling learning rate."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:122
msgid "**early_stopping**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:114
msgid "Whether to use early stopping to terminate training when validation score is not improving. If set to True, it will automatically set aside a fraction of training data as validation and terminate training when validation score returned by the `score` method is not improving by at least `tol` for `n_iter_no_change` consecutive epochs."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:121
msgid "Added 'early_stopping' option"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:130
msgid "**validation_fraction**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:125
msgid "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if `early_stopping` is True."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:129
msgid "Added 'validation_fraction' option"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:136
msgid "**n_iter_no_change**"
msgstr ""

#: of
msgid "int, default=5"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:133
msgid "Number of iterations with no improvement to wait before early stopping."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:135
msgid "Added 'n_iter_no_change' option"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:149
msgid "**warm_start**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:139
msgid "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:143
msgid "Repeatedly calling fit or partial_fit when warm_start is True can result in a different solution than when calling fit a single time because of the way the data is shuffled. If a dynamic learning rate is used, the learning rate is adapted depending on the number of samples already seen. Calling ``fit`` resets this counter, while ``partial_fit``  will result in increasing the existing counter."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:159
msgid "**average**"
msgstr ""

#: of
msgid "bool or int, default=False"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:152
msgid "When set to True, computes the averaged SGD weights accross all updates and stores the result in the ``coef_`` attribute. If set to an int greater than 1, averaging will begin once the total number of samples seen reaches `average`. So ``average=10`` will begin averaging after seeing 10 samples."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:164
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:164
msgid "Weights assigned to the features."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:167
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (1,)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:167
msgid "The intercept term."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:175
msgid "**average_coef_**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:170
msgid "Averaged weights assigned to the features. Only available if ``average=True``."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:173
msgid "Attribute ``average_coef_`` was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25)."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:182
msgid "**average_intercept_**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:178
msgid "The averaged intercept term. Only available if ``average=True``."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:180
msgid "Attribute ``average_intercept_`` was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25)."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:185
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:185
msgid "The actual number of iterations before reaching the stopping criterion."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:192
msgid "**t_**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:188
msgid "Number of weight updates performed during training. Same as ``(n_iter_ * n_samples)``."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:197
msgid ":obj:`Ridge`, :obj:`ElasticNet`, :obj:`Lasso`, :obj:`sklearn.svm.SVR`"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:203
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.SGDRegressor:220
msgid "Methods"
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`densify <sklearn.linear_model.SGDRegressor.densify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Convert coefficient matrix to dense array format."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.SGDRegressor.fit>`\\"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Fit linear model with Stochastic Gradient Descent."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.SGDRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.linear_model.SGDRegressor.partial_fit>`\\"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Perform one epoch of stochastic gradient descent on given samples."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.SGDRegressor.predict>`\\"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Predict using the linear model"
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.SGDRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.SGDRegressor.set_params>`\\"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Set and validate the parameters of estimator."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid ":obj:`sparsify <sklearn.linear_model.SGDRegressor.sparsify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:2
#: sklearn.linear_model._stochastic_gradient.SGDRegressor:231:<autosummary>:1
msgid "Convert coefficient matrix to sparse format."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:4
msgid "Converts the ``coef_`` member (back) to a numpy.ndarray. This is the default format of ``coef_`` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.SparseCoefMixin.densify
#: sklearn.linear_model._base.SparseCoefMixin.sparsify
#: sklearn.linear_model._stochastic_gradient.BaseSGD.set_params
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict
msgid "Returns"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:24
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:21
msgid "self"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:13
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:14
msgid "Fitted estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:8
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:12
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix}, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:8
msgid "Training data"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:11
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:15
msgid "**y**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict:24
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:11
msgid "Target values"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:14
msgid "**coef_init**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:14
msgid "The initial coefficients to warm-start the optimization."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:17
msgid "**intercept_init**"
msgstr ""

#: of
msgid "ndarray of shape (1,), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:17
msgid "The initial intercept to warm-start the optimization."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:20
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like, shape (n_samples,), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:20
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:24
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit:36
#: sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:35
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:4
msgid "Internally, this method uses ``max_iter = 1``. Therefore, it is not guaranteed that a minimum of the cost function is reached after calling it once. Matters such as objective convergence and early stopping should be handled by the user."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:12
msgid "Subset of training data"
msgstr ""

#: of
msgid "numpy array of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:15
msgid "Subset of target values"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit:18
msgid "Weights applied to individual samples. If not provided, uniform weights are assumed."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict:13
msgid "Predicted target values per element in X."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:24
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:8
msgid "**\\*\\*kwargs**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:8
msgid "Estimator parameters."
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:13
msgid "Estimator instance."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:4
msgid "Converts the ``coef_`` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:8
msgid "The ``intercept_`` member is not converted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:25
#, python-format
msgid "For non-sparse models, i.e. when there are not many zeros in ``coef_``, this may actually *increase* memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with ``(coef_ == 0).sum()``, must be more than 50% for this to provide significant benefits."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:31
msgid "After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify."
msgstr ""

#: ../modules/generated/sklearn.linear_model.SGDRegressor.examples:4
msgid "Examples using ``sklearn.linear_model.SGDRegressor``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.SGDRegressor.examples:15
#: ../modules/generated/sklearn.linear_model.SGDRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_applications_plot_prediction_latency.py`"
msgstr ""

#: ../modules/generated/sklearn.linear_model.SGDRegressor.examples:34
#: ../modules/generated/sklearn.linear_model.SGDRegressor.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sgd_penalties.py`"
msgstr ""

