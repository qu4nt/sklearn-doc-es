msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-06 05:00\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.LabelBinarizer.po\n"
"X-Crowdin-File-ID: 5792\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.LabelBinarizer.rst:2
msgid ":mod:`sklearn.preprocessing`.LabelBinarizer"
msgstr ":mod:`sklearn.preprocessing`.LabelBinarizer"

#: of sklearn.preprocessing._label.LabelBinarizer:2
msgid "Binarize labels in a one-vs-all fashion."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:4
msgid "Several regression and binary classification algorithms are available in scikit-learn. A simple way to extend these algorithms to the multi-class classification case is to use the so-called one-vs-all scheme."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:9
msgid "At learning time, this simply consists in learning one regressor or binary classifier per class. In doing so, one needs to convert multi-class labels to binary labels (belong or does not belong to the class). LabelBinarizer makes this process easy with the transform method."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:15
msgid "At prediction time, one assigns the class for which the corresponding model gave the greatest confidence. LabelBinarizer makes this easy with the inverse_transform method."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:19
msgid "Read more in the :ref:`User Guide <preprocessing_targets>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._label.LabelBinarizer
#: sklearn.preprocessing._label.LabelBinarizer.fit
#: sklearn.preprocessing._label.LabelBinarizer.fit_transform
#: sklearn.preprocessing._label.LabelBinarizer.inverse_transform
#: sklearn.preprocessing._label.LabelBinarizer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._label.LabelBinarizer:24
msgid "**neg_label**"
msgstr "**neg_label**"

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:24
msgid "Value with which negative labels must be encoded."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:27
msgid "**pos_label**"
msgstr "**pos_label**"

#: of
msgid "int, default=1"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:27
msgid "Value with which positive labels must be encoded."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:34
msgid "**sparse_output**"
msgstr "**sparse_output**"

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:30
msgid "True if the returned array from transform is desired to be in sparse CSR format."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer
msgid "Attributes"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:39
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:39
msgid "Holds the label for each class."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:45
msgid "**y_type_**"
msgstr "**y_type_**"

#: of
msgid "str"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:42
msgid "Represents the type of the target data as evaluated by utils.multiclass.type_of_target. Possible type are 'continuous', 'continuous-multioutput', 'binary', 'multiclass', 'multiclass-multioutput', 'multilabel-indicator', and 'unknown'."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:52
msgid "**sparse_input_**"
msgstr "**sparse_input_**"

#: of
msgid "bool"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:48
msgid "True if the input data to transform is given as a sparse matrix, False otherwise."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:57
msgid ":obj:`label_binarize`"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:58
msgid "Function to perform the transform operation of LabelBinarizer with fixed classes."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:59
msgid ":obj:`OneHotEncoder`"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:60
msgid "Encode categorical features using a one-hot aka one-of-K scheme."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:66
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:77
msgid "Binary targets transform to a column vector"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:86
msgid "Passing a 2D matrix for multilabel classification"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:100
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.LabelBinarizer.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Fit label binarizer."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.LabelBinarizer.fit_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit_transform:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Fit label binarizer and transform multi-class labels to binary labels."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.LabelBinarizer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.LabelBinarizer.inverse_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Transform binary labels back to multi-class labels."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.LabelBinarizer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.LabelBinarizer.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.transform:2
#: sklearn.preprocessing._label.LabelBinarizer:109:<autosummary>:1
msgid "Transform multi-class labels to binary labels."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit:9
#: sklearn.preprocessing._label.LabelBinarizer.fit_transform:13
#: sklearn.preprocessing._label.LabelBinarizer.inverse_transform:31
#: sklearn.preprocessing._label.LabelBinarizer.transform:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_classes)"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit:8
msgid "Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.preprocessing._label.LabelBinarizer.fit
#: sklearn.preprocessing._label.LabelBinarizer.fit_transform
#: sklearn.preprocessing._label.LabelBinarizer.inverse_transform
#: sklearn.preprocessing._label.LabelBinarizer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._label.LabelBinarizer.fit:25
msgid "**self**"
msgstr "**self**"

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit_transform:5
msgid "The output of transform is sometimes referred to as the 1-of-K coding scheme."
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples,) or                 (n_samples, n_classes)"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit_transform:11
#: sklearn.preprocessing._label.LabelBinarizer.transform:10
msgid "Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification. Sparse matrix can be CSR, CSC, COO, DOK, or LIL."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit_transform:30
#: sklearn.preprocessing._label.LabelBinarizer.inverse_transform:9
#: sklearn.preprocessing._label.LabelBinarizer.transform:29
msgid "**Y**"
msgstr "**Y**"

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.fit_transform:18
#: sklearn.preprocessing._label.LabelBinarizer.transform:17
msgid "Shape will be (n_samples, 1) for binary problems. Sparse matrix will be of CSR format."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:8
msgid "Target values. All sparse matrices are converted to CSR before inverse transformation."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:19
msgid "**threshold**"
msgstr "**threshold**"

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:12
msgid "Threshold used in the binary and multi-label cases."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:14
msgid "Use 0 when ``Y`` contains the output of decision_function (classifier). Use 0.5 when ``Y`` contains the output of predict_proba."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:18
msgid "If None, the threshold is assumed to be half way between neg_label and pos_label."
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples,)"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:24
msgid "Target values. Sparse matrix will be of CSR format."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:34
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.inverse_transform:35
msgid "In the case when the binary labels are fractional (probabilistic), inverse_transform chooses the class with the greatest value. Typically, this allows to use the output of a linear model's decision_function method directly as the input of inverse_transform."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.preprocessing._label.LabelBinarizer.transform:4
msgid "The output of transform is sometimes referred to by some authors as the 1-of-K coding scheme."
msgstr ""

#: of
msgid "{array, sparse matrix} of shape (n_samples,) or                 (n_samples, n_classes)"
msgstr ""

