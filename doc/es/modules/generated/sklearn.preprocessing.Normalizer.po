msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.Normalizer.po\n"
"X-Crowdin-File-ID: 5020\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.Normalizer.rst:2
msgid ":mod:`sklearn.preprocessing`.Normalizer"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:2
msgid "Normalize samples individually to unit norm."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:4
msgid "Each sample (i.e. each row of the data matrix) with at least one non zero component is rescaled independently of other samples so that its norm (l1, l2 or inf) equals one."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:8
msgid "This transformer is able to work both with dense numpy arrays and scipy.sparse matrix (use CSR format if you want to avoid the burden of a copy / conversion)."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:12
msgid "Scaling inputs to unit norms is a common operation for text classification or clustering for instance. For instance the dot product of two l2-normalized TF-IDF vectors is the cosine similarity of the vectors and is the base similarity metric for the Vector Space Model commonly used by the Information Retrieval community."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:18
msgid "Read more in the :ref:`User Guide <preprocessing_normalization>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.Normalizer
#: sklearn.preprocessing._data.Normalizer.fit
#: sklearn.preprocessing._data.Normalizer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:25
msgid "**norm**"
msgstr ""

#: of
msgid "{'l1', 'l2', 'max'}, default='l2'"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:23
msgid "The norm to use to normalize each non zero sample. If norm='max' is used, values will be rescaled by the maximum of the absolute values."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:37
#: sklearn.preprocessing._data.Normalizer.transform:12
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:28
msgid "set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix)."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:42
msgid ":obj:`normalize`"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:43
msgid "Equivalent function without the estimator API."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:47
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:48
msgid "This estimator is stateless (besides constructor parameters), the fit method does nothing but is useful when used in a pipeline."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:51
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:57
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:71
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.Normalizer.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.fit:2
#: sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid "Do nothing and return the estimator unchanged"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.Normalizer.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.Normalizer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.Normalizer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.Normalizer.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.transform:2
#: sklearn.preprocessing._data.Normalizer:79:<autosummary>:1
msgid "Scale each non zero row of X to unit norm"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.fit:4
msgid "This method is just there to implement the usual API and hence work in pipelines."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.preprocessing._data.Normalizer.fit:10
#: sklearn.preprocessing._data.Normalizer.transform:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.fit:10
msgid "The data to estimate the normalization parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.preprocessing._data.Normalizer.fit:13
msgid "**y**"
msgstr ""

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.fit:13
msgid "Ignored."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.Normalizer.fit
#: sklearn.preprocessing._data.Normalizer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._data.Normalizer.fit:29
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.fit:18
msgid "Fitted transformer."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
#: sklearn.preprocessing._data.Normalizer.transform:17
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.transform:8
msgid "The data to normalize, row by row. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy."
msgstr ""

#: of
msgid "bool, default=None"
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.transform:12
msgid "Copy the input X or not."
msgstr ""

#: of sklearn.preprocessing._data.Normalizer.transform:28
msgid "**X_tr**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:4
msgid "Examples using ``sklearn.preprocessing.Normalizer``"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:15
#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:23
msgid ":ref:`sphx_glr_auto_examples_kernel_approximation_plot_scalable_poly_kernels.py`"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:34
#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:42
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:53
#: ../modules/generated/sklearn.preprocessing.Normalizer.examples:61
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_clustering.py`"
msgstr ""

