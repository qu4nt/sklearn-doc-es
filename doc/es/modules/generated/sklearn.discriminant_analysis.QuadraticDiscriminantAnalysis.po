msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-17 22:52\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.po\n"
"X-Crowdin-File-ID: 5880\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst:2
msgid ":mod:`sklearn.discriminant_analysis`.QuadraticDiscriminantAnalysis"
msgstr ":mod:`sklearn.discriminant_analysis`.QuadraticDiscriminantAnalysis"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:2
msgid "Quadratic Discriminant Analysis"
msgstr "Análisis Discriminante Cuadrático"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:4
msgid "A classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule."
msgstr "Un clasificador con un límite de decisión cuadrático, generado ajustando las densidades condicionales de las clases a los datos y utilizando la regla de Bayes."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:8
msgid "The model fits a Gaussian density to each class."
msgstr "El modelo se ajusta una densidad Gaussiana a cada clase."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:10
msgid "*QuadraticDiscriminantAnalysis*"
msgstr "*QuadraticDiscriminantAnalysis*"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:13
msgid "Read more in the :ref:`User Guide <lda_qda>`."
msgstr "Más información en el :ref:`Manual de usuario <lda_qda>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:19
msgid "**priors**"
msgstr "**priors**"

#: of
msgid "ndarray of shape (n_classes,), default=None"
msgstr "ndarray de forma (n_classes,), default=None"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:18
msgid "Class priors. By default, the class proportions are inferred from the training data."
msgstr "A prioris de clase. Por defecto, las proporciones de clase se infieren a partir de los datos de entrenamiento."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:24
msgid "**reg_param**"
msgstr "**reg_param**"

#: of
msgid "float, default=0.0"
msgstr "float, default=0.0"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:22
msgid "Regularizes the per-class covariance estimates by transforming S2 as ``S2 = (1 - reg_param) * S2 + reg_param * np.eye(n_features)``, where S2 corresponds to the `scaling_` attribute of a given class."
msgstr "Regulariza las estimaciones de covarianza por clase transformando S2 como ``S2 = (1 - reg_param) * S2 + reg_param * np.eye(n_features)``, donde S2 corresponde al atributo `scaling_` de una clase determinada."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:30
msgid "**store_covariance**"
msgstr "**store_covariance**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:27
msgid "If True, the class covariance matrices are explicitely computed and stored in the `self.covariance_` attribute."
msgstr "Si es True, las matrices de covarianza de la clase se calculan explícitamente y se almacenan en el atributo `self.covariance_`."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:42
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1.0e-4"
msgstr "float, default=1.0e-4"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:33
msgid "Absolute threshold for a singular value to be considered significant, used to estimate the rank of `Xk` where `Xk` is the centered matrix of samples in class k. This parameter does not affect the predictions. It only controls a warning that is raised when features are considered to be colinear."
msgstr "Umbral absoluto para que un valor singular se considere significativo, utilizado para estimar el rango de `Xk` donde `Xk` es la matriz centrada de muestras en la clase k. Este parámetro no afecta a las predicciones. Sólo controla una advertencia que se produce cuando las características se consideran colineales."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:49
msgid "**covariance_**"
msgstr "**covariance_**"

#: of
msgid "list of len n_classes of ndarray             of shape (n_features, n_features)"
msgstr "lista de len n_classes o ndarray             de forma (n_features, n_features)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:47
msgid "For each class, gives the covariance matrix estimated using the samples of that class. The estimations are unbiased. Only present if `store_covariance` is True."
msgstr "Para cada clase, da la matriz de covarianza estimada utilizando las muestras de esa clase. Las estimaciones son insesgadas. Sólo está presente si `store_covariance` es True."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:52
msgid "**means_**"
msgstr "**means_**"

#: of
msgid "array-like of shape (n_classes, n_features)"
msgstr "array-like de forma (n_classes, n_features)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:52
msgid "Class-wise means."
msgstr "Medios de la clase."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:55
msgid "**priors_**"
msgstr "**priors_**"

#: of
msgid "array-like of shape (n_classes,)"
msgstr "array-like de forma (n_classes,)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:55
msgid "Class priors (sum to 1)."
msgstr "A prioris de clase (suma 1)."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:63
msgid "**rotations_**"
msgstr "**rotations_**"

#: of
msgid "list of len n_classes of ndarray of shape (n_features, n_k)"
msgstr "lista de len n_classes o ndarray de forma (n_features, n_k)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:58
msgid "For each class k an array of shape (n_features, n_k), where ``n_k = min(n_features, number of elements in class k)`` It is the rotation of the Gaussian distribution, i.e. its principal axis. It corresponds to `V`, the matrix of eigenvectors coming from the SVD of `Xk = U S Vt` where `Xk` is the centered matrix of samples from class k."
msgstr "Para cada clase k, un arreglo de forma (n_features, n_k), donde ``n_k = min(n_features, número de elementos en la clase k)`` Es la rotación de la distribución Gaussiana, es decir, su eje principal. Corresponde a `V`, la matriz de autovectores procedente de la SVD de `Xk = U S Vt` donde `Xk` es la matriz centrada de las muestras de la clase k."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:71
msgid "**scalings_**"
msgstr "**scalings_**"

#: of
msgid "list of len n_classes of ndarray of shape (n_k,)"
msgstr "lista de len n_classes o ndarray de forma (n_k,)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:66
msgid "For each class, contains the scaling of the Gaussian distributions along its principal axes, i.e. the variance in the rotated coordinate system. It corresponds to `S^2 / (n_samples - 1)`, where `S` is the diagonal matrix of singular values from the SVD of `Xk`, where `Xk` is the centered matrix of samples from class k."
msgstr "Para cada clase, contiene la escala de las distribuciones Gaussianas a lo largo de sus ejes principales, es decir, la varianza en el sistema de coordenadas rotado. Corresponde a `S^2 / (n_samples - 1)`, donde `S` es la matriz diagonal de valores singulares de la SVD de `Xk`, donde `Xk` es la matriz centrada de muestras de la clase k."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:77
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "ndarray of shape (n_classes,)"
msgstr "ndarray de forma (n_classes,)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:74
msgid "Unique class labels."
msgstr "Etiquetas de clase únicas."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:82
msgid ":obj:`LinearDiscriminantAnalysis`"
msgstr ":obj:`LinearDiscriminantAnalysis`"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:83
msgid "Linear Discriminant Analysis."
msgstr "Análisis Discriminante Lineal."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:89
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:101
msgid "Methods"
msgstr "Métodos"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`decision_function <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function>`\\"
msgstr ":obj:`decision_function <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function>`\\"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Apply decision function to an array of samples."
msgstr "Aplica la función de decisión a un arreglo de muestras."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`fit <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit>`\\"
msgstr ":obj:`fit <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit>`\\"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Fit the model according to the given training data and parameters."
msgstr "Ajusta el modelo según los datos de entrenamiento y los parámetros dados."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`get_params <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params>`\\"
msgstr ":obj:`get_params <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`predict <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict>`\\"
msgstr ":obj:`predict <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict>`\\"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Perform classification on an array of test vectors X."
msgstr "Realiza la clasificación en un arreglo de vectores de prueba X."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba>`\\"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Return log of posterior probabilities of classification."
msgstr "Devuelve el logaritmo de las probabilidades posteriores de la clasificación."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba>`\\"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Return posterior probabilities of classification."
msgstr "Devuelve las probabilidades posteriores de clasificación."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`score <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score>`\\"
msgstr ":obj:`score <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos de prueba y las etiquetas dados."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid ":obj:`set_params <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params>`\\"
msgstr ":obj:`set_params <sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis:112:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:4
msgid "The decision function is equal (up to a constant factor) to the log-posterior of the model, i.e. `log p(y = k | x)`. In a binary classification setting this instead corresponds to the difference `log p(y = 1 | x) - log p(y = 0 | x)`. See :ref:`lda_qda_math`."
msgstr "La función de decisión es igual (hasta un factor constante) al log-posterior del modelo, es decir, `log p(y = k | x)`. En un entorno de clasificación binaria, esto corresponde a la diferencia `log p(y = 1 | x) - log p(y = 0 | x)`. Ver :ref:`lda_qda_math`."

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:12
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:15
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict:9
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:12
msgid "Array of samples (test vectors)."
msgstr "Arreglo de muestras (vectores de prueba)."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba
msgid "Returns"
msgstr "Devuelve"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:30
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict:25
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba:24
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_classes)"
msgstr "ndarray de forma (n_samples,) o (n_samples, n_classes)"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function:17
msgid "Decision function values related to each class, per sample. In the two-class case, the shape is (n_samples,), giving the log likelihood ratio of the positive class."
msgstr "Valores de la función de decisión relacionados con cada clase, por muestra. En el caso de dos clases, la forma (shape) es (n_samples,), lo que da la razón de verosimilitud logarítmica de la clase positiva."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:4
msgid "``store_covariances`` has been moved to main constructor as ``store_covariance``"
msgstr "``store_covariances`` se ha movido al constructor principal (main) como ``store_covariance``"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:8
msgid "``tol`` has been moved to main constructor."
msgstr "``tol* se ha movido al constructor principal."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:14
msgid "Training vector, where n_samples is the number of samples and n_features is the number of features."
msgstr "Vector de entrenamiento, donde n_samples es el número de muestras y n_features es el número de características."

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:30
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit:18
msgid "Target values (integers)"
msgstr "Valores objetivo (enteros)"

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict:4
msgid "The predicted class C for each sample in X is returned."
msgstr "Se devuelve la clase C predicha para cada muestra en X."

#: of
msgid "ndarray of shape (n_samples,)"
msgstr "ndarray de forma (n_samples,)"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba:8
msgid "Array of samples/test vectors."
msgstr "Arreglo de vectores de muestras/prueba."

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr "ndarray de forma (n_samples, n_classes)"

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba:13
msgid "Posterior log-probabilities of classification per class."
msgstr "Probabilidades logarítmicas posteriores de clasificación por clase."

#: of
#: sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba:13
msgid "Posterior probabilities of classification per class."
msgstr "Probabilidades posteriores de clasificación por clase."

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr "En la clasificación multietiqueta, se trata de la precisión del subconjunto, que es una métrica rigurosa, ya que se requiere para cada muestra que cada conjunto de etiquetas sea predicho correctamente."

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas True para `X`."

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderaciones de la muestra."

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

