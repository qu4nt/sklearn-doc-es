msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-09 05:24\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.OrdinalEncoder.po\n"
"X-Crowdin-File-ID: 5358\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.rst:2
msgid ":mod:`sklearn.preprocessing`.OrdinalEncoder"
msgstr ":mod:`sklearn.preprocessing`.OrdinalEncoder"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:2
msgid "Encode categorical features as an integer array."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:4
msgid "The input to this transformer should be an array-like of integers or strings, denoting the values taken on by categorical (discrete) features. The features are converted to ordinal integers. This results in a single column of integers (0 to n_categories - 1) per feature."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:9
msgid "Read more in the :ref:`User Guide <preprocessing_categorical_features>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._encoders.OrdinalEncoder
#: sklearn.preprocessing._encoders.OrdinalEncoder.fit
#: sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform
#: sklearn.preprocessing._encoders.OrdinalEncoder.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:23
msgid "**categories**"
msgstr "**categories**"

#: of
msgid "'auto' or a list of array-like, default='auto'"
msgstr "'auto' o una list of array-like, default='auto'"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:16
msgid "Categories (unique values) per feature:"
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:18
msgid "'auto' : Determine categories automatically from the training data."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:19
msgid "list : ``categories[i]`` holds the categories expected in the ith column. The passed categories should not mix strings and numeric values, and should be sorted in case of numeric values."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:23
msgid "The used categories can be found in the ``categories_`` attribute."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:26
msgid "**dtype**"
msgstr "**dtype**"

#: of
msgid "number type, default np.float64"
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:26
msgid "Desired dtype of output."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:35
msgid "**handle_unknown**"
msgstr "**handle_unknown**"

#: of
msgid "{'error', 'use_encoded_value'}, default='error'"
msgstr "{'error', 'use_encoded_value'}, default='error'"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:29
msgid "When set to 'error' an error will be raised in case an unknown categorical feature is present during transform. When set to 'use_encoded_value', the encoded value of unknown categories will be set to the value given for the parameter `unknown_value`. In :meth:`inverse_transform`, an unknown category will be denoted as None."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:47
msgid "**unknown_value**"
msgstr "**unknown_value**"

#: of
msgid "int or np.nan, default=None"
msgstr "int o np.nan, default=None"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:38
msgid "When the parameter handle_unknown is set to 'use_encoded_value', this parameter is required and will set the encoded value of unknown categories. It has to be distinct from the values used to encode any of the categories in `fit`. If set to np.nan, the `dtype` parameter must be a float dtype."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:57
msgid "**categories_**"
msgstr "**categories_**"

#: of
msgid "list of arrays"
msgstr "list of arrays"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:52
msgid "The categories of each feature determined during ``fit`` (in order of the features in X and corresponding with the output of ``transform``). This does not include categories that weren't seen during ``fit``."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:62
msgid ":obj:`OneHotEncoder`"
msgstr ":obj:`OneHotEncoder`"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:63
msgid "Performs a one-hot encoding of categorical features."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:64
msgid ":obj:`LabelEncoder`"
msgstr ":obj:`LabelEncoder`"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:65
msgid "Encodes target labels with values between 0 and ``n_classes-1``."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:71
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:72
msgid "Given a dataset with two features, we let the encoder find the unique values per feature and transform the data to an ordinal encoding."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:91
msgid "Methods"
msgstr "Métodos"

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.OrdinalEncoder.fit>`\\"
msgstr ":obj:`fit <sklearn.preprocessing.OrdinalEncoder.fit>`\\"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.fit:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Fit the OrdinalEncoder to X."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.OrdinalEncoder.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.preprocessing.OrdinalEncoder.fit_transform>`\\"

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.OrdinalEncoder.get_params>`\\"
msgstr ":obj:`get_params <sklearn.preprocessing.OrdinalEncoder.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.OrdinalEncoder.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.preprocessing.OrdinalEncoder.inverse_transform>`\\"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Convert the data back to the original representation."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.OrdinalEncoder.set_params>`\\"
msgstr ":obj:`set_params <sklearn.preprocessing.OrdinalEncoder.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.OrdinalEncoder.transform>`\\"
msgstr ":obj:`transform <sklearn.preprocessing.OrdinalEncoder.transform>`\\"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.transform:2
#: sklearn.preprocessing._encoders.OrdinalEncoder:100:<autosummary>:1
msgid "Transform X to ordinal codes."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.preprocessing._encoders.OrdinalEncoder.fit:8
#: sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform:8
#: sklearn.preprocessing._encoders.OrdinalEncoder.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like, shape [n_samples, n_features]"
msgstr "array-like, forma [n_samples, n_features]"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.fit:8
msgid "The data to determine the categories of each feature."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.preprocessing._encoders.OrdinalEncoder.fit:12
msgid "**y**"
msgstr "**y**"

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder.fit:11
msgid "Ignored. This parameter exists only for compatibility with :class:`~sklearn.pipeline.Pipeline`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._encoders.OrdinalEncoder.fit
#: sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform
#: sklearn.preprocessing._encoders.OrdinalEncoder.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.fit:28
msgid "self"
msgstr "self"

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr "Ajusta el transformador a `X` y `y` con los parámetros opcionales `fit_params` y devuelve una versión transformada de `X`."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs),                 default=None"

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr "Parámetros de ajuste adicionales."

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr "**X_new**"

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "ndarray array de forma (n_samples, n_features_new)"

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr "Arreglo transformado."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape [n_samples, n_encoded_features]"
msgstr "array-like o sparse matrix, forma [n_samples, n_encoded_features]"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform:8
msgid "The transformed data."
msgstr "Los datos transformados."

#: of sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform:24
msgid "**X_tr**"
msgstr "**X_tr**"

#: of sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform:13
msgid "Inverse transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: of sklearn.preprocessing._encoders.OrdinalEncoder.transform:8
msgid "The data to encode."
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder.transform:24
msgid "**X_out**"
msgstr "**X_out**"

#: of
msgid "sparse matrix or a 2-d array"
msgstr ""

#: of sklearn.preprocessing._encoders.OrdinalEncoder.transform:13
msgid "Transformed input."
msgstr "Entrada transformada."

#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:4
msgid "Examples using ``sklearn.preprocessing.OrdinalEncoder``"
msgstr "Ejemplos utilizando ``sklearn.preprocessing.OrdinalEncoder``"

#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:15
#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:23
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"

#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:34
#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:42
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"

#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:53
#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:61
#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:72
#: ../modules/generated/sklearn.preprocessing.OrdinalEncoder.examples:80
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"

