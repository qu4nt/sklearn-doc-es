msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-01 01:49\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.LassoLars.po\n"
"X-Crowdin-File-ID: 5492\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.LassoLars.rst:2
msgid ":mod:`sklearn.linear_model`.LassoLars"
msgstr ":mod:`sklearn.linear_model`.LassoLars"

#: of sklearn.linear_model._least_angle.LassoLars:2
msgid "Lasso model fit with Least Angle Regression a.k.a. Lars"
msgstr "Ajuste del modelo Lasso con la Regresión de Ángulo Mínimo, también conocida como Lars"

#: of sklearn.linear_model._least_angle.LassoLars:4
msgid "It is a Linear Model trained with an L1 prior as regularizer."
msgstr "Es un Modelo Lineal entrenado con un previo L1 como regularizador."

#: of sklearn.linear_model._least_angle.LassoLars:6
msgid "The optimization objective for Lasso is::"
msgstr "El objetivo de optimización para Lasso es::"

#: of sklearn.linear_model._least_angle.LassoLars:10
msgid "Read more in the :ref:`User Guide <least_angle_regression>`."
msgstr "Lee más en el :ref:`Manual de usuario <least_angle_regression>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars.fit
#: sklearn.linear_model._least_angle.LassoLars
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.linear_model._least_angle.LassoLars:19
msgid "**alpha**"
msgstr "**alpha**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.linear_model._least_angle.LassoLars:15
msgid "Constant that multiplies the penalty term. Defaults to 1.0. ``alpha = 0`` is equivalent to an ordinary least square, solved by :class:`LinearRegression`. For numerical reasons, using ``alpha = 0`` with the LassoLars object is not advised and you should prefer the LinearRegression object."
msgstr "Constante que multiplica los términos de penalización. Por defecto es 1.0. ``alpha = 0`` es equivalente a un mínimos cuadrados ordinarios, solucionado por :class:`LinearRegression`. Por razones numéricas, no se recomienda utilizar ``alpha = 0`` con el objeto LassoLars y debes preferir el objeto LinearRegression."

#: of sklearn.linear_model._least_angle.LassoLars:24
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._least_angle.LassoLars:22
msgid "whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:27
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "bool or int, default=False"
msgstr "bool o int, default=False"

#: of sklearn.linear_model._least_angle.LassoLars:27
msgid "Sets the verbosity amount."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:35
msgid "**normalize**"
msgstr "**normalize**"

#: of sklearn.linear_model._least_angle.LassoLars:30
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:40
msgid "**precompute**"
msgstr "**precompute**"

#: of
msgid "bool, 'auto' or array-like, default='auto'"
msgstr "bool, 'auto' o array-like, default='auto'"

#: of sklearn.linear_model._least_angle.LassoLars:38
msgid "Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument."
msgstr "Si usar una matriz precalculada Gram para acelerar los cálculos. Si se establece como ``'auto'``, nosotros decidimos. La matriz de Gram puede también ser pasada como un argumento."

#: of sklearn.linear_model._least_angle.LassoLars:43
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=500"
msgstr "int, default=500"

#: of sklearn.linear_model._least_angle.LassoLars:43
msgid "Maximum number of iterations to perform."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:50
msgid "**eps**"
msgstr "**eps**"

#: of
msgid "float, default=np.finfo(float).eps"
msgstr "float, default=np.finfo(float).eps"

#: of sklearn.linear_model._least_angle.LassoLars:46
msgid "The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the ``tol`` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:53
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._least_angle.LassoLars:53
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:59
msgid "**fit_path**"
msgstr "**fit_path**"

#: of sklearn.linear_model._least_angle.LassoLars:56
msgid "If ``True`` the full path is stored in the ``coef_path_`` attribute. If you compute the solution for a large problem or many targets, setting ``fit_path`` to ``False`` will lead to a speedup, especially with a small alpha."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:69
msgid "**positive**"
msgstr "**positive**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._least_angle.LassoLars:62
msgid "Restrict coefficients to be >= 0. Be aware that you might want to remove fit_intercept which is set True by default. Under the positive restriction the model coefficients will not converge to the ordinary-least-squares solution for small values of alpha. Only coefficients up to the smallest alpha value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso algorithm are typically in congruence with the solution of the coordinate descent Lasso estimator."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:76
msgid "**jitter**"
msgstr "**jitter**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.linear_model._least_angle.LassoLars:72
msgid "Upper bound on a uniform noise parameter to be added to the `y` values, to satisfy the model's assumption of one-at-a-time computations. Might help with stability."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:86
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, RandomState instance o None, default=None"

#: of sklearn.linear_model._least_angle.LassoLars:79
msgid "Determines random number generation for jittering. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`. Ignored if `jitter` is None."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._least_angle.LassoLars:95
msgid "**alphas_**"
msgstr "**alphas_**"

#: of
msgid "array-like of shape (n_alphas + 1,) or list of such arrays"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:91
msgid "Maximum of covariances (in absolute value) at each iteration. ``n_alphas`` is either ``max_iter``, ``n_features`` or the number of nodes in the path with ``alpha >= alpha_min``, whichever is smaller. If this is a list of array-like, the length of the outer list is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:99
msgid "**active_**"
msgstr "**active_**"

#: of
msgid "list of length n_alphas or list of such lists"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:98
msgid "Indices of active variables at the end of the path. If this is a list of list, the length of the outer list is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:105
msgid "**coef_path_**"
msgstr "**coef_path_**"

#: of
msgid "array-like of shape (n_features, n_alphas + 1) or list             of such arrays"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:102
msgid "If a list is passed it's expected to be one of n_targets such arrays. The varying values of the coefficients along the path. It is not present if the ``fit_path`` parameter is ``False``. If this is a list of array-like, the length of the outer list is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:108
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "array-like of shape (n_features,) or (n_targets, n_features)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:108
msgid "Parameter vector (w in the formulation formula)."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:111
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "float or array-like of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:111
msgid "Independent term in decision function."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:118
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "array-like or int"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:114
msgid "The number of iterations taken by lars_path to find the grid of alphas for each target."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:123
msgid ":obj:`lars_path`"
msgstr ":obj:`lars_path`"

#: of sklearn.linear_model._least_angle.LassoLars:125
msgid ":obj:`lasso_path`"
msgstr ":obj:`lasso_path`"

#: of sklearn.linear_model._least_angle.LassoLars:127
msgid ":obj:`Lasso`"
msgstr ":obj:`Lasso`"

#: of sklearn.linear_model._least_angle.LassoLars:129
msgid ":obj:`LassoCV`"
msgstr ":obj:`LassoCV`"

#: of sklearn.linear_model._least_angle.LassoLars:131
msgid ":obj:`LassoLarsCV`"
msgstr ":obj:`LassoLarsCV`"

#: of sklearn.linear_model._least_angle.LassoLars:133
msgid ":obj:`LassoLarsIC`"
msgstr ":obj:`LassoLarsIC`"

#: of sklearn.linear_model._least_angle.LassoLars:135
msgid ":obj:`sklearn.decomposition.sparse_encode`"
msgstr ":obj:`sklearn.decomposition.sparse_encode`"

#: of sklearn.linear_model._least_angle.LassoLars:141
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._least_angle.LassoLars:150
msgid "Methods"
msgstr "Métodos"

#: of sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.LassoLars.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.LassoLars.fit>`\\"

#: of sklearn.linear_model._least_angle.Lars.fit:2
#: sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid "Fit the model using X, y as training data."
msgstr "Ajusta el modelo utilizando X, y como datos de entrenamiento."

#: of sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.LassoLars.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.LassoLars.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.LassoLars.predict>`\\"
msgstr ":obj:`predict <sklearn.linear_model.LassoLars.predict>`\\"

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.LassoLars.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.LassoLars.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.LassoLars.set_params>`\\"
msgstr ":obj:`set_params <sklearn.linear_model.LassoLars.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._least_angle.LassoLars:158:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._least_angle.Lars.fit:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.linear_model._least_angle.Lars.fit:8
msgid "Training data."
msgstr "Datos de entrenamiento."

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._least_angle.Lars.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:15
msgid "**Xy**"
msgstr "**Xy**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets),                 default=None"
msgstr "array-like de forma (n_samples,) or (n_samples, n_targets),                 default=None"

#: of sklearn.linear_model._least_angle.Lars.fit:14
msgid "Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars.fit
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._least_angle.Lars.fit:31
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:20
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr "array-like o sparse matrix, de forma (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

