msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-24 02:23\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.BaggingRegressor.po\n"
"X-Crowdin-File-ID: 5636\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.BaggingRegressor.rst:2
msgid ":mod:`sklearn.ensemble`.BaggingRegressor"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:2
msgid "A Bagging regressor."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:4
msgid "A Bagging regressor is an ensemble meta-estimator that fits base regressors each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:12
msgid "This algorithm encompasses several works from the literature. When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting [R4d113ba76fc0-1]_. If samples are drawn with replacement, then the method is known as Bagging [R4d113ba76fc0-2]_. When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces [R4d113ba76fc0-3]_. Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches [R4d113ba76fc0-4]_."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:21
msgid "Read more in the :ref:`User Guide <bagging>`."
msgstr "Más información en el :ref:`Manual de usuario <bagging>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._bagging.BaggingRegressor
#: sklearn.ensemble._bagging.BaggingRegressor.predict
#: sklearn.ensemble._bagging.BaseBagging.fit
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:30
msgid "**base_estimator**"
msgstr ""

#: of
msgid "object, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:28
msgid "The base estimator to fit on random subsets of the dataset. If None, then the base estimator is a :class:`~sklearn.tree.DecisionTreeRegressor`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:33
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=10"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:33
msgid "The number of base estimators in the ensemble."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:40
msgid "**max_samples**"
msgstr ""

#: of
msgid "int or float, default=1.0"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:36
msgid "The number of samples to draw from X to train each base estimator (with replacement by default, see `bootstrap` for more details)."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:39
msgid "If int, then draw `max_samples` samples."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:40
msgid "If float, then draw `max_samples * X.shape[0]` samples."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:48
msgid "**max_features**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:43
msgid "The number of features to draw from X to train each base estimator ( without replacement by default, see `bootstrap_features` for more details)."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:47
msgid "If int, then draw `max_features` features."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:48
msgid "If float, then draw `max_features * X.shape[1]` features."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:52
msgid "**bootstrap**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:51
msgid "Whether samples are drawn with replacement. If False, sampling without replacement is performed."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:55
msgid "**bootstrap_features**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:55
msgid "Whether features are drawn with replacement."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:59
msgid "**oob_score**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:58
msgid "Whether to use out-of-bag samples to estimate the generalization error."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:64
msgid "**warm_start**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:62
msgid "When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new ensemble. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:70
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:67
msgid "The number of jobs to run in parallel for both :meth:`fit` and :meth:`predict`. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:78
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:73
msgid "Controls the random resampling of the original dataset (sample wise and feature wise). If the base estimator accepts a `random_state` attribute, a different seed is generated for each instance in the ensemble. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:84
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:81
msgid "Controls the verbosity when fitting and predicting."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:89
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:89
msgid "The base estimator from which the ensemble is grown."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:92
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:92
msgid "The number of features when :meth:`fit` is performed."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:95
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of estimators"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:95
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:98
msgid ":obj:`estimators_samples_ <estimators_samples_>`"
msgstr ""

#: of
msgid "list of arrays"
msgstr ""

#: of sklearn.ensemble.BaggingRegressor.estimators_samples_:2
#: sklearn.ensemble._bagging.BaggingRegressor:98
msgid "The subset of drawn samples for each base estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:101
msgid "**estimators_features_**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:101
msgid "The subset of drawn features for each base estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:105
msgid "**oob_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:104
msgid "Score of the training dataset obtained using an out-of-bag estimate. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:117
msgid "**oob_prediction_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:108
msgid "Prediction computed with out-of-bag estimate on the training set. If n_estimators is small it might be possible that a data point was never left out during the bootstrap. In this case, `oob_prediction_` might contain NaN. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:120
msgid "References"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:121
msgid "L. Breiman, \"Pasting small votes for classification in large databases and on-line\", Machine Learning, 36(1), 85-103, 1999."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:124
msgid "L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140, 1996."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:127
msgid "T. Ho, \"The random subspace method for constructing decision forests\", Pattern Analysis and Machine Intelligence, 20(8), 832-844, 1998."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:131
msgid "G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine Learning and Knowledge Discovery in Databases, 346-361, 2012."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:136
msgid "[R4d113ba76fc0-1]_, [R4d113ba76fc0-2]_, [R4d113ba76fc0-3]_, [R4d113ba76fc0-4]_"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:139
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:152
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.BaggingRegressor.fit>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
#: sklearn.ensemble._bagging.BaseBagging.fit:4
msgid "Build a Bagging ensemble of estimators from the training"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.BaggingRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.BaggingRegressor.predict>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor.predict:2
#: sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid "Predict regression target for X."
msgstr "Predice el objetivo de regresión para X."

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.BaggingRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr "Devuelve el coeficiente de determinación :math:`R^2` de la predicción."

#: of sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.BaggingRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._bagging.BaggingRegressor:160:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble.BaggingRegressor.estimators_samples_:4
msgid "Returns a dynamically generated list of indices identifying the samples used for fitting each member of the ensemble, i.e., the in-bag samples."
msgstr ""

#: of sklearn.ensemble.BaggingRegressor.estimators_samples_:8
msgid "Note: the list is re-created at each call to the property in order to reduce the object memory footprint by not storing the sampling data. Thus fetching the property may be slower than expected."
msgstr ""

#: of sklearn.ensemble._bagging.BaseBagging.fit:3
msgid "set (X, y)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.ensemble._bagging.BaggingRegressor.predict:11
#: sklearn.ensemble._bagging.BaseBagging.fit:10
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.ensemble._bagging.BaggingRegressor.predict:10
#: sklearn.ensemble._bagging.BaseBagging.fit:9
msgid "The training input samples. Sparse matrices are accepted only if they are supported by the base estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.ensemble._bagging.BaggingRegressor.predict:27
#: sklearn.ensemble._bagging.BaseBagging.fit:14
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like de forma (n_samples,)"

#: of sklearn.ensemble._bagging.BaseBagging.fit:13
msgid "The target values (class labels in classification, real numbers in regression)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._bagging.BaseBagging.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.ensemble._bagging.BaseBagging.fit:17
msgid "Sample weights. If None, then samples are equally weighted. Note that this is supported only if the base estimator supports sample weighting."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._bagging.BaggingRegressor.predict
#: sklearn.ensemble._bagging.BaseBagging.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._bagging.BaseBagging.fit:35
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor.predict:4
msgid "The predicted regression target of an input sample is computed as the mean predicted regression targets of the estimators in the ensemble."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingRegressor.predict:16
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

