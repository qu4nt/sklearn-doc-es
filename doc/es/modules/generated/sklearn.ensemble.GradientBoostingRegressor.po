msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:01\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.GradientBoostingRegressor.po\n"
"X-Crowdin-File-ID: 3092\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst:2
msgid ":mod:`sklearn.ensemble`.GradientBoostingRegressor"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:2
msgid "Gradient Boosting for regression."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:4
msgid "GB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage a regression tree is fit on the negative gradient of the given loss function."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:9
msgid "Read more in the :ref:`User Guide <gradient_boosting>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble._gb.BaseGradientBoosting.fit
#: sklearn.ensemble._gb.GradientBoostingRegressor
#: sklearn.ensemble._gb.GradientBoostingRegressor.apply
#: sklearn.ensemble._gb.GradientBoostingRegressor.predict
#: sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:18
msgid "**loss**"
msgstr ""

#: of
msgid "{'ls', 'lad', 'huber', 'quantile'}, default='ls'"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:14
msgid "Loss function to be optimized. 'ls' refers to least squares regression. 'lad' (least absolute deviation) is a highly robust loss function solely based on order information of the input variables. 'huber' is a combination of the two. 'quantile' allows quantile regression (use `alpha` to specify the quantile)."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:22
msgid "**learning_rate**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:21
msgid "Learning rate shrinks the contribution of each tree by `learning_rate`. There is a trade-off between learning_rate and n_estimators."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:27
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:25
msgid "The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:34
msgid "**subsample**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:30
msgid "The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. `subsample` interacts with the parameter `n_estimators`. Choosing `subsample < 1.0` leads to a reduction of variance and an increase in bias."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:48
msgid "**criterion**"
msgstr ""

#: of
msgid "{'friedman_mse', 'mse', 'mae'}, default='friedman_mse'"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:37
msgid "The function to measure the quality of a split. Supported criteria are \"friedman_mse\" for the mean squared error with improvement score by Friedman, \"mse\" for mean squared error, and \"mae\" for the mean absolute error. The default value of \"friedman_mse\" is generally the best as it can provide a better approximation in some cases."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:45
msgid "`criterion='mae'` is deprecated and will be removed in version 1.1 (renaming of 0.26). The correct way of minimizing the absolute error is to use `loss='lad'` instead."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:59
msgid "**min_samples_split**"
msgstr ""

#: of
msgid "int or float, default=2"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:51
msgid "The minimum number of samples required to split an internal node:"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:53
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:54
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:58
#: sklearn.ensemble._gb.GradientBoostingRegressor:73
msgid "Added float values for fractions."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:74
msgid "**min_samples_leaf**"
msgstr ""

#: of
msgid "int or float, default=1"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:62
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:68
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:69
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:79
msgid "**min_weight_fraction_leaf**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:77
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:85
msgid "**max_depth**"
msgstr ""

#: of
msgid "int, default=3"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:82
msgid "Maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:103
msgid "**min_impurity_decrease**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:88
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:91
msgid "The weighted impurity decrease equation is the following::"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:96
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:100
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:114
msgid "**min_impurity_split**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:106
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:109
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:121
msgid "**init**"
msgstr ""

#: of
msgid "estimator or 'zero', default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:117
msgid "An estimator object that is used to compute the initial predictions. ``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the initial raw predictions are set to zero. By default a ``DummyEstimator`` is used, predicting either the average target value (for loss='ls'), or a quantile for the other losses."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:131
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:124
msgid "Controls the random seed given to each Tree estimator at each boosting iteration. In addition, it controls the random permutation of the features at each split (see Notes for more details). It also controls the random spliting of the training data to obtain a validation set if `n_iter_no_change` is not None. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:150
msgid "**max_features**"
msgstr ""

#: of
msgid "{'auto', 'sqrt', 'log2'}, int or float, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:134
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:136
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:137
msgid "If float, then `max_features` is a fraction and `int(max_features * n_features)` features are considered at each split."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:140
msgid "If \"auto\", then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:141
msgid "If \"sqrt\", then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:142
msgid "If \"log2\", then `max_features=log2(n_features)`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:143
msgid "If None, then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:145
msgid "Choosing `max_features < n_features` leads to a reduction of variance and an increase in bias."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:148
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:154
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=0.9"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:153
msgid "The alpha-quantile of the huber loss function and the quantile loss function. Only if ``loss='huber'`` or ``loss='quantile'``."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:159
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:157
msgid "Enable verbose output. If 1 then it prints progress and performance once in a while (the more trees the lower the frequency). If greater than 1 then it prints progress and performance for every tree."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:164
msgid "**max_leaf_nodes**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:162
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:169
msgid "**warm_start**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:167
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:176
msgid "**validation_fraction**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:172
msgid "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if ``n_iter_no_change`` is set to an integer."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:187
msgid "**n_iter_no_change**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:179
msgid "``n_iter_no_change`` is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside ``validation_fraction`` size of the training data as validation and terminate training when validation score is not improving in all of the previous ``n_iter_no_change`` numbers of iterations."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:194
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-4"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:190
msgid "Tolerance for the early stopping. When the loss is not improving by at least tol for ``n_iter_no_change`` iterations (if set to a number), the training stops."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:205
msgid "**ccp_alpha**"
msgstr ""

#: of
msgid "non-negative float, default=0.0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:197
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:210
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.GradientBoostingRegressor.feature_importances_:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:210
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:217
msgid "**oob_improvement_**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:213
msgid "The improvement in loss (= deviance) on the out-of-bag samples relative to the previous iteration. ``oob_improvement_[0]`` is the improvement in loss of the first stage over the ``init`` estimator. Only available if ``subsample < 1.0``"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:222
msgid "**train_score_**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:220
msgid "The i-th score ``train_score_[i]`` is the deviance (= loss) of the model at iteration ``i`` on the in-bag sample. If ``subsample == 1`` this is the deviance on the training data."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:225
msgid "**loss_**"
msgstr ""

#: of
msgid "LossFunction"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:225
msgid "The concrete ``LossFunction`` object."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:229
msgid "**init_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:228
msgid "The estimator that provides the initial predictions. Set via the ``init`` argument or ``loss.init_estimator``."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:232
msgid "**estimators_**"
msgstr ""

#: of
msgid "ndarray of DecisionTreeRegressor of shape (n_estimators, 1)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:232
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:239
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:235
msgid "The number of classes, set to 1 for regressors."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:237
msgid "Attribute ``n_classes_`` was deprecated in version 0.24 and will be removed in 1.1 (renaming of 0.26)."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:244
msgid "**n_estimators_**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:242
msgid "The number of estimators as selected by early stopping (if ``n_iter_no_change`` is specified). Otherwise it is set to ``n_estimators``."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:247
msgid "**n_features_**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:247
msgid "The number of data features."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:253
msgid "**max_features_**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:250
msgid "The inferred value of max_features."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:258
msgid ":obj:`HistGradientBoostingRegressor`"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:259
msgid "Histogram-based Gradient Boosting Classification Tree."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:260
msgid ":obj:`sklearn.tree.DecisionTreeRegressor`"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:261
msgid "A decision tree regressor."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:262
msgid ":obj:`sklearn.tree.RandomForestRegressor`"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:263
msgid "A random forest regressor."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.ensemble._gb.GradientBoostingRegressor:267
msgid "Notes"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:268
msgid "The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data and ``max_features=n_features``, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, ``random_state`` has to be fixed."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:276
msgid "References"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:277
msgid "J. Friedman, Greedy Function Approximation: A Gradient Boosting Machine, The Annals of Statistics, Vol. 29, No. 5, 2001."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:280
msgid "Friedman, Stochastic Gradient Boosting, 1999"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:282
msgid "T. Hastie, R. Tibshirani and J. Friedman. Elements of Statistical Learning Ed. 2, Springer, 2009."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:290
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:306
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.GradientBoostingRegressor.apply>`\\"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.apply:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Apply trees in the ensemble to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.GradientBoostingRegressor.fit>`\\"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Fit the gradient boosting model."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.GradientBoostingRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.GradientBoostingRegressor.predict>`\\"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.predict:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Predict regression target for X."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.GradientBoostingRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.GradientBoostingRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid ":obj:`staged_predict <sklearn.ensemble.GradientBoostingRegressor.staged_predict>`\\"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:2
#: sklearn.ensemble._gb.GradientBoostingRegressor:316:<autosummary>:1
msgid "Predict regression target at each stage for X."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:10
#: sklearn.ensemble._gb.GradientBoostingRegressor.apply:11
#: sklearn.ensemble._gb.GradientBoostingRegressor.predict:10
#: sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.apply:9
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted to a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.ensemble.GradientBoostingRegressor.feature_importances_
#: sklearn.ensemble._gb.BaseGradientBoosting.fit
#: sklearn.ensemble._gb.GradientBoostingRegressor.apply
#: sklearn.ensemble._gb.GradientBoostingRegressor.predict
#: sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.apply:28
msgid "**X_leaves**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_estimators)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.apply:16
msgid "For each datapoint x in X and for each tree in the ensemble, return the index of the leaf x ends up in each estimator."
msgstr ""

#: of sklearn.ensemble.GradientBoostingRegressor.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.GradientBoostingRegressor.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.GradientBoostingRegressor.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.GradientBoostingRegressor.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:8
#: sklearn.ensemble._gb.GradientBoostingRegressor.predict:8
#: sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:10
msgid "The input samples. Internally, it will be converted to ``dtype=np.float32`` and if a sparse matrix is provided to a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:15
#: sklearn.ensemble._gb.GradientBoostingRegressor.predict:26
#: sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:28
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:13
msgid "Target values (strings or integers in classification, real numbers in regression) For classification, labels must correspond to classes."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:22
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:18
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:31
msgid "**monitor**"
msgstr ""

#: of
msgid "callable, default=None"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:25
msgid "The monitor is called after each iteration with the current iteration, a reference to the estimator and the local variables of ``_fit_stages`` as keyword arguments ``callable(i, self, locals())``. If the callable returns ``True`` the fitting procedure is stopped. The monitor can be used for various things such as computing held-out estimates, early stopping, model introspect, and snapshoting."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:47
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.predict:15
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:4
msgid "This method allows monitoring (i.e. determine error on testing set) after each stage."
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict:17
msgid "The predicted value of the input samples."
msgstr ""

#: ../modules/generated/sklearn.ensemble.GradientBoostingRegressor.examples:4
msgid "Examples using ``sklearn.ensemble.GradientBoostingRegressor``"
msgstr ""

#: ../modules/generated/sklearn.ensemble.GradientBoostingRegressor.examples:15
#: ../modules/generated/sklearn.ensemble.GradientBoostingRegressor.examples:23
msgid ":ref:`sphx_glr_auto_examples_applications_plot_model_complexity_influence.py`"
msgstr ""

