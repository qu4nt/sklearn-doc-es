msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-31 18:29\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.LassoLarsCV.po\n"
"X-Crowdin-File-ID: 5588\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.LassoLarsCV.rst:2
msgid ":mod:`sklearn.linear_model`.LassoLarsCV"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:2
msgid "Cross-validated Lasso, using the LARS algorithm."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:4
msgid "See glossary entry for :term:`cross-validation estimator`."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:6
msgid "The optimization objective for Lasso is::"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:10
msgid "Read more in the :ref:`User Guide <least_angle_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.LarsCV.fit
#: sklearn.linear_model._least_angle.LassoLarsCV
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:17
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._least_angle.LassoLarsCV:15
msgid "whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:20
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "bool or int, default=False"
msgstr "bool o int, default=False"

#: of sklearn.linear_model._least_angle.LassoLarsCV:20
msgid "Sets the verbosity amount."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:23
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=500"
msgstr "int, default=500"

#: of sklearn.linear_model._least_angle.LassoLarsCV:23
msgid "Maximum number of iterations to perform."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:31
msgid "**normalize**"
msgstr "**normalize**"

#: of sklearn.linear_model._least_angle.LassoLarsCV:26
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:36
msgid "**precompute**"
msgstr "**precompute**"

#: of
msgid "bool or 'auto' , default='auto'"
msgstr "bool o 'auto' , default='auto'"

#: of sklearn.linear_model._least_angle.LassoLarsCV:34
msgid "Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix cannot be passed as argument since we will use only subsets of X."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:53
msgid "**cv**"
msgstr "**cv**"

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr "int, cross-validation generator o un iterable, default=None"

#: of sklearn.linear_model._least_angle.LassoLarsCV:39
msgid "Determines the cross-validation splitting strategy. Possible inputs for cv are:"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:42
msgid "None, to use the default 5-fold cross-validation,"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:43
msgid "integer, to specify the number of folds."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:44
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:45
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:47
msgid "For integer/None inputs, :class:`KFold` is used."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:49
msgid "Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:52
msgid "``cv`` default value if None changed from 3-fold to 5-fold."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:57
msgid "**max_n_alphas**"
msgstr "**max_n_alphas**"

#: of
msgid "int, default=1000"
msgstr "int, default=1000"

#: of sklearn.linear_model._least_angle.LassoLarsCV:56
msgid "The maximum number of points on the path used to compute the residuals in the cross-validation"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:63
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int or None, default=None"
msgstr "int o None, default=None"

#: of sklearn.linear_model._least_angle.LassoLarsCV:60
msgid "Number of CPUs to use during the cross validation. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:70
msgid "**eps**"
msgstr "**eps**"

#: of
msgid "float, default=np.finfo(float).eps"
msgstr "float, default=np.finfo(float).eps"

#: of sklearn.linear_model._least_angle.LassoLarsCV:66
msgid "The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the ``tol`` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:73
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._least_angle.LassoLarsCV:73
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:88
msgid "**positive**"
msgstr "**positive**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._least_angle.LassoLarsCV:76
msgid "Restrict coefficients to be >= 0. Be aware that you might want to remove fit_intercept which is set True by default. Under the positive restriction the model coefficients do not converge to the ordinary-least-squares solution for small values of alpha. Only coefficients up to the smallest alpha value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso algorithm are typically in congruence with the solution of the coordinate descent Lasso estimator. As a consequence using LassoLarsCV only makes sense for problems where a sparse solution is expected and/or reached."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._least_angle.LassoLarsCV:93
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "array-like of shape (n_features,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:93
msgid "parameter vector (w in the formulation formula)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:96
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "float"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:96
msgid "independent term in decision function."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:99
msgid "**coef_path_**"
msgstr "**coef_path_**"

#: of
msgid "array-like of shape (n_features, n_alphas)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:99
msgid "the varying values of the coefficients along the path"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:102
msgid "**alpha_**"
msgstr "**alpha_**"

#: of sklearn.linear_model._least_angle.LassoLarsCV:102
msgid "the estimated regularization parameter alpha"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:105
msgid "**alphas_**"
msgstr "**alphas_**"

#: of
msgid "array-like of shape (n_alphas,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:105
msgid "the different values of alpha along the path"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:108
msgid "**cv_alphas_**"
msgstr "**cv_alphas_**"

#: of
msgid "array-like of shape (n_cv_alphas,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:108
msgid "all the values of alpha along the path for the different folds"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:112
msgid "**mse_path_**"
msgstr "**mse_path_**"

#: of
msgid "array-like of shape (n_folds, n_cv_alphas)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:111
msgid "the mean square error on left-out for each fold along the path (alpha values given by ``cv_alphas``)"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:115
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "array-like or int"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:115
msgid "the number of iterations run by Lars with the optimal alpha."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:121
msgid "**active_**"
msgstr "**active_**"

#: of
msgid "list of int"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:118
msgid "Indices of active variables at the end of the path."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:126
msgid ":obj:`lars_path`, :obj:`LassoLars`, :obj:`LarsCV`, :obj:`LassoCV`"
msgstr ":obj:`lars_path`, :obj:`LassoLars`, :obj:`LarsCV`, :obj:`LassoCV`"

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.linear_model._least_angle.LassoLarsCV:130
msgid "Notes"
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:131
msgid "The object solves the same problem as the LassoCV object. However, unlike the LassoCV, it find the relevant alphas values by itself. In general, because of this property, it will be more stable. However, it is more fragile to heavily multicollinear datasets."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:136
msgid "It is more efficient than the LassoCV if only a small number of features are selected compared to the total number, for instance if there are very few samples compared to the number of features."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:142
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._least_angle.LassoLarsCV:155
msgid "Methods"
msgstr "Métodos"

#: of sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.LassoLarsCV.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.LassoLarsCV.fit>`\\"

#: of sklearn.linear_model._least_angle.LarsCV.fit:2
#: sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid "Fit the model using X, y as training data."
msgstr "Ajusta el modelo utilizando X, y como datos de entrenamiento."

#: of sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.LassoLarsCV.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.LassoLarsCV.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.LassoLarsCV.predict>`\\"
msgstr ":obj:`predict <sklearn.linear_model.LassoLarsCV.predict>`\\"

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.LassoLarsCV.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.LassoLarsCV.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.LassoLarsCV.set_params>`\\"
msgstr ":obj:`set_params <sklearn.linear_model.LassoLarsCV.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._least_angle.LassoLarsCV:163:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._least_angle.LarsCV.fit:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.linear_model._least_angle.LarsCV.fit:8
msgid "Training data."
msgstr "Datos de entrenamiento."

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._least_angle.LarsCV.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.LarsCV.fit
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._least_angle.LarsCV.fit:27
msgid "**self**"
msgstr "**self**"

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._least_angle.LarsCV.fit:16
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr "array-like o sparse matrix, de forma (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.linear_model.LassoLarsCV.examples:4
msgid "Examples using ``sklearn.linear_model.LassoLarsCV``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.LassoLarsCV.examples:15
#: ../modules/generated/sklearn.linear_model.LassoLarsCV.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_lasso_model_selection.py`"
msgstr ""

