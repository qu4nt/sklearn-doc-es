msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-15 12:20\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.StackingClassifier.po\n"
"X-Crowdin-File-ID: 5110\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.StackingClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.StackingClassifier"
msgstr ":mod:`sklearn.ensemble`.StackingClassifier"

#: of sklearn.ensemble._stacking.StackingClassifier:2
msgid "Stack of estimators with a final classifier."
msgstr "Pila de estimadores con un clasificador final."

#: of sklearn.ensemble._stacking.StackingClassifier:4
msgid "Stacked generalization consists in stacking the output of individual estimator and use a classifier to compute the final prediction. Stacking allows to use the strength of each individual estimator by using their output as input of a final estimator."
msgstr "La generalización apilada consiste en apilar la salida del estimador individual y utilizar un clasificador para calcular la predicción final. El apilamiento permite el uso de la fuerza de cada estimador individual, usando su salida como entrada de un estimador final."

#: of sklearn.ensemble._stacking.StackingClassifier:9
msgid "Note that `estimators_` are fitted on the full `X` while `final_estimator_` is trained using cross-validated predictions of the base estimators using `cross_val_predict`."
msgstr "Tenga en cuenta que `estimators_` son encajados en el `X` completo mientras que `final_estimator_` es entrenado utilizando predicciones validadas en cruz de los estimadores base utilizando `cross_val_predict`."

#: of sklearn.ensemble._stacking.StackingClassifier:13
msgid "Read more in the :ref:`User Guide <stacking>`."
msgstr "Más información en el :ref:`Manual de usuario <stacking>`."

#: of sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params
#: sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params
#: sklearn.ensemble._stacking.StackingClassifier
#: sklearn.ensemble._stacking.StackingClassifier.decision_function
#: sklearn.ensemble._stacking.StackingClassifier.fit
#: sklearn.ensemble._stacking.StackingClassifier.predict
#: sklearn.ensemble._stacking.StackingClassifier.predict_proba
#: sklearn.ensemble._stacking.StackingClassifier.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.ensemble._stacking.StackingClassifier:22
msgid "**estimators**"
msgstr "**estimators**"

#: of
msgid "list of (str, estimator)"
msgstr "lista de (str, estimator)"

#: of sklearn.ensemble._stacking.StackingClassifier:20
msgid "Base estimators which will be stacked together. Each element of the list is defined as a tuple of string (i.e. name) and an estimator instance. An estimator can be set to 'drop' using `set_params`."
msgstr "Estimadores base que serán apilados juntos. Cada elemento de la lista es definido como una tupla de cadena (es decir, nombre) y una instancia de estimador. Un estimador puede ser establecido como 'drop' utilizando `set_params`."

#: of sklearn.ensemble._stacking.StackingClassifier:27
msgid "**final_estimator**"
msgstr "**final_estimator**"

#: of
msgid "estimator, default=None"
msgstr "estimador, default=None"

#: of sklearn.ensemble._stacking.StackingClassifier:25
msgid "A classifier which will be used to combine the base estimators. The default classifier is a :class:`~sklearn.linear_model.LogisticRegression`."
msgstr "Un clasificador que sera utilizado para combinar los estimadores base. El clasificador predeterminado es un :class:`~sklearn.linear_model.LogisticRegression`."

#: of sklearn.ensemble._stacking.StackingClassifier:51
msgid "**cv**"
msgstr "**cv**"

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr "int, generador de validación cruzada o un iterable, default=None"

#: of sklearn.ensemble._stacking.StackingClassifier:30
msgid "Determines the cross-validation splitting strategy used in `cross_val_predict` to train `final_estimator`. Possible inputs for cv are:"
msgstr "Determina la estrategia de división de validación cruzada utilizada en `cross_val_predict` para entrenar el `final_estimator`. Las entradas posibles para cv son:"

#: of sklearn.ensemble._stacking.StackingClassifier:34
msgid "None, to use the default 5-fold cross validation,"
msgstr "None, para usar la validación cruzada de 5 partes por defecto,"

#: of sklearn.ensemble._stacking.StackingClassifier:35
msgid "integer, to specify the number of folds in a (Stratified) KFold,"
msgstr "un entero, para especificar el número de plegados en un KFold (estratificado)"

#: of sklearn.ensemble._stacking.StackingClassifier:36
msgid "An object to be used as a cross-validation generator,"
msgstr "Un objeto a ser usado como generador de validación cruzada,"

#: of sklearn.ensemble._stacking.StackingClassifier:37
msgid "An iterable yielding train, test splits."
msgstr "Un iterable dando divisiones de entrenamiento o prueba."

#: of sklearn.ensemble._stacking.StackingClassifier:39
msgid "For integer/None inputs, if the estimator is a classifier and y is either binary or multiclass, :class:`~sklearn.model_selection.StratifiedKFold` is used. In all other cases, :class:`~sklearn.model_selection.KFold` is used."
msgstr "Para entradas de enteros/None, si el estimador es un clasificador e y es binario o multiclase, :class:`~sklearn.model_selection.StratifiedKFold` es utilizado. En todos los demás casos, :class:`~sklearn.model_selection.KFold` es utilizado."

#: of sklearn.ensemble._stacking.StackingClassifier:44
msgid "Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here."
msgstr "Consulte :ref:`Guía de usuario <cross_validation>` para las diversas estrategias de validación cruzada que pueden ser utilizadas aquí."

#: of sklearn.ensemble._stacking.StackingClassifier:48
msgid "A larger number of split will provide no benefits if the number of training samples is large enough. Indeed, the training time will increase. ``cv`` is not used for model evaluation but for prediction."
msgstr "Un número grande de divisiones no proporcionara beneficios si el número de muestras de entrenamiento es lo suficientemente grande. De hecho, el tiempo de entrenamiento aumentará. ``cv`` no es utilizado para la evaluación del modelo sino para la predicción."

#: of sklearn.ensemble._stacking.StackingClassifier:61
msgid "**stack_method**"
msgstr "**stack_method**"

#: of
msgid "{'auto', 'predict_proba', 'decision_function', 'predict'},             default='auto'"
msgstr "{'auto', 'predict_proba', 'decision_function', 'predict'},             default='auto'"

#: of sklearn.ensemble._stacking.StackingClassifier:54
msgid "Methods called for each base estimator. It can be:"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:56
msgid "if 'auto', it will try to invoke, for each estimator, `'predict_proba'`, `'decision_function'` or `'predict'` in that order."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:59
msgid "otherwise, one of `'predict_proba'`, `'decision_function'` or `'predict'`. If the method is not implemented by the estimator, it will raise an error."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:66
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:64
msgid "The number of jobs to run in parallel all `estimators` `fit`. `None` means 1 unless in a `joblib.parallel_backend` context. -1 means using all processors. See Glossary for more details."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:72
msgid "**passthrough**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:69
msgid "When False, only the predictions of estimators will be used as training data for `final_estimator`. When True, the `final_estimator` is trained on the predictions as well as the original training data."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:78
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:75
msgid "Verbosity level."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:83
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:83
msgid "Class labels."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:88
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of estimators"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:86
msgid "The elements of the estimators parameter, having been fitted on the training data. If an estimator has been set to `'drop'`, it will not appear in `estimators_`."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:91
msgid "**named_estimators_** : :class:`~sklearn.utils.Bunch`"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:90
msgid "Bunch"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:91
msgid "Attribute to access any fitted sub-estimators by name."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:94
msgid "**final_estimator_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:94
msgid "The classifier which predicts given the output of `estimators_`."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:101
msgid "**stack_method_**"
msgstr ""

#: of
msgid "list of str"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:97
msgid "The method used by each base estimator."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:104
msgid "Notes"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:105
msgid "When `predict_proba` is used by each estimator (i.e. most of the time for `stack_method='auto'` or specifically for `stack_method='predict_proba'`), The first column predicted by each estimator will be dropped in the case of a binary classification problem. Indeed, both feature will be perfectly collinear."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:112
msgid "References"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:113
msgid "Wolpert, David H. \"Stacked generalization.\" Neural networks 5.2 (1992): 241-259."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:118
msgid "[Rb91ed47a817e-1]_"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:121
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:146
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`decision_function <sklearn.ensemble.StackingClassifier.decision_function>`\\"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.decision_function:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Predict decision function for samples in X using `final_estimator_.decision_function`."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.StackingClassifier.fit>`\\"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.fit:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Fit the estimators."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.ensemble.StackingClassifier.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.StackingClassifier.get_params>`\\"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Get the parameters of an estimator from the ensemble."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.StackingClassifier.predict>`\\"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Predict target for X."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.StackingClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict_proba:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Predict class probabilities for X using `final_estimator_.predict_proba`."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.StackingClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.StackingClassifier.set_params>`\\"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Set the parameters of an estimator from the ensemble."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid ":obj:`transform <sklearn.ensemble.StackingClassifier.transform>`\\"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.transform:2
#: sklearn.ensemble._stacking.StackingClassifier:158:<autosummary>:1
msgid "Return class labels or probabilities for X for each estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.ensemble._stacking.StackingClassifier.decision_function:10
#: sklearn.ensemble._stacking.StackingClassifier.fit:9
#: sklearn.ensemble._stacking.StackingClassifier.predict:9
#: sklearn.ensemble._stacking.StackingClassifier.predict_proba:10
#: sklearn.ensemble._stacking.StackingClassifier.transform:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.decision_function:9
#: sklearn.ensemble._stacking.StackingClassifier.predict:8
#: sklearn.ensemble._stacking.StackingClassifier.predict_proba:9
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.ensemble._stacking.StackingClassifier.decision_function
#: sklearn.ensemble._stacking.StackingClassifier.fit
#: sklearn.ensemble._stacking.StackingClassifier.predict
#: sklearn.ensemble._stacking.StackingClassifier.predict_proba
#: sklearn.ensemble._stacking.StackingClassifier.transform
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.decision_function:26
msgid "**decisions**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes-1) / 2)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.decision_function:15
msgid "The decision function computed the final estimator."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.fit:8
#: sklearn.ensemble._stacking.StackingClassifier.transform:8
msgid "Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.ensemble._stacking.StackingClassifier.fit:12
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.fit:12
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._stacking.StackingClassifier.fit:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.fit:15
msgid "Sample weights. If None, then samples are equally weighted. Note that this is supported only if all underlying estimators support sample weights."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.fit:33
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:4
msgid "Returns the parameters given in the constructor as well as the estimators contained within the `estimators` parameter."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:23
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params:10
msgid "Setting it to True gets the various estimators and the parameters of the estimators as well."
msgstr ""

#: of sklearn.ensemble.StackingClassifier.n_features_in_:2
msgid "Number of features seen during :term:`fit`."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict:15
msgid "**\\*\\*predict_params**"
msgstr ""

#: of
msgid "dict of str -> obj"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict:12
msgid "Parameters to the `predict` called by the `final_estimator`. Note that this may be used to return uncertainties from some estimators with `return_std` or `return_cov`. Be aware that it will only accounts for uncertainty in the final estimator."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict:31
msgid "**y_pred**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_output)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict:20
msgid "Predicted targets."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict_proba:26
msgid "**probabilities**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes) or             list of ndarray of shape (n_output,)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.predict_proba:15
msgid "The class probabilities of the input samples."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:4
msgid "Valid parameter keys can be listed with `get_params()`. Note that you can directly set the parameters of the estimators contained in `estimators`."
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:27
msgid "**\\*\\*params**"
msgstr ""

#: of
msgid "keyword arguments"
msgstr ""

#: of sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params:11
msgid "Specific parameters using e.g. `set_params(parameter_name=new_value)`. In addition, to setting the parameters of the estimator, the individual estimator of the estimators can also be set, or can be removed by setting them to 'drop'."
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.transform:25
msgid "**y_preds**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_estimators) or                 (n_samples, n_classes * n_estimators)"
msgstr ""

#: of sklearn.ensemble._stacking.StackingClassifier.transform:14
msgid "Prediction outputs for each estimator."
msgstr ""

#: ../modules/generated/sklearn.ensemble.StackingClassifier.examples:4
msgid "Examples using ``sklearn.ensemble.StackingClassifier``"
msgstr ""

#: ../modules/generated/sklearn.ensemble.StackingClassifier.examples:15
#: ../modules/generated/sklearn.ensemble.StackingClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
msgstr ""

