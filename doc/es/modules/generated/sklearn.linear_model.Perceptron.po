msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:02\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.Perceptron.po\n"
"X-Crowdin-File-ID: 4922\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.Perceptron.rst:2
msgid ":mod:`sklearn.linear_model`.Perceptron"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:2
msgid "Read more in the :ref:`User Guide <perceptron>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._perceptron.Perceptron
#: sklearn.linear_model._stochastic_gradient.BaseSGD.set_params
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:8
msgid "**penalty**"
msgstr ""

#: of
msgid "{'l2','l1','elasticnet'}, default=None"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:8
msgid "The penalty (aka regularization term) to be used."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:12
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=0.0001"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:11
msgid "Constant that multiplies the regularization term if regularization is used."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:19
msgid "**l1_ratio**"
msgstr ""

#: of
msgid "float, default=0.15"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:15
msgid "The Elastic Net mixing parameter, with `0 <= l1_ratio <= 1`. `l1_ratio=0` corresponds to L2 penalty, `l1_ratio=1` to L1. Only used if `penalty='elasticnet'`."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:23
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:22
msgid "Whether the intercept should be estimated or not. If False, the data is assumed to be already centered."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:30
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:26
msgid "The maximum number of passes over the training data (aka epochs). It only impacts the behavior in the ``fit`` method, and not the :meth:`partial_fit` method."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:36
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:33
msgid "The stopping criterion. If it is not None, the iterations will stop when (loss > previous_loss - tol)."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:39
msgid "**shuffle**"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:39
msgid "Whether or not the training data should be shuffled after each epoch."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:42
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:42
msgid "The verbosity level"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:45
msgid "**eta0**"
msgstr ""

#: of
msgid "double, default=1"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:45
msgid "Constant by which the updates are multiplied."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:52
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:48
msgid "The number of CPUs to use to do the OVA (One Versus All, for multi-class problems) computation. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:58
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:55
msgid "Used to shuffle the training data, when ``shuffle`` is set to ``True``. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:67
msgid "**early_stopping**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:61
msgid "Whether to use early stopping to terminate training when validation. score is not improving. If set to True, it will automatically set aside a stratified fraction of training data as validation and terminate training when validation score is not improving by at least tol for n_iter_no_change consecutive epochs."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:74
msgid "**validation_fraction**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:70
msgid "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is True."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:79
msgid "**n_iter_no_change**"
msgstr ""

#: of
msgid "int, default=5"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:77
msgid "Number of iterations with no improvement to wait before early stopping."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:89
msgid "**class_weight**"
msgstr ""

#: of
msgid "dict, {class_label: weight} or \"balanced\", default=None"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:82
msgid "Preset for the class_weight fit parameter."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:84
msgid "Weights associated with classes. If not given, all classes are supposed to have weight one."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:87
msgid "The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:97
msgid "**warm_start**"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:92
msgid "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:102
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:102
msgid "The unique classes labels."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:105
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features) if n_classes == 2 else             (n_classes, n_features)"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:105
msgid "Weights assigned to the features."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:108
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (1,) if n_classes == 2 else (n_classes,)"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:108
msgid "Constants in decision function."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:112
msgid "**loss_function_**"
msgstr ""

#: of
msgid "concreteÂ LossFunction"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:111
msgid "The function that determines the loss, or difference between the output of the algorithm and the target values."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:116
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:115
msgid "The actual number of iterations to reach the stopping criterion. For multiclass fits, it is the maximum over every binary fit."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:123
msgid "**t_**"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:119
msgid "Number of weight updates performed during training. Same as ``(n_iter_ * n_samples)``."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:128
msgid ":obj:`SGDClassifier`"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:24
#: sklearn.linear_model._perceptron.Perceptron:132
msgid "Notes"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:133
msgid "``Perceptron`` is a classification algorithm which shares the same underlying implementation with ``SGDClassifier``. In fact, ``Perceptron()`` is equivalent to `SGDClassifier(loss=\"perceptron\", eta0=1, learning_rate=\"constant\", penalty=None)`."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:139
msgid "References"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:140
msgid "https://en.wikipedia.org/wiki/Perceptron and references therein."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:147
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:158
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`decision_function <sklearn.linear_model.Perceptron.decision_function>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Predict confidence scores for samples."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`densify <sklearn.linear_model.Perceptron.densify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Convert coefficient matrix to dense array format."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.Perceptron.fit>`\\"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:2
msgid "Fit linear model with Stochastic Gradient Descent."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.Perceptron.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.linear_model.Perceptron.partial_fit>`\\"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:2
msgid "Perform one epoch of stochastic gradient descent on given samples."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.Perceptron.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Predict class labels for samples in X."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.Perceptron.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.Perceptron.set_params>`\\"
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
#: sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:2
msgid "Set and validate the parameters of estimator."
msgstr ""

#: of sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid ":obj:`sparsify <sklearn.linear_model.Perceptron.sparsify>`\\"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:2
#: sklearn.linear_model._perceptron.Perceptron:170:<autosummary>:1
msgid "Convert coefficient matrix to sparse format."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:4
msgid "The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:8
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:12
msgid "**X**"
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._base.SparseCoefMixin.densify
#: sklearn.linear_model._base.SparseCoefMixin.sparsify
#: sklearn.linear_model._stochastic_gradient.BaseSGD.set_params
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit
msgid "Returns"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:28
msgid "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:15
msgid "Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:4
msgid "Converts the ``coef_`` member (back) to a numpy.ndarray. This is the default format of ``coef_`` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:24
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:21
msgid "self"
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.densify:13
#: sklearn.linear_model._base.SparseCoefMixin.sparsify:14
msgid "Fitted estimator."
msgstr ""

#: of
msgid "{array-like, sparse matrix}, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:11
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:15
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:14
msgid "**coef_init**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes, n_features), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:14
msgid "The initial coefficients to warm-start the optimization."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:17
msgid "**intercept_init**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:17
msgid "The initial intercept to warm-start the optimization."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:23
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:27
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like, shape (n_samples,), default=None"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:20
msgid "Weights applied to individual samples. If not provided, uniform weights are assumed. These weights will be multiplied with class_weight (passed through the constructor) if class_weight is specified."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:39
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:43
msgid "self :"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit:28
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:32
msgid "Returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:4
msgid "Internally, this method uses ``max_iter = 1``. Therefore, it is not guaranteed that a minimum of the cost function is reached after calling it once. Matters such as objective convergence and early stopping should be handled by the user."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:12
msgid "Subset of the training data."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:15
msgid "Subset of the target values."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:23
msgid "**classes**"
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:18
msgid "Classes across all calls to partial_fit. Can be obtained by via `np.unique(y_all)`, where y_all is the target vector of the entire dataset. This argument is required for the first call to partial_fit and can be omitted in the subsequent calls. Note that y doesn't need to contain all labels in `classes`."
msgstr ""

#: of
#: sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit:26
msgid "Weights applied to individual samples. If not provided, uniform weights are assumed."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:8
msgid "**\\*\\*kwargs**"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:8
msgid "Estimator parameters."
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:24
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._stochastic_gradient.BaseSGD.set_params:13
msgid "Estimator instance."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:4
msgid "Converts the ``coef_`` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:8
msgid "The ``intercept_`` member is not converted."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:25
#, python-format
msgid "For non-sparse models, i.e. when there are not many zeros in ``coef_``, this may actually *increase* memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with ``(coef_ == 0).sum()``, must be more than 50% for this to provide significant benefits."
msgstr ""

#: of sklearn.linear_model._base.SparseCoefMixin.sparsify:31
msgid "After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify."
msgstr ""

#: ../modules/generated/sklearn.linear_model.Perceptron.examples:4
msgid "Examples using ``sklearn.linear_model.Perceptron``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.Perceptron.examples:15
#: ../modules/generated/sklearn.linear_model.Perceptron.examples:23
msgid ":ref:`sphx_glr_auto_examples_applications_plot_out_of_core_classification.py`"
msgstr ""

#: ../modules/generated/sklearn.linear_model.Perceptron.examples:34
#: ../modules/generated/sklearn.linear_model.Perceptron.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sgd_comparison.py`"
msgstr ""

#: ../modules/generated/sklearn.linear_model.Perceptron.examples:53
#: ../modules/generated/sklearn.linear_model.Perceptron.examples:61
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
msgstr ""

