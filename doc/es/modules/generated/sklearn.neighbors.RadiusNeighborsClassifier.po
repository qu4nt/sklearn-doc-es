msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.po\n"
"X-Crowdin-File-ID: 5732\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst:2
msgid ":mod:`sklearn.neighbors`.RadiusNeighborsClassifier"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:2
msgid "Classifier implementing a vote among neighbors within a given radius"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:4
msgid "Read more in the :ref:`User Guide <classification>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph
#: sklearn.neighbors._classification.RadiusNeighborsClassifier
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.fit
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:20
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:16
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:10
msgid "**radius**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:9
msgid "Range of parameter space to use by default for :meth:`radius_neighbors` queries."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:24
msgid "**weights**"
msgstr ""

#: of
msgid "{'uniform', 'distance'} or callable, default='uniform'"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:13
msgid "weight function used in prediction.  Possible values:"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:15
msgid "'uniform' : uniform weights.  All points in each neighborhood are weighted equally."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:17
msgid "'distance' : weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:20
msgid "[callable] : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:24
msgid "Uniform weights are used by default."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:36
msgid "**algorithm**"
msgstr ""

#: of
msgid "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:27
msgid "Algorithm used to compute the nearest neighbors:"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:29
msgid "'ball_tree' will use :class:`BallTree`"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:30
msgid "'kd_tree' will use :class:`KDTree`"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:31
msgid "'brute' will use a brute-force search."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:32
msgid "'auto' will attempt to decide the most appropriate algorithm based on the values passed to :meth:`fit` method."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:35
msgid "Note: fitting on sparse input will override the setting of this parameter, using brute force."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:42
msgid "**leaf_size**"
msgstr ""

#: of
msgid "int, default=30"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:39
msgid "Leaf size passed to BallTree or KDTree.  This can affect the speed of the construction and query, as well as the memory required to store the tree.  The optimal value depends on the nature of the problem."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:47
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba:26
msgid "**p**"
msgstr ""

#: of
msgid "int, default=2"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:45
msgid "Power parameter for the Minkowski metric. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:56
msgid "**metric**"
msgstr ""

#: of
msgid "str or callable, default='minkowski'"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:50
msgid "the distance metric to use for the tree.  The default metric is minkowski, and with p=2 is equivalent to the standard Euclidean metric. See the documentation of :class:`DistanceMetric` for a list of available metrics. If metric is \"precomputed\", X is assumed to be a distance matrix and must be square during fit. X may be a :term:`sparse graph`, in which case only \"nonzero\" elements may be considered neighbors."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:64
msgid "**outlier_label**"
msgstr ""

#: of
msgid "{manual label, 'most_frequent'}, default=None"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:59
msgid "label for outlier samples (samples with no neighbors in given radius)."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:61
msgid "manual label: str or int label (should be the same type as y) or list of manual labels if multi-output is used."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:63
msgid "'most_frequent' : assign the most frequent label of y to outliers."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:64
msgid "None : when any outlier is detected, ValueError will be raised."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:67
msgid "**metric_params**"
msgstr ""

#: of
msgid "dict, default=None"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:67
msgid "Additional keyword arguments for the metric function."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:76
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:70
msgid "The number of parallel jobs to run for neighbors search. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:81
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:81
msgid "Class labels known to the classifier."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:86
msgid "**effective_metric_**"
msgstr ""

#: of
msgid "str or callable"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:84
msgid "The distance metric used. It will be same as the `metric` parameter or a synonym of it, e.g. 'euclidean' if the `metric` parameter set to 'minkowski' and `p` parameter set to 2."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:92
msgid "**effective_metric_params_**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:89
msgid "Additional keyword arguments for the metric function. For most metrics will be same with `metric_params` parameter, but may also contain the `p` parameter value if the `effective_metric_` attribute is set to 'minkowski'."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:95
msgid "**n_samples_fit_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:95
msgid "Number of samples in the fitted data."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:99
msgid "**outlier_label_**"
msgstr ""

#: of
msgid "int or array-like of shape (n_class,)"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:98
msgid "Label which is given for outlier samples (samples with no neighbors on given radius)."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:106
msgid "**outputs_2d_**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:102
msgid "False when `y`'s shape is (n_samples, ) or (n_samples, 1) during fit otherwise True."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:111
msgid ":obj:`KNeighborsClassifier`"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:113
msgid ":obj:`RadiusNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:115
msgid ":obj:`KNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:117
msgid ":obj:`NearestNeighbors`"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:53
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:121
msgid "Notes"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:122
msgid "See :ref:`Nearest Neighbors <neighbors>` in the online documentation for a discussion of the choice of ``algorithm`` and ``leaf_size``."
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:125
msgid "https://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:62
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:52
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:129
msgid "Examples"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier:142
msgid "Methods"
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.RadiusNeighborsClassifier.fit>`\\"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Fit the radius neighbors classifier from the training dataset."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`get_params <sklearn.neighbors.RadiusNeighborsClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`predict <sklearn.neighbors.RadiusNeighborsClassifier.predict>`\\"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.predict:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Predict the class labels for the provided data."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.neighbors.RadiusNeighborsClassifier.predict_proba>`\\"
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Return probability estimates for the test data X."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`radius_neighbors <sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors>`\\"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Finds the neighbors within a given radius of a point or points."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`radius_neighbors_graph <sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph>`\\"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Computes the (weighted) graph of Neighbors for points in X"
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`score <sklearn.neighbors.RadiusNeighborsClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid ":obj:`set_params <sklearn.neighbors.RadiusNeighborsClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neighbors._classification.RadiusNeighborsClassifier:153:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:16
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:12
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:8
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict:8
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features) or                 (n_samples, n_samples) if metric='precomputed'"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:11
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict:24
msgid "**y**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples,) or                 (n_samples, n_outputs)"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.fit
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "RadiusNeighborsClassifier"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.fit:16
msgid "The fitted radius neighbors classifier."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like of shape (n_queries, n_features),                 or (n_queries, n_indexed) if metric == 'precomputed'"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict:8
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba:8
msgid "Test samples."
msgstr ""

#: of
msgid "ndarray of shape (n_queries,) or (n_queries, n_outputs)"
msgstr ""

#: of sklearn.neighbors._classification.RadiusNeighborsClassifier.predict:13
msgid "Class labels for each data sample."
msgstr ""

#: of
msgid "ndarray of shape (n_queries, n_classes), or a list of n_outputs"
msgstr ""

#: of
#: sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba:13
msgid "of such arrays if n_outputs > 1. The class probabilities of the input samples. Classes are ordered by lexicographic order."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:4
msgid "Return the indices and distances of each point from the dataset lying in a ball with size ``radius`` around the points of the query array. Points lying on the boundary are included in the results."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:8
msgid "The result points are *not* necessarily sorted by distance to their query point."
msgstr ""

#: of
msgid "array-like of (n_samples, n_features), default=None"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:14
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:10
msgid "The query point or points. If not provided, neighbors of each indexed point are returned. In this case, the query point is not considered its own neighbor."
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:19
msgid "Limiting distance of neighbors to return. The default is the value passed to the constructor."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:23
msgid "**return_distance**"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:23
msgid "Whether or not to return the distances."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:31
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:28
msgid "**sort_results**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:26
msgid "If True, the distances and indices will be sorted by increasing distances before being returned. If False, the results may not be sorted. If `return_distance=False`, setting `sort_results=True` will result in an error."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:38
msgid "**neigh_dist**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) of arrays"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:36
msgid "Array representing the distances to each point, only present if `return_distance=True`. The distance values are computed according to the ``metric`` constructor parameter."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:50
msgid "**neigh_ind**"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:41
msgid "An array of arrays of indices of the approximate nearest points from the population matrix that lie within a ball of size ``radius`` around the query points."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:54
msgid "Because the number of neighbors of each point is not necessarily equal, the results for multiple query points cannot be fit in a standard data array. For efficiency, `radius_neighbors` returns arrays of objects, where each object is a 1D array of indices or distances."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:63
msgid "In the following example, we construct a NeighborsClassifier class from an array representing our data set and ask who's the closest point to [1, 1, 1]:"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:79
msgid "The first array returned contains the distances to all points which are closer than 1.6, while the second array returned contains their indices.  In general, multiple points can be queried at the same time."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:4
msgid "Neighborhoods are restricted the points at a distance lower than radius."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features), default=None"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:15
msgid "Radius of neighborhoods. The default is the value passed to the constructor."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:21
msgid "**mode**"
msgstr ""

#: of
msgid "{'connectivity', 'distance'}, default='connectivity'"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:19
msgid "Type of returned matrix: 'connectivity' will return the connectivity matrix with ones and zeros, in 'distance' the edges are Euclidean distance between points."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:24
msgid "If True, in each row of the result, the non-zero entries will be sorted by increasing distances. If False, the non-zero entries may not be sorted. Only used with mode='distance'."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:41
msgid "**A**"
msgstr ""

#: of
msgid "sparse-matrix of shape (n_queries, n_samples_fit)"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:33
msgid "`n_samples_fit` is the number of samples in the fitted data `A[i, j]` is assigned the weight of edge that connects `i` to `j`. The matrix if of format CSR."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:46
msgid ":obj:`kneighbors_graph`"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

