msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-09 23:19\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.multiclass.OneVsOneClassifier.po\n"
"X-Crowdin-File-ID: 5704\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.multiclass.OneVsOneClassifier.rst:2
msgid ":mod:`sklearn.multiclass`.OneVsOneClassifier"
msgstr ":mod:`sklearn.multiclass`.OneVsOneClassifier"

#: of sklearn.multiclass.OneVsOneClassifier:2
msgid "One-vs-one multiclass strategy"
msgstr "Estrategia multiclase uno contra uno (one-vs-one)"

#: of sklearn.multiclass.OneVsOneClassifier:4
msgid "This strategy consists in fitting one classifier per class pair. At prediction time, the class which received the most votes is selected. Since it requires to fit `n_classes * (n_classes - 1) / 2` classifiers, this method is usually slower than one-vs-the-rest, due to its O(n_classes^2) complexity. However, this method may be advantageous for algorithms such as kernel algorithms which don't scale well with `n_samples`. This is because each individual learning problem only involves a small subset of the data whereas, with one-vs-the-rest, the complete dataset is used `n_classes` times."
msgstr "Esta estrategia consiste en ajustar un clasificador por cada par de clases. En el momento de la predicción, se selecciona la clase que ha recibido más votos. Dado que requiere ajustar clasificadores `n_classes * (n_classes - 1) / 2`, este método suele ser más lento que el de uno-vs-el-resto (one-vs-the-rest), debido a su complejidad O(n_classes^2). Sin embargo, este método puede ser ventajoso para algoritmos como los de kernel que no escalan bien con `n_samples`. Esto se debe a que cada problema de aprendizaje individual sólo implica un pequeño subconjunto de los datos, mientras que, con uno-vs-el-resto, el conjunto de datos completo se utiliza `n_classes` veces."

#: of sklearn.multiclass.OneVsOneClassifier:14
msgid "Read more in the :ref:`User Guide <ovo_classification>`."
msgstr "Más información en :ref:`Manual de usuario <ovo_classification>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OneVsOneClassifier
#: sklearn.multiclass.OneVsOneClassifier.decision_function
#: sklearn.multiclass.OneVsOneClassifier.fit
#: sklearn.multiclass.OneVsOneClassifier.partial_fit
#: sklearn.multiclass.OneVsOneClassifier.predict
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.multiclass.OneVsOneClassifier:20
msgid "**estimator**"
msgstr "**estimator**"

#: of
msgid "estimator object"
msgstr "estimator object"

#: of sklearn.multiclass.OneVsOneClassifier:19
msgid "An estimator object implementing :term:`fit` and one of :term:`decision_function` or :term:`predict_proba`."
msgstr "Un objeto estimador que implementa :term:`fit` y uno de :term:`decision_function` o :term:`predict_proba`."

#: of sklearn.multiclass.OneVsOneClassifier:31
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.multiclass.OneVsOneClassifier:23
msgid "The number of jobs to use for the computation: the `n_classes * ( n_classes - 1) / 2` OVO problems are computed in parallel."
msgstr "El número de trabajos a utilizar para el cálculo: los problemas `n_classes * ( n_classes - 1) / 2` OVO se calculan en paralelo."

#: of sklearn.multiclass.OneVsOneClassifier:26
msgid "``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "``None`` significa 1 a menos que esté en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa que se utilizan todos los procesadores. Consulta :term:`Glosario <n_jobs>` para más detalles."

#: of sklearn.multiclass.OneVsOneClassifier
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.multiclass.OneVsOneClassifier:36
msgid "**estimators_** : list of ``n_classes * (n_classes - 1) / 2`` estimators"
msgstr "**estimators_** : lista de ``n_classes * (n_classes - 1) / 2`` estimadores"

#: of
msgid "list of"
msgstr "lista de"

#: of sklearn.multiclass.OneVsOneClassifier:36
msgid "Estimators used for predictions."
msgstr "Estimadores usados para predicciones."

#: of sklearn.multiclass.OneVsOneClassifier:39
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "numpy array of shape [n_classes]"
msgstr "arreglo de numpy de forma [n_classes]"

#: of sklearn.multiclass.OneVsOneClassifier:39
msgid "Array containing labels."
msgstr "Arreglo que contiene etiquetas."

#: of sklearn.multiclass.OneVsOneClassifier:42
msgid "**n_classes_**"
msgstr "**n_classes_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.multiclass.OneVsOneClassifier:42
msgid "Number of classes"
msgstr "Número de clases"

#: of sklearn.multiclass.OneVsOneClassifier:58
msgid "**pairwise_indices_** : list, length = ``len(estimators_)``, or ``None``"
msgstr "**pairwise_indices_** : list, length = ``len(estimators_)``, or ``None``"

#: of
msgid "list, length ="
msgstr "list, length ="

#: of sklearn.multiclass.OneVsOneClassifier:45
msgid "Indices of samples used when training the estimators. ``None`` when ``estimator``'s `pairwise` tag is False."
msgstr "Índices de las muestras utilizadas en el entrenamiento de los estimadores. ``None`` cuando la etiqueta ``pairwise`` de ``estimator`` es False."

#: of sklearn.multiclass.OneVsOneClassifier:50
msgid "The _pairwise attribute is deprecated in 0.24. From 1.1 (renaming of 0.25) and onward, `pairwise_indices_` will use the pairwise estimator tag instead."
msgstr "El atributo _pairwise queda obsoleto en 0.24. A partir de la versión 1.1 (cambio de nombre de la versión 0.25), `pairwise_indices_` utilizará la etiqueta de estimación por pares en su lugar."

#: of sklearn.multiclass.OneVsOneClassifier:61
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.multiclass.OneVsOneClassifier:75
msgid "Methods"
msgstr "Métodos"

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`decision_function <sklearn.multiclass.OneVsOneClassifier.decision_function>`\\"
msgstr ":obj:`decision_function <sklearn.multiclass.OneVsOneClassifier.decision_function>`\\"

#: of sklearn.multiclass.OneVsOneClassifier.decision_function:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Decision function for the OneVsOneClassifier."
msgstr "Función de decisión para OneVsOneClassifier."

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`fit <sklearn.multiclass.OneVsOneClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.multiclass.OneVsOneClassifier.fit>`\\"

#: of sklearn.multiclass.OneVsOneClassifier.fit:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Fit underlying estimators."
msgstr "Ajustar estimadores subyacentes."

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`get_params <sklearn.multiclass.OneVsOneClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.multiclass.OneVsOneClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtener los parámetros de este estimador."

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.multiclass.OneVsOneClassifier.partial_fit>`\\"
msgstr ":obj:`partial_fit <sklearn.multiclass.OneVsOneClassifier.partial_fit>`\\"

#: of sklearn.multiclass.OneVsOneClassifier.partial_fit:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Partially fit underlying estimators"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`predict <sklearn.multiclass.OneVsOneClassifier.predict>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.predict:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Estimate the best class label for each sample in X."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`score <sklearn.multiclass.OneVsOneClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid ":obj:`set_params <sklearn.multiclass.OneVsOneClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multiclass.OneVsOneClassifier:85:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.decision_function:4
msgid "The decision values for the samples are computed by adding the normalized sum of pair-wise classification confidence levels to the votes in order to disambiguate between the decision values when the votes for all the classes are equal leading to a tie."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.multiclass.OneVsOneClassifier.decision_function:12
#: sklearn.multiclass.OneVsOneClassifier.fit:8
#: sklearn.multiclass.OneVsOneClassifier.partial_fit:11
#: sklearn.multiclass.OneVsOneClassifier.predict:11
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OneVsOneClassifier.decision_function
#: sklearn.multiclass.OneVsOneClassifier.fit
#: sklearn.multiclass.OneVsOneClassifier.partial_fit
#: sklearn.multiclass.OneVsOneClassifier.predict
msgid "Returns"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.decision_function:30
msgid "**Y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes) or (n_samples,) for             binary classification."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.decision_function:17
msgid "output shape changed to ``(n_samples,)`` to conform to scikit-learn conventions for binary classification."
msgstr ""

#: of
msgid "(sparse) array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.fit:8
#: sklearn.multiclass.OneVsOneClassifier.partial_fit:11
#: sklearn.multiclass.OneVsOneClassifier.predict:11
msgid "Data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.multiclass.OneVsOneClassifier.fit:11
#: sklearn.multiclass.OneVsOneClassifier.partial_fit:14
#: sklearn.multiclass.OneVsOneClassifier.predict:27
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.fit:11
#: sklearn.multiclass.OneVsOneClassifier.partial_fit:14
msgid "Multi-class targets."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.fit:27
#: sklearn.multiclass.OneVsOneClassifier.partial_fit:37
msgid "self"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.partial_fit:4
msgid "Should be used when memory is inefficient to train all data. Chunks of data can be passed in several iteration, where the first call should have an array of all target variables."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.partial_fit:21
msgid "**classes**"
msgstr ""

#: of
msgid "array, shape (n_classes, )"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.partial_fit:17
msgid "Classes across all calls to partial_fit. Can be obtained via `np.unique(y_all)`, where y_all is the target vector of the entire dataset. This argument is only required in the first call of partial_fit and can be omitted in the subsequent calls."
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.predict:4
msgid "This is implemented as ``argmax(decision_function(X), axis=1)`` which will return the label of the class with most votes by estimators predicting the outcome of a decision for each possible class pair."
msgstr ""

#: of
msgid "numpy array of shape [n_samples]"
msgstr ""

#: of sklearn.multiclass.OneVsOneClassifier.predict:16
msgid "Predicted multi-class targets."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

