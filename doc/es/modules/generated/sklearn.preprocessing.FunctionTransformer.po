msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-07-13 00:14\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.FunctionTransformer.po\n"
"X-Crowdin-File-ID: 4952\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.rst:2
msgid ":mod:`sklearn.preprocessing`.FunctionTransformer"
msgstr ":mod:`sklearn.preprocessing`.FunctionTransformer"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:2
msgid "Constructs a transformer from an arbitrary callable."
msgstr "Construye un transformador a partir de un invocable arbitrario."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:4
msgid "A FunctionTransformer forwards its X (and optionally y) arguments to a user-defined function or function object and returns the result of this function. This is useful for stateless transformations such as taking the log of frequencies, doing custom scaling, etc."
msgstr "Un FunctionTransformer envía sus argumentos X (y opcionalmente y) a una función u objeto de función definida por el usuario y devuelve el resultado de esta función. Esto es útil para las transformaciones sin estado (stateless), como tomar el logaritmo de las frecuencias, hacer un escalamiento personalizado, etc."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:9
msgid "Note: If a lambda is used as the function, then the resulting transformer will not be pickleable."
msgstr "Nota: Si se utiliza un lambda como la función, entonces el transformador resultante no será seleccionable."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:14
msgid "Read more in the :ref:`User Guide <function_transformer>`."
msgstr "Leer más en el :ref:`Manual de Usuario <function_transformer>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._function_transformer.FunctionTransformer
#: sklearn.preprocessing._function_transformer.FunctionTransformer.fit
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:21
msgid "**func**"
msgstr "**func**"

#: of
msgid "callable, default=None"
msgstr "invocable, default=None"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:19
msgid "The callable to use for the transformation. This will be passed the same arguments as transform, with args and kwargs forwarded. If func is None, then func will be the identity function."
msgstr "El invocable a utilizar para la transformación. Se le pasarán los mismos argumentos que a transform, con args y kwargs reenviados. Si func es None, entonces func será la función de identidad."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:27
msgid "**inverse_func**"
msgstr "**inverse_func**"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:24
msgid "The callable to use for the inverse transformation. This will be passed the same arguments as inverse transform, with args and kwargs forwarded. If inverse_func is None, then inverse_func will be the identity function."
msgstr "El invocable a utilizar para la transformación inversa. Se le pasarán los mismos argumentos que a la transformación inversa, con args y kwargs reenviados. Si inverse_func es None, entonces inverse_func será la función de identidad."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:39
msgid "**validate**"
msgstr "**validate**"

#: of
msgid "bool, default=False"
msgstr "booleano, default=False"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:30
msgid "Indicate that the input X array should be checked before calling ``func``. The possibilities are:"
msgstr "Indica que el arreglo X de entrada debe ser verificado antes de llamar a ``func``. Las posibilidades son:"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:33
msgid "If False, there is no input validation."
msgstr "Si es False, no hay validación de entrada."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:34
msgid "If True, then X will be converted to a 2-dimensional NumPy array or sparse matrix. If the conversion is not possible an exception is raised."
msgstr "Si es True, entonces X se convertirá en un arreglo NumPy de 2 dimensiones o en una matriz dispersa. Si la conversión no es posible, se levanta una excepción."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:38
msgid "The default of ``validate`` changed from True to False."
msgstr "El valor predeterminado de ``validate`` cambió de True a False."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:44
msgid "**accept_sparse**"
msgstr "**accept_sparse**"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:42
msgid "Indicate that func accepts a sparse matrix as input. If validate is False, this has no effect. Otherwise, if accept_sparse is false, sparse matrix inputs will cause an exception to be raised."
msgstr "Indica que func acepta una matriz dispersa como entrada. Si validate es False, esto no tiene efecto. En caso contrario, si accept_sparse es falso, las entradas de matrices dispersas provocarán que se levante una excepción."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:51
msgid "**check_inverse**"
msgstr "**check_inverse**"

#: of
msgid "bool, default=True"
msgstr "booleano, default=True"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:47
msgid "Whether to check that or ``func`` followed by ``inverse_func`` leads to the original inputs. It can be used for a sanity check, raising a warning when the condition is not fulfilled."
msgstr "Si se comprueba que ``func`` seguido de ``inverse_func`` conduce a las entradas originales. Se puede utilizar para una comprobación de validez, levantando una advertencia cuando la condición no se cumple."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:56
msgid "**kw_args**"
msgstr "**kw_args**"

#: of
msgid "dict, default=None"
msgstr "diccionario, default=None"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:54
msgid "Dictionary of additional keyword arguments to pass to func."
msgstr "Diccionario de argumentos de palabras clave adicionales para pasar a func."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:71
msgid "**inv_kw_args**"
msgstr "**inv_kw_args**"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:59
msgid "Dictionary of additional keyword arguments to pass to inverse_func."
msgstr "Diccionario de argumentos de palabras clave adicionales para pasar a inverse_func."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:74
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer:84
msgid "Methods"
msgstr "Métodos"

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.FunctionTransformer.fit>`\\"
msgstr ":obj:`fit <sklearn.preprocessing.FunctionTransformer.fit>`\\"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer.fit:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Fit transformer by checking X."
msgstr "Ajusta el transformador comprobando X."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.FunctionTransformer.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.preprocessing.FunctionTransformer.fit_transform>`\\"

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr "Ajusta a los datos y luego los transforma."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.FunctionTransformer.get_params>`\\"
msgstr ":obj:`get_params <sklearn.preprocessing.FunctionTransformer.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.FunctionTransformer.inverse_transform>`\\"
msgstr ":obj:`inverse_transform <sklearn.preprocessing.FunctionTransformer.inverse_transform>`\\"

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Transform X using the inverse function."
msgstr "Transforma X utilizando la función inversa."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.FunctionTransformer.set_params>`\\"
msgstr ":obj:`set_params <sklearn.preprocessing.FunctionTransformer.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.FunctionTransformer.transform>`\\"
msgstr ":obj:`transform <sklearn.preprocessing.FunctionTransformer.transform>`\\"

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform:2
#: sklearn.preprocessing._function_transformer.FunctionTransformer:93:<autosummary>:1
msgid "Transform X using the forward function."
msgstr "Transforma X utilizando la función de reenvío (forward)."

#: of sklearn.preprocessing._function_transformer.FunctionTransformer.fit:4
msgid "If ``validate`` is ``True``, ``X`` will be checked."
msgstr "Si ``validate`` es ``True``, se comprobará ``X``."

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.preprocessing._function_transformer.FunctionTransformer.fit:9
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform:8
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr "array-like, forma (n_samples, n_features)"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer.fit:9
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform:8
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform:8
msgid "Input array."
msgstr "Arreglo de entrada."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._function_transformer.FunctionTransformer.fit
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.preprocessing._function_transformer.FunctionTransformer.fit:25
msgid "self"
msgstr "self"

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr "Ajusta el transformador a `X` y `y` con parámetros opcionales `fit_params` y devuelve una versión transformada de `X`."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr "Muestras de entrada."

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs),                 default=None"

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr "Valores objetivo (None para transformaciones no supervisadas)."

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr "**\\*\\*fit_params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr "Parámetros de ajuste adicionales."

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr "**X_new**"

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "ndarray array de forma (n_samples, n_features_new)"

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr "Arreglo transformado."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform:24
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform:24
msgid "**X_out**"
msgstr "**X_out**"

#: of
#: sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform:13
#: sklearn.preprocessing._function_transformer.FunctionTransformer.transform:13
msgid "Transformed input."
msgstr "Entrada transformada."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.examples:4
msgid "Examples using ``sklearn.preprocessing.FunctionTransformer``"
msgstr "Ejemplos utilizando ``sklearn.preprocessing.FunctionTransformer``"

#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.examples:15
#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"

#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.examples:34
#: ../modules/generated/sklearn.preprocessing.FunctionTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_semi_supervised_plot_semi_supervised_newsgroups.py`"
#~ msgstr ""

