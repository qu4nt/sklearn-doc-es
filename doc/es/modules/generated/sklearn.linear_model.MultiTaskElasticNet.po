msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-25 01:11\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.MultiTaskElasticNet.po\n"
"X-Crowdin-File-ID: 4894\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst:2
msgid ":mod:`sklearn.linear_model`.MultiTaskElasticNet"
msgstr ":mod:`sklearn.linear_model`.MultiTaskElasticNet"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:2
msgid "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:5
msgid "The optimization objective for MultiTaskElasticNet is::"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:11
#: sklearn.linear_model._coordinate_descent.enet_path:18
msgid "Where::"
msgstr "Donde::"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:15
msgid "i.e. the sum of norms of each row."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:17
msgid "Read more in the :ref:`User Guide <multi_task_elastic_net>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit
#: sklearn.linear_model._coordinate_descent.enet_path
msgid "Parameters"
msgstr "Par√°metros"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:22
msgid "**alpha**"
msgstr "**alpha**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:22
msgid "Constant that multiplies the L1/L2 term. Defaults to 1.0."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:28
#: sklearn.linear_model._coordinate_descent.enet_path:38
msgid "**l1_ratio**"
msgstr "**l1_ratio**"

#: of
msgid "float, default=0.5"
msgstr "float, default=0.5"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:25
msgid "The ElasticNet mixing parameter, with 0 < l1_ratio <= 1. For l1_ratio = 1 the penalty is an L1/L2 penalty. For l1_ratio = 0 it is an L2 penalty. For ``0 < l1_ratio < 1``, the penalty is a combination of L1/L2 and L2."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:33
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:31
msgid "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:41
msgid "**normalize**"
msgstr "**normalize**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:36
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:44
#: sklearn.linear_model._coordinate_descent.enet_path:61
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:44
#: sklearn.linear_model._coordinate_descent.enet_path:61
msgid "If ``True``, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:47
msgid "**max_iter**"
msgstr "**max_iter**"

#: of
msgid "int, default=1000"
msgstr "int, default=1000"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:47
msgid "The maximum number of iterations."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:53
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1e-4"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:50
msgid "The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:58
msgid "**warm_start**"
msgstr "**warm_start**"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:56
msgid "When set to ``True``, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:64
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:61
msgid "The seed of the pseudo random number generator that selects a random feature to update. Used when ``selection`` == 'random'. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:73
msgid "**selection**"
msgstr "**selection**"

#: of
msgid "{'cyclic', 'random'}, default='cyclic'"
msgstr "{'cyclic', 'random'}, default='cyclic'"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:67
msgid "If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:78
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "ndarray of shape (n_tasks,)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:78
msgid "Independent term in decision function."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:83
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "ndarray of shape (n_tasks, n_features)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:81
msgid "Parameter vector (W in the cost function formula). If a 1D y is passed in at fit (non multi-task usage), ``coef_`` is then a 1D array. Note that ``coef_`` stores the transpose of ``W``, ``W.T``."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:87
msgid "**n_iter_**"
msgstr "**n_iter_**"

#: of
msgid "int"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:86
msgid "Number of iterations run by the coordinate descent solver to reach the specified tolerance."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:90
msgid "**dual_gap_**"
msgstr "**dual_gap_**"

#: of
msgid "float"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:90
msgid "The dual gaps at the end of the optimization."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:93
msgid "**eps_**"
msgstr "**eps_**"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:93
msgid "The tolerance scaled scaled by the variance of the target `y`."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:99
msgid ":obj:`sparse_coef_ <sparse_coef_>`"
msgstr ":obj:`sparse_coef_ <sparse_coef_>`"

#: of
msgid "sparse matrix of shape (n_features,) or             (n_tasks, n_features)"
msgstr ""

#: of sklearn.linear_model.MultiTaskElasticNet.sparse_coef_:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:96
msgid "Sparse representation of the fitted `coef_`."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:104
#: sklearn.linear_model._coordinate_descent.enet_path:111
msgid ":obj:`MultiTaskElasticNetCV`"
msgstr ":obj:`MultiTaskElasticNetCV`"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:105
msgid "Multi-task L1/L2 ElasticNet with built-in cross-validation."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:106
#: sklearn.linear_model._coordinate_descent.enet_path:113
msgid ":obj:`ElasticNet`"
msgstr ":obj:`ElasticNet`"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:108
msgid ":obj:`MultiTaskLasso`"
msgstr ":obj:`MultiTaskLasso`"

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:112
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:22
#: sklearn.linear_model._coordinate_descent.enet_path:119
msgid "Notes"
msgstr "Notas"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:113
msgid "The algorithm used to fit the model is coordinate descent."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:115
msgid "To avoid unnecessary memory duplication the X and y arguments of the fit method should be directly passed as Fortran-contiguous numpy arrays."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:120
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:132
msgid "Methods"
msgstr "M√©todos"

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.MultiTaskElasticNet.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.MultiTaskElasticNet.fit>`\\"

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid "Fit MultiTaskElasticNet model with coordinate descent"
msgstr ""

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.MultiTaskElasticNet.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.MultiTaskElasticNet.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`path <sklearn.linear_model.MultiTaskElasticNet.path>`\\"
msgstr ":obj:`path <sklearn.linear_model.MultiTaskElasticNet.path>`\\"

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
#: sklearn.linear_model._coordinate_descent.enet_path:2
msgid "Compute elastic net path with coordinate descent."
msgstr ""

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.MultiTaskElasticNet.predict>`\\"
msgstr ":obj:`predict <sklearn.linear_model.MultiTaskElasticNet.predict>`\\"

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.MultiTaskElasticNet.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.MultiTaskElasticNet.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.MultiTaskElasticNet.set_params>`\\"
msgstr ":obj:`set_params <sklearn.linear_model.MultiTaskElasticNet.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet:141:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:8
#: sklearn.linear_model._coordinate_descent.enet_path:31
msgid "**X**"
msgstr "**X**"

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:8
msgid "Data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:19
#: sklearn.linear_model._coordinate_descent.enet_path:34
msgid "**y**"
msgstr "**y**"

#: of
msgid "ndarray of shape (n_samples, n_tasks)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:11
msgid "Target. Will be cast to X's dtype if necessary."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:23
msgid "Coordinate descent is an algorithm that considers each column of data at a time hence it will automatically convert the X input as a Fortran-contiguous numpy array if necessary."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit:27
msgid "To avoid memory re-allocation it is advised to allocate the initial data in memory directly using that format."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._coordinate_descent.enet_path
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:4
msgid "The elastic net optimization function varies for mono and multi-outputs."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:6
msgid "For mono-output tasks it is::"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:12
msgid "For multi-output tasks it is::"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:22
msgid "i.e. the sum of norm of each row."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:24
msgid "Read more in the :ref:`User Guide <elastic_net>`."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:29
msgid "Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples,) or         (n_samples, n_outputs)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:34
msgid "Target values."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:37
msgid "Number between 0 and 1 passed to elastic net (scaling between l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:42
msgid "**eps**"
msgstr "**eps**"

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:41
msgid "Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:45
msgid "**n_alphas**"
msgstr "**n_alphas**"

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:45
msgid "Number of alphas along the regularization path."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:49
#: sklearn.linear_model._coordinate_descent.enet_path:87
msgid "**alphas**"
msgstr "**alphas**"

#: of
msgid "ndarray, default=None"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:48
msgid "List of alphas where to compute the models. If None alphas are set automatically."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:54
msgid "**precompute**"
msgstr "**precompute**"

#: of
msgid "'auto', bool or array-like of shape (n_features, n_features),                 default='auto'"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:52
msgid "Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:58
msgid "**Xy**"
msgstr "**Xy**"

#: of
msgid "array-like of shape (n_features,) or (n_features, n_outputs),         default=None"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:57
msgid "Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:64
msgid "**coef_init**"
msgstr "**coef_init**"

#: of
msgid "ndarray of shape (n_features, ), default=None"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:64
msgid "The initial values of the coefficients."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:67
msgid "**verbose**"
msgstr "**verbose**"

#: of
msgid "bool or int, default=False"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:67
msgid "Amount of verbosity."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:70
msgid "**return_n_iter**"
msgstr "**return_n_iter**"

#: of sklearn.linear_model._coordinate_descent.enet_path:70
msgid "Whether to return the number of iterations or not."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:74
msgid "**positive**"
msgstr "**positive**"

#: of sklearn.linear_model._coordinate_descent.enet_path:73
msgid "If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``)."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:79
msgid "**check_input**"
msgstr "**check_input**"

#: of sklearn.linear_model._coordinate_descent.enet_path:77
msgid "If set to False, the input validation checks are skipped (including the Gram matrix when provided). It is assumed that they are handled by the caller."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
#: sklearn.linear_model._coordinate_descent.enet_path:82
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of
msgid "kwargs"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:82
msgid "Keyword arguments passed to the coordinate descent solver."
msgstr ""

#: of
msgid "ndarray of shape (n_alphas,)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:87
msgid "The alphas along the path where models are computed."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:90
msgid "**coefs**"
msgstr "**coefs**"

#: of
msgid "ndarray of shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:90
msgid "Coefficients along the path."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:93
msgid "**dual_gaps**"
msgstr "**dual_gaps**"

#: of sklearn.linear_model._coordinate_descent.enet_path:93
msgid "The dual gaps at the end of the optimization for each alpha."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:104
msgid "**n_iters**"
msgstr "**n_iters**"

#: of
msgid "list of int"
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:96
msgid "The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha. (Is returned when ``return_n_iter`` is set to True)."
msgstr ""

#: of sklearn.linear_model._coordinate_descent.enet_path:109
msgid ":obj:`MultiTaskElasticNet`"
msgstr ":obj:`MultiTaskElasticNet`"

#: of sklearn.linear_model._coordinate_descent.enet_path:115
msgid ":obj:`ElasticNetCV`"
msgstr ":obj:`ElasticNetCV`"

#: of sklearn.linear_model._coordinate_descent.enet_path:120
msgid "For an example, see :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr "Muestras."

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr "**self**"

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

