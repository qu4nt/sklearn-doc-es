msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-07 03:44\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.maxabs_scale.po\n"
"X-Crowdin-File-ID: 5080\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.maxabs_scale.rst:2
msgid ":mod:`sklearn.preprocessing`.maxabs_scale"
msgstr ":mod:`sklearn.preprocessing`.maxabs_scale"

#: of sklearn.preprocessing._data.maxabs_scale:2
msgid "Scale each feature to the [-1, 1] range without breaking the sparsity."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:4
msgid "This estimator scales each feature individually such that the maximal absolute value of each feature in the training set will be 1.0."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:8
msgid "This scaler can also be applied to sparse CSR or CSC matrices."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale
msgid "Parameters"
msgstr "Par√°metros"

#: of sklearn.preprocessing._data.maxabs_scale:13
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:13
msgid "The data."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:17
msgid "**axis**"
msgstr "**axis**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.preprocessing._data.maxabs_scale:16
msgid "axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:21
msgid "**copy**"
msgstr "**copy**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.preprocessing._data.maxabs_scale:20
msgid "Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array)."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale
msgid "Returns"
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:26
msgid "**X_tr**"
msgstr "**X_tr**"

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:26
msgid "The transformed data."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:28
msgid "Risk of data leak Do not use :func:`~sklearn.preprocessing.maxabs_scale` unless you know what you are doing. A common mistake is to apply it to the entire data *before* splitting into training and test sets. This will bias the model evaluation because information would have leaked from the test set to the training set. In general, we recommend using :class:`~sklearn.preprocessing.MaxAbsScaler` within a :ref:`Pipeline <pipeline>` in order to prevent most risks of data leaking: `pipe = make_pipeline(MaxAbsScaler(), LogisticRegression())`."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:48
msgid ":obj:`MaxAbsScaler`"
msgstr ":obj:`MaxAbsScaler`"

#: of sklearn.preprocessing._data.maxabs_scale:49
msgid "Performs scaling to the [-1, 1] range using the Transformer API (e.g. as part of a preprocessing :class:`~sklearn.pipeline.Pipeline`)."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:53
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:54
msgid "NaNs are treated as missing values: disregarded to compute the statistics, and maintained during the data transformation."
msgstr ""

#: of sklearn.preprocessing._data.maxabs_scale:57
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

