msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-25 21:33\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.po\n"
"X-Crowdin-File-ID: 5164\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst:2
msgid ":mod:`sklearn.discriminant_analysis`.LinearDiscriminantAnalysis"
msgstr ":mod:`sklearn.discriminant_analysis`.LinearDiscriminantAnalysis"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:2
msgid "Linear Discriminant Analysis"
msgstr "Análisis Discriminante Lineal"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:4
msgid "A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule."
msgstr "Un clasificador con un límite de decisión lineal, generado ajustando las densidades condicionales de las clases a los datos y utilizando la regla de Bayes."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:7
msgid "The model fits a Gaussian density to each class, assuming that all classes share the same covariance matrix."
msgstr "El modelo ajusta una densidad gaussiana a cada clase, asumiendo que todas las clases comparten la misma matriz de covarianza."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:10
msgid "The fitted model can also be used to reduce the dimensionality of the input by projecting it to the most discriminative directions, using the `transform` method."
msgstr "El modelo ajustado también puede utilizarse para reducir la dimensionalidad de la entrada proyectándola hacia las direcciones más discriminatorias, utilizando el método `transform`."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:14
msgid "*LinearDiscriminantAnalysis*."
msgstr "*LinearDiscriminantAnalysis*."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:17
msgid "Read more in the :ref:`User Guide <lda_qda>`."
msgstr "Lee más en el :ref:`Manual de usuario <lda_qda>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform
#: sklearn.linear_model._base.LinearClassifierMixin.predict
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:29
msgid "**solver**"
msgstr "**solver**"

#: of
msgid "{'svd', 'lsqr', 'eigen'}, default='svd'"
msgstr "{'svd', 'lsqr', 'eigen'}, default='svd'"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:29
msgid "Solver to use, possible values:"
msgstr "Solucionador a utilizar, valores posibles:"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:23
msgid "'svd': Singular value decomposition (default). Does not compute the covariance matrix, therefore this solver is recommended for data with a large number of features."
msgstr "'svd': Descomposición del valor singular (por defecto). No calcula la matriz de covarianza, por lo que este solucionador se recomienda para datos con un gran número de características."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:26
msgid "'lsqr': Least squares solution. Can be combined with shrinkage or custom covariance estimator."
msgstr "'lsqr': Solución de mínimos cuadrados. Puede combinarse con la contracción(shrinkage) o con un estimador de covarianza personalizado."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:28
msgid "'eigen': Eigenvalue decomposition. Can be combined with shrinkage or custom covariance estimator."
msgstr "'eigen': Descomposición de autovalores. Puede combinarse con la contracción o con un estimador de covarianza personalizado."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:38
msgid "**shrinkage**"
msgstr "**shrinkage**"

#: of
msgid "'auto' or float, default=None"
msgstr "'auto' o float, default=None"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:35
msgid "Shrinkage parameter, possible values:"
msgstr "Parámetro de contracción, valores posibles:"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:33
msgid "None: no shrinkage (default)."
msgstr "None: sin contracción(por defecto)."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:34
msgid "'auto': automatic shrinkage using the Ledoit-Wolf lemma."
msgstr "'auto': contracción automática mediante el lema de Ledoit-Wolf."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:35
msgid "float between 0 and 1: fixed shrinkage parameter."
msgstr "número de punto flotante(float) entre 0 y 1: parámetro fijo de contracción."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:37
msgid "This should be left to None if `covariance_estimator` is used. Note that shrinkage works only with 'lsqr' and 'eigen' solvers."
msgstr "Debe dejarse en None si se utiliza `covariance_estimator`. Ten en cuenta que la contracción sólo funciona con los solucionadores `lsqr` y `eigen`."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:42
msgid "**priors**"
msgstr "**priors**"

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr "array-like de forma (n_classes,), default=None"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:41
msgid "The class prior probabilities. By default, the class proportions are inferred from the training data."
msgstr "Las probabilidades previas de clase. Por defecto, las proporciones de clase se infieren a partir de los datos de entrenamiento."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:48
msgid "**n_components**"
msgstr "**n_components**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:45
msgid "Number of components (<= min(n_classes - 1, n_features)) for dimensionality reduction. If None, will be set to min(n_classes - 1, n_features). This parameter only affects the `transform` method."
msgstr "Número de componentes (<= min(n_classes - 1, n_features)) para la reducción de la dimensionalidad. Si es None, se establecerá en min(n_classes - 1, n_features). Este parámetro sólo afecta al método `transform`."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:55
msgid "**store_covariance**"
msgstr "**store_covariance**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:51
msgid "If True, explicitely compute the weighted within-class covariance matrix when solver is 'svd'. The matrix is always computed and stored for the other solvers."
msgstr "Si es True, calcula explícitamente la matriz de covarianza ponderada dentro de la clase cuando el solucionador es 'svd'. La matriz siempre se calcula y se almacena para los otros solucionadores."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:63
msgid "**tol**"
msgstr "**tol**"

#: of
msgid "float, default=1.0e-4"
msgstr "float, default=1.0e-4"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:58
msgid "Absolute threshold for a singular value of X to be considered significant, used to estimate the rank of X. Dimensions whose singular values are non-significant are discarded. Only used if solver is 'svd'."
msgstr "Umbral absoluto para que un valor singular de X se considere significativo, utilizado para estimar el rango de X. Las dimensiones cuyos valores singulares no son significativos se descartan. Sólo se utiliza si el solucionador es 'svd'."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:80
msgid "**covariance_estimator**"
msgstr "**covariance_estimator**"

#: of
msgid "covariance estimator, default=None"
msgstr "estimador de la covarianza, default=None"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:66
msgid "If not None, `covariance_estimator` is used to estimate the covariance matrices instead of relying on the empirical covariance estimator (with potential shrinkage). The object should have a fit method and a ``covariance_`` attribute like the estimators in :mod:`sklearn.covariance`. if None the shrinkage parameter drives the estimate."
msgstr "Si no es None, se utiliza `covariance_estimator` para estimar las matrices de covarianza en lugar de confiar en el estimador empírico de covarianza (con una posible contracción). El objeto debe tener un método(fit) de ajuste y un atributo ``covariance_`` como los estimadores en :mod:`sklearn.covariance`. Si es None, el parámetro de contracción impulsa la estimación."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:73
msgid "This should be left to None if `shrinkage` is used. Note that `covariance_estimator` works only with 'lsqr' and 'eigen' solvers."
msgstr "Debe dejarse en None si se utiliza `shrinkage`. Ten en cuenta que `covariance_estimator` sólo funciona con los solucionadores `lsqr` y `eigen`."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:85
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "ndarray of shape (n_features,) or (n_classes, n_features)"
msgstr "ndarray de forma (n_features,) o (n_classes, n_features)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:85
msgid "Weight vector(s)."
msgstr "Vector(es) de ponderación."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:88
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "ndarray of shape (n_classes,)"
msgstr "ndarray de forma (n_classes,)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:88
msgid "Intercept term."
msgstr "Término de intercepción."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:95
msgid "**covariance_**"
msgstr "**covariance_**"

#: of
msgid "array-like of shape (n_features, n_features)"
msgstr "array-like de forma (n_features, n_features)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:91
msgid "Weighted within-class covariance matrix. It corresponds to `sum_k prior_k * C_k` where `C_k` is the covariance matrix of the samples in class `k`. The `C_k` are estimated using the (potentially shrunk) biased estimator of covariance. If solver is 'svd', only exists when `store_covariance` is True."
msgstr "Matriz de covarianza ponderada dentro de la clase. Corresponde a `sum_k prior_k * C_k` donde `C_k` es la matriz de covarianza de las muestras en la clase `k`. Las `C_k` se estiman utilizando el estimador sesgado de la covarianza(potencialmente reducido). Si el solucionador es 'svd', sólo existe cuando `store_covariance` es True."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:101
msgid "**explained_variance_ratio_**"
msgstr "**explained_variance_ratio_**"

#: of
msgid "ndarray of shape (n_components,)"
msgstr "ndarray de forma (n_components,)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:98
msgid "Percentage of variance explained by each of the selected components. If ``n_components`` is not set then all components are stored and the sum of explained variances is equal to 1.0. Only available when eigen or svd solver is used."
msgstr "Porcentaje de varianza explicada por cada uno de los componentes seleccionados. Si ``n_components`` no se establece, entonces todos los componentes son almacenados y la suma de las varianzas explicadas es igual a 1,0. Sólo está disponible cuando se utiliza el solucionador eigen o svd."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:104
msgid "**means_**"
msgstr "**means_**"

#: of
msgid "array-like of shape (n_classes, n_features)"
msgstr "array-like de forma (n_classes, n_features)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:104
msgid "Class-wise means."
msgstr "Medios de la clase."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:107
msgid "**priors_**"
msgstr "**priors_**"

#: of
msgid "array-like of shape (n_classes,)"
msgstr "array-like of shape (n_classes,)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:107
msgid "Class priors (sum to 1)."
msgstr "A prioris de clase (suma 1)."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:111
msgid "**scalings_**"
msgstr "**scalings_**"

#: of
msgid "array-like of shape (rank, n_classes - 1)"
msgstr "tipo arreglo de forma (rank, n_classes - 1)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:110
msgid "Scaling of the features in the space spanned by the class centroids. Only available for 'svd' and 'eigen' solvers."
msgstr "Escala de las características en el espacio abarcado por los centroides de las clases. Sólo disponible para los solucionadores 'svd' y 'eigen'."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:114
msgid "**xbar_**"
msgstr "**xbar_**"

#: of
msgid "array-like of shape (n_features,)"
msgstr "array-like of shape (n_features,)"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:114
msgid "Overall mean. Only present if solver is 'svd'."
msgstr "Media general. Sólo está presente si el solucionador es 'svd'."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:120
msgid "**classes_**"
msgstr "**classes_**"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:117
msgid "Unique class labels."
msgstr "Etiquetas de clase únicas."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:125
msgid ":obj:`QuadraticDiscriminantAnalysis`"
msgstr ":obj:`QuadraticDiscriminantAnalysis`"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:126
msgid "Quadratic Discriminant Analysis."
msgstr "Análisis Discriminante Cuadrático."

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:132
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:144
msgid "Methods"
msgstr "Métodos"

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`decision_function <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function>`\\"
msgstr ":obj:`decision_function <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function>`\\"

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Apply decision function to an array of samples."
msgstr "Aplica la función de decisión a un arreglo de muestras."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`fit <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit>`\\"
msgstr ":obj:`fit <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit>`\\"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:9
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Fit LinearDiscriminantAnalysis model according to the given"
msgstr "Ajusta el modelo de LinearDiscriminantAnalysis de acuerdo a lo dado"

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform>`\\"
msgstr ":obj:`fit_transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform>`\\"

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr "Ajusta a los datos y luego los transforma."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`get_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params>`\\"
msgstr ":obj:`get_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict>`\\"
msgstr ":obj:`predict <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict>`\\"

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
#: sklearn.linear_model._base.LinearClassifierMixin.predict:2
msgid "Predict class labels for samples in X."
msgstr "Predice las etiquetas de clase para las muestras en X."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba>`\\"

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Estimate log probability."
msgstr "Estima la probabilidad logarítmica."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba>`\\"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Estimate probability."
msgstr "Estima la probabilidad."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`score <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score>`\\"
msgstr ":obj:`score <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos de prueba y las etiquetas dadas."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`set_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params>`\\"
msgstr ":obj:`set_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform>`\\"
msgstr ":obj:`transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform>`\\"

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Project data to maximize class separation."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:4
msgid "The decision function is equal (up to a constant factor) to the log-posterior of the model, i.e. `log p(y = k | x)`. In a binary classification setting this instead corresponds to the difference `log p(y = 1 | x) - log p(y = 0 | x)`. See :ref:`lda_qda_math`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:12
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:14
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:8
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:12
msgid "Array of samples (test vectors)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform
#: sklearn.linear_model._base.LinearClassifierMixin.predict
msgid "Returns"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:30
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:24
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:24
#: sklearn.linear_model._base.LinearClassifierMixin.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_classes)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:17
msgid "Decision function values related to each class, per sample. In the two-class case, the shape is (n_samples,), giving the log likelihood ratio of the positive class."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:3
msgid "training data and parameters."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:5
msgid "*store_covariance* has been moved to main constructor."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:8
msgid "*tol* has been moved to main constructor."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:14
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:29
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:17
msgid "Target values."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:24
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:8
msgid "Input data."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:13
msgid "Estimated log probabilities."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:13
msgid "Estimated probabilities."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:13
msgid "Transformed data."
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:4
msgid "Examples using ``sklearn.discriminant_analysis.LinearDiscriminantAnalysis``"
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:15
#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:34
#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:42
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
msgstr ""

