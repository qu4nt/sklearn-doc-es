msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.po\n"
"X-Crowdin-File-ID: 5164\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst:2
msgid ":mod:`sklearn.discriminant_analysis`.LinearDiscriminantAnalysis"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:2
msgid "Linear Discriminant Analysis"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:4
msgid "A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:7
msgid "The model fits a Gaussian density to each class, assuming that all classes share the same covariance matrix."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:10
msgid "The fitted model can also be used to reduce the dimensionality of the input by projecting it to the most discriminative directions, using the `transform` method."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:14
msgid "*LinearDiscriminantAnalysis*."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:17
msgid "Read more in the :ref:`User Guide <lda_qda>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform
#: sklearn.linear_model._base.LinearClassifierMixin.predict
msgid "Parameters"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:29
msgid "**solver**"
msgstr ""

#: of
msgid "{'svd', 'lsqr', 'eigen'}, default='svd'"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:29
msgid "Solver to use, possible values:"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:23
msgid "'svd': Singular value decomposition (default). Does not compute the covariance matrix, therefore this solver is recommended for data with a large number of features."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:26
msgid "'lsqr': Least squares solution. Can be combined with shrinkage or custom covariance estimator."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:28
msgid "'eigen': Eigenvalue decomposition. Can be combined with shrinkage or custom covariance estimator."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:38
msgid "**shrinkage**"
msgstr ""

#: of
msgid "'auto' or float, default=None"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:35
msgid "Shrinkage parameter, possible values:"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:33
msgid "None: no shrinkage (default)."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:34
msgid "'auto': automatic shrinkage using the Ledoit-Wolf lemma."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:35
msgid "float between 0 and 1: fixed shrinkage parameter."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:37
msgid "This should be left to None if `covariance_estimator` is used. Note that shrinkage works only with 'lsqr' and 'eigen' solvers."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:42
msgid "**priors**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:41
msgid "The class prior probabilities. By default, the class proportions are inferred from the training data."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:48
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:45
msgid "Number of components (<= min(n_classes - 1, n_features)) for dimensionality reduction. If None, will be set to min(n_classes - 1, n_features). This parameter only affects the `transform` method."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:55
msgid "**store_covariance**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:51
msgid "If True, explicitely compute the weighted within-class covariance matrix when solver is 'svd'. The matrix is always computed and stored for the other solvers."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:63
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1.0e-4"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:58
msgid "Absolute threshold for a singular value of X to be considered significant, used to estimate the rank of X. Dimensions whose singular values are non-significant are discarded. Only used if solver is 'svd'."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:80
msgid "**covariance_estimator**"
msgstr ""

#: of
msgid "covariance estimator, default=None"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:66
msgid "If not None, `covariance_estimator` is used to estimate the covariance matrices instead of relying on the empirical covariance estimator (with potential shrinkage). The object should have a fit method and a ``covariance_`` attribute like the estimators in :mod:`sklearn.covariance`. if None the shrinkage parameter drives the estimate."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:73
msgid "This should be left to None if `shrinkage` is used. Note that `covariance_estimator` works only with 'lsqr' and 'eigen' solvers."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis
msgid "Attributes"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:85
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,) or (n_classes, n_features)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:85
msgid "Weight vector(s)."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:88
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:88
msgid "Intercept term."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:95
msgid "**covariance_**"
msgstr ""

#: of
msgid "array-like of shape (n_features, n_features)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:91
msgid "Weighted within-class covariance matrix. It corresponds to `sum_k prior_k * C_k` where `C_k` is the covariance matrix of the samples in class `k`. The `C_k` are estimated using the (potentially shrunk) biased estimator of covariance. If solver is 'svd', only exists when `store_covariance` is True."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:101
msgid "**explained_variance_ratio_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:98
msgid "Percentage of variance explained by each of the selected components. If ``n_components`` is not set then all components are stored and the sum of explained variances is equal to 1.0. Only available when eigen or svd solver is used."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:104
msgid "**means_**"
msgstr ""

#: of
msgid "array-like of shape (n_classes, n_features)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:104
msgid "Class-wise means."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:107
msgid "**priors_**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:107
msgid "Class priors (sum to 1)."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:111
msgid "**scalings_**"
msgstr ""

#: of
msgid "array-like of shape (rank, n_classes - 1)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:110
msgid "Scaling of the features in the space spanned by the class centroids. Only available for 'svd' and 'eigen' solvers."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:114
msgid "**xbar_**"
msgstr ""

#: of
msgid "array-like of shape (n_features,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:114
msgid "Overall mean. Only present if solver is 'svd'."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:120
msgid "**classes_**"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:117
msgid "Unique class labels."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:125
msgid ":obj:`QuadraticDiscriminantAnalysis`"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:126
msgid "Quadratic Discriminant Analysis."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:132
msgid "Examples"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis:144
msgid "Methods"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`decision_function <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function>`\\"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Apply decision function to an array of samples."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`fit <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit>`\\"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:9
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Fit LinearDiscriminantAnalysis model according to the given"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`get_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict>`\\"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
#: sklearn.linear_model._base.LinearClassifierMixin.predict:2
msgid "Predict class labels for samples in X."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba>`\\"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Estimate log probability."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba>`\\"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Estimate probability."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`score <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`set_params <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid ":obj:`transform <sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform>`\\"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:2
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis:157:<autosummary>:1
msgid "Project data to maximize class separation."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:4
msgid "The decision function is equal (up to a constant factor) to the log-posterior of the model, i.e. `log p(y = k | x)`. In a binary classification setting this instead corresponds to the difference `log p(y = 1 | x) - log p(y = 0 | x)`. See :ref:`lda_qda_math`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:12
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:14
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:8
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:12
msgid "Array of samples (test vectors)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform
#: sklearn.linear_model._base.LinearClassifierMixin.predict
msgid "Returns"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:30
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:24
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:24
#: sklearn.linear_model._base.LinearClassifierMixin.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_classes)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function:17
msgid "Decision function values related to each class, per sample. In the two-class case, the shape is (n_samples,), giving the log likelihood ratio of the positive class."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:3
msgid "training data and parameters."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:5
msgid "*store_covariance* has been moved to main constructor."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:8
msgid "*tol* has been moved to main constructor."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:14
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:29
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit:17
msgid "Target values."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:24
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:8
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:8
msgid "Input data."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of
#: sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba:13
msgid "Estimated log probabilities."
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba:13
msgid "Estimated probabilities."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform:13
msgid "Transformed data."
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:4
msgid "Examples using ``sklearn.discriminant_analysis.LinearDiscriminantAnalysis``"
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:15
#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ""

#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:34
#: ../modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.examples:42
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
msgstr ""

