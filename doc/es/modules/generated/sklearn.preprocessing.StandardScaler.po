msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: 2021-04-15 00:04\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.preprocessing.StandardScaler.po\n"
"X-Crowdin-File-ID: 3708\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.preprocessing.StandardScaler.rst:2
msgid ":mod:`sklearn.preprocessing`.StandardScaler"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:2
msgid "Standardize features by removing the mean and scaling to unit variance"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:4
msgid "The standard score of a sample `x` is calculated as:"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:6
msgid "z = (x - u) / s"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:8
msgid "where `u` is the mean of the training samples or zero if `with_mean=False`, and `s` is the standard deviation of the training samples or one if `with_std=False`."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:12
msgid "Centering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Mean and standard deviation are then stored to be used on later data using :meth:`transform`."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:17
msgid "Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual features do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance)."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:22
msgid "For instance many elements used in the objective function of a learning algorithm (such as the RBF kernel of Support Vector Machines or the L1 and L2 regularizers of linear models) assume that all features are centered around 0 and have variance in the same order. If a feature has a variance that is orders of magnitude larger that others, it might dominate the objective function and make the estimator unable to learn from other features correctly as expected."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:30
msgid "This scaler can also be applied to sparse CSR or CSC matrices by passing `with_mean=False` to avoid breaking the sparsity structure of the data."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:33
msgid "Read more in the :ref:`User Guide <preprocessing_scaler>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.StandardScaler
#: sklearn.preprocessing._data.StandardScaler.fit
#: sklearn.preprocessing._data.StandardScaler.inverse_transform
#: sklearn.preprocessing._data.StandardScaler.partial_fit
#: sklearn.preprocessing._data.StandardScaler.transform
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:41
#: sklearn.preprocessing._data.StandardScaler.inverse_transform:11
#: sklearn.preprocessing._data.StandardScaler.transform:11
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:38
msgid "If False, try to avoid a copy and do inplace scaling instead. This is not guaranteed to always work inplace; e.g. if the data is not a NumPy array or scipy.sparse CSR matrix, a copy may still be returned."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:48
msgid "**with_mean**"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:44
msgid "If True, center the data before scaling. This does not work (and will raise an exception) when attempted on sparse matrices, because centering them entails building a dense matrix which in common use cases is likely to be too large to fit in memory."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:55
msgid "**with_std**"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:51
msgid "If True, scale the data to unit variance (or equivalently, unit standard deviation)."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler
msgid "Attributes"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:67
msgid "**scale_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,) or None"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:60
msgid "Per feature relative scaling of the data to achieve zero mean and unit variance. Generally this is calculated using `np.sqrt(var_)`. If a variance is zero, we can't achieve unit variance, and the data is left as-is, giving a scaling factor of 1. `scale_` is equal to `None` when `with_std=False`."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:66
msgid "*scale_*"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:71
msgid "**mean_**"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:70
msgid "The mean value for each feature in the training set. Equal to ``None`` when ``with_mean=False``."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:75
msgid "**var_**"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:74
msgid "The variance for each feature in the training set. Used to compute `scale_`. Equal to ``None`` when ``with_std=False``."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:87
msgid "**n_samples_seen_**"
msgstr ""

#: of
msgid "int or ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:78
msgid "The number of samples processed by the estimator for each feature. If there are no missing samples, the ``n_samples_seen`` will be an integer, otherwise it will be an array of dtype int. If `sample_weights` are used it will be a float (if no missing data) or an array of dtype float that sums the weights seen so far. Will be reset on new calls to fit, but increments across ``partial_fit`` calls."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:92
msgid ":obj:`scale`"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:93
msgid "Equivalent function without the estimator API."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:94
msgid ":class:`~sklearn.decomposition.PCA`"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:95
msgid "Further removes the linear correlation across features with 'whiten=True'."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:99
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:100
msgid "NaNs are treated as missing values: disregarded in fit, and maintained in transform."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:103
msgid "We use a biased estimator for the standard deviation, equivalent to `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to affect model performance."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:107
msgid "For a comparison of the different scalers, transformers, and normalizers, see :ref:`examples/preprocessing/plot_all_scaling.py <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:113
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:130
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.StandardScaler.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Compute the mean and std to be used for later scaling."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.preprocessing.StandardScaler.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.StandardScaler.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.preprocessing.StandardScaler.inverse_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.inverse_transform:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Scale back the data to the original representation"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.preprocessing.StandardScaler.partial_fit>`\\"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.partial_fit:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Online computation of mean and std on X for later scaling."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.StandardScaler.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.StandardScaler.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.transform:2
#: sklearn.preprocessing._data.StandardScaler:140:<autosummary>:1
msgid "Perform standardization by centering and scaling"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.preprocessing._data.StandardScaler.fit:9
#: sklearn.preprocessing._data.StandardScaler.inverse_transform:8
#: sklearn.preprocessing._data.StandardScaler.partial_fit:17
#: sklearn.preprocessing._data.StandardScaler.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:8
#: sklearn.preprocessing._data.StandardScaler.partial_fit:16
msgid "The data used to compute the mean and standard deviation used for later scaling along the features axis."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.preprocessing._data.StandardScaler.fit:12
#: sklearn.preprocessing._data.StandardScaler.partial_fit:20
msgid "**y**"
msgstr ""

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:12
#: sklearn.preprocessing._data.StandardScaler.partial_fit:20
msgid "Ignored."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:18
#: sklearn.preprocessing._data.StandardScaler.partial_fit:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:15
#: sklearn.preprocessing._data.StandardScaler.partial_fit:23
msgid "Individual weights for each sample."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:17
#: sklearn.preprocessing._data.StandardScaler.partial_fit:25
msgid "parameter *sample_weight* support to StandardScaler."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.StandardScaler.fit
#: sklearn.preprocessing._data.StandardScaler.inverse_transform
#: sklearn.preprocessing._data.StandardScaler.partial_fit
#: sklearn.preprocessing._data.StandardScaler.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._data.StandardScaler.fit:34
#: sklearn.preprocessing._data.StandardScaler.partial_fit:42
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.fit:23
#: sklearn.preprocessing._data.StandardScaler.partial_fit:31
msgid "Fitted scaler."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
#: sklearn.preprocessing._data.StandardScaler.inverse_transform:16
#: sklearn.preprocessing._data.StandardScaler.transform:16
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.inverse_transform:8
#: sklearn.preprocessing._data.StandardScaler.transform:8
msgid "The data used to scale along the features axis."
msgstr ""

#: of
msgid "bool, default=None"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.inverse_transform:11
#: sklearn.preprocessing._data.StandardScaler.transform:11
msgid "Copy the input X or not."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.inverse_transform:27
#: sklearn.preprocessing._data.StandardScaler.transform:27
msgid "**X_tr**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.partial_fit:4
msgid "All of X is processed as a single batch. This is intended for cases when :meth:`fit` is not feasible due to very large number of `n_samples` or because X is read from a continuous stream."
msgstr ""

#: of sklearn.preprocessing._data.StandardScaler.partial_fit:8
msgid "The algorithm for incremental mean and std is given in Equation 1.5a,b in Chan, Tony F., Gene H. Golub, and Randall J. LeVeque. \"Algorithms for computing the sample variance: Analysis and recommendations.\" The American Statistician 37.3 (1983): 242-247:"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "{array-like, sparse matrix of shape (n_samples, n_features)"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.StandardScaler.examples:4
msgid "Examples using ``sklearn.preprocessing.StandardScaler``"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.StandardScaler.examples:15
#: ../modules/generated/sklearn.preprocessing.StandardScaler.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_22_0.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_applications_plot_prediction_latency.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sparse_logistic_regression_mnist.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic_l1_l2_sparsity.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_display_object_visualization.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_det.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neural_networks_plot_mlp_alpha.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_scaling_importance.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_svm_plot_svm_anova.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_svm_plot_rbf_parameters.py`"
#~ msgstr ""

