msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:16\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.utils.parallel_backend.po\n"
"X-Crowdin-File-ID: 3840\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.utils.parallel_backend.rst:2
msgid ":mod:`sklearn.utils`.parallel_backend"
msgstr ""

#: joblib.parallel.parallel_backend:2 of
msgid "Change the default backend used by Parallel inside a with block."
msgstr ""

#: joblib.parallel.parallel_backend:4 of
msgid "If ``backend`` is a string it must match a previously registered implementation using the ``register_parallel_backend`` function."
msgstr ""

#: joblib.parallel.parallel_backend:7 of
msgid "By default the following backends are available:"
msgstr ""

#: joblib.parallel.parallel_backend:9 of
msgid "'loky': single-host, process-based parallelism (used by default),"
msgstr ""

#: joblib.parallel.parallel_backend:10 of
msgid "'threading': single-host, thread-based parallelism,"
msgstr ""

#: joblib.parallel.parallel_backend:11 of
msgid "'multiprocessing': legacy single-host, process-based parallelism."
msgstr ""

#: joblib.parallel.parallel_backend:13 of
msgid "'loky' is recommended to run functions that manipulate Python objects. 'threading' is a low-overhead alternative that is most efficient for functions that release the Global Interpreter Lock: e.g. I/O-bound code or CPU-bound code in a few calls to native code that explicitly releases the GIL."
msgstr ""

#: joblib.parallel.parallel_backend:19 of
msgid "In addition, if the `dask` and `distributed` Python packages are installed, it is possible to use the 'dask' backend for better scheduling of nested parallel calls without over-subscription and potentially distribute parallel calls over a networked cluster of several hosts."
msgstr ""

#: joblib.parallel.parallel_backend:24 of
msgid "It is also possible to use the distributed 'ray' backend for distributing the workload to a cluster of nodes. To use the 'ray' joblib backend add the following lines::"
msgstr ""

#: joblib.parallel.parallel_backend:34 of
msgid "Alternatively the backend can be passed directly as an instance."
msgstr ""

#: joblib.parallel.parallel_backend:36 of
msgid "By default all available workers will be used (``n_jobs=-1``) unless the caller passes an explicit value for the ``n_jobs`` parameter."
msgstr ""

#: joblib.parallel.parallel_backend:39 of
msgid "This is an alternative to passing a ``backend='backend_name'`` argument to the ``Parallel`` class constructor. It is particularly useful when calling into library code that uses joblib internally but does not expose the backend argument in its own API."
msgstr ""

#: joblib.parallel.parallel_backend:50 of
msgid "Warning: this function is experimental and subject to change in a future version of joblib."
msgstr ""

#: joblib.parallel.parallel_backend:53 of
msgid "Joblib also tries to limit the oversubscription by limiting the number of threads usable in some third-party library threadpools like OpenBLAS, MKL or OpenMP. The default limit in each worker is set to ``max(cpu_count() // effective_n_jobs, 1)`` but this limit can be overwritten with the ``inner_max_num_threads`` argument which will be used to set this limit in the child processes."
msgstr ""

