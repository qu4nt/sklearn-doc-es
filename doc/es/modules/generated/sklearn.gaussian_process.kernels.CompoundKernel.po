msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-20 13:53\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.po\n"
"X-Crowdin-File-ID: 5700\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst:2
msgid ":mod:`sklearn.gaussian_process.kernels`.CompoundKernel"
msgstr ":mod:`sklearn.gaussian_process.kernels`.CompoundKernel"

#: of sklearn.gaussian_process.kernels.CompoundKernel:2
msgid "Kernel which is composed of a set of other kernels."
msgstr "Núcleo (kernel) que se compone de un conjunto de otros núcleos."

#: of sklearn.gaussian_process.kernels.CompoundKernel
#: sklearn.gaussian_process.kernels.CompoundKernel.__call__
#: sklearn.gaussian_process.kernels.CompoundKernel.diag
#: sklearn.gaussian_process.kernels.CompoundKernel.get_params
#: sklearn.gaussian_process.kernels.Kernel.clone_with_theta
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.gaussian_process.kernels.CompoundKernel:12
msgid "**kernels**"
msgstr "**kernels**"

#: of
msgid "list of Kernels"
msgstr "list of Kernels"

#: of sklearn.gaussian_process.kernels.CompoundKernel:9
msgid "The other kernels"
msgstr "Los otros núcleos"

#: of sklearn.gaussian_process.kernels.CompoundKernel
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.gaussian_process.kernels.CompoundKernel:17
msgid ":obj:`bounds <bounds>`"
msgstr ":obj:`bounds <bounds>`"

#: of sklearn.gaussian_process.kernels.CompoundKernel:17
#: sklearn.gaussian_process.kernels.CompoundKernel.bounds:2
msgid "Returns the log-transformed bounds on the theta."
msgstr "Devuelve los límites transformados en logaritmo del theta."

#: of sklearn.gaussian_process.kernels.CompoundKernel:20
msgid ":obj:`hyperparameters <hyperparameters>`"
msgstr ":obj:`hyperparameters <hyperparameters>`"

#: of sklearn.gaussian_process.kernels.CompoundKernel:20
#: sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters:2
msgid "Returns a list of all hyperparameter specifications."
msgstr "Devuelve una lista de todas las especificaciones de los hiperparámetros."

#: of sklearn.gaussian_process.kernels.CompoundKernel:23
msgid ":obj:`n_dims <n_dims>`"
msgstr ":obj:`n_dims <n_dims>`"

#: of sklearn.gaussian_process.kernels.CompoundKernel:23
#: sklearn.gaussian_process.kernels.CompoundKernel.n_dims:2
msgid "Returns the number of non-fixed hyperparameters of the kernel."
msgstr "Devuelve el número de hiperparámetros no fijos del núcleo."

#: of sklearn.gaussian_process.kernels.CompoundKernel:26
msgid ":obj:`requires_vector_input <requires_vector_input>`"
msgstr ":obj:`requires_vector_input <requires_vector_input>`"

#: of sklearn.gaussian_process.kernels.CompoundKernel:26
#: sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input:2
msgid "Returns whether the kernel is defined on discrete structures."
msgstr "Devuelve si el núcleo está definido en estructuras discretas."

#: of sklearn.gaussian_process.kernels.CompoundKernel:35
msgid ":obj:`theta <theta>`"
msgstr ":obj:`theta <theta>`"

#: of sklearn.gaussian_process.kernels.CompoundKernel:29
#: sklearn.gaussian_process.kernels.CompoundKernel.theta:2
msgid "Returns the (flattened, log-transformed) non-fixed hyperparameters."
msgstr "Devuelve los hiperparámetros no fijos (aplanados y transformados en logaritmos)."

#: of sklearn.gaussian_process.kernels.CompoundKernel:38
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.gaussian_process.kernels.CompoundKernel:53
msgid "Methods"
msgstr "Métodos"

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`__call__ <sklearn.gaussian_process.kernels.CompoundKernel.__call__>`\\"
msgstr ":obj:`__call__ <sklearn.gaussian_process.kernels.CompoundKernel.__call__>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:2
#: sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid "Return the kernel k(X, Y) and optionally its gradient."
msgstr "Devuelve el núcleo k(X, Y) y opcionalmente su gradiente."

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`clone_with_theta <sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta>`\\"
msgstr ":obj:`clone_with_theta <sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
#: sklearn.gaussian_process.kernels.Kernel.clone_with_theta:2
msgid "Returns a clone of self with given hyperparameters theta."
msgstr "Devuelve un clon de sí mismo con los hiperparámetros dados theta."

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`diag <sklearn.gaussian_process.kernels.CompoundKernel.diag>`\\"
msgstr ":obj:`diag <sklearn.gaussian_process.kernels.CompoundKernel.diag>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel.diag:2
#: sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid "Returns the diagonal of the kernel k(X, X)."
msgstr "Devuelve la diagonal del núcleo k(X, X)."

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`get_params <sklearn.gaussian_process.kernels.CompoundKernel.get_params>`\\"
msgstr ":obj:`get_params <sklearn.gaussian_process.kernels.CompoundKernel.get_params>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel.get_params:2
#: sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid "Get parameters of this kernel."
msgstr "Obtener los parámetros de este núcleo."

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`is_stationary <sklearn.gaussian_process.kernels.CompoundKernel.is_stationary>`\\"
msgstr ":obj:`is_stationary <sklearn.gaussian_process.kernels.CompoundKernel.is_stationary>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel.is_stationary:2
#: sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid "Returns whether the kernel is stationary."
msgstr "Devuelve si el núcleo es estacionario."

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
msgid ":obj:`set_params <sklearn.gaussian_process.kernels.CompoundKernel.set_params>`\\"
msgstr ":obj:`set_params <sklearn.gaussian_process.kernels.CompoundKernel.set_params>`\\"

#: of sklearn.gaussian_process.kernels.CompoundKernel:62:<autosummary>:1
#: sklearn.gaussian_process.kernels.Kernel.set_params:2
msgid "Set the parameters of this kernel."
msgstr "Establece los parámetros de este núcleo."

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:4
msgid "Note that this compound kernel returns the results of all simple kernel stacked along an additional axis."
msgstr "Ten en cuenta que este núcleo compuesto devuelve los resultados de todos los núcleos simples apilados a lo largo de un eje adicional."

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:10
#: sklearn.gaussian_process.kernels.CompoundKernel.diag:11
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples_X, n_features) or list of object,             default=None"
msgstr "array-like of shape (n_samples_X, n_features) or list of object,             default=None"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:10
msgid "Left argument of the returned kernel k(X, Y)"
msgstr "Argumento izquierdo del núcleo devuelto k(X, Y)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:14
msgid "**Y**"
msgstr "**Y**"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:13
msgid "Right argument of the returned kernel k(X, Y). If None, k(X, X) is evaluated instead."
msgstr "Argumento derecho del núcleo devuelto k(X, Y). Si es None, se evalúa k(X, X) en su lugar."

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:18
msgid "**eval_gradient**"
msgstr "**eval_gradient**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:17
msgid "Determines whether the gradient with respect to the log of the kernel hyperparameter is computed."
msgstr "Determina si se calcula el gradiente con respecto al logaritmo del hiperparámetro del núcleo."

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__
#: sklearn.gaussian_process.kernels.CompoundKernel.bounds
#: sklearn.gaussian_process.kernels.CompoundKernel.diag
#: sklearn.gaussian_process.kernels.CompoundKernel.get_params
#: sklearn.gaussian_process.kernels.CompoundKernel.theta
#: sklearn.gaussian_process.kernels.Kernel.set_params
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:23
msgid "**K**"
msgstr "**K**"

#: of
msgid "ndarray of shape (n_samples_X, n_samples_Y, n_kernels)"
msgstr "ndarray of shape (n_samples_X, n_samples_Y, n_kernels)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:23
msgid "Kernel k(X, Y)"
msgstr "Núcleo k(X, Y)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:39
msgid "**K_gradient**"
msgstr "**K_gradient**"

#: of
msgid "ndarray of shape                 (n_samples_X, n_samples_X, n_dims, n_kernels), optional"
msgstr "ndarray of shape                 (n_samples_X, n_samples_X, n_dims, n_kernels), optional"

#: of sklearn.gaussian_process.kernels.CompoundKernel.__call__:26
msgid "The gradient of the kernel k(X, X) with respect to the log of the hyperparameter of the kernel. Only returned when `eval_gradient` is True."
msgstr "El gradiente del núcleo k(X, X) con respecto al logaritmo del hiperparámetro del núcleo. Sólo se devuelve cuando `eval_gradient` es True."

#: of sklearn.gaussian_process.kernels.CompoundKernel.bounds:20
msgid "**bounds**"
msgstr "**bounds**"

#: of
msgid "array of shape (n_dims, 2)"
msgstr "array of shape (n_dims, 2)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.bounds:9
msgid "The log-transformed bounds on the kernel's hyperparameters theta"
msgstr "Los límites transformados logarítmicamente de los hiperparámetros del núcleo theta"

#: of sklearn.gaussian_process.kernels.CompoundKernel.theta:24
#: sklearn.gaussian_process.kernels.Kernel.clone_with_theta:20
msgid "**theta**"
msgstr "**theta**"

#: of
msgid "ndarray of shape (n_dims,)"
msgstr "ndarray of shape (n_dims,)"

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:8
msgid "The hyperparameters"
msgstr "Hiperparámetros"

#: of sklearn.gaussian_process.kernels.CompoundKernel.diag:4
msgid "The result of this method is identical to `np.diag(self(X))`; however, it can be evaluated more efficiently since only the diagonal is evaluated."
msgstr "El resultado de este método es idéntico al de `np.diag(self(X))`; sin embargo, se puede evaluar de forma más eficiente ya que sólo se evalúa la diagonal."

#: of
msgid "array-like of shape (n_samples_X, n_features) or list of object"
msgstr "array-like of shape (n_samples_X, n_features) or list of object"

#: of sklearn.gaussian_process.kernels.CompoundKernel.diag:11
msgid "Argument to the kernel."
msgstr "Argumento para el núcleo."

#: of sklearn.gaussian_process.kernels.CompoundKernel.diag:27
msgid "**K_diag**"
msgstr "**K_diag**"

#: of
msgid "ndarray of shape (n_samples_X, n_kernels)"
msgstr "ndarray of shape (n_samples_X, n_kernels)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.diag:16
msgid "Diagonal of kernel k(X, X)"
msgstr "Diagonal del núcleo k(X, X)"

#: of sklearn.gaussian_process.kernels.CompoundKernel.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.gaussian_process.kernels.CompoundKernel.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.gaussian_process.kernels.CompoundKernel.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.gaussian_process.kernels.CompoundKernel.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of sklearn.gaussian_process.kernels.Kernel.set_params:4
msgid "The method works on simple kernels as well as on nested kernels. The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en núcleos simples como en núcleos anidados. Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.gaussian_process.kernels.Kernel.set_params:23
msgid "self"
msgstr "self"

#: of sklearn.gaussian_process.kernels.CompoundKernel.theta:4
msgid "Note that theta are typically the log-transformed values of the kernel's hyperparameters as this representation of the search space is more amenable for hyperparameter search, as hyperparameters like length-scales naturally live on a log-scale."
msgstr "Nótese que theta son típicamente los valores transformados en logaritmos de los hiperparámetros del núcleo, ya que esta representación del espacio de búsqueda es más adecuada para la búsqueda de hiperparámetros, ya que los hiperparámetros como las escalas de longitud viven naturalmente en una escala logarítmica."

#: of sklearn.gaussian_process.kernels.CompoundKernel.theta:13
msgid "The non-fixed, log-transformed hyperparameters of the kernel"
msgstr "Los hiperparámetros no fijos y transformados en logaritmos del núcleo"

