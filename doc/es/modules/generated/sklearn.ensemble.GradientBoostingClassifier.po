msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-15 13:22\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.GradientBoostingClassifier.po\n"
"X-Crowdin-File-ID: 5220\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.GradientBoostingClassifier"
msgstr ":mod:`sklearn.ensemble`.GradientBoostingClassifier"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:2
msgid "Gradient Boosting for classification."
msgstr "Potenciación de gradiente para clasificación."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:4
msgid "GB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage ``n_classes_`` regression trees are fit on the negative gradient of the binomial or multinomial deviance loss function. Binary classification is a special case where only a single regression tree is induced."
msgstr "La potenciación de gradiente crea un modelo aditivo de forma progresiva por etapas; permite la optimización de funciones de perdida arbitrariamente diferenciables. En cada etapa los árboles de regresión ``n_classes_`` son encajados en el gradiente negativo de la función de perdida de desviación binomial o multinomial. La clasificación binaria es un caso especial donde solo un árbol de regresión es inducido."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:11
msgid "Read more in the :ref:`User Guide <gradient_boosting>`."
msgstr "Más información en el :ref:`Manual de usuario <gradient_boosting>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._gb.BaseGradientBoosting.apply
#: sklearn.ensemble._gb.BaseGradientBoosting.fit
#: sklearn.ensemble._gb.GradientBoostingClassifier
#: sklearn.ensemble._gb.GradientBoostingClassifier.decision_function
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:19
msgid "**loss**"
msgstr "**loss**"

#: of
msgid "{'deviance', 'exponential'}, default='deviance'"
msgstr "{'deviance', 'exponential'}, default='deviance'"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:16
msgid "The loss function to be optimized. 'deviance' refers to deviance (= logistic regression) for classification with probabilistic outputs. For loss 'exponential' gradient boosting recovers the AdaBoost algorithm."
msgstr "La función de pérdida a optimizar. 'deviance' se refiere a la desviación (= regresión logística) para la clasificación con resultados probabilistas. Para loss 'exponential' la potenciación de gradiente recupera el algoritmo AdaBoost."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:23
msgid "**learning_rate**"
msgstr "**learning_rate**"

#: of
msgid "float, default=0.1"
msgstr "float, default=0.1"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:22
msgid "Learning rate shrinks the contribution of each tree by `learning_rate`. There is a trade-off between learning_rate and n_estimators."
msgstr "La tasa de aprendizaje reduce la contribución de cada árbol por `learning_rate`. Hay una compensación entre learning_rate y n_estimators."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:28
msgid "**n_estimators**"
msgstr "**n_estimators**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:26
msgid "The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance."
msgstr "La cantidad de etapas de potenciación a realizar. La potenciación de gradiente es bastante robusta al sobre-ajuste, por lo que un número grande normalmente resultará en mejor rendimiento."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:35
msgid "**subsample**"
msgstr "**subsample**"

#: of
msgid "float, default=1.0"
msgstr "float, default=1.0"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:31
msgid "The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. `subsample` interacts with the parameter `n_estimators`. Choosing `subsample < 1.0` leads to a reduction of variance and an increase in bias."
msgstr "La fracción de muestras a ser usadas para ajustar los aprendices base individuales. Si es menor que 1.0 esto resulta en Potenciación de Gradiente Estocástica. `subsample` interactúa con el parámetro `n_estimators`. Escoger `subsample < 1.0` lleva a una reducción de varianza y un aumento en el sesgo."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:50
msgid "**criterion**"
msgstr "**criterion**"

#: of
msgid "{'friedman_mse', 'mse', 'mae'}, default='friedman_mse'"
msgstr "{'friedman_mse', 'mse', 'mae'}, default='friedman_mse'"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:38
msgid "The function to measure the quality of a split. Supported criteria are 'friedman_mse' for the mean squared error with improvement score by Friedman, 'mse' for mean squared error, and 'mae' for the mean absolute error. The default value of 'friedman_mse' is generally the best as it can provide a better approximation in some cases."
msgstr "La función para medir la calidad de una división. Los criterios soportados son 'friedman_mse' para el error cuadrático medio con puntuación de mejora por Friedman, 'mse' para error cuadrático medio, y 'mae' para el error absoluto medio. El valor por defecto de 'friedman_mse' es generalmente el mejor ya que puede proveer una mejor aproximación en algunos casos."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:46
msgid "`criterion='mae'` is deprecated and will be removed in version 1.1 (renaming of 0.26). Use `criterion='friedman_mse'` or `'mse'` instead, as trees should use a least-square criterion in Gradient Boosting."
msgstr "`criterion='mae'` está obsoleto y será eliminado en la versión 1.1 (renombrado de 0.26). Use `criterion='friedman_mse'` o `'mse'` en su lugar, ya que los árboles deben usar un criterio de mínimos cuadrados en la potenciación de Gradiente."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:61
msgid "**min_samples_split**"
msgstr "**min_samples_split**"

#: of
msgid "int or float, default=2"
msgstr "int o float, default=2"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:53
msgid "The minimum number of samples required to split an internal node:"
msgstr "El número mínimo de muestras requeridas para dividir un nodo interno:"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:55
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr "Si int, entonces considera `min_samples_split` como el número mínimo."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:56
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split."
msgstr "Si float, entonces `min_samples_split` es una fracción y `ceil(min_samples_split * n_samples)` son el número mínimo de muestras para cada división."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:60
#: sklearn.ensemble._gb.GradientBoostingClassifier:75
msgid "Added float values for fractions."
msgstr "Se añadieron valores flotantes para las fracciones."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:76
msgid "**min_samples_leaf**"
msgstr "**min_samples_leaf**"

#: of
msgid "int or float, default=1"
msgstr "int o float, default=1"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:64
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr "El número mínimo de muestras requeridas para estar en un nodo de hoja. Un punto dividido a cualquier profundidad sólo se considerará si deja al menos ``min_samples_leaf`` muestras de entrenamiento en cada una de las ramas izquierda y derecha. Esto puede tener el efecto de suavizar el modelo, especialmente en regresión."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:70
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr "Si int, entonces considera `min_samples_split` como el número mínimo."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:71
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node."
msgstr "Si float, entonces `min_samples_leaf` es una fracción y `ceil(min_samples_leaf * n_samples)` son el número mínimo de muestras para cada nodo."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:81
msgid "**min_weight_fraction_leaf**"
msgstr "**min_weight_fraction_leaf**"

#: of
msgid "float, default=0.0"
msgstr "float, default=0.0"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:79
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr "La fracción mínima ponderada de la suma total de las ponderaciones (de todas las muestras de entrada) requeridas para estar en un nodo de hoja. Las muestras tienen la misma ponderación cuando no se proporciona sample_weight."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:87
msgid "**max_depth**"
msgstr "**max_depth**"

#: of
msgid "int, default=3"
msgstr "int, default=3"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:84
msgid "The maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables."
msgstr "La profundidad máxima de los estimadores de regresión individuales. La profundidad máxima limita el número de nodos en el árbol. Ajusté este parámetro para un mejor rendimiento; el mejor valor dependerá de la interacción de las variables de entrada."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:105
msgid "**min_impurity_decrease**"
msgstr "**min_impurity_decrease**"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:90
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr "Un nodo se dividirá si esta división induce una disminución de la impureza mayor o igual a este valor."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:93
msgid "The weighted impurity decrease equation is the following::"
msgstr "La ecuación de disminución de impureza ponderada es la siguiente::"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:98
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr "donde ``N`` es el número total de muestras, ``N_t`` es el número de muestras en el nodo actual, ``N_t_L`` es el número de muestras en el hijo izquierdo, y ``N_t_R`` es el número de muestras en el hijo derecho."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:102
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr "``N``, ``N_t``, ``N_t_R`` y ``N_t_L`` se refieren a la suma ponderada, si ``sample_weight`` es pasada."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:116
msgid "**min_impurity_split**"
msgstr "**min_impurity_split**"

#: of
msgid "float, default=None"
msgstr "float, default=None"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:108
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr "El umbral para la parada anticipada en el crecimiento de árboles. Un nodo se dividirá si su impureza está por encima del umbral, de lo contrario será una hoja."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:111
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:122
msgid "**init**"
msgstr ""

#: of
msgid "estimator or 'zero', default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:119
msgid "An estimator object that is used to compute the initial predictions. ``init`` has to provide :meth:`fit` and :meth:`predict_proba`. If 'zero', the initial raw predictions are set to zero. By default, a ``DummyEstimator`` predicting the classes priors is used."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:132
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:125
msgid "Controls the random seed given to each Tree estimator at each boosting iteration. In addition, it controls the random permutation of the features at each split (see Notes for more details). It also controls the random spliting of the training data to obtain a validation set if `n_iter_no_change` is not None. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:151
msgid "**max_features**"
msgstr ""

#: of
msgid "{'auto', 'sqrt', 'log2'}, int or float, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:135
msgid "The number of features to consider when looking for the best split:"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:137
msgid "If int, then consider `max_features` features at each split."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:138
msgid "If float, then `max_features` is a fraction and `int(max_features * n_features)` features are considered at each split."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:141
msgid "If 'auto', then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:142
msgid "If 'sqrt', then `max_features=sqrt(n_features)`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:143
msgid "If 'log2', then `max_features=log2(n_features)`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:144
msgid "If None, then `max_features=n_features`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:146
msgid "Choosing `max_features < n_features` leads to a reduction of variance and an increase in bias."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:149
msgid "Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:156
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:154
msgid "Enable verbose output. If 1 then it prints progress and performance once in a while (the more trees the lower the frequency). If greater than 1 then it prints progress and performance for every tree."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:161
msgid "**max_leaf_nodes**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:159
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:166
msgid "**warm_start**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:164
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:173
msgid "**validation_fraction**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:169
msgid "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if ``n_iter_no_change`` is set to an integer."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:184
msgid "**n_iter_no_change**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:176
msgid "``n_iter_no_change`` is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside ``validation_fraction`` size of the training data as validation and terminate training when validation score is not improving in all of the previous ``n_iter_no_change`` numbers of iterations. The split is stratified."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:191
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-4"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:187
msgid "Tolerance for the early stopping. When the loss is not improving by at least tol for ``n_iter_no_change`` iterations (if set to a number), the training stops."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:202
msgid "**ccp_alpha**"
msgstr ""

#: of
msgid "non-negative float, default=0.0"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:194
msgid "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:211
msgid "**n_estimators_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:207
msgid "The number of estimators as selected by early stopping (if ``n_iter_no_change`` is specified). Otherwise it is set to ``n_estimators``."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:214
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.GradientBoostingClassifier.feature_importances_:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:214
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:221
msgid "**oob_improvement_**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:217
msgid "The improvement in loss (= deviance) on the out-of-bag samples relative to the previous iteration. ``oob_improvement_[0]`` is the improvement in loss of the first stage over the ``init`` estimator. Only available if ``subsample < 1.0``"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:226
msgid "**train_score_**"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:224
msgid "The i-th score ``train_score_[i]`` is the deviance (= loss) of the model at iteration ``i`` on the in-bag sample. If ``subsample == 1`` this is the deviance on the training data."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:229
msgid "**loss_**"
msgstr ""

#: of
msgid "LossFunction"
msgstr "LossFunction"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:229
msgid "The concrete ``LossFunction`` object."
msgstr "El objeto concreto ``LossFunction``."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:233
msgid "**init_**"
msgstr "**init_**"

#: of
msgid "estimator"
msgstr "estimator"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:232
msgid "The estimator that provides the initial predictions. Set via the ``init`` argument or ``loss.init_estimator``."
msgstr "El estimador que proporciona las predicciones iniciales. Establecer a través del argumento ``init`` o ``loss.init_estimator``."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:237
msgid "**estimators_** : ndarray of DecisionTreeRegressor of shape (n_estimators, ``loss_.K``)"
msgstr "**estimadores_** : ndarray de DecisionTreeRegressor de forma (n_estimators, ``loss_.K``)"

#: of
msgid "ndarray of DecisionTreeRegressor of shape (n_estimators,"
msgstr "ndarray de DecisionTreeRegressor de forma (n_estimators,"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:236
msgid "The collection of fitted sub-estimators. ``loss_.K`` is 1 for binary classification, otherwise n_classes."
msgstr "La colección de subestimadores instalados. ``loss_.K`` es 1 para la clasificación binaria, de lo contrario n_classes."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:240
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "ndarray of shape (n_classes,)"
msgstr "ndarray de forma (n_classes,)"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:240
msgid "The classes labels."
msgstr "Las etiquetas de las clases."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:243
msgid "**n_features_**"
msgstr "**n_features_**"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:243
msgid "The number of data features."
msgstr "El número de características en los datos."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:246
msgid "**n_classes_**"
msgstr "**n_clases_**"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:246
msgid "The number of classes."
msgstr "El número de clases."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:252
msgid "**max_features_**"
msgstr "**max_features_**"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:249
msgid "The inferred value of max_features."
msgstr "El valor inferido de max_features."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:257
msgid ":obj:`HistGradientBoostingClassifier`"
msgstr ":obj:`HistGradientBoostingClassifier`"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:258
msgid "Histogram-based Gradient Boosting Classification Tree."
msgstr "Árbol de Clasificación de Potenciación de Gradiente basado en histograma."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:259
msgid ":obj:`sklearn.tree.DecisionTreeClassifier`"
msgstr ":obj:`sklearn.tree.DecisionTreeClassifier`"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:260
msgid "A decision tree classifier."
msgstr "Un clasificador de árbol de decisiones."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:261
msgid ":obj:`RandomForestClassifier`"
msgstr ":obj:`RandomForestClassifier`"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:262
msgid "A meta-estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting."
msgstr "Un meta estimador que encaja un número de clasificadores de árboles de decisión en varias submuestras del conjunto de datos y utiliza el promedio para mejorar la precisión predictiva y controlar el sobre-ajuste."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:263
msgid ":obj:`AdaBoostClassifier`"
msgstr ":obj:`AdaBoostClassifier`"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:264
msgid "A meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases."
msgstr "Un meta estimador que comienza por encajar un clasificador en el conjunto de datos original y entonces encaja copias adicionales del clasificador en el mismo conjunto de datos donde los ponderados de instancias mal clasificadas son ajustadas de manera tal que los clasificadores subsecuentes se enfocan mas en casos difíciles."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:268
msgid "Notes"
msgstr "Notas"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:269
msgid "The features are always randomly permuted at each split. Therefore, the best found split may vary, even with the same training data and ``max_features=n_features``, if the improvement of the criterion is identical for several splits enumerated during the search of the best split. To obtain a deterministic behaviour during fitting, ``random_state`` has to be fixed."
msgstr "Las características siempre son aleatoriamente permutadas en cada división. Por lo tanto, la mejor división encontrada podría variar, inclusive con los mismos datos de entrenamiento y ``max_features=n_features``, si la mejora del criterio es idéntica para varias divisiones enumeradas durante la búsqueda de la mejor división. Para obtener un comportamiento determinístico durante el ajuste, ``random_state`` debe ser fijo."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:277
msgid "References"
msgstr "Referencias"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:278
msgid "J. Friedman, Greedy Function Approximation: A Gradient Boosting Machine, The Annals of Statistics, Vol. 29, No. 5, 2001."
msgstr "J. Friedman, Greedy Function Approximation: A Gradient Boosting Machine, The Annals of Statistics, Vol. 29, No. 5, 2001."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:281
msgid "Friedman, Stochastic Gradient Boosting, 1999"
msgstr "Friedman, Stochastic Gradient Boosting, 1999"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:283
msgid "T. Hastie, R. Tibshirani and J. Friedman. Elements of Statistical Learning Ed. 2, Springer, 2009."
msgstr "T. Hastie, R. Tibshirani and J. Friedman. Elements of Statistical Learning Ed. 2, Springer, 2009."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:291
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:292
msgid "The following example shows how to fit a gradient boosting classifier with 100 decision stumps as weak learners."
msgstr "El siguiente ejemplo muestra como ajustar un clasificador de potenciación de gradiente con 100 muñones de decisión como aprendices débiles."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:308
msgid "Methods"
msgstr "Métodos"

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.GradientBoostingClassifier.apply>`\\"
msgstr ":obj:`apply <sklearn.ensemble.GradientBoostingClassifier.apply>`\\"

#: of sklearn.ensemble._gb.BaseGradientBoosting.apply:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Apply trees in the ensemble to X, return leaf indices."
msgstr "Aplica los árboles en el ensemble a X, devuelve los índices de las hojas."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`decision_function <sklearn.ensemble.GradientBoostingClassifier.decision_function>`\\"
msgstr ":obj:`decision_function <sklearn.ensemble.GradientBoostingClassifier.decision_function>`\\"

#: of sklearn.ensemble._gb.GradientBoostingClassifier.decision_function:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Compute the decision function of ``X``."
msgstr "Calcula la función de decisión de ``X``."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.GradientBoostingClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.ensemble.GradientBoostingClassifier.fit>`\\"

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Fit the gradient boosting model."
msgstr "Ajusta el modelo de potenciación de gradiente."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.GradientBoostingClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.ensemble.GradientBoostingClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.GradientBoostingClassifier.predict>`\\"
msgstr ":obj:`predict <sklearn.ensemble.GradientBoostingClassifier.predict>`\\"

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Predict class for X."
msgstr "Predice la clase para X."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.ensemble.GradientBoostingClassifier.predict_log_proba>`\\"
msgstr ":obj:`predict_log_proba <sklearn.ensemble.GradientBoostingClassifier.predict_log_proba>`\\"

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Predict class log-probabilities for X."
msgstr "Predice las probabilidades log de clase para X."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.GradientBoostingClassifier.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.ensemble.GradientBoostingClassifier.predict_proba>`\\"

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Predict class probabilities for X."
msgstr "Predice las probabilidades de clase para X."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.GradientBoostingClassifier.score>`\\"
msgstr ":obj:`score <sklearn.ensemble.GradientBoostingClassifier.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos y etiquetas de prueba dados."

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.GradientBoostingClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`staged_decision_function <sklearn.ensemble.GradientBoostingClassifier.staged_decision_function>`\\"
msgstr ""

#: of
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Compute decision function of ``X`` for each iteration."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`staged_predict <sklearn.ensemble.GradientBoostingClassifier.staged_predict>`\\"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Predict class at each stage for X."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid ":obj:`staged_predict_proba <sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:2
#: sklearn.ensemble._gb.GradientBoostingClassifier:323:<autosummary>:1
msgid "Predict class probabilities at each stage for X."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._gb.BaseGradientBoosting.apply:11
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.decision_function:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:12
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:12
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.apply:9
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted to a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble.GradientBoostingClassifier.feature_importances_
#: sklearn.ensemble._gb.BaseGradientBoosting.apply
#: sklearn.ensemble._gb.BaseGradientBoosting.fit
#: sklearn.ensemble._gb.GradientBoostingClassifier.decision_function
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.apply:29
msgid "**X_leaves**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_estimators, n_classes)"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.apply:16
msgid "For each datapoint x in X and for each tree in the ensemble, return the index of the leaf x ends up in each estimator. In the case of binary classification n_classes is 1."
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:8
#: sklearn.ensemble._gb.GradientBoostingClassifier.decision_function:8
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict:8
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:8
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:8
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:10
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:10
msgid "The input samples. Internally, it will be converted to ``dtype=np.float32`` and if a sparse matrix is provided to a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
#: sklearn.ensemble._gb.GradientBoostingClassifier.decision_function:30
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:32
msgid "**score**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes) or (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.decision_function:15
msgid "The decision function of the input samples, which corresponds to the raw values predicted from the trees of the ensemble . The order of the classes corresponds to that in the attribute :term:`classes_`. Regression and binary classification produce an array of shape (n_samples,)."
msgstr ""

#: of sklearn.ensemble.GradientBoostingClassifier.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.GradientBoostingClassifier.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.GradientBoostingClassifier.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.GradientBoostingClassifier.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:15
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict:26
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:28
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:28
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:13
msgid "Target values (strings or integers in classification, real numbers in regression) For classification, labels must correspond to classes."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:22
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:18
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:31
msgid "**monitor**"
msgstr ""

#: of
msgid "callable, default=None"
msgstr ""

#: of sklearn.ensemble._gb.BaseGradientBoosting.fit:25
msgid "The monitor is called after each iteration with the current iteration, a reference to the estimator and the local variables of ``_fit_stages`` as keyword arguments ``callable(i, self, locals())``. If the callable returns ``True`` the fitting procedure is stopped. The monitor can be used for various things such as computing held-out estimates, early stopping, model introspect, and snapshoting."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._gb.BaseGradientBoosting.fit:47
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict:15
msgid "The predicted values."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:19
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:19
msgid "**p**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:15
msgid "The class log-probabilities of the input samples. The order of the classes corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba
msgid "Raises"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:31
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:31
msgid "AttributeError"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba:24
#: sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:24
msgid "If the ``loss`` does not support probabilities."
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba:15
msgid "The class probabilities of the input samples. The order of the classes corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "tipo arreglo de forma (n_samples, n_features)"

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas verdaderas para X`."

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderados de muestras."

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con relación a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:4
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:4
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:4
msgid "This method allows monitoring (i.e. determine error on testing set) after each stage."
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples, k)"
msgstr ""

#: of
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function:17
msgid "The decision function of the input samples, which corresponds to the raw values predicted from the trees of the ensemble . The classes corresponds to that in the attribute :term:`classes_`. Regression and binary classification are special cases with ``k == 1``, otherwise ``k==n_classes``."
msgstr ""

#: of
msgid "generator of ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict:17
#: sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba:17
msgid "The predicted value of the input samples."
msgstr ""

#: ../modules/generated/sklearn.ensemble.GradientBoostingClassifier.examples:4
msgid "Examples using ``sklearn.ensemble.GradientBoostingClassifier``"
msgstr ""

#: ../modules/generated/sklearn.ensemble.GradientBoostingClassifier.examples:15
#: ../modules/generated/sklearn.ensemble.GradientBoostingClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization_classification.py`"
msgstr ""

