msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:11\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.ensemble.RandomTreesEmbedding.po\n"
"X-Crowdin-File-ID: 5252\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst:2
msgid ":mod:`sklearn.ensemble`.RandomTreesEmbedding"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:2
msgid "An ensemble of totally random trees."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:4
msgid "An unsupervised transformation of a dataset to a high-dimensional sparse representation. A datapoint is coded according to which leaf of each tree it is sorted into. Using a one-hot encoding of the leaves, this leads to a binary coding with as many ones as there are trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:10
msgid "The dimensionality of the resulting representation is ``n_out <= n_estimators * max_leaf_nodes``. If ``max_leaf_nodes == None``, the number of leaf nodes is at most ``n_estimators * 2 ** max_depth``."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:14
msgid "Read more in the :ref:`User Guide <random_trees_embedding>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.RandomTreesEmbedding
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform
#: sklearn.ensemble._forest.RandomTreesEmbedding.transform
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:23
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:19
msgid "Number of trees in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:21
msgid "The default value of ``n_estimators`` changed from 10 to 100 in 0.22."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:28
msgid "**max_depth**"
msgstr ""

#: of
msgid "int, default=5"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:26
msgid "The maximum depth of each tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:39
msgid "**min_samples_split**"
msgstr ""

#: of
msgid "int or float, default=2"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:31
msgid "The minimum number of samples required to split an internal node:"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:33
msgid "If int, then consider `min_samples_split` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:34
msgid "If float, then `min_samples_split` is a fraction and `ceil(min_samples_split * n_samples)` is the minimum number of samples for each split."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:38
#: sklearn.ensemble._forest.RandomTreesEmbedding:53
msgid "Added float values for fractions."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:54
msgid "**min_samples_leaf**"
msgstr ""

#: of
msgid "int or float, default=1"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:42
msgid "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:48
msgid "If int, then consider `min_samples_leaf` as the minimum number."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:49
msgid "If float, then `min_samples_leaf` is a fraction and `ceil(min_samples_leaf * n_samples)` is the minimum number of samples for each node."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:59
msgid "**min_weight_fraction_leaf**"
msgstr ""

#: of
msgid "float, default=0.0"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:57
msgid "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:64
msgid "**max_leaf_nodes**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:62
msgid "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:82
msgid "**min_impurity_decrease**"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:67
msgid "A node will be split if this split induces a decrease of the impurity greater than or equal to this value."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:70
msgid "The weighted impurity decrease equation is the following::"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:75
msgid "where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:79
msgid "``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:93
msgid "**min_impurity_split**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:85
msgid "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:88
msgid "``min_impurity_split`` has been deprecated in favor of ``min_impurity_decrease`` in 0.19. The default value of ``min_impurity_split`` has changed from 1e-7 to 0 in 0.23 and it will be removed in 1.0 (renaming of 0.25). Use ``min_impurity_decrease`` instead."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:97
msgid "**sparse_output**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:96
msgid "Whether or not to return a sparse CSR matrix, as default behavior, or to return a dense array compatible with dense pipeline operators."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:104
msgid "**n_jobs**"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:100
msgid "The number of jobs to run in parallel. :meth:`fit`, :meth:`transform`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:109
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:107
msgid "Controls the generation of the random `y` used to fit the trees and the draw of the splits for each feature at the trees' nodes. See :term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:112
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:112
msgid "Controls the verbosity when fitting and predicting."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:120
msgid "**warm_start**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:115
msgid "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:126
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "DecisionTreeClassifier instance"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:125
msgid "The child estimator template used to create the collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:129
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of DecisionTreeClassifier instances"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:129
msgid "The collection of fitted sub-estimators."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:132
msgid ":obj:`feature_importances_ <feature_importances_>`"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.ensemble.RandomTreesEmbedding.feature_importances_:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:132
msgid "The impurity-based feature importances."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:135
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:135
msgid "The number of features when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:138
msgid "**n_outputs_**"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:138
msgid "The number of outputs when ``fit`` is performed."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:146
msgid "**one_hot_encoder_**"
msgstr ""

#: of
msgid "OneHotEncoder instance"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:141
msgid "One-hot encoder used to create the sparse embedding."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:149
msgid "References"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:150
msgid "P. Geurts, D. Ernst., and L. Wehenkel, \"Extremely randomized trees\", Machine Learning, 63(1), 3-42, 2006."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:152
msgid "Moosmann, F. and Triggs, B. and Jurie, F.  \"Fast discriminative visual codebooks using randomized clustering forests\" NIPS 2007"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:158
msgid "[R6e47e53bacbd-1]_, [R6e47e53bacbd-2]_"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:161
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:175
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`apply <sklearn.ensemble.RandomTreesEmbedding.apply>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Apply trees in the forest to X, return leaf indices."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`decision_path <sklearn.ensemble.RandomTreesEmbedding.decision_path>`\\"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Return the decision path in the forest."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.RandomTreesEmbedding.fit>`\\"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Fit estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.ensemble.RandomTreesEmbedding.fit_transform>`\\"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Fit estimator and transform dataset."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.RandomTreesEmbedding.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.RandomTreesEmbedding.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid ":obj:`transform <sklearn.ensemble.RandomTreesEmbedding.transform>`\\"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.transform:2
#: sklearn.ensemble._forest.RandomTreesEmbedding:185:<autosummary>:1
msgid "Transform dataset."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:10
#: sklearn.ensemble._forest.BaseForest.decision_path:11
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit:10
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:9
#: sklearn.ensemble._forest.RandomTreesEmbedding.transform:10
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:8
#: sklearn.ensemble._forest.BaseForest.decision_path:9
msgid "The input samples. Internally, its dtype will be converted to ``dtype=np.float32``. If a sparse matrix is provided, it will be converted into a sparse ``csr_matrix``."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.ensemble.RandomTreesEmbedding.feature_importances_
#: sklearn.ensemble._forest.BaseForest.apply
#: sklearn.ensemble._forest.BaseForest.decision_path
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform
#: sklearn.ensemble._forest.RandomTreesEmbedding.transform
msgid "Returns"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:27
msgid "**X_leaves**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_estimators)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.apply:15
msgid "For each datapoint x in X and for each tree in the forest, return the index of the leaf x ends up in."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:18
msgid "**indicator**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_nodes)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:16
msgid "Return a node indicator matrix where non zero elements indicates that the samples goes through the nodes. The matrix is of CSR format."
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:33
msgid "**n_nodes_ptr**"
msgstr ""

#: of
msgid "ndarray of shape (n_estimators + 1,)"
msgstr ""

#: of sklearn.ensemble._forest.BaseForest.decision_path:21
msgid "The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]] gives the indicator value for the i-th estimator."
msgstr ""

#: of sklearn.ensemble.RandomTreesEmbedding.feature_importances_:4
msgid "The higher, the more important the feature. The importance of a feature is computed as the (normalized) total reduction of the criterion brought by that feature.  It is also known as the Gini importance."
msgstr ""

#: of sklearn.ensemble.RandomTreesEmbedding.feature_importances_:9
msgid "Warning: impurity-based feature importances can be misleading for high cardinality features (many unique values). See :func:`sklearn.inspection.permutation_importance` as an alternative."
msgstr ""

#: of sklearn.ensemble.RandomTreesEmbedding.feature_importances_:30
msgid "**feature_importances_**"
msgstr ""

#: of sklearn.ensemble.RandomTreesEmbedding.feature_importances_:17
msgid "The values of this array sum to 1, unless all trees are single node trees consisting of only the root node, in which case it will be an array of zeros."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:8
msgid "The input samples. Use ``dtype=np.float32`` for maximum efficiency. Sparse matrices are also supported, use sparse ``csc_matrix`` for maximum efficiency."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:13
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:12
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:13
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:12
msgid "Not used, present for API consistency by convention."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:20
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit:16
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:15
msgid "Sample weights. If None, then samples are equally weighted. Splits that would create child nodes with net zero or negative weight are ignored while searching for a split in each node. In the case of classification, splits are also ignored if they would result in any single class carrying a negative weight in either child node."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._forest.RandomTreesEmbedding.fit:36
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:8
msgid "Input data used to build forests. Use ``dtype=np.float32`` for maximum efficiency."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:35
#: sklearn.ensemble._forest.RandomTreesEmbedding.transform:26
msgid "**X_transformed**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_out)"
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform:24
#: sklearn.ensemble._forest.RandomTreesEmbedding.transform:15
msgid "Transformed dataset."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.ensemble._forest.RandomTreesEmbedding.transform:8
msgid "Input data to be transformed. Use ``dtype=np.float32`` for maximum efficiency. Sparse matrices are also supported, use sparse ``csr_matrix`` for maximum efficiency."
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:4
msgid "Examples using ``sklearn.ensemble.RandomTreesEmbedding``"
msgstr ""

#: ../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:15
#: ../modules/generated/sklearn.ensemble.RandomTreesEmbedding.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ""

