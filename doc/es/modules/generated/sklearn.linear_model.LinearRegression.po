msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-28 20:43\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.linear_model.LinearRegression.po\n"
"X-Crowdin-File-ID: 5532\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.linear_model.LinearRegression.rst:2
msgid ":mod:`sklearn.linear_model`.LinearRegression"
msgstr ":mod:`sklearn.linear_model`.LinearRegression"

#: of sklearn.linear_model._base.LinearRegression:2
msgid "Ordinary least squares Linear Regression."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:4
msgid "LinearRegression fits a linear model with coefficients w = (w1, ..., wp) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._base.LinearRegression
#: sklearn.linear_model._base.LinearRegression.fit
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.linear_model._base.LinearRegression:13
msgid "**fit_intercept**"
msgstr "**fit_intercept**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.linear_model._base.LinearRegression:11
msgid "Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (i.e. data is expected to be centered)."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:21
msgid "**normalize**"
msgstr "**normalize**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.linear_model._base.LinearRegression:16
msgid "This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:24
msgid "**copy_X**"
msgstr "**copy_X**"

#: of sklearn.linear_model._base.LinearRegression:24
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:31
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.linear_model._base.LinearRegression:27
msgid "The number of jobs to use for the computation. This will only provide speedup for n_targets > 1 and sufficient large problems. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:40
msgid "**positive**"
msgstr "**positive**"

#: of sklearn.linear_model._base.LinearRegression:34
msgid "When set to ``True``, forces the coefficients to be positive. This option is only supported for dense arrays."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.linear_model._base.LinearRegression:48
msgid "**coef_**"
msgstr "**coef_**"

#: of
msgid "array of shape (n_features, ) or (n_targets, n_features)"
msgstr "array de forma (n_features, ) o (n_targets, n_features)"

#: of sklearn.linear_model._base.LinearRegression:45
msgid "Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:51
msgid "**rank_**"
msgstr "**rank_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.linear_model._base.LinearRegression:51
msgid "Rank of matrix `X`. Only available when `X` is dense."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:54
msgid "**singular_**"
msgstr "**singular_**"

#: of
msgid "array of shape (min(X, y),)"
msgstr "array de forma (min(X, y),)"

#: of sklearn.linear_model._base.LinearRegression:54
msgid "Singular values of `X`. Only available when `X` is dense."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:61
msgid "**intercept_**"
msgstr "**intercept_**"

#: of
msgid "float or array of shape (n_targets,)"
msgstr "float o array de forma (n_targets,)"

#: of sklearn.linear_model._base.LinearRegression:57
msgid "Independent term in the linear model. Set to 0.0 if `fit_intercept = False`."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:66
msgid ":obj:`Ridge`"
msgstr ":obj:`Ridge`"

#: of sklearn.linear_model._base.LinearRegression:67
msgid "Ridge regression addresses some of the problems of Ordinary Least Squares by imposing a penalty on the size of the coefficients with l2 regularization."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:68
msgid ":obj:`Lasso`"
msgstr ":obj:`Lasso`"

#: of sklearn.linear_model._base.LinearRegression:69
msgid "The Lasso is a linear model that estimates sparse coefficients with l1 regularization."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:70
msgid ":obj:`ElasticNet`"
msgstr ":obj:`ElasticNet`"

#: of sklearn.linear_model._base.LinearRegression:71
msgid "Elastic-Net is a linear regression model trained with both l1 and l2 -norm regularization of the coefficients."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
#: sklearn.linear_model._base.LinearRegression:75
msgid "Notes"
msgstr "Notas"

#: of sklearn.linear_model._base.LinearRegression:76
msgid "From the implementation point of view, this is just plain Ordinary Least Squares (scipy.linalg.lstsq) or Non Negative Least Squares (scipy.optimize.nnls) wrapped as a predictor object."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:82
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.linear_model._base.LinearRegression:99
msgid "Methods"
msgstr "Métodos"

#: of sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.LinearRegression.fit>`\\"
msgstr ":obj:`fit <sklearn.linear_model.LinearRegression.fit>`\\"

#: of sklearn.linear_model._base.LinearRegression.fit:2
#: sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid "Fit linear model."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.LinearRegression.get_params>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.LinearRegression.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtiene los parámetros para este estimador."

#: of sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.LinearRegression.predict>`\\"
msgstr ":obj:`get_params <sklearn.linear_model.LinearRegression.get_params>`\\"

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid "Predict using the linear model."
msgstr "Predice utilizando el modelo lineal."

#: of sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.LinearRegression.score>`\\"
msgstr ":obj:`score <sklearn.linear_model.LinearRegression.score>`\\"

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.LinearRegression.set_params>`\\"
msgstr ":obj:`score <sklearn.linear_model.LinearRegression.score>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._base.LinearRegression:107:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._base.LinearRegression.fit:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr "{array-like, sparse matrix} de forma (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearRegression.fit:8
msgid "Training data"
msgstr "Datos de entrenamiento"

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._base.LinearRegression.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_targets)"

#: of sklearn.linear_model._base.LinearRegression.fit:11
msgid "Target values. Will be cast to X's dtype if necessary"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.linear_model._base.LinearRegression.fit:17
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like de forma (n_samples,), default=None"

#: of sklearn.linear_model._base.LinearRegression.fit:14
msgid "Individual weights for each sample"
msgstr "Ponderaciones individuales para cada muestra"

#: of sklearn.linear_model._base.LinearRegression.fit:16
msgid "parameter *sample_weight* support to LinearRegression."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._base.LinearRegression.fit
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._base.LinearRegression.fit:33
msgid "**self**"
msgstr "**self**"

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr "array-like o sparse matrix, forma (n_samples, n_features)"

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr "Muestras."

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr "**C**"

#: of
msgid "array, shape (n_samples,)"
msgstr "array, forma (n_samples,)"

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr "Devuelve los valores predichos."

#: of sklearn.base.RegressorMixin.score:5
msgid "The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** 2).sum()`` and :math:`v` is the total sum of squares ``((y_true - y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a :math:`R^2` score of 0.0."
msgstr "El coeficiente :math:`R^2` se define como :math:`(1 - \\frac{u}{v})`, donde :math:`u` es la suma de cuadrados residual ``((y_true - y_pred) ** 2).sum()`` y :math:`v` es la suma de cuadrados total ``((y_true - y_true.mean()) ** 2).sum()``. La mejor puntuación posible es 1.0 y puede ser negativa (porque el modelo puede ser arbitrariamente peor). Un modelo constante que siempre predice el valor esperado de `y`, sin tener en cuenta las características de entrada, obtendría una puntuación :math:`R^2` de 0.0."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.base.RegressorMixin.score:17
msgid "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape ``(n_samples, n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs)"

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr "Valores verdaderos para `X`."

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr "Ponderaciones de muestras."

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr "**score**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ":math:`R^2` de ``self.predict(X)`` con respecto a `y`."

#: of sklearn.base.RegressorMixin.score:42
msgid "The :math:`R^2` score used when calling ``score`` on a regressor uses ``multioutput='uniform_average'`` from version 0.23 to keep consistent with default value of :func:`~sklearn.metrics.r2_score`. This influences the ``score`` method of all the multioutput regressors (except for :class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "instancia del estimador"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:4
msgid "Examples using ``sklearn.linear_model.LinearRegression``"
msgstr "Ejemplos utilizando ``sklearn.linear_model.LinearRegression``"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:15
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ols_ridge_variance.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_ols_ridge_variance.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:34
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_logistic.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:53
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:61
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_nnls.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_nnls.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:72
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:80
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ols.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_ols.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:91
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:99
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ransac.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_ransac.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:110
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:118
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ols_3d.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_ols_3d.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:129
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:137
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_theilsen.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_theilsen.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:148
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:156
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:167
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:175
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_robust_fit.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_robust_fit.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:186
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:194
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:205
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:213
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ard.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_ard.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:224
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:232
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:243
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:251
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_bayesian_ridge.py`"
msgstr ":ref:`sphx_glr_auto_examples_linear_model_plot_bayesian_ridge.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:262
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:270
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_isotonic_regression.py`"
msgstr ":ref:`sphx_glr_auto_examples_miscellaneous_plot_isotonic_regression.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:281
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:289
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_multioutput_face_completion.py`"
msgstr ":ref:`sphx_glr_auto_examples_miscellaneous_plot_multioutput_face_completion.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:300
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:308
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_cv_predict.py`"
msgstr ":ref:`sphx_glr_auto_examples_model_selection_plot_cv_predict.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:319
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:327
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_underfitting_overfitting.py`"
msgstr ":ref:`sphx_glr_auto_examples_model_selection_plot_underfitting_overfitting.py`"

#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:338
#: ../modules/generated/sklearn.linear_model.LinearRegression.examples:346
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization.py`"
msgstr ":ref:`sphx_glr_auto_examples_preprocessing_plot_discretization.py`"

