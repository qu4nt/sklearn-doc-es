msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:02\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.naive_bayes.MultinomialNB.po\n"
"X-Crowdin-File-ID: 3628\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.rst:2
msgid ":mod:`sklearn.naive_bayes`.MultinomialNB"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:2
msgid "Naive Bayes classifier for multinomial models"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:4
msgid "The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:9
msgid "Read more in the :ref:`User Guide <multinomial_naive_bayes>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.MultinomialNB sklearn.naive_bayes._BaseDiscreteNB.fit
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:15
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:14
msgid "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:19
msgid "**fit_prior**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:18
msgid "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:26
msgid "**class_prior**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:22
msgid "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB
msgid "Attributes"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:32
msgid "**class_count_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:31
msgid "Number of samples encountered for each class during fitting. This value is weighted by the sample weight when provided."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:35
msgid "**class_log_prior_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes, )"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:35
msgid "Smoothed empirical log probability for each class."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:38
msgid "**classes_**"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:38
msgid "Class labels known to the classifier"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:46
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes, n_features)"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:41
msgid "Mirrors ``feature_log_prob_`` for interpreting `MultinomialNB` as a linear model."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:44
msgid "``coef_`` is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26)."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:51
msgid "**feature_count_**"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:49
msgid "Number of samples encountered for each (class, feature) during fitting. This value is weighted by the sample weight when provided."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:55
msgid "**feature_log_prob_**"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:54
msgid "Empirical log probability of features given a class, ``P(x_i|y)``."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:63
msgid "**intercept_**"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:58
msgid "Mirrors ``class_log_prior_`` for interpreting `MultinomialNB` as a linear model."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:61
msgid "``intercept_`` is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26)."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:70
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:66
msgid "Number of features of each sample."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:73
msgid "Notes"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:74
msgid "For the rationale behind the names `coef_` and `intercept_`, i.e. naive Bayes as a linear classifier, see J. Rennie et al. (2003), Tackling the poor assumptions of naive Bayes text classifiers, ICML."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:79
msgid "References"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:80
msgid "C.D. Manning, P. Raghavan and H. Schuetze (2008). Introduction to Information Retrieval. Cambridge University Press, pp. 234-265. https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:89
msgid "Examples"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:102
msgid "Methods"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`fit <sklearn.naive_bayes.MultinomialNB.fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
#: sklearn.naive_bayes._BaseDiscreteNB.fit:2
msgid "Fit Naive Bayes classifier according to X, y"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`get_params <sklearn.naive_bayes.MultinomialNB.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.naive_bayes.MultinomialNB.partial_fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:2
msgid "Incremental fit on a batch of samples."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`predict <sklearn.naive_bayes.MultinomialNB.predict>`\\"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict:2
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.naive_bayes.MultinomialNB.predict_log_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_log_proba:2
msgid "Return log-probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.naive_bayes.MultinomialNB.predict_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_proba:2
msgid "Return probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`score <sklearn.naive_bayes.MultinomialNB.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid ":obj:`set_params <sklearn.naive_bayes.MultinomialNB.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.naive_bayes.MultinomialNB:113:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.naive_bayes._BaseDiscreteNB.fit:9
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:19
#: sklearn.naive_bayes._BaseNB.predict:8
#: sklearn.naive_bayes._BaseNB.predict_log_proba:8
#: sklearn.naive_bayes._BaseNB.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:8
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:18
msgid "Training vectors, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.naive_bayes._BaseDiscreteNB.fit:12
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:22
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:12
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:22
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.naive_bayes._BaseDiscreteNB.fit:15
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:31
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.fit:15
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:31
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes._BaseDiscreteNB.fit
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.naive_bayes._BaseDiscreteNB.fit:31
#: sklearn.naive_bayes._BaseDiscreteNB.partial_fit:47
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:4
msgid "This method is expected to be called several times consecutively on different chunks of a dataset so as to implement out-of-core or online learning."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:8
msgid "This is especially useful when the whole dataset is too big to fit in memory at once."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:11
msgid "This method has some performance overhead hence it is better to call partial_fit on chunks of data that are as large as possible (as long as fitting in the memory budget) to hide the overhead."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:28
msgid "**classes**"
msgstr ""

#: of
msgid "array-like of shape (n_classes), default=None"
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:25
msgid "List of all the classes that can possibly appear in the y vector."
msgstr ""

#: of sklearn.naive_bayes._BaseDiscreteNB.partial_fit:27
msgid "Must be provided at the first call to partial_fit, can be omitted in subsequent calls."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:24
#: sklearn.naive_bayes._BaseNB.predict_log_proba:26
#: sklearn.naive_bayes._BaseNB.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:13
msgid "Predicted target values for X"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_log_proba:13
msgid "Returns the log-probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.examples:4
msgid "Examples using ``sklearn.naive_bayes.MultinomialNB``"
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.examples:15
#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.examples:23
msgid ":ref:`sphx_glr_auto_examples_applications_plot_out_of_core_classification.py`"
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.examples:34
#: ../modules/generated/sklearn.naive_bayes.MultinomialNB.examples:42
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
msgstr ""

