msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-18 15:59\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.po\n"
"X-Crowdin-File-ID: 5894\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst:2
msgid ":mod:`sklearn.gaussian_process`.GaussianProcessClassifier"
msgstr ":mod:`sklearn.gaussian_process`.GaussianProcessClassifier"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:2
msgid "Gaussian process classification (GPC) based on Laplace approximation."
msgstr "Clasificación de procesos gaussianos (GPC) basada en la aproximación de Laplace."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:4
msgid "The implementation is based on Algorithm 3.1, 3.2, and 5.1 of Gaussian Processes for Machine Learning (GPML) by Rasmussen and Williams."
msgstr "La implementación se basa en los algoritmos 3.1, 3.2 y 5.1 de Gaussian Processes for Machine Learning (GPML) de Rasmussen y Williams."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:8
msgid "Internally, the Laplace approximation is used for approximating the non-Gaussian posterior by a Gaussian."
msgstr "Internamente, la aproximación de Laplace se utiliza para aproximar la distribución posterior no gaussiana por una gaussiana."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:11
msgid "Currently, the implementation is restricted to using the logistic link function. For multi-class classification, several binary one-versus rest classifiers are fitted. Note that this class thus does not implement a true multi-class Laplace approximation."
msgstr "Actualmente, la implementación se limita a utilizar la función de enlace logístico. Para la clasificación multiclase, se ajustan varios clasificadores binarios de uno contra otro. Hay que tener en cuenta que esta clase no implementa una verdadera aproximación de Laplace multiclase."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:16
msgid "Read more in the :ref:`User Guide <gaussian_process>`."
msgstr "Más información en el :ref:`User Guide <gaussian_process>`."

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba
msgid "Parameters"
msgstr "Parámetros"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:23
msgid "**kernel**"
msgstr "**kernel**"

#: of
msgid "kernel instance, default=None"
msgstr "kernel instance, default=None"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:21
msgid "The kernel specifying the covariance function of the GP. If None is passed, the kernel \"1.0 * RBF(1.0)\" is used as default. Note that the kernel's hyperparameters are optimized during fitting."
msgstr "El núcleo que especifica la función de covarianza de la GP. Si se pasa None, el kernel \"1.0 * RBF(1.0)\" se utiliza por defecto. Ten en cuenta que los hiperparámetros del núcleo se optimizan durante el ajuste."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:48
msgid "**optimizer**"
msgstr "**optimizer**"

#: of
msgid "'fmin_l_bfgs_b' or callable, default='fmin_l_bfgs_b'"
msgstr "'fmin_l_bfgs_b' or callable, default='fmin_l_bfgs_b'"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:26
msgid "Can either be one of the internally supported optimizers for optimizing the kernel's parameters, specified by a string, or an externally defined optimizer passed as a callable. If a callable is passed, it must have the  signature::"
msgstr "Puede ser uno de los optimizadores soportados internamente para optimizar los parámetros del núcleo, especificado por una cadena, o un optimizador definido externamente pasado como un invocable. Si se pasa un invocable, debe tener la firma (signature)::"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:44
msgid "Per default, the 'L-BFGS-B' algorithm from scipy.optimize.minimize is used. If None is passed, the kernel's parameters are kept fixed. Available internal optimizers are::"
msgstr "Por defecto, se utiliza el algoritmo 'L-BFGS-B' de scipy.optimize.minimize. Si se pasa None, los parámetros del núcleo se mantienen fijos. Los optimizadores internos disponibles son::"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:57
msgid "**n_restarts_optimizer**"
msgstr "**n_restarts_optimizer**"

#: of
msgid "int, default=0"
msgstr "int, default=0"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:51
msgid "The number of restarts of the optimizer for finding the kernel's parameters which maximize the log-marginal likelihood. The first run of the optimizer is performed from the kernel's initial parameters, the remaining ones (if any) from thetas sampled log-uniform randomly from the space of allowed theta-values. If greater than 0, all bounds must be finite. Note that n_restarts_optimizer=0 implies that one run is performed."
msgstr "El número de reinicios del optimizador para encontrar los parámetros del núcleo que maximizan la verosimilitud logarítmica marginal. La primera ejecución del optimizador se realiza a partir de los parámetros iniciales del núcleo, los restantes (si los hay) a partir de los valores logarítmicos uniformes muestreados aleatoriamente del espacio de valores logarítmicos permitidos. Si es mayor que 0, todos los límites deben ser finitos. Nótese que n_restarts_optimizer=0 implica que se realiza una sola ejecución."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:62
msgid "**max_iter_predict**"
msgstr "**max_iter_predict**"

#: of
msgid "int, default=100"
msgstr "int, default=100"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:60
msgid "The maximum number of iterations in Newton's method for approximating the posterior during predict. Smaller values will reduce computation time at the cost of worse results."
msgstr "El número máximo de iteraciones en el método de Newton para aproximar la posterior durante la predicción. Los valores más pequeños reducirán el tiempo de cálculo a costa de peores resultados."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:70
msgid "**warm_start**"
msgstr "**warm_start**"

#: of
msgid "bool, default=False"
msgstr "bool, default=False"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:65
msgid "If warm-starts are enabled, the solution of the last Newton iteration on the Laplace approximation of the posterior mode is used as initialization for the next call of _posterior_mode(). This can speed up convergence when _posterior_mode is called several times on similar problems as in hyperparameter optimization. See :term:`the Glossary <warm_start>`."
msgstr "Si se activan los inicios en caliente, la solución de la última iteración de Newton sobre la aproximación de Laplace del modo posterior (posterior mode) se utiliza como inicialización para la siguiente llamada de _posterior_mode(). Esto puede acelerar la convergencia cuando se llama a _posterior_mode varias veces sobre problemas similares como en la optimización de hiperparámetros. Véase :term:`the Glossary <warm_start>`."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:76
msgid "**copy_X_train**"
msgstr "**copy_X_train**"

#: of
msgid "bool, default=True"
msgstr "bool, default=True"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:73
msgid "If True, a persistent copy of the training data is stored in the object. Otherwise, just a reference to the training data is stored, which might cause predictions to change if the data is modified externally."
msgstr "Si es True, se almacena una copia persistente de los datos de entrenamiento en el objeto. De lo contrario, sólo se almacena una referencia a los datos de entrenamiento, lo que podría hacer que las predicciones cambien si los datos se modifican externamente."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:81
msgid "**random_state**"
msgstr "**random_state**"

#: of
msgid "int, RandomState instance or None, default=None"
msgstr "int, RandomState instance or None, default=None"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:79
msgid "Determines random number generation used to initialize the centers. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr "Determina la generación de números aleatorios utilizados para inicializar los centros. Se pasa un int para obtener resultados reproducibles a través de múltiples invocaciones a la función. Ver :term: `Glossary <random_state>`."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:92
msgid "**multi_class**"
msgstr "**multi_class**"

#: of
msgid "{'one_vs_rest', 'one_vs_one'}, default='one_vs_rest'"
msgstr "{'one_vs_rest', 'one_vs_one'}, default='one_vs_rest'"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:84
msgid "Specifies how multi-class classification problems are handled. Supported are 'one_vs_rest' and 'one_vs_one'. In 'one_vs_rest', one binary Gaussian process classifier is fitted for each class, which is trained to separate this class from the rest. In 'one_vs_one', one binary Gaussian process classifier is fitted for each pair of classes, which is trained to separate these two classes. The predictions of these binary predictors are combined into multi-class predictions. Note that 'one_vs_one' does not support predicting probability estimates."
msgstr "Especifica cómo se manejan los problemas de clasificación multiclase. Se admiten las opciones 'one_vs_rest' y 'one_vs_one'. En 'one_vs_rest', se ajusta un clasificador de proceso gaussiano binario para cada clase, que se entrena para separar esta clase del resto. En \" one_vs_one\", se ajusta un clasificador de proceso gaussiano binario para cada par de clases, que se entrena para separar estas dos clases. Las predicciones de estos predictores binarios se combinan en predicciones multiclase. Tenga en cuenta que 'one_vs_one' no admite la predicción de estimaciones de probabilidad."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:102
msgid "**n_jobs**"
msgstr "**n_jobs**"

#: of
msgid "int, default=None"
msgstr "int, default=None"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:95
msgid "The number of jobs to use for the computation: the specified multiclass problems are computed in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr "El número de tareas a utilizar para el cálculo: los problemas multiclase especificados se calculan en paralelo. ``None`` significa 1 a menos que en un contexto :obj:`joblib.parallel_backend`. ``-1`` significa que se utilizan todos los procesadores. Véase :term:`Glossary <n_jobs>` para más detalles."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier
msgid "Attributes"
msgstr "Atributos"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:108
msgid "**base_estimator_** : ``Estimator`` instance"
msgstr "**base_estimator_** : ``Estimator`` instance"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:107
msgid "Estimator instance"
msgstr "Instancia del estimador"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:107
msgid "The estimator instance that defines the likelihood function using the observed data."
msgstr "La instancia del estimador que define la función de verosimilitud utilizando los datos observados."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:115
msgid "**kernel_**"
msgstr "**kernel_**"

#: of
msgid "kernel instance"
msgstr "kernel instance"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:111
msgid "The kernel used for prediction. In case of binary classification, the structure of the kernel is the same as the one passed as parameter but with optimized hyperparameters. In case of multi-class classification, a CompoundKernel is returned which consists of the different kernels used in the one-versus-rest classifiers."
msgstr "El núcleo (kernel) utilizado para la predicción. En caso de clasificación binaria, la estructura del núcleo es la misma que la pasada como parámetro pero con hiperparámetros optimizados. En el caso de la clasificación multiclase, se devuelve un CompoundKernel que consiste en los diferentes núcleos utilizados en los clasificadores uno-contra-otro (one-versus-rest)."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:118
msgid "**log_marginal_likelihood_value_**"
msgstr "**log_marginal_likelihood_value_**"

#: of
msgid "float"
msgstr "float"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:118
msgid "The log-marginal-likelihood of ``self.kernel_.theta``"
msgstr "La verosimilitud logarítmica marginal de ``self.kernel_.theta``"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:121
msgid "**classes_**"
msgstr "**classes_**"

#: of
msgid "array-like of shape (n_classes,)"
msgstr "array-like of shape (n_classes,)"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:121
msgid "Unique class labels."
msgstr "Etiquetas de clase únicas."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:130
msgid "**n_classes_**"
msgstr "**n_classes_**"

#: of
msgid "int"
msgstr "int"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:124
msgid "The number of classes in the training data"
msgstr "El número de clases en los datos de entrenamiento"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:133
msgid "Examples"
msgstr "Ejemplos"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:150
msgid "Methods"
msgstr "Métodos"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`fit <sklearn.gaussian_process.GaussianProcessClassifier.fit>`\\"
msgstr ":obj:`fit <sklearn.gaussian_process.GaussianProcessClassifier.fit>`\\"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Fit Gaussian process classification model"
msgstr "Ajustar el modelo de clasificación del proceso gaussiano"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`get_params <sklearn.gaussian_process.GaussianProcessClassifier.get_params>`\\"
msgstr ":obj:`get_params <sklearn.gaussian_process.GaussianProcessClassifier.get_params>`\\"

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr "Obtener los parámetros de este estimador."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`log_marginal_likelihood <sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood>`\\"
msgstr ":obj:`log_marginal_likelihood <sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood>`\\"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Returns log-marginal likelihood of theta for training data."
msgstr "Devuelve la verosimilitud logarítmica marginal de theta para los datos de entrenamiento."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`predict <sklearn.gaussian_process.GaussianProcessClassifier.predict>`\\"
msgstr ":obj:`predict <sklearn.gaussian_process.GaussianProcessClassifier.predict>`\\"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Perform classification on an array of test vectors X."
msgstr "Realiza la clasificación en un arreglo de vectores de prueba X."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.gaussian_process.GaussianProcessClassifier.predict_proba>`\\"
msgstr ":obj:`predict_proba <sklearn.gaussian_process.GaussianProcessClassifier.predict_proba>`\\"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Return probability estimates for the test vector X."
msgstr "Devuelve estimaciones de probabilidad para el vector de prueba X."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`score <sklearn.gaussian_process.GaussianProcessClassifier.score>`\\"
msgstr ":obj:`score <sklearn.gaussian_process.GaussianProcessClassifier.score>`\\"

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr "Devuelve la precisión media en los datos de prueba y las etiquetas dados."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`set_params <sklearn.gaussian_process.GaussianProcessClassifier.set_params>`\\"
msgstr ":obj:`set_params <sklearn.gaussian_process.GaussianProcessClassifier.set_params>`\\"

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr "Establece los parámetros de este estimador."

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:8
msgid "**X**"
msgstr "**X**"

#: of
msgid "array-like of shape (n_samples, n_features) or list of object"
msgstr "tipo-arreglo de forma (n_samples, n_features) o lista del objeto"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:8
msgid "Feature vectors or other representations of training data."
msgstr "Vectores de características u otras representaciones de los datos de entrenamiento."

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:11
msgid "**y**"
msgstr "**y**"

#: of
msgid "array-like of shape (n_samples,)"
msgstr "array-like of shape (n_samples,)"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:11
msgid "Target values, must be binary"
msgstr "Valores objetivo (target values), deben ser binarios"

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba
msgid "Returns"
msgstr "Devuelve"

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:27
msgid "**self**"
msgstr "**self**"

#: of
msgid "returns an instance of self."
msgstr "devuelve una instancia de sí misma."

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr "**deep**"

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr "Si es True, devolverá los parámetros para este estimador y los subobjetos contenidos que son estimadores."

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr "**params**"

#: of
msgid "dict"
msgstr "dict"

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr "Nombres de parámetros mapeados a sus valores."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:4
msgid "In the case of multi-class classification, the mean log-marginal likelihood of the one-versus-rest classifiers are returned."
msgstr "En el caso de la clasificación multiclase, se devuelve la media de la verosimilitud logarítmica marginal de los clasificadores de una contra otra (one-versus-rest)."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:15
msgid "**theta**"
msgstr "**theta**"

#: of
msgid "array-like of shape (n_kernel_params,), default=None"
msgstr "array-like of shape (n_kernel_params,), default=None"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:10
msgid "Kernel hyperparameters for which the log-marginal likelihood is evaluated. In the case of multi-class classification, theta may be the  hyperparameters of the compound kernel or of an individual kernel. In the latter case, all individual kernel get assigned the same theta values. If None, the precomputed log_marginal_likelihood of ``self.kernel_.theta`` is returned."
msgstr "Hiperparámetros del núcleo para el que se evalúa la verosimilitud logarítmica marginal. En el caso de la clasificación multiclase, theta puede ser los hiperparámetros del núcleo compuesto o de un núcleo individual. En este último caso, a todos los núcleos individuales se les asignan los mismos valores theta. Si es None, se devuelve el log_marginal_likelihood precalculado de ``self.kernel_.theta``."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:21
msgid "**eval_gradient**"
msgstr "**eval_gradient**"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:18
msgid "If True, the gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta is returned additionally. Note that gradient computation is not supported for non-binary classification. If True, theta must not be None."
msgstr "Si es True, el gradiente de la verosimilitud logarítmica marginal con respecto a los hiperparámetros del núcleo en la posición theta se devuelve adicionalmente. Ten en cuenta que el cálculo del gradiente no es compatible con la clasificación no binaria. Si es True, theta no debe ser None."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:25
msgid "**clone_kernel**"
msgstr "**clone_kernel**"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:24
msgid "If True, the kernel attribute is copied. If False, the kernel attribute is modified, but may result in a performance improvement."
msgstr "Si es True, se copia el atributo del núcleo. Si es False, el atributo del núcleo se modifica, pero puede dar lugar a una mejora del rendimiento."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:30
msgid "**log_likelihood**"
msgstr "**log_likelihood**"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:30
msgid "Log-marginal likelihood of theta for training data."
msgstr "Verosimilitud logarítmica marginal de theta para los datos de entrenamiento."

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:46
msgid "**log_likelihood_gradient**"
msgstr "**log_likelihood_gradient**"

#: of
msgid "ndarray of shape (n_kernel_params,), optional"
msgstr "ndarray de forma (n_kernel_params,), opcional"

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:33
msgid "Gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta. Only returned when `eval_gradient` is True."
msgstr "Gradiente de la verosimilitud logarítmica marginal con respecto a los hiperparámetros del núcleo en la posición theta. Sólo se devuelve cuando `eval_gradient` es True."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:8
msgid "Query points where the GP is evaluated for classification."
msgstr "Puntos de consulta (query points) en los que se evalúa la GP para la clasificación."

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:24
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:26
msgid "**C**"
msgstr "**C**"

#: of
msgid "ndarray of shape (n_samples,)"
msgstr "ndarray de forma (n_samples,)"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:13
msgid "Predicted target values for X, values are from ``classes_``"
msgstr "Valores objetivo predichos para X, los valores provienen de ``classes_``"

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr "tipo arreglo de forma (n_samples, n_features)"

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr "Devuelve la probabilidad de las muestras para cada clase del modelo. Las columnas corresponden a las clases ordenadas, tal y como aparecen en el atributo :term:`classes_`."

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr "En la clasificación multietiqueta, esta es la precisión del subconjunto, la cual es una métrica dura ya que se requiere para cada muestra que cada conjunto de etiquetas sea predicho correctamente."

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like of shape (n_samples, n_features)"

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr "Muestras de prueba."

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr "array-like of shape (n_samples,) or (n_samples, n_outputs)"

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr "Etiquetas verdaderas para `X`."

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr "**sample_weight**"

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr "array-like of shape (n_samples,), default=None"

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr "Ponderados de muestras."

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr "**score**"

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr "Precisión media de ``self.predict(X)`` con relación a `y`."

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr "El método funciona tanto en estimadores simples como en objetos anidados (como :class:`~sklearn.pipeline.Pipeline`). Estos últimos tienen parámetros de la forma ``<component>__<parameter>`` para que sea posible actualizar cada componente de un objeto anidado."

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr "**\\*\\*params**"

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr "Parámetros del estimador."

#: of
msgid "estimator instance"
msgstr "estimator instance"

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr "Instancia del estimador."

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:4
msgid "Examples using ``sklearn.gaussian_process.GaussianProcessClassifier``"
msgstr "Ejemplos usando ``sklearn.gaussian_process.GaussianProcessClassifier``"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:15
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_xor.py`"
msgstr ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_xor.py`"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:34
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:42
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_iris.py`"
msgstr ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_iris.py`"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:53
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:61
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_isoprobability.py`"
msgstr ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_isoprobability.py`"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:72
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:80
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc.py`"
msgstr ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc.py`"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:91
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:99
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_on_structured_data.py`"
msgstr ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_on_structured_data.py`"

