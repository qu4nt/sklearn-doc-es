msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.po\n"
"X-Crowdin-File-ID: 5894\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst:2
msgid ":mod:`sklearn.gaussian_process`.GaussianProcessClassifier"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:2
msgid "Gaussian process classification (GPC) based on Laplace approximation."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:4
msgid "The implementation is based on Algorithm 3.1, 3.2, and 5.1 of Gaussian Processes for Machine Learning (GPML) by Rasmussen and Williams."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:8
msgid "Internally, the Laplace approximation is used for approximating the non-Gaussian posterior by a Gaussian."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:11
msgid "Currently, the implementation is restricted to using the logistic link function. For multi-class classification, several binary one-versus rest classifiers are fitted. Note that this class thus does not implement a true multi-class Laplace approximation."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:16
msgid "Read more in the :ref:`User Guide <gaussian_process>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:23
msgid "**kernel**"
msgstr ""

#: of
msgid "kernel instance, default=None"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:21
msgid "The kernel specifying the covariance function of the GP. If None is passed, the kernel \"1.0 * RBF(1.0)\" is used as default. Note that the kernel's hyperparameters are optimized during fitting."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:48
msgid "**optimizer**"
msgstr ""

#: of
msgid "'fmin_l_bfgs_b' or callable, default='fmin_l_bfgs_b'"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:26
msgid "Can either be one of the internally supported optimizers for optimizing the kernel's parameters, specified by a string, or an externally defined optimizer passed as a callable. If a callable is passed, it must have the  signature::"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:44
msgid "Per default, the 'L-BFGS-B' algorithm from scipy.optimize.minimize is used. If None is passed, the kernel's parameters are kept fixed. Available internal optimizers are::"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:57
msgid "**n_restarts_optimizer**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:51
msgid "The number of restarts of the optimizer for finding the kernel's parameters which maximize the log-marginal likelihood. The first run of the optimizer is performed from the kernel's initial parameters, the remaining ones (if any) from thetas sampled log-uniform randomly from the space of allowed theta-values. If greater than 0, all bounds must be finite. Note that n_restarts_optimizer=0 implies that one run is performed."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:62
msgid "**max_iter_predict**"
msgstr ""

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:60
msgid "The maximum number of iterations in Newton's method for approximating the posterior during predict. Smaller values will reduce computation time at the cost of worse results."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:70
msgid "**warm_start**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:65
msgid "If warm-starts are enabled, the solution of the last Newton iteration on the Laplace approximation of the posterior mode is used as initialization for the next call of _posterior_mode(). This can speed up convergence when _posterior_mode is called several times on similar problems as in hyperparameter optimization. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:76
msgid "**copy_X_train**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:73
msgid "If True, a persistent copy of the training data is stored in the object. Otherwise, just a reference to the training data is stored, which might cause predictions to change if the data is modified externally."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:81
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:79
msgid "Determines random number generation used to initialize the centers. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:92
msgid "**multi_class**"
msgstr ""

#: of
msgid "{'one_vs_rest', 'one_vs_one'}, default='one_vs_rest'"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:84
msgid "Specifies how multi-class classification problems are handled. Supported are 'one_vs_rest' and 'one_vs_one'. In 'one_vs_rest', one binary Gaussian process classifier is fitted for each class, which is trained to separate this class from the rest. In 'one_vs_one', one binary Gaussian process classifier is fitted for each pair of classes, which is trained to separate these two classes. The predictions of these binary predictors are combined into multi-class predictions. Note that 'one_vs_one' does not support predicting probability estimates."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:102
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:95
msgid "The number of jobs to use for the computation: the specified multiclass problems are computed in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:108
msgid "**base_estimator_** : ``Estimator`` instance"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:107
msgid "Estimator instance"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:107
msgid "The estimator instance that defines the likelihood function using the observed data."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:115
msgid "**kernel_**"
msgstr ""

#: of
msgid "kernel instance"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:111
msgid "The kernel used for prediction. In case of binary classification, the structure of the kernel is the same as the one passed as parameter but with optimized hyperparameters. In case of multi-class classification, a CompoundKernel is returned which consists of the different kernels used in the one-versus-rest classifiers."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:118
msgid "**log_marginal_likelihood_value_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:118
msgid "The log-marginal-likelihood of ``self.kernel_.theta``"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:121
msgid "**classes_**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,)"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:121
msgid "Unique class labels."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:130
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:124
msgid "The number of classes in the training data"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:133
msgid "Examples"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier:150
msgid "Methods"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`fit <sklearn.gaussian_process.GaussianProcessClassifier.fit>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Fit Gaussian process classification model"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`get_params <sklearn.gaussian_process.GaussianProcessClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`log_marginal_likelihood <sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood>`\\"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Returns log-marginal likelihood of theta for training data."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`predict <sklearn.gaussian_process.GaussianProcessClassifier.predict>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.gaussian_process.GaussianProcessClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Return probability estimates for the test vector X."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`score <sklearn.gaussian_process.GaussianProcessClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid ":obj:`set_params <sklearn.gaussian_process.GaussianProcessClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier:160:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features) or list of object"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:8
msgid "Feature vectors or other representations of training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:11
msgid "Target values, must be binary"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:4
msgid "In the case of multi-class classification, the mean log-marginal likelihood of the one-versus-rest classifiers are returned."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:15
msgid "**theta**"
msgstr ""

#: of
msgid "array-like of shape (n_kernel_params,), default=None"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:10
msgid "Kernel hyperparameters for which the log-marginal likelihood is evaluated. In the case of multi-class classification, theta may be the  hyperparameters of the compound kernel or of an individual kernel. In the latter case, all individual kernel get assigned the same theta values. If None, the precomputed log_marginal_likelihood of ``self.kernel_.theta`` is returned."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:21
msgid "**eval_gradient**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:18
msgid "If True, the gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta is returned additionally. Note that gradient computation is not supported for non-binary classification. If True, theta must not be None."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:25
msgid "**clone_kernel**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:24
msgid "If True, the kernel attribute is copied. If False, the kernel attribute is modified, but may result in a performance improvement."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:30
msgid "**log_likelihood**"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:30
msgid "Log-marginal likelihood of theta for training data."
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:46
msgid "**log_likelihood_gradient**"
msgstr ""

#: of
msgid "ndarray of shape (n_kernel_params,), optional"
msgstr ""

#: of
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood:33
msgid "Gradient of the log-marginal likelihood with respect to the kernel hyperparameters at position theta. Only returned when `eval_gradient` is True."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:8
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:8
msgid "Query points where the GP is evaluated for classification."
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:24
#: sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict:13
msgid "Predicted target values for X, values are from ``classes_``"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba:13
msgid "Returns the probability of the samples for each class in the model. The columns correspond to the classes in sorted order, as they appear in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:4
msgid "Examples using ``sklearn.gaussian_process.GaussianProcessClassifier``"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:15
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_xor.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:34
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:42
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_iris.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:53
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:61
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc_isoprobability.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:72
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:80
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpc.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:91
#: ../modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.examples:99
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_on_structured_data.py`"
msgstr ""

