msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:00\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.calibration.CalibratedClassifierCV.po\n"
"X-Crowdin-File-ID: 4988\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.calibration.CalibratedClassifierCV.rst:2
msgid ":mod:`sklearn.calibration`.CalibratedClassifierCV"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:2
msgid "Probability calibration with isotonic regression or logistic regression."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:4
msgid "This class uses cross-validation to both estimate the parameters of a classifier and subsequently calibrate a classifier. With default `ensemble=True`, for each cv split it fits a copy of the base estimator to the training subset, and calibrates it using the testing subset. For prediction, predicted probabilities are averaged across these individual calibrated classifiers. When `ensemble=False`, cross-validation is used to obtain unbiased predictions, via :func:`~sklearn.model_selection.cross_val_predict`, which are then used for calibration. For prediction, the base estimator, trained using all the data, is used. This is the method implemented when `probabilities=True` for :mod:`sklearn.svm` estimators."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:16
msgid "Already fitted classifiers can be calibrated via the parameter `cv=\"prefit\"`. In this case, no cross-validation is used and all provided data is used for calibration. The user has to take care manually that data for model fitting and calibration are disjoint."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:21
msgid "The calibration is based on the :term:`decision_function` method of the `base_estimator` if it exists, else on :term:`predict_proba`."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:24
msgid "Read more in the :ref:`User Guide <calibration>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.calibration.CalibratedClassifierCV
#: sklearn.calibration.CalibratedClassifierCV.fit
#: sklearn.calibration.CalibratedClassifierCV.predict
#: sklearn.calibration.CalibratedClassifierCV.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:31
msgid "**base_estimator**"
msgstr ""

#: of
msgid "estimator instance, default=None"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:29
msgid "The classifier whose output need to be calibrated to provide more accurate `predict_proba` outputs. The default classifier is a :class:`~sklearn.svm.LinearSVC`."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:38
msgid "**method**"
msgstr ""

#: of
msgid "{'sigmoid', 'isotonic'}, default='sigmoid'"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:34
msgid "The method to use for calibration. Can be 'sigmoid' which corresponds to Platt's method (i.e. a logistic regression model) or 'isotonic' which is a non-parametric approach. It is not advised to use isotonic calibration with too few calibration samples ``(<<1000)`` since it tends to overfit."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:61
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator, iterable or \"prefit\",             default=None"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:41
msgid "Determines the cross-validation splitting strategy. Possible inputs for cv are:"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:44
msgid "None, to use the default 5-fold cross-validation,"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:45
msgid "integer, to specify the number of folds."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:46
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:47
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:49
msgid "For integer/None inputs, if ``y`` is binary or multiclass, :class:`~sklearn.model_selection.StratifiedKFold` is used. If ``y`` is neither binary nor multiclass, :class:`~sklearn.model_selection.KFold` is used."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:54
msgid "Refer to the :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:57
msgid "If \"prefit\" is passed, it is assumed that `base_estimator` has been fitted already and all data is used for calibration."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:60
msgid "``cv`` default value if None changed from 3-fold to 5-fold."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:73
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:64
msgid "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:68
msgid "Base estimator clones are fitted in parallel across cross-validation iterations. Therefore parallelism happens only when `cv != \"prefit\"`."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:71
msgid "See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:95
msgid "**ensemble**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:76
msgid "Determines how the calibrator is fitted when `cv` is not `'prefit'`. Ignored if `cv='prefit'`."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:79
msgid "If `True`, the `base_estimator` is fitted using training data and calibrated using testing data, for each `cv` fold. The final estimator is an ensemble of `n_cv` fitted classifer and calibrator pairs, where `n_cv` is the number of cross-validation folds. The output is the average predicted probabilities of all pairs."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:85
msgid "If `False`, `cv` is used to compute unbiased predictions, via :func:`~sklearn.model_selection.cross_val_predict`, which are then used for calibration. At prediction time, the classifier used is the `base_estimator` trained on all the data. Note that this method is also internally implemented  in :mod:`sklearn.svm` estimators with the `probabilities=True` parameter."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV
msgid "Attributes"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:100
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:100
msgid "The class labels."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:119
msgid "**calibrated_classifiers_** : list (len() equal to cv or 1 if `cv=\"prefit\"`             or `ensemble=False`)"
msgstr ""

#: of
msgid "list (len() equal to cv or 1 if"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:103
msgid "The list of classifier and calibrator pairs."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:105
msgid "When `cv=\"prefit\"`, the fitted `base_estimator` and fitted calibrator."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:107
msgid "When `cv` is not \"prefit\" and `ensemble=True`, `n_cv` fitted `base_estimator` and calibrator pairs. `n_cv` is the number of cross-validation folds."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:110
msgid "When `cv` is not \"prefit\" and `ensemble=False`, the `base_estimator`, fitted on all the data, and fitted calibrator."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:113
msgid "Single calibrated classifier case when `ensemble=False`."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:122
msgid "References"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:123
msgid "Obtaining calibrated probability estimates from decision trees and naive Bayesian classifiers, B. Zadrozny & C. Elkan, ICML 2001"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:126
msgid "Transforming Classifier Scores into Accurate Multiclass Probability Estimates, B. Zadrozny & C. Elkan, (KDD 2002)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:129
msgid "Probabilistic Outputs for Support Vector Machines and Comparisons to Regularized Likelihood Methods, J. Platt, (1999)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:132
msgid "Predicting Good Probabilities with Supervised Learning, A. Niculescu-Mizil & R. Caruana, ICML 2005"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:137
msgid "[R57cf438d7060-1]_, [R57cf438d7060-2]_, [R57cf438d7060-3]_, [R57cf438d7060-4]_"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:140
msgid "Examples"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:180
msgid "Methods"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`fit <sklearn.calibration.CalibratedClassifierCV.fit>`\\"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.fit:2
#: sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Fit the calibrated model."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`get_params <sklearn.calibration.CalibratedClassifierCV.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`predict <sklearn.calibration.CalibratedClassifierCV.predict>`\\"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Predict the target of new samples."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.calibration.CalibratedClassifierCV.predict_proba>`\\"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict_proba:2
#: sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Calibrated probabilities of classification."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`score <sklearn.calibration.CalibratedClassifierCV.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid ":obj:`set_params <sklearn.calibration.CalibratedClassifierCV.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.calibration.CalibratedClassifierCV:189:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.calibration.CalibratedClassifierCV.fit:8
#: sklearn.calibration.CalibratedClassifierCV.predict:10
#: sklearn.calibration.CalibratedClassifierCV.predict_proba:10
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.calibration.CalibratedClassifierCV.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.calibration.CalibratedClassifierCV.fit:14
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.fit:14
msgid "Sample weights. If None, then samples are equally weighted."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.calibration.CalibratedClassifierCV.fit
#: sklearn.calibration.CalibratedClassifierCV.predict
#: sklearn.calibration.CalibratedClassifierCV.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.calibration.CalibratedClassifierCV.fit:30
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.fit:19
msgid "Returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict:2
msgid "Predict the target of new samples. The predicted class is the class that has the highest probability, and can thus be different from the prediction of the uncalibrated classifier."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict:10
#: sklearn.calibration.CalibratedClassifierCV.predict_proba:10
msgid "The samples."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict:26
#: sklearn.calibration.CalibratedClassifierCV.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict:15
msgid "The predicted class."
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict_proba:4
msgid "This function returns calibrated probabilities of classification according to each class on an array of test vectors X."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.calibration.CalibratedClassifierCV.predict_proba:15
msgid "The predicted probas."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

