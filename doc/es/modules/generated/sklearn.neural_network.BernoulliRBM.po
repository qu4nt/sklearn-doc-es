msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:09\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.neural_network.BernoulliRBM.po\n"
"X-Crowdin-File-ID: 5180\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.neural_network.BernoulliRBM.rst:2
msgid ":mod:`sklearn.neural_network`.BernoulliRBM"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:2
msgid "Bernoulli Restricted Boltzmann Machine (RBM)."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:4
msgid "A Restricted Boltzmann Machine with binary visible units and binary hidden units. Parameters are estimated using Stochastic Maximum Likelihood (SML), also known as Persistent Contrastive Divergence (PCD) [2]."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:9
msgid "The time complexity of this implementation is ``O(d ** 2)`` assuming d ~ n_features ~ n_components."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:12
msgid "Read more in the :ref:`User Guide <rbm>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neural_network._rbm.BernoulliRBM
#: sklearn.neural_network._rbm.BernoulliRBM.fit
#: sklearn.neural_network._rbm.BernoulliRBM.gibbs
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit
#: sklearn.neural_network._rbm.BernoulliRBM.score_samples
#: sklearn.neural_network._rbm.BernoulliRBM.transform
msgid "Parameters"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:17
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=256"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:17
msgid "Number of binary hidden units."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:22
msgid "**learning_rate**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:20
msgid "The learning rate for weight updates. It is *highly* recommended to tune this hyper-parameter. Reasonable values are in the 10**[0., -3.] range."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:25
msgid "**batch_size**"
msgstr ""

#: of
msgid "int, default=10"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:25
msgid "Number of examples per minibatch."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:29
msgid "**n_iter**"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:28
msgid "Number of iterations/sweeps over the training dataset to perform during training."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:32
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:32
msgid "The verbosity level. The default, zero, means silent mode."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:47
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:35
msgid "Determines random number generation for:"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:37
msgid "Gibbs sampling from visible and hidden layers."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:39
msgid "Initializing components, sampling from layers during fit."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:41
msgid "Corrupting the data when scoring samples."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:43
msgid "Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM
msgid "Attributes"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:52
msgid "**intercept_hidden_**"
msgstr ""

#: of
msgid "array-like of shape (n_components,)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:52
msgid "Biases of the hidden units."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:55
msgid "**intercept_visible_**"
msgstr ""

#: of
msgid "array-like of shape (n_features,)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:55
msgid "Biases of the visible units."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:59
msgid "**components_**"
msgstr ""

#: of
msgid "array-like of shape (n_components, n_features)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:58
msgid "Weight matrix, where n_features in the number of visible units and n_components is the number of hidden units."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:69
msgid "**h_samples_**"
msgstr ""

#: of
msgid "array-like of shape (batch_size, n_components)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:62
msgid "Hidden Activation sampled from the model distribution, where batch_size in the number of examples per minibatch and n_components is the number of hidden units."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:72
msgid "References"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:75
msgid "[1] Hinton, G. E., Osindero, S. and Teh, Y. A fast learning algorithm for"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:74
msgid "deep belief nets. Neural Computation 18, pp 1527-1554. https://www.cs.toronto.edu/~hinton/absps/fastnc.pdf"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:79
msgid "[2] Tieleman, T. Training Restricted Boltzmann Machines using"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:78
msgid "Approximations to the Likelihood Gradient. International Conference on Machine Learning (ICML) 2008"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:86
msgid "Examples"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:95
msgid "Methods"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`fit <sklearn.neural_network.BernoulliRBM.fit>`\\"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.fit:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Fit the model to the data X."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.neural_network.BernoulliRBM.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`get_params <sklearn.neural_network.BernoulliRBM.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`gibbs <sklearn.neural_network.BernoulliRBM.gibbs>`\\"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.gibbs:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Perform one Gibbs sampling step."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.neural_network.BernoulliRBM.partial_fit>`\\"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.partial_fit:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Fit the model to the data X which should contain a partial segment of the data."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`score_samples <sklearn.neural_network.BernoulliRBM.score_samples>`\\"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Compute the pseudo-likelihood of X."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`set_params <sklearn.neural_network.BernoulliRBM.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid ":obj:`transform <sklearn.neural_network.BernoulliRBM.transform>`\\"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.transform:2
#: sklearn.neural_network._rbm.BernoulliRBM:106:<autosummary>:1
msgid "Compute the hidden layer activation probabilities, P(h=1|v=X)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.neural_network._rbm.BernoulliRBM.fit:8
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit:9
#: sklearn.neural_network._rbm.BernoulliRBM.score_samples:8
#: sklearn.neural_network._rbm.BernoulliRBM.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.fit:8
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit:9
msgid "Training data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.neural_network._rbm.BernoulliRBM.fit
#: sklearn.neural_network._rbm.BernoulliRBM.gibbs
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit
#: sklearn.neural_network._rbm.BernoulliRBM.score_samples
#: sklearn.neural_network._rbm.BernoulliRBM.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neural_network._rbm.BernoulliRBM.fit:24
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit:25
msgid "**self**"
msgstr ""

#: of
msgid "BernoulliRBM"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.fit:13
#: sklearn.neural_network._rbm.BernoulliRBM.partial_fit:14
msgid "The fitted model."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.gibbs:8
msgid "**v**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.gibbs:8
msgid "Values of the visible layer to start from."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.gibbs:24
msgid "**v_new**"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.gibbs:13
msgid "Values of the visible layer after one Gibbs step."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:8
msgid "Values of the visible layer. Must be all-boolean (not checked)."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:20
msgid "**pseudo_likelihood**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:13
msgid "Value of the pseudo-likelihood (proxy for likelihood)."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:23
msgid "Notes"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.score_samples:24
msgid "This method is not deterministic: it computes a quantity called the free energy on X, then on a randomly corrupted version of X, and returns the log of the logistic function of the difference."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.transform:8
msgid "The data to be transformed."
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.transform:24
msgid "**h**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.neural_network._rbm.BernoulliRBM.transform:13
msgid "Latent representations of the data."
msgstr ""

#: ../modules/generated/sklearn.neural_network.BernoulliRBM.examples:4
msgid "Examples using ``sklearn.neural_network.BernoulliRBM``"
msgstr ""

#: ../modules/generated/sklearn.neural_network.BernoulliRBM.examples:15
#: ../modules/generated/sklearn.neural_network.BernoulliRBM.examples:23
msgid ":ref:`sphx_glr_auto_examples_neural_networks_plot_rbm_logistic_classification.py`"
msgstr ""

