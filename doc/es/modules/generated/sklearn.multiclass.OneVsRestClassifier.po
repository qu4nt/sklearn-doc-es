msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: 2021-04-15 00:02\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.multiclass.OneVsRestClassifier.po\n"
"X-Crowdin-File-ID: 3608\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.multiclass.OneVsRestClassifier.rst:2
msgid ":mod:`sklearn.multiclass`.OneVsRestClassifier"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:2
msgid "One-vs-the-rest (OvR) multiclass strategy."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:4
msgid "Also known as one-vs-all, this strategy consists in fitting one classifier per class. For each classifier, the class is fitted against all the other classes. In addition to its computational efficiency (only `n_classes` classifiers are needed), one advantage of this approach is its interpretability. Since each class is represented by one and one classifier only, it is possible to gain knowledge about the class by inspecting its corresponding classifier. This is the most commonly used strategy for multiclass classification and is a fair default choice."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:13
msgid "OneVsRestClassifier can also be used for multilabel classification. To use this feature, provide an indicator matrix for the target `y` when calling `.fit`. In other words, the target labels should be formatted as a 2D binary (0/1) matrix, where [i, j] == 1 indicates the presence of label j in sample i. This estimator uses the binary relevance method to perform multilabel classification, which involves training one binary classifier independently for each label."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:21
msgid "Read more in the :ref:`User Guide <ovr_classification>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OneVsRestClassifier
#: sklearn.multiclass.OneVsRestClassifier.decision_function
#: sklearn.multiclass.OneVsRestClassifier.fit
#: sklearn.multiclass.OneVsRestClassifier.partial_fit
#: sklearn.multiclass.OneVsRestClassifier.predict
#: sklearn.multiclass.OneVsRestClassifier.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:27
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:26
msgid "An estimator object implementing :term:`fit` and one of :term:`decision_function` or :term:`predict_proba`."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:41
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:30
msgid "The number of jobs to use for the computation: the `n_classes` one-vs-rest problems are computed in parallel."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:33
msgid "``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:37
msgid "`n_jobs` default changed from 1 to None"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:46
msgid "**estimators_** : list of `n_classes` estimators"
msgstr ""

#: of
msgid "list of"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:46
msgid "Estimators used for predictions."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:59
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features) or (n_classes, n_features)"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:49
msgid "Coefficient of the features in the decision function. This attribute exists only if the ``estimators_`` defines ``coef_``."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:52
#: sklearn.multiclass.OneVsRestClassifier:66
msgid "This attribute is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). If you use this attribute in :class:`~sklearn.feature_selection.RFE` or :class:`~sklearn.feature_selection.SelectFromModel`, you may pass a callable to the `importance_getter` parameter that extracts feature the importances from `estimators_`."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:73
msgid "**intercept_**"
msgstr ""

#: of
msgid "ndarray of shape (1, 1) or (n_classes, 1)"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:62
msgid "If ``y`` is binary, the shape is ``(1, 1)`` else ``(n_classes, 1)`` This attribute exists only if the ``estimators_`` defines ``intercept_``."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:76
msgid "**classes_** : array, shape = [`n_classes`]"
msgstr ""

#: of
msgid "array, shape = ["
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:76
msgid "Class labels."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:79
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:79
msgid "Number of classes."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:83
msgid "**label_binarizer_**"
msgstr ""

#: of
msgid "LabelBinarizer object"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:82
msgid "Object used to transform multiclass labels to binary labels and vice-versa."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:89
msgid ":obj:`multilabel_ <multilabel_>`"
msgstr ""

#: of
msgid "boolean"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:86
#: sklearn.multiclass.OneVsRestClassifier.multilabel_:2
msgid "Whether this is a multilabel classifier"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:94
msgid ":obj:`sklearn.multioutput.MultiOutputClassifier`"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:95
msgid "Alternate way of extending an estimator for multilabel classification."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:96
msgid ":obj:`sklearn.preprocessing.MultiLabelBinarizer`"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:97
msgid "Transform iterable of iterables to binary indicator matrix."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:103
msgid "Examples"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:121
msgid "Methods"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`decision_function <sklearn.multiclass.OneVsRestClassifier.decision_function>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Returns the distance of each sample from the decision boundary for each class."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`fit <sklearn.multiclass.OneVsRestClassifier.fit>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.fit:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Fit underlying estimators."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`get_params <sklearn.multiclass.OneVsRestClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.multiclass.OneVsRestClassifier.partial_fit>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.partial_fit:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Partially fit underlying estimators"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`predict <sklearn.multiclass.OneVsRestClassifier.predict>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Predict multi-class targets using underlying estimators."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.multiclass.OneVsRestClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict_proba:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Probability estimates."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`score <sklearn.multiclass.OneVsRestClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid ":obj:`set_params <sklearn.multiclass.OneVsRestClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multiclass.OneVsRestClassifier:132:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.decision_function:2
msgid "Returns the distance of each sample from the decision boundary for each class. This can only be used with estimators which implement the decision_function method."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.multiclass.OneVsRestClassifier.decision_function:10
#: sklearn.multiclass.OneVsRestClassifier.fit:8
#: sklearn.multiclass.OneVsRestClassifier.partial_fit:10
#: sklearn.multiclass.OneVsRestClassifier.predict:8
#: sklearn.multiclass.OneVsRestClassifier.predict_proba:17
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multiclass.OneVsRestClassifier.decision_function
#: sklearn.multiclass.OneVsRestClassifier.fit
#: sklearn.multiclass.OneVsRestClassifier.partial_fit
#: sklearn.multiclass.OneVsRestClassifier.predict
#: sklearn.multiclass.OneVsRestClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.decision_function:28
#: sklearn.multiclass.OneVsRestClassifier.predict_proba:34
msgid "**T**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes) or (n_samples,) for             binary classification."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.decision_function:15
msgid "output shape changed to ``(n_samples,)`` to conform to scikit-learn conventions for binary classification."
msgstr ""

#: of
msgid "(sparse) array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.fit:8
#: sklearn.multiclass.OneVsRestClassifier.partial_fit:10
#: sklearn.multiclass.OneVsRestClassifier.predict:8
msgid "Data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.multiclass.OneVsRestClassifier.fit:12
#: sklearn.multiclass.OneVsRestClassifier.partial_fit:14
#: sklearn.multiclass.OneVsRestClassifier.predict:24
msgid "**y**"
msgstr ""

#: of
msgid "(sparse) array-like of shape (n_samples,) or (n_samples, n_classes)"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.fit:11
#: sklearn.multiclass.OneVsRestClassifier.partial_fit:13
msgid "Multi-class targets. An indicator matrix turns on multilabel classification."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.fit:28
#: sklearn.multiclass.OneVsRestClassifier.partial_fit:37
msgid "self"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.partial_fit:4
msgid "Should be used when memory is inefficient to train all data. Chunks of data can be passed in several iteration."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.partial_fit:21
msgid "**classes**"
msgstr ""

#: of
msgid "array, shape (n_classes, )"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.partial_fit:17
msgid "Classes across all calls to partial_fit. Can be obtained via `np.unique(y_all)`, where y_all is the target vector of the entire dataset. This argument is only required in the first call of partial_fit and can be omitted in the subsequent calls."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict:13
msgid "Predicted multi-class targets."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict_proba:4
msgid "The returned estimates for all classes are ordered by label of classes."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict_proba:6
msgid "Note that in the multilabel case, each sample can have any number of labels. This returns the marginal probability that the given sample has the label in question. For example, it is entirely consistent that two labels both have a 90% probability of applying to a given sample."
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict_proba:11
msgid "In the single label multiclass case, the rows of the returned matrix sum to 1."
msgstr ""

#: of
msgid "(sparse) array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.multiclass.OneVsRestClassifier.predict_proba:22
msgid "Returns the probability of the sample for each class in the model, where classes are ordered as they are in `self.classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.multiclass.OneVsRestClassifier.examples:4
msgid "Examples using ``sklearn.multiclass.OneVsRestClassifier``"
msgstr ""

#: ../modules/generated/sklearn.multiclass.OneVsRestClassifier.examples:15
#: ../modules/generated/sklearn.multiclass.OneVsRestClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_multioutput_plot_classifier_chain_yeast.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_roc.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_precision_recall.py`"
#~ msgstr ""

