msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-15 02:46\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.po\n"
"X-Crowdin-File-ID: 5564\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst:2
msgid ":mod:`sklearn.decomposition`.MiniBatchDictionaryLearning"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:2
msgid "Mini-batch dictionary learning"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:4
msgid "Finds a dictionary (a set of atoms) that can best be used to represent data using a sparse code."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:7
msgid "Solves the optimization problem::"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:13
msgid "Read more in the :ref:`User Guide <DictionaryLearning>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit
#: sklearn.decomposition._dict_learning._BaseSparseCoding.transform
msgid "Parameters"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:18
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:18
msgid "Number of dictionary elements to extract."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:21
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=1"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:21
msgid "Sparsity controlling parameter."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:24
msgid "**n_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:24
msgid "Total number of iterations to perform."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:33
msgid "**fit_algorithm**"
msgstr ""

#: of
msgid "{'lars', 'cd'}, default='lars'"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:27
msgid "The algorithm used:"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:29
msgid "`'lars'`: uses the least angle regression method to solve the lasso problem (`linear_model.lars_path`)"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:31
msgid "`'cd'`: uses the coordinate descent method to compute the Lasso solution (`linear_model.Lasso`). Lars will be faster if the estimated components are sparse."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:39
msgid "**n_jobs**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:36
msgid "Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:42
msgid "**batch_size**"
msgstr ""

#: of
msgid "int, default=3"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:42
msgid "Number of samples in each mini-batch."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:45
msgid "**shuffle**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:45
msgid "Whether to shuffle the samples before forming batches."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:48
msgid "**dict_init**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features), default=None"
msgstr "ndarray de forma (n_components, n_features), default=None"

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:48
msgid "initial value of the dictionary for warm restart scenarios"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:62
msgid "**transform_algorithm**"
msgstr ""

#: of
msgid "{'lasso_lars', 'lasso_cd', 'lars', 'omp',             'threshold'}, default='omp'"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:51
msgid "Algorithm used to transform the data:"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:53
msgid "`'lars'`: uses the least angle regression method (`linear_model.lars_path`);"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:55
msgid "`'lasso_lars'`: uses Lars to compute the Lasso solution."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:56
msgid "`'lasso_cd'`: uses the coordinate descent method to compute the Lasso solution (`linear_model.Lasso`). `'lasso_lars'` will be faster if the estimated components are sparse."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:59
msgid "`'omp'`: uses orthogonal matching pursuit to estimate the sparse solution."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:61
msgid "`'threshold'`: squashes to zero all coefficients less than alpha from the projection ``dictionary * X'``."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:68
msgid "**transform_n_nonzero_coefs**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:65
msgid "Number of nonzero coefficients to target in each column of the solution. This is only used by `algorithm='lars'` and `algorithm='omp'` and is overridden by `alpha` in the `omp` case. If `None`, then `transform_n_nonzero_coefs=int(n_features / 10)`."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:78
msgid "**transform_alpha**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:71
msgid "If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the penalty applied to the L1 norm. If `algorithm='threshold'`, `alpha` is the absolute value of the threshold below which coefficients will be squashed to zero. If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides `n_nonzero_coefs`. If `None`, default to 1."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:81
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:81
msgid "To control the verbosity of the procedure."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:86
msgid "**split_sign**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:84
msgid "Whether to split the sparse feature vector into the concatenation of its negative part and its positive part. This can improve the performance of downstream classifiers."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:93
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:89
msgid "Used for initializing the dictionary when ``dict_init`` is not specified, randomly shuffling the data when ``shuffle`` is set to ``True``, and updating the dictionary. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:98
msgid "**positive_code**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:96
msgid "Whether to enforce positivity when finding the code."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:103
msgid "**positive_dict**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:101
msgid "Whether to enforce positivity when finding the dictionary."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:112
msgid "**transform_max_iter**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:106
msgid "Maximum number of iterations to perform if `algorithm='lasso_cd'` or `'lasso_lars'`."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning
msgid "Attributes"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:117
msgid "**components_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr "ndarray de forma (n_components, n_features)"

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:117
msgid "Components extracted from the data."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:125
msgid "**inner_stats_**"
msgstr ""

#: of
msgid "tuple of (A, B) ndarrays"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:120
msgid "Internal sufficient statistics that are kept by the algorithm. Keeping them is useful in online settings, to avoid losing the history of the evolution, but they shouldn't have any use for the end user. `A` `(n_components, n_components)` is the dictionary covariance matrix. `B` `(n_features, n_components)` is the data approximation matrix."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:128
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:128
msgid "Number of iterations run."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:132
msgid "**iter_offset_**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:131
msgid "The number of iteration on data batches that has been performed before."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:139
msgid "**random_state_**"
msgstr ""

#: of
msgid "RandomState instance"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:135
msgid "RandomState instance that is generated either from a seed, the random number generattor or by `np.random`."
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:144
msgid ":obj:`SparseCoder`"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:146
msgid ":obj:`DictionaryLearning`"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:148
msgid ":obj:`SparsePCA`"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:150
msgid ":obj:`MiniBatchSparsePCA`"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:154
msgid "Notes"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:155
msgid "**References:**"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:157
msgid "J. Mairal, F. Bach, J. Ponce, G. Sapiro, 2009: Online dictionary learning for sparse coding (https://www.di.ens.fr/sierra/pdfs/icml09.pdf)"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:162
msgid "Examples"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:174
msgid "We can check the level of sparsity of `X_transformed`:"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:179
msgid "We can compare the average squared euclidean norm of the reconstruction error of the sparse coded signal relative to the squared euclidean norm of the original signal:"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:188
msgid "Methods"
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.MiniBatchDictionaryLearning.fit>`\\"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:2
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid "Fit the model from data in X."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`get_params <sklearn.decomposition.MiniBatchDictionaryLearning.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit>`\\"
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:2
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid "Updates the model using the data in X as a mini-batch."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`set_params <sklearn.decomposition.MiniBatchDictionaryLearning.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.MiniBatchDictionaryLearning.transform>`\\"
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning:197:<autosummary>:1
#: sklearn.decomposition._dict_learning._BaseSparseCoding.transform:2
msgid "Encode the data as a sparse combination of the dictionary atoms."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:9
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:9
#: sklearn.decomposition._dict_learning._BaseSparseCoding.transform:11
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr "array-like de forma (n_samples, n_features)"

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:8
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:8
msgid "Training vector, where n_samples in the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:12
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:12
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit
#: sklearn.decomposition._dict_learning._BaseSparseCoding.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:28
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:34
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit:17
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:23
msgid "Returns the instance itself."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid "Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None"
msgstr "array-like de forma (n_samples,) o (n_samples, n_outputs),                 default=None"

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.decomposition._dict_learning._BaseSparseCoding.transform:27
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr "ndarray array de forma (n_samples, n_features_new)"

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:18
msgid "**iter_offset**"
msgstr ""

#: of
#: sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit:15
msgid "The number of iteration on data batches that has been performed before this call to partial_fit. This is optional: if no number is passed, the memory of the object is used."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.decomposition._dict_learning._BaseSparseCoding.transform:4
msgid "Coding method is determined by the object parameter `transform_algorithm`."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr "ndarray de forma (n_samples, n_features)"

#: of sklearn.decomposition._dict_learning._BaseSparseCoding.transform:10
msgid "Test data to be transformed, must have the same number of features as the data used to train the model."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr "ndarray de forma (n_samples, n_components)"

#: of sklearn.decomposition._dict_learning._BaseSparseCoding.transform:16
msgid "Transformed data."
msgstr ""

