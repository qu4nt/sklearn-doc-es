msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 06:11\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/generated/sklearn.model_selection.HalvingGridSearchCV.po\n"
"X-Crowdin-File-ID: 5132\n"
"Language: es_ES\n"

#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst:2
msgid ":mod:`sklearn.model_selection`.HalvingGridSearchCV"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:2
msgid "Search over specified parameter values with successive halving."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:4
msgid "The search strategy starts evaluating all the candidates with a small amount of resources and iteratively selects the best candidates, using more and more resources."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:8
msgid "Read more in the :ref:`User guide <successive_halving_user_guide>`."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:12
msgid "This estimator is still **experimental** for now: the predictions and the API might change without any deprecation cycle. To use it, you need to explicitly import ``enable_halving_search_cv``::"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.model_selection._search.BaseSearchCV.decision_function
#: sklearn.model_selection._search.BaseSearchCV.inverse_transform
#: sklearn.model_selection._search.BaseSearchCV.predict
#: sklearn.model_selection._search.BaseSearchCV.predict_log_proba
#: sklearn.model_selection._search.BaseSearchCV.predict_proba
#: sklearn.model_selection._search.BaseSearchCV.score
#: sklearn.model_selection._search.BaseSearchCV.score_samples
#: sklearn.model_selection._search.BaseSearchCV.transform
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV
msgid "Parameters"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:26
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:24
msgid "This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:33
msgid "**param_grid**"
msgstr ""

#: of
msgid "dict or list of dictionaries"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:29
msgid "Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:38
msgid "**factor**"
msgstr ""

#: of
msgid "int or float, default=3"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:36
msgid "The 'halving' parameter, which determines the proportion of candidates that are selected for each subsequent iteration. For example, ``factor=3`` means that only one third of the candidates are selected."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:46
msgid "**resource** : ``'n_samples'`` or str, default='n_samples'"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:45
msgid "'n_samples' or str, default='n_samples'"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:41
msgid "Defines the resource that increases with each iteration. By default, the resource is the number of samples. It can also be set to any parameter of the base estimator that accepts positive integer values, e.g. 'n_iterations' or 'n_estimators' for a gradient boosting estimator. In this case ``max_resources`` cannot be 'auto' and must be set explicitly."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:51
msgid "**max_resources**"
msgstr ""

#: of
msgid "int, default='auto'"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:49
msgid "The maximum amount of resource that any candidate is allowed to use for a given iteration. By default, this is set to ``n_samples`` when ``resource='n_samples'`` (default), else an error is raised."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:73
msgid "**min_resources**"
msgstr ""

#: of
msgid "{'exhaust', 'smallest'} or int, default='exhaust'"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:54
msgid "The minimum amount of resource that any candidate is allowed to use for a given iteration. Equivalently, this defines the amount of resources `r0` that are allocated for each candidate at the first iteration."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:63
msgid "'smallest' is a heuristic that sets `r0` to a small value:"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:60
msgid "``n_splits * 2`` when ``resource='n_samples'`` for a regression"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:61
msgid "problem"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:62
msgid "``n_classes * n_splits * 2`` when ``resource='n_samples'`` for a"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:63
msgid "classification problem"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:64
msgid "``1`` when ``resource != 'n_samples'``"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:65
msgid "'exhaust' will set `r0` such that the **last** iteration uses as much resources as possible. Namely, the last iteration will use the highest value smaller than ``max_resources`` that is a multiple of both ``min_resources`` and ``factor``. In general, using 'exhaust' leads to a more accurate estimator, but is slightly more time consuming."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:72
msgid "Note that the amount of resources used at each iteration is always a multiple of ``min_resources``."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:82
msgid "**aggressive_elimination**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:76
msgid "This is only relevant in cases where there isn't enough resources to reduce the remaining candidates to at most `factor` after the last iteration. If ``True``, then the search process will 'replay' the first iteration for as long as needed until the number of candidates is small enough. This is ``False`` by default, which means that the last iteration may evaluate more than ``factor`` candidates. See :ref:`aggressive_elimination` for more details."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:104
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator or iterable, default=5"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:85
msgid "Determines the cross-validation splitting strategy. Possible inputs for cv are:"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:88
msgid "integer, to specify the number of folds in a `(Stratified)KFold`,"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:89
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:90
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:92
msgid "For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:96
msgid "Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:100
msgid "Due to implementation details, the folds produced by `cv` must be the same across multiple calls to `cv.split()`. For built-in `scikit-learn` iterators, this can be achieved by deactivating shuffling (`shuffle=False`), or by setting the `cv`'s `random_state` parameter to an integer."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:109
msgid "**scoring**"
msgstr ""

#: of
msgid "string, callable, or None, default=None"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:107
msgid "A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set. If None, the estimator's score method is used."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:117
msgid "**refit**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:112
msgid "If True, refit an estimator using the best found parameters on the whole dataset."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:115
msgid "The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``HalvingGridSearchCV`` instance."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:123
msgid "**error_score**"
msgstr ""

#: of
msgid "'raise' or numeric"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:120
msgid "Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is ``np.nan``"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:132
msgid "**return_train_score**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:126
msgid "If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:138
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:135
msgid "Pseudo random number generator state used for subsampling the dataset when `resources != 'n_samples'`. Ignored otherwise. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:144
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int or None, default=None"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:141
msgid "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:150
msgid "**verbose**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:147
msgid "Controls the verbosity: the higher, the more messages."
msgstr ""

#: of sklearn.model_selection._search_successive_halving.HalvingGridSearchCV
msgid "Attributes"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:155
msgid "**n_resources_**"
msgstr ""

#: of
msgid "list of int"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:155
msgid "The amount of resources used at each iteration."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:159
msgid "**n_candidates_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:158
msgid "The number of candidate parameters that were evaluated at each iteration."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:163
msgid "**n_remaining_candidates_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:162
msgid "The number of candidate parameters that are left after the last iteration. It corresponds to `ceil(n_candidates[-1] / factor)`"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:170
msgid "**max_resources_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:166
msgid "The maximum number of resources that any candidate is allowed to use for a given iteration. Note that since the number of resources used at each iteration must be a multiple of ``min_resources_``, the actual number of resources used at the last iteration may be smaller than ``max_resources_``."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:174
msgid "**min_resources_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:173
msgid "The amount of resources that are allocated for each candidate at the first iteration."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:180
msgid "**n_iterations_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:177
msgid "The actual number of iterations that were run. This is equal to ``n_required_iterations_`` if ``aggressive_elimination`` is ``True``. Else, this is equal to ``min(n_possible_iterations_, n_required_iterations_)``."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:185
msgid "**n_possible_iterations_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:183
msgid "The number of iterations that are possible starting with ``min_resources_`` resources and without exceeding ``max_resources_``."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:191
msgid "**n_required_iterations_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:188
msgid "The number of iterations that are required to end up with less than ``factor`` candidates at the last iteration, starting with ``min_resources_`` resources. This will be smaller than ``n_possible_iterations_`` when there isn't enough resources."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:198
msgid "**cv_results_**"
msgstr ""

#: of
msgid "dict of numpy (masked) ndarrays"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:194
msgid "A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``. It contains many informations for analysing the results of a search. Please refer to the :ref:`User guide<successive_halving_cv_results>` for details."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:203
msgid "**best_estimator_**"
msgstr ""

#: of
msgid "estimator or dict"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:201
msgid "Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:206
msgid "**best_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:206
msgid "Mean cross-validated score of the best_estimator."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:209
msgid "**best_params_**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:209
msgid "Parameter setting that gave the best results on the hold out data."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:217
msgid "**best_index_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:212
msgid "The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:215
msgid "The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``)."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:221
msgid "**scorer_**"
msgstr ""

#: of
msgid "function or a dict"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:220
msgid "Scorer function used on the held out data to choose the best parameters for the model."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:224
msgid "**n_splits_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:224
msgid "The number of cross-validation splits (folds/iterations)."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:232
msgid "**refit_time_**"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:227
msgid "Seconds used for refitting the best model on the whole dataset."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:229
msgid "This is present only if ``refit`` is not False."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:237
msgid ":class:`HalvingRandomSearchCV`"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:238
msgid "Random search over a set of parameters using successive halving."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:242
msgid "Notes"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:243
msgid "The parameters selected are those that maximize the score of the held-out data, according to the scoring parameter."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:248
msgid "Examples"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:266
msgid "Methods"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`decision_function <sklearn.model_selection.HalvingGridSearchCV.decision_function>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.decision_function:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call decision_function on the estimator with the best found parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`fit <sklearn.model_selection.HalvingGridSearchCV.fit>`\\"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Run fit with all sets of parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`get_params <sklearn.model_selection.HalvingGridSearchCV.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`inverse_transform <sklearn.model_selection.HalvingGridSearchCV.inverse_transform>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.inverse_transform:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call inverse_transform on the estimator with the best found params."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`predict <sklearn.model_selection.HalvingGridSearchCV.predict>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call predict on the estimator with the best found parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`predict_log_proba <sklearn.model_selection.HalvingGridSearchCV.predict_log_proba>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict_log_proba:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call predict_log_proba on the estimator with the best found parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.model_selection.HalvingGridSearchCV.predict_proba>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict_proba:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call predict_proba on the estimator with the best found parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`score <sklearn.model_selection.HalvingGridSearchCV.score>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Returns the score on the given data, if the estimator has been refit."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`score_samples <sklearn.model_selection.HalvingGridSearchCV.score_samples>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score_samples:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call score_samples on the estimator with the best found parameters."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`set_params <sklearn.model_selection.HalvingGridSearchCV.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid ":obj:`transform <sklearn.model_selection.HalvingGridSearchCV.transform>`\\"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.transform:2
#: sklearn.model_selection._search_successive_halving.HalvingGridSearchCV:280:<autosummary>:1
msgid "Call transform on the estimator with the best found parameters."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.decision_function:4
msgid "Only available if ``refit=True`` and the underlying estimator supports ``decision_function``."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.decision_function:23
#: sklearn.model_selection._search.BaseSearchCV.predict:23
#: sklearn.model_selection._search.BaseSearchCV.predict_log_proba:23
#: sklearn.model_selection._search.BaseSearchCV.predict_proba:23
#: sklearn.model_selection._search.BaseSearchCV.score:11
#: sklearn.model_selection._search.BaseSearchCV.score_samples:13
#: sklearn.model_selection._search.BaseSearchCV.transform:23
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:9
msgid "**X**"
msgstr ""

#: of
msgid "indexable, length n_samples"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.decision_function:10
#: sklearn.model_selection._search.BaseSearchCV.inverse_transform:10
#: sklearn.model_selection._search.BaseSearchCV.predict:10
#: sklearn.model_selection._search.BaseSearchCV.predict_log_proba:10
#: sklearn.model_selection._search.BaseSearchCV.predict_proba:10
#: sklearn.model_selection._search.BaseSearchCV.transform:10
msgid "Must fulfill the input assumptions of the underlying estimator."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_features)"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:8
msgid "Training vector, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:15
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:13
msgid "**y**"
msgstr ""

#: of
msgid "array-like, shape (n_samples,) or (n_samples, n_output), optional"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:14
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:12
msgid "Target relative to X for classification or regression; None for unsupervised learning."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:18
msgid "**groups**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:16
msgid "Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a \"Group\" :term:`cv` instance (e.g., :class:`~sklearn.model_selection.GroupKFold`)."
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:33
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict of string -> object"
msgstr ""

#: of
#: sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit:21
msgid "Parameters passed to the ``fit`` method of the estimator"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid "If True, will return the parameters for this estimator and contained subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.model_selection._search.BaseSearchCV.score
#: sklearn.model_selection._search.BaseSearchCV.score_samples
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.inverse_transform:4
msgid "Only available if the underlying estimator implements ``inverse_transform`` and ``refit=True``."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.inverse_transform:23
msgid "**Xt**"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict:4
msgid "Only available if ``refit=True`` and the underlying estimator supports ``predict``."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict_log_proba:4
msgid "Only available if ``refit=True`` and the underlying estimator supports ``predict_log_proba``."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.predict_proba:4
msgid "Only available if ``refit=True`` and the underlying estimator supports ``predict_proba``."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:4
msgid "This uses the score defined by ``scoring`` where provided, and the ``best_estimator_.score`` method otherwise."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:10
msgid "Input data, where n_samples is the number of samples and n_features is the number of features."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_output)             or (n_samples,), default=None"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score:31
msgid "**score**"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score_samples:4
msgid "Only available if ``refit=True`` and the underlying estimator supports ``score_samples``."
msgstr ""

#: of
msgid "iterable"
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score_samples:12
msgid "Data to predict on. Must fulfill input requirements of the underlying estimator."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.score_samples:29
msgid "**y_score**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid "The method works on simple estimators as well as on nested objects (such as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of the form ``<component>__<parameter>`` so that it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.model_selection._search.BaseSearchCV.transform:4
msgid "Only available if the underlying estimator supports ``transform`` and ``refit=True``."
msgstr ""

#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:4
msgid "Examples using ``sklearn.model_selection.HalvingGridSearchCV``"
msgstr ""

#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:15
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ""

#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:34
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:42
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:53
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:61
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_iterations.py`"
msgstr ""

#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:72
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:80
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:91
#: ../modules/generated/sklearn.model_selection.HalvingGridSearchCV.examples:99
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_successive_halving_heatmap.py`"
msgstr ""

