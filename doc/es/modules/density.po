msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:10\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/density.po\n"
"X-Crowdin-File-ID: 2818\n"
"Language: es_ES\n"

#: ../modules/density.rst:5
msgid "Density Estimation"
msgstr ""

#: ../modules/density.rst:8
msgid "Density estimation walks the line between unsupervised learning, feature engineering, and data modeling.  Some of the most popular and useful density estimation techniques are mixture models such as Gaussian Mixtures (:class:`~sklearn.mixture.GaussianMixture`), and neighbor-based approaches such as the kernel density estimate (:class:`~sklearn.neighbors.KernelDensity`). Gaussian Mixtures are discussed more fully in the context of :ref:`clustering <clustering>`, because the technique is also useful as an unsupervised clustering scheme."
msgstr ""

#: ../modules/density.rst:18
msgid "Density estimation is a very simple concept, and most people are already familiar with one common density estimation technique: the histogram."
msgstr ""

#: ../modules/density.rst:22
msgid "Density Estimation: Histograms"
msgstr ""

#: ../modules/density.rst:23
msgid "A histogram is a simple visualization of data where bins are defined, and the number of data points within each bin is tallied.  An example of a histogram can be seen in the upper-left panel of the following figure:"
msgstr ""

#: ../modules/density.rst:32
msgid "hist_to_kde"
msgstr ""

#: ../modules/density.rst:33
msgid "A major problem with histograms, however, is that the choice of binning can have a disproportionate effect on the resulting visualization.  Consider the upper-right panel of the above figure.  It shows a histogram over the same data, with the bins shifted right.  The results of the two visualizations look entirely different, and might lead to different interpretations of the data."
msgstr ""

#: ../modules/density.rst:39
msgid "Intuitively, one can also think of a histogram as a stack of blocks, one block per point.  By stacking the blocks in the appropriate grid space, we recover the histogram.  But what if, instead of stacking the blocks on a regular grid, we center each block on the point it represents, and sum the total height at each location?  This idea leads to the lower-left visualization.  It is perhaps not as clean as a histogram, but the fact that the data drive the block locations mean that it is a much better representation of the underlying data."
msgstr ""

#: ../modules/density.rst:48
msgid "This visualization is an example of a *kernel density estimation*, in this case with a top-hat kernel (i.e. a square block at each point).  We can recover a smoother distribution by using a smoother kernel.  The bottom-right plot shows a Gaussian kernel density estimate, in which each point contributes a Gaussian curve to the total.  The result is a smooth density estimate which is derived from the data, and functions as a powerful non-parametric model of the distribution of points."
msgstr ""

#: ../modules/density.rst:59
msgid "Kernel Density Estimation"
msgstr ""

#: ../modules/density.rst:60
msgid "Kernel density estimation in scikit-learn is implemented in the :class:`~sklearn.neighbors.KernelDensity` estimator, which uses the Ball Tree or KD Tree for efficient queries (see :ref:`neighbors` for a discussion of these).  Though the above example uses a 1D data set for simplicity, kernel density estimation can be performed in any number of dimensions, though in practice the curse of dimensionality causes its performance to degrade in high dimensions."
msgstr ""

#: ../modules/density.rst:68
msgid "In the following figure, 100 points are drawn from a bimodal distribution, and the kernel density estimates are shown for three choices of kernels:"
msgstr ""

#: ../modules/density.rst:76
msgid "kde_1d_distribution"
msgstr ""

#: ../modules/density.rst:77
msgid "It's clear how the kernel shape affects the smoothness of the resulting distribution.  The scikit-learn kernel density estimator can be used as follows:"
msgstr ""

#: ../modules/density.rst:89
msgid "Here we have used ``kernel='gaussian'``, as seen above. Mathematically, a kernel is a positive function :math:`K(x;h)` which is controlled by the bandwidth parameter :math:`h`. Given this kernel form, the density estimate at a point :math:`y` within a group of points :math:`x_i; i=1\\cdots N` is given by:"
msgstr ""

#: ../modules/density.rst:95
msgid "\\rho_K(y) = \\sum_{i=1}^{N} K(y - x_i; h)\n\n"
msgstr ""

#: ../modules/density.rst:98
msgid "The bandwidth here acts as a smoothing parameter, controlling the tradeoff between bias and variance in the result.  A large bandwidth leads to a very smooth (i.e. high-bias) density distribution.  A small bandwidth leads to an unsmooth (i.e. high-variance) density distribution."
msgstr ""

#: ../modules/density.rst:103
msgid ":class:`~sklearn.neighbors.KernelDensity` implements several common kernel forms, which are shown in the following figure:"
msgstr ""

#: ../modules/density.rst:111
msgid "kde_kernels"
msgstr ""

#: ../modules/density.rst:112
msgid "The form of these kernels is as follows:"
msgstr ""

#: ../modules/density.rst:114
msgid "Gaussian kernel (``kernel = 'gaussian'``)"
msgstr ""

#: ../modules/density.rst:116
msgid ":math:`K(x; h) \\propto \\exp(- \\frac{x^2}{2h^2} )`"
msgstr ""

#: ../modules/density.rst:118
msgid "Tophat kernel (``kernel = 'tophat'``)"
msgstr ""

#: ../modules/density.rst:120
msgid ":math:`K(x; h) \\propto 1` if :math:`x < h`"
msgstr ""

#: ../modules/density.rst:122
msgid "Epanechnikov kernel (``kernel = 'epanechnikov'``)"
msgstr ""

#: ../modules/density.rst:124
msgid ":math:`K(x; h) \\propto 1 - \\frac{x^2}{h^2}`"
msgstr ""

#: ../modules/density.rst:126
msgid "Exponential kernel (``kernel = 'exponential'``)"
msgstr ""

#: ../modules/density.rst:128
msgid ":math:`K(x; h) \\propto \\exp(-x/h)`"
msgstr ""

#: ../modules/density.rst:130
msgid "Linear kernel (``kernel = 'linear'``)"
msgstr ""

#: ../modules/density.rst:132
msgid ":math:`K(x; h) \\propto 1 - x/h` if :math:`x < h`"
msgstr ""

#: ../modules/density.rst:134
msgid "Cosine kernel (``kernel = 'cosine'``)"
msgstr ""

#: ../modules/density.rst:136
msgid ":math:`K(x; h) \\propto \\cos(\\frac{\\pi x}{2h})` if :math:`x < h`"
msgstr ""

#: ../modules/density.rst:138
msgid "The kernel density estimator can be used with any of the valid distance metrics (see :class:`~sklearn.neighbors.DistanceMetric` for a list of available metrics), though the results are properly normalized only for the Euclidean metric.  One particularly useful metric is the `Haversine distance <https://en.wikipedia.org/wiki/Haversine_formula>`_ which measures the angular distance between points on a sphere.  Here is an example of using a kernel density estimate for a visualization of geospatial data, in this case the distribution of observations of two different species on the South American continent:"
msgstr ""

#: ../modules/density.rst:153
msgid "species_kde"
msgstr ""

#: ../modules/density.rst:154
msgid "One other useful application of kernel density estimation is to learn a non-parametric generative model of a dataset in order to efficiently draw new samples from this generative model. Here is an example of using this process to create a new set of hand-written digits, using a Gaussian kernel learned on a PCA projection of the data:"
msgstr ""

#: ../modules/density.rst:166
msgid "digits_kde"
msgstr ""

#: ../modules/density.rst:167
msgid "The \"new\" data consists of linear combinations of the input data, with weights probabilistically drawn given the KDE model."
msgstr ""

#: ../modules/density.rst:172
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_kde_1d.py`: computation of simple kernel density estimates in one dimension."
msgstr ""

#: ../modules/density.rst:175
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_digits_kde_sampling.py`: an example of using Kernel Density estimation to learn a generative model of the hand-written digits data, and drawing new samples from this model."
msgstr ""

#: ../modules/density.rst:179
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_species_kde.py`: an example of Kernel Density estimation using the Haversine distance metric to visualize geospatial data"
msgstr ""

