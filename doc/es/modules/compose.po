msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-05-05 20:27\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/compose.po\n"
"X-Crowdin-File-ID: 4802\n"
"Language: es_ES\n"

#: ../modules/compose.rst:6
msgid "Pipelines and composite estimators"
msgstr "Pipelines y estimadores compuestos"

#: ../modules/compose.rst:8
msgid "Transformers are usually combined with classifiers, regressors or other estimators to build a composite estimator.  The most common tool is a :ref:`Pipeline <pipeline>`. Pipeline is often used in combination with :ref:`FeatureUnion <feature_union>` which concatenates the output of transformers into a composite feature space.  :ref:`TransformedTargetRegressor <transformed_target_regressor>` deals with transforming the :term:`target` (i.e. log-transform :term:`y`). In contrast, Pipelines only transform the observed data (:term:`X`)."
msgstr "Los transformadores generalmente se combinan con clasificadores, regresores u otros estimadores para construir un estimador compuesto. La herramienta más común es un :ref:`Pipeline <pipeline>`. El pipeline se utiliza a menudo en combinación con :ref:`FeatureUnion <feature_union>` que concatena la salida de los transformadores en un espacio compuesto de características.  :ref:`TransformedTargetRegressor <transformed_target_regressor>` trata de transformar el :term:`target` (i.e. log-transform :term:`y`). En contraste, los pipelines sólo transforman los datos observados (:term:`X`)."

#: ../modules/compose.rst:20
msgid "Pipeline: chaining estimators"
msgstr "Pipeline: estimadores encadenados"

#: ../modules/compose.rst:24
msgid ":class:`Pipeline` can be used to chain multiple estimators into one. This is useful as there is often a fixed sequence of steps in processing the data, for example feature selection, normalization and classification. :class:`Pipeline` serves multiple purposes here:"
msgstr ":class:`Pipeline` puede ser usado para encadenar múltiples estimadores en uno. Esto es útil ya que a menudo hay una secuencia fija de pasos en el procesamiento de los datos, por ejemplo selección de características, normalización y clasificación. :class:`Pipeline` sirve varios propósitos aquí:"

#: ../modules/compose.rst:30
msgid "Convenience and encapsulation"
msgstr "Conveniencia y encapsulación"

#: ../modules/compose.rst:30
msgid "You only have to call :term:`fit` and :term:`predict` once on your data to fit a whole sequence of estimators."
msgstr "Solo tienes que llamar a :term:`fit` y :term:`predict` una vez en tus datos para ajustar toda una secuencia de estimadores."

#: ../modules/compose.rst:33
msgid "Joint parameter selection"
msgstr "Selección conjunta de parámetros"

#: ../modules/compose.rst:33
msgid "You can :ref:`grid search <grid_search>` over parameters of all estimators in the pipeline at once."
msgstr "Puedes utilizar :ref:`búsqueda en cuadrícula <grid_search>` sobre los parámetros de todos los estimadores en el pipeline a la vez."

#: ../modules/compose.rst:38
msgid "Safety"
msgstr "Seguridad"

#: ../modules/compose.rst:36
msgid "Pipelines help avoid leaking statistics from your test data into the trained model in cross-validation, by ensuring that the same samples are used to train the transformers and predictors."
msgstr "Los pipelines ayudan a evitar la fuga de estadísticas de los datos de prueba en el modelo entrenado en la validación cruzada, asegurando que se utilizan las mismas muestras para entrenar los transformadores y los predictores."

#: ../modules/compose.rst:40
msgid "All estimators in a pipeline, except the last one, must be transformers (i.e. must have a :term:`transform` method). The last estimator may be any type (transformer, classifier, etc.)."
msgstr "Todos los estimadores en un pipeline, excepto el último, deben ser transformadores (es decir, debe tener un método :term:`transform`). El último estimador puede ser cualquier tipo (transformador, clasificador, etc.)."

#: ../modules/compose.rst:46 ../modules/compose.rst:349
msgid "Usage"
msgstr "Uso"

#: ../modules/compose.rst:49
msgid "Construction"
msgstr "Construcción"

#: ../modules/compose.rst:51
msgid "The :class:`Pipeline` is built using a list of ``(key, value)`` pairs, where the ``key`` is a string containing the name you want to give this step and ``value`` is an estimator object::"
msgstr "El :class:`Pipeline` está construido usando una lista de pares ``(key, value)``, donde la ``key`` es una cadena que contiene el nombre que quieres dar este paso y ``value`` es un objeto de estimación::"

#: ../modules/compose.rst:63
msgid "The utility function :func:`make_pipeline` is a shorthand for constructing pipelines; it takes a variable number of estimators and returns a pipeline, filling in the names automatically::"
msgstr "La función de utilidad :func:`make_pipeline` es un atajo para construir pipelines; toma un número variable de estimadores y devuelve un pipeline, rellenando los nombres automáticamente::"

#: ../modules/compose.rst:75
msgid "Accessing steps"
msgstr "Acceso a los steps (pasos)"

#: ../modules/compose.rst:77
msgid "The estimators of a pipeline are stored as a list in the ``steps`` attribute, but can be accessed by index or name by indexing (with ``[idx]``) the Pipeline::"
msgstr "Los estimadores de un pipeline se almacenan como una lista en el atributo ``steps`` (pasos), pero se puede acceder por índice o nombre indexando (con ``[idx]``) el Pipeline::"

#: ../modules/compose.rst:88
msgid "Pipeline's `named_steps` attribute allows accessing steps by name with tab completion in interactive environments::"
msgstr "El atributo `named_steps` del pipeline permite acceder a los pasos por su nombre con una autocompletado con tabulación en entornos interactivos::"

#: ../modules/compose.rst:94
msgid "A sub-pipeline can also be extracted using the slicing notation commonly used for Python Sequences such as lists or strings (although only a step of 1 is permitted). This is convenient for performing only some of the transformations (or their inverse):"
msgstr "También se puede extraer una sub-línea utilizando la notación de corte comúnmente utilizada para secuencias de Python como listas o cadenas (aunque sólo se permite un paso de 1). Esto es conveniente para realizar sólo algunas de las transformaciones (o su inversa):"

#: ../modules/compose.rst:108
msgid "Nested parameters"
msgstr "Parámetros anidados"

#: ../modules/compose.rst:110
msgid "Parameters of the estimators in the pipeline can be accessed using the ``<estimator>__<parameter>`` syntax::"
msgstr "Puedes acceder a los parámetros de los estimadores en el pipeline usando la sintaxis ``<estimator>__<parameter>```::"

#: ../modules/compose.rst:116
msgid "This is particularly important for doing grid searches::"
msgstr "Esto es particularmente importante para realizar búsquedas en cuadrículas::"

#: ../modules/compose.rst:123
msgid "Individual steps may also be replaced as parameters, and non-final steps may be ignored by setting them to ``'passthrough'``::"
msgstr "Los pasos individuales también pueden ser reemplazados como parámetros, y los pasos no finales pueden ser ignorados estableciéndolos a ``'passthrough'``::"

#: ../modules/compose.rst:132
msgid "The estimators of the pipeline can be retrieved by index:"
msgstr "Los estimadores del pipeline pueden ser recuperados por el índice:"

#: ../modules/compose.rst:137
msgid "or by name::"
msgstr "o por el nombre::"

#: ../modules/compose.rst:144
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection_pipeline.py`"
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection_pipeline.py`"

#: ../modules/compose.rst:145
msgid ":ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py`"
msgstr ":ref:`sphx_glr_auto_examples_model_selection_grid_search_text_feature_extraction.py`"

#: ../modules/compose.rst:146
msgid ":ref:`sphx_glr_auto_examples_compose_plot_digits_pipe.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_digits_pipe.py`"

#: ../modules/compose.rst:147
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_approximation.py`"
msgstr ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_approximation.py`"

#: ../modules/compose.rst:148
msgid ":ref:`sphx_glr_auto_examples_svm_plot_svm_anova.py`"
msgstr ":ref:`sphx_glr_auto_examples_svm_plot_svm_anova.py`"

#: ../modules/compose.rst:149 ../modules/compose.rst:240
msgid ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_compare_reduction.py`"

#: ../modules/compose.rst:153
msgid ":ref:`composite_grid_search`"
msgstr ":ref:`composite_grid_search`"

#: ../modules/compose.rst:157
msgid "Notes"
msgstr "Notas"

#: ../modules/compose.rst:159
msgid "Calling ``fit`` on the pipeline is the same as calling ``fit`` on each estimator in turn, ``transform`` the input and pass it on to the next step. The pipeline has all the methods that the last estimator in the pipeline has, i.e. if the last estimator is a classifier, the :class:`Pipeline` can be used as a classifier. If the last estimator is a transformer, again, so is the pipeline."
msgstr "Llamar a ``fit`` en el pipeline es lo mismo que llamar a ``fit`` en cada estimador a su vez, ``transform`` la entrada y pasarla al siguiente paso. El pipeline tiene todos los métodos que tiene el último estimador del pipeline, es decir, si el último estimador es un clasificador, el :class:`Pipeline` puede ser utilizado como un clasificador. Si el último estimador es un transformador, también lo es la tubería."

#: ../modules/compose.rst:169
msgid "Caching transformers: avoid repeated computation"
msgstr "Transformadores de caché: evitar cálculos repetidos"

#: ../modules/compose.rst:173
msgid "Fitting transformers may be computationally expensive. With its ``memory`` parameter set, :class:`Pipeline` will cache each transformer after calling ``fit``. This feature is used to avoid computing the fit transformers within a pipeline if the parameters and input data are identical. A typical example is the case of a grid search in which the transformers can be fitted only once and reused for each configuration."
msgstr "El ajuste de los transformadores puede ser costoso desde el punto de vista computacional. Con su parámetro ``memory`` ya establecido, :class:`Pipeline` almacenará en caché cada transformador después de llamar a ``fit``. Esta característica se utiliza para evitar el cálculo de los transformadores de ajuste dentro de un pipeline si los parámetros y los datos de entrada son idénticos. Un ejemplo típico es el caso de una búsqueda en cuadrícula en la que los transformadores pueden ajustarse sólo una vez y reutilizarse para cada configuración."

#: ../modules/compose.rst:181
msgid "The parameter ``memory`` is needed in order to cache the transformers. ``memory`` can be either a string containing the directory where to cache the transformers or a `joblib.Memory <https://pythonhosted.org/joblib/memory.html>`_ object::"
msgstr "El parámetro ``memory`` es necesario para almacenar en caché los transformadores. ``memory`` puede ser una cadena que contiene el directorio donde guardar los transformadores en caché o un `joblib.Memory <https://pythonhosted.org/joblib/memory.html>`_ objeto::"

#: ../modules/compose.rst:200
msgid "**Side effect of caching transformers**"
msgstr "**Efecto colateral de los transformadores de caché**"

#: ../modules/compose.rst:202
msgid "Using a :class:`Pipeline` without cache enabled, it is possible to inspect the original instance such as::"
msgstr "Usando un :class:`Pipeline` sin caché activado, es posible inspeccionar la instancia original como en::"

#: ../modules/compose.rst:216
msgid "Enabling caching triggers a clone of the transformers before fitting. Therefore, the transformer instance given to the pipeline cannot be inspected directly. In following example, accessing the :class:`PCA` instance ``pca2`` will raise an ``AttributeError`` since ``pca2`` will be an unfitted transformer. Instead, use the attribute ``named_steps`` to inspect estimators within the pipeline::"
msgstr "La activación del almacenamiento en caché desencadena un clon de los transformadores antes del ajuste. Por lo tanto, la instancia del transformador del pipeline no puede ser inspeccionada directamente. En el siguiente ejemplo, el acceso a la instancia de :class:`PCA` ``pca2`` generará un ``AttributeError`` ya que ``pca2`` será un transformador no ajustado. En su lugar, utiliza el atributo ``named_steps`` para inspeccionar los estimadores dentro del pipeline::"

#: ../modules/compose.rst:245
msgid "Transforming target in regression"
msgstr "Transformación del objetivo en regresión"

#: ../modules/compose.rst:247
msgid ":class:`~sklearn.compose.TransformedTargetRegressor` transforms the targets ``y`` before fitting a regression model. The predictions are mapped back to the original space via an inverse transform. It takes as an argument the regressor that will be used for prediction, and the transformer that will be applied to the target variable::"
msgstr ":class:`~sklearn.compose.TransformedTargetRegressor` transforma los objetivos ``y`` antes de ajustar un modelo de regresión. Las predicciones se devuelven al espacio original mediante una transformación inversa. Toma como argumento el regresor que se utilizará para la predicción, y el transformador que se aplicará a la variable objetivo::"

#: ../modules/compose.rst:274
msgid "For simple transformations, instead of a Transformer object, a pair of functions can be passed, defining the transformation and its inverse mapping::"
msgstr "Para transformaciones simples, en lugar de un objeto Transformador, puedes pasar un par de funciones, para definir la transformación y su mapeo inverso::"

#: ../modules/compose.rst:282
msgid "Subsequently, the object is created as::"
msgstr "Posteriormente, el objeto es creado como::"

#: ../modules/compose.rst:292
msgid "By default, the provided functions are checked at each fit to be the inverse of each other. However, it is possible to bypass this checking by setting ``check_inverse`` to ``False``::"
msgstr "Por defecto, las funciones proporcionadas se comprueban en cada ajuste para ser la inversa de cada una. Sin embargo, es posible evitar esta comprobación estableciendo ``check_inverse`` a ``False``::"

#: ../modules/compose.rst:309
msgid "The transformation can be triggered by setting either ``transformer`` or the pair of functions ``func`` and ``inverse_func``. However, setting both options will raise an error."
msgstr "La transformación puede ser activada estableciendo ``transformer`` o el par de funciones ``func`` y ``inverse_func``. Sin embargo, ambas opciones provocarán un error."

#: ../modules/compose.rst:315
msgid ":ref:`sphx_glr_auto_examples_compose_plot_transformed_target.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_transformed_target.py`"

#: ../modules/compose.rst:321
msgid "FeatureUnion: composite feature spaces"
msgstr "FeatureUnion: espacios de características compuestas"

#: ../modules/compose.rst:325
msgid ":class:`FeatureUnion` combines several transformer objects into a new transformer that combines their output. A :class:`FeatureUnion` takes a list of transformer objects. During fitting, each of these is fit to the data independently. The transformers are applied in parallel, and the feature matrices they output are concatenated side-by-side into a larger matrix."
msgstr ":class:`FeatureUnion` combina varios objetos transformadores en un nuevo transformador que combina su salida. Una :class:`FeatureUnion` toma una lista de objetos transformadores. Durante el ajuste, cada uno de ellos se ajusta a los datos de forma independiente. Los transformadores se aplican en paralelo, y las matrices de características que producen se concatenan una al lado de la otra en una matriz mayor."

#: ../modules/compose.rst:332
msgid "When you want to apply different transformations to each field of the data, see the related class :class:`~sklearn.compose.ColumnTransformer` (see :ref:`user guide <column_transformer>`)."
msgstr "Cuando quieras aplicar diferentes transformaciones a cada campo de los datos, consulta la clase relacionada :class:`~sklearn.compose.ColumnTransformer` (ver :ref:`guía de usuario <column_transformer>`)."

#: ../modules/compose.rst:336
msgid ":class:`FeatureUnion` serves the same purposes as :class:`Pipeline` - convenience and joint parameter estimation and validation."
msgstr ":class:`FeatureUnion` tiene los mismos propósitos que :class:`Pipeline` - conveniencia y estimación y validación de parámetros conjuntos."

#: ../modules/compose.rst:339
msgid ":class:`FeatureUnion` and :class:`Pipeline` can be combined to create complex models."
msgstr ":class:`FeatureUnion` y :class:`Pipeline` pueden ser combinados para crear modelos complejos."

#: ../modules/compose.rst:342
msgid "(A :class:`FeatureUnion` has no way of checking whether two transformers might produce identical features. It only produces a union when the feature sets are disjoint, and making sure they are is the caller's responsibility.)"
msgstr "(Un :class:`FeatureUnion` no tiene forma de comprobar si dos transformadores pueden producir características idénticas. Sólo produce una unión cuando los conjuntos de características son disjuntos, y asegurarse de que lo son es responsabilidad de quien invoca dicha clase.)"

#: ../modules/compose.rst:351
msgid "A :class:`FeatureUnion` is built using a list of ``(key, value)`` pairs, where the ``key`` is the name you want to give to a given transformation (an arbitrary string; it only serves as an identifier) and ``value`` is an estimator object::"
msgstr "Una :class:`FeatureUnion` se construye utilizando una lista de pares ``(key, value)``, donde ``key`` es el nombre que se quiere dar a una determinada transformación (es una cadena arbitraria; sólo sirve como identificador) y ``valor`` es un objeto estimador::"

#: ../modules/compose.rst:366
msgid "Like pipelines, feature unions have a shorthand constructor called :func:`make_union` that does not require explicit naming of the components."
msgstr "Al igual que las pipelines, las uniones de características tienen un constructor abreviado llamado :func:`make_union` que no requiere nombrar explícitamente los componentes."

#: ../modules/compose.rst:370
msgid "Like ``Pipeline``, individual steps may be replaced using ``set_params``, and ignored by setting to ``'drop'``::"
msgstr "Como ``Pipeline``, los pasos individuales pueden ser reemplazados usando ``set_params``, e ignorados con la configuración de ``'drop'``::"

#: ../modules/compose.rst:379
msgid ":ref:`sphx_glr_auto_examples_compose_plot_feature_union.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_feature_union.py`"

#: ../modules/compose.rst:385
msgid "ColumnTransformer for heterogeneous data"
msgstr "ColumnTransformer para datos heterogéneos"

#: ../modules/compose.rst:387
msgid "Many datasets contain features of different types, say text, floats, and dates, where each type of feature requires separate preprocessing or feature extraction steps.  Often it is easiest to preprocess data before applying scikit-learn methods, for example using `pandas <https://pandas.pydata.org/>`__. Processing your data before passing it to scikit-learn might be problematic for one of the following reasons:"
msgstr "Muchos conjuntos de datos contienen características de diferentes tipos, por ejemplo, texto, flotantes y fechas, donde cada tipo de característica requiere pasos separados de preprocesamiento o extracción de características.  A menudo es más fácil preprocesar los datos antes de aplicar los métodos de scikit-learn, por ejemplo, utilizando `pandas <https://pandas.pydata.org/>`__. Procesar los datos antes de pasarlos a scikit-learn podría resultar problemático por alguna de las siguientes razones:"

#: ../modules/compose.rst:394
msgid "Incorporating statistics from test data into the preprocessors makes cross-validation scores unreliable (known as *data leakage*), for example in the case of scalers or imputing missing values."
msgstr "La incorporación de las estadísticas de los datos de prueba en los preprocesadores hace que las puntuaciones de la validación cruzada no sean fiables (lo que se conoce como *fuga de datos*), por ejemplo en el caso de los escaladores o de la imputación de valores perdidos."

#: ../modules/compose.rst:397
msgid "You may want to include the parameters of the preprocessors in a :ref:`parameter search <grid_search>`."
msgstr "Es posible que desees incluir los parámetros de los preprocesadores en una :ref:`búsqueda de parámetros <grid_search>`."

#: ../modules/compose.rst:400
msgid "The :class:`~sklearn.compose.ColumnTransformer` helps performing different transformations for different columns of the data, within a :class:`~sklearn.pipeline.Pipeline` that is safe from data leakage and that can be parametrized. :class:`~sklearn.compose.ColumnTransformer` works on arrays, sparse matrices, and `pandas DataFrames <https://pandas.pydata.org/pandas-docs/stable/>`__."
msgstr "El :class:`~sklearn.compose.ColumnTransformer` ayuda a realizar diferentes transformaciones para diferentes columnas de los datos, dentro de un :class:`~sklearn.pipeline.Pipeline` que está a salvo de fugas de datos y que puede ser parametrizado. :class:`~sklearn.compose.ColumnTransformer` trabaja en arreglos, matrices dispersas y `pandas DataFrames <https://pandas.pydata.org/pandas-docs/stable/>`__."

#: ../modules/compose.rst:407
msgid "To each column, a different transformation can be applied, such as preprocessing or a specific feature extraction method::"
msgstr "Para cada columna, se puede aplicar una transformación diferente, como el preprocesamiento o un método de extracción de características específicas::"

#: ../modules/compose.rst:418
msgid "For this data, we might want to encode the ``'city'`` column as a categorical variable using :class:`~sklearn.preprocessing.OneHotEncoder` but apply a :class:`~sklearn.feature_extraction.text.CountVectorizer` to the ``'title'`` column. As we might use multiple feature extraction methods on the same column, we give each transformer a unique name, say ``'city_category'`` and ``'title_bow'``. By default, the remaining rating columns are ignored (``remainder='drop'``)::"
msgstr "Para estos datos, podríamos querer codificar la columna ``ciudad`` como una variable categórica utilizando :class:`~sklearn.preprocessing.OneHotEncoder` pero aplicar un :class:`~sklearn.feature_extraction.text.CountVectorizer` a la columna ``título``. Como podemos utilizar varios métodos de extracción de características en la misma columna, damos a cada transformador un nombre único, por ejemplo ``city_category`` y ``title_bow``. Por defecto, el resto de columnas de valoración se ignoran (``remainder='drop'``)::"

#: ../modules/compose.rst:451
msgid "In the above example, the :class:`~sklearn.feature_extraction.text.CountVectorizer` expects a 1D array as input and therefore the columns were specified as a string (``'title'``). However, :class:`~sklearn.preprocessing.OneHotEncoder` as most of other transformers expects 2D data, therefore in that case you need to specify the column as a list of strings (``['city']``)."
msgstr "En el ejemplo anterior, el transformador :class:`~sklearn.feature_extraction.text.CountVectorizer` espera un arreglo 1D como entrada y por lo tanto las columnas fueron especificadas como una cadena (``'title``). Sin embargo, :class:`~sklearn.preprocessing.OneHotEncoder`, como la mayoría de los otros transformadores, espera datos 2D, por lo que en ese caso hay que especificar la columna como una lista de cadenas (``['city']``)."

#: ../modules/compose.rst:458
msgid "Apart from a scalar or a single item list, the column selection can be specified as a list of multiple items, an integer array, a slice, a boolean mask, or with a :func:`~sklearn.compose.make_column_selector`. The :func:`~sklearn.compose.make_column_selector` is used to select columns based on data type or column name::"
msgstr "Aparte de un escalar o una lista de un solo elemento, la selección de columnas puede especificarse como una lista de múltiples elementos, un arreglo de enteros, un intervalo, una máscara booleana, o con un :func:`~sklearn.compose.make_column_selector`. El :func:`~sklearn.compose.make_column_selector` se utiliza para seleccionar columnas basándose en el tipo de datos o en el nombre de la columna::"

#: ../modules/compose.rst:478
msgid "Strings can reference columns if the input is a DataFrame, integers are always interpreted as the positional columns."
msgstr "Las cadenas pueden referenciar columnas si la entrada es de tipo DataFrame, los enteros siempre se interpretan como las columnas posicionales."

#: ../modules/compose.rst:481
msgid "We can keep the remaining rating columns by setting ``remainder='passthrough'``. The values are appended to the end of the transformation::"
msgstr "Podemos mantener las columnas de valoración restantes estableciendo ``remainder='passthrough'``. Los valores se añaden al final de la transformación::"

#: ../modules/compose.rst:496
msgid "The ``remainder`` parameter can be set to an estimator to transform the remaining rating columns. The transformed values are appended to the end of the transformation::"
msgstr "El parámetro ``remainder`` puede establecerse en un estimador para transformar las columnas de valoración restantes. Los valores transformados se añaden al final de la transformación::"

#: ../modules/compose.rst:514
msgid "The :func:`~sklearn.compose.make_column_transformer` function is available to more easily create a :class:`~sklearn.compose.ColumnTransformer` object. Specifically, the names will be given automatically. The equivalent for the above example would be::"
msgstr "La función :func:`~sklearn.compose.make_column_transformer` está disponible para crear más fácilmente un objeto de tipo :class:`~sklearn.compose.ColumnTransformer`. Específicamente, los nombres serán generados automáticamente. El equivalente para el ejemplo anterior sería::"

#: ../modules/compose.rst:533
msgid "Visualizing Composite Estimators"
msgstr "Visualización de estimadores compuestos"

#: ../modules/compose.rst:535
msgid "Estimators can be displayed with a HTML representation when shown in a jupyter notebook. This can be useful to diagnose or visualize a Pipeline with many estimators. This visualization is activated by setting the `display` option in :func:`~sklearn.set_config`::"
msgstr "Los estimadores pueden ser mostrados con una representación HTML cuando se muestran en un cuaderno de Jupyter. Esto puede ser útil para diagnosticar o visualizar un pipeline con muchos estimadores. Esta visualización se activa estableciendo la opción `display` en :func:`~sklearn.set_config`::"

#: ../modules/compose.rst:545
msgid "An example of the HTML output can be seen in the **HTML representation of Pipeline** section of :ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`. As an alternative, the HTML can be written to a file using :func:`~sklearn.utils.estimator_html_repr`::"
msgstr "Un ejemplo de la salida HTML puede verse en la sección **Representación HTML del pipeline** de :ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`. Como alternativa, el HTML se puede escribir en un archivo utilizando :func:`~sklearn.utils.estimator_html_repr`::"

#: ../modules/compose.rst:557
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"

#: ../modules/compose.rst:558
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
msgstr ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"

