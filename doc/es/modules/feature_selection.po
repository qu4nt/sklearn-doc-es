msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-28 15:57\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/feature_selection.po\n"
"X-Crowdin-File-ID: 4858\n"
"Language: es_ES\n"

#: ../modules/feature_selection.rst:7
msgid "Feature selection"
msgstr "Selección de características"

#: ../modules/feature_selection.rst:10
msgid "The classes in the :mod:`sklearn.feature_selection` module can be used for feature selection/dimensionality reduction on sample sets, either to improve estimators' accuracy scores or to boost their performance on very high-dimensional datasets."
msgstr "Las clases del módulo :mod:`sklearn.feature_selection` pueden utilizarse para la selección de características / reducción de la dimensionalidad en conjuntos de muestras, ya sea para mejorar las puntuaciones de exactitud de los estimadores o para aumentar su eficiencia en conjuntos de datos de muy alta dimensión."

#: ../modules/feature_selection.rst:19
msgid "Removing features with low variance"
msgstr "Remover características con varianza baja"

#: ../modules/feature_selection.rst:21
msgid ":class:`VarianceThreshold` is a simple baseline approach to feature selection. It removes all features whose variance doesn't meet some threshold. By default, it removes all zero-variance features, i.e. features that have the same value in all samples."
msgstr ":class:`VarianceThreshold` es una aproximación simple a la selección de características. Elimina todas las características cuya varianza no alcanza un determinado umbral. Por defecto, elimina todas las características de varianza cero, es decir, las características que tienen el mismo valor en todas las muestras."

#: ../modules/feature_selection.rst:26
#, python-format
msgid "As an example, suppose that we have a dataset with boolean features, and we want to remove all features that are either one or zero (on or off) in more than 80% of the samples. Boolean features are Bernoulli random variables, and the variance of such variables is given by"
msgstr "Por ejemplo, supongamos que tenemos un conjunto de datos con características booleanas y queremos eliminar todas las características que sean uno o cero (activadas o desactivadas) en más del 80% de las muestras. Las características booleanas son variables aleatorias de Bernoulli, y la varianza de dichas variables viene dada por"

#: ../modules/feature_selection.rst:32
msgid "\\mathrm{Var}[X] = p(1 - p)\n\n"
msgstr "\\mathrm{Var}[X] = p(1 - p)\n\n"

#: ../modules/feature_selection.rst:34
msgid "so we can select using the threshold ``.8 * (1 - .8)``::"
msgstr "de manera que podamos seleccionar utilizando el umbral ``.8 * (1 - .8)``::"

#: ../modules/feature_selection.rst:47
msgid "As expected, ``VarianceThreshold`` has removed the first column, which has a probability :math:`p = 5/6 > .8` of containing a zero."
msgstr "Como se esperaba, ``VarianceThreshold`` ha eliminado la primera columna, que tiene una probabilidad de :math:`p = 5/6 > .8` de contener un cero."

#: ../modules/feature_selection.rst:53
msgid "Univariate feature selection"
msgstr "Selección de características univariantes"

#: ../modules/feature_selection.rst:55
msgid "Univariate feature selection works by selecting the best features based on univariate statistical tests. It can be seen as a preprocessing step to an estimator. Scikit-learn exposes feature selection routines as objects that implement the ``transform`` method:"
msgstr "La selección de características univariantes funciona mediante la selección de las mejores características basadas en pruebas estadísticas univariantes. Puede verse como un paso de preprocesamiento de un estimador. Scikit-learn expone las rutinas de selección de características como objetos que implementan el método ``transform``:"

#: ../modules/feature_selection.rst:60
msgid ":class:`SelectKBest` removes all but the :math:`k` highest scoring features"
msgstr ":class:`SelectKBest` elimina todas las características excepto las de mayor puntuación de :math:`k"

#: ../modules/feature_selection.rst:62
msgid ":class:`SelectPercentile` removes all but a user-specified highest scoring percentage of features"
msgstr ":class:`SelectPercentile` elimina todas las características excepto las del porcentaje de puntuación más alto especificado por el usuario"

#: ../modules/feature_selection.rst:65
msgid "using common univariate statistical tests for each feature: false positive rate :class:`SelectFpr`, false discovery rate :class:`SelectFdr`, or family wise error :class:`SelectFwe`."
msgstr "aplicando pruebas estadísticas univariantes comunes para cada característica: tasa de falsos positivos :class:`SelectFpr`, tasa de falsos descubrimientos :class:`SelectFdr`, o error por familia :class:`SelectFwe`."

#: ../modules/feature_selection.rst:69
msgid ":class:`GenericUnivariateSelect` allows to perform univariate feature selection with a configurable strategy. This allows to select the best univariate selection strategy with hyper-parameter search estimator."
msgstr ":class:`GenericUnivariateSelect` permite realizar la selección de características univariantes con una estrategia configurable. Permite seleccionar la mejor estrategia de selección univariante con el estimador de búsqueda de hiperparámetros."

#: ../modules/feature_selection.rst:73
msgid "For instance, we can perform a :math:`\\chi^2` test to the samples to retrieve only the two best features as follows:"
msgstr "Por ejemplo, podemos realizar una prueba :math:`\\chi^2` a las muestras para recuperar sólo las dos mejores características de la siguiente manera:"

#: ../modules/feature_selection.rst:86
msgid "These objects take as input a scoring function that returns univariate scores and p-values (or only scores for :class:`SelectKBest` and :class:`SelectPercentile`):"
msgstr "Estos objetos toman como entrada una función de puntuación que devuelve puntuaciones univariantes (univariate scores) y valores p (o sólo puntuaciones para :class:`SelectKBest` y :class:`SelectPercentile`):"

#: ../modules/feature_selection.rst:90
msgid "For regression: :func:`f_regression`, :func:`mutual_info_regression`"
msgstr "Para regresión: :func:`f_regression`, :func:`mutual_info_regression`"

#: ../modules/feature_selection.rst:92
msgid "For classification: :func:`chi2`, :func:`f_classif`, :func:`mutual_info_classif`"
msgstr "Para clasificación: :func:`chi2`, :func:`f_classif`, :func:`mutual_info_classif`"

#: ../modules/feature_selection.rst:94
msgid "The methods based on F-test estimate the degree of linear dependency between two random variables. On the other hand, mutual information methods can capture any kind of statistical dependency, but being nonparametric, they require more samples for accurate estimation."
msgstr "Los métodos basados en la prueba F estiman el grado de dependencia lineal entre dos variables aleatorias. Por otro lado, los métodos de información mutua pueden capturar cualquier tipo de dependencia estadística, pero al no ser paramétricos, requieren más muestras para una estimación precisa."

msgid "Feature selection with sparse data"
msgstr "Selección de características con datos dispersos"

#: ../modules/feature_selection.rst:101
msgid "If you use sparse data (i.e. data represented as sparse matrices), :func:`chi2`, :func:`mutual_info_regression`, :func:`mutual_info_classif` will deal with the data without making it dense."
msgstr "Si utiliza datos dispersos (es decir, datos representados como matrices dispersas), :func:`chi2`, :func:`mutual_info_regression`, :func:`mutual_info_classif` se ocuparán de los datos sin hacerlos densos."

#: ../modules/feature_selection.rst:107
msgid "Beware not to use a regression scoring function with a classification problem, you will get useless results."
msgstr "Ten cuidado de no utilizar una función de puntuación de regresión con un problema de clasificación, ya que obtendrás resultados inservibles."

#: ../modules/feature_selection.rst:112
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection.py`"
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_feature_selection.py`"

#: ../modules/feature_selection.rst:114
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_f_test_vs_mi.py`"
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_f_test_vs_mi.py`"

#: ../modules/feature_selection.rst:119
msgid "Recursive feature elimination"
msgstr "Eliminación recursiva de características"

#: ../modules/feature_selection.rst:121
msgid "Given an external estimator that assigns weights to features (e.g., the coefficients of a linear model), the goal of recursive feature elimination (:class:`RFE`) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and the importance of each feature is obtained either through any specific attribute (such as ``coef_``, ``feature_importances_``) or callable. Then, the least important features are pruned from current set of features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached."
msgstr "Dado un estimador externo que asigna pesos a las características (por ejemplo, los coeficientes de un modelo lineal), el objetivo de la eliminación recursiva de características (:class:`RFE`) es seleccionar características considerando recursivamente conjuntos cada vez más pequeños de características. En primer lugar, el estimador se entrena con el conjunto inicial de características y la importancia de cada una de ellas se obtiene a través de algún atributo específico (como ``coef_``, ``feature_importances_``) u otro invocable. A continuación, las características menos importantes se eliminan del conjunto actual de características. Este procedimiento se repite recursivamente en el conjunto reducido (*pruned*) hasta que se alcanza el número deseado de características a seleccionar."

#: ../modules/feature_selection.rst:131
msgid ":class:`RFECV` performs RFE in a cross-validation loop to find the optimal number of features."
msgstr ":class:`RFECV` realiza la RFE en un bucle de validación cruzada para encontrar el número óptimo de características."

#: ../modules/feature_selection.rst:136
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_rfe_digits.py`: A recursive feature elimination example showing the relevance of pixels in a digit classification task."
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_rfe_digits.py`: Un ejemplo de eliminación recursiva de características que muestra la relevancia de los píxeles en una tarea de clasificación de dígitos."

#: ../modules/feature_selection.rst:139
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_rfe_with_cross_validation.py`: A recursive feature elimination example with automatic tuning of the number of features selected with cross-validation."
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_rfe_with_cross_validation.py`: Un ejemplo de eliminación recursiva de características con ajuste automático del número de características seleccionadas con validación cruzada."

#: ../modules/feature_selection.rst:146
msgid "Feature selection using SelectFromModel"
msgstr "Selección de características mediante SelectFromModel"

#: ../modules/feature_selection.rst:148
msgid ":class:`SelectFromModel` is a meta-transformer that can be used along with any estimator that importance of each feature through a specific attribute (such as ``coef_``, ``feature_importances_``) or callable after fitting. The features are considered unimportant and removed, if the corresponding importance of the feature values are below the provided ``threshold`` parameter. Apart from specifying the threshold numerically, there are built-in heuristics for finding a threshold using a string argument. Available heuristics are \"mean\", \"median\" and float multiples of these like \"0.1*mean\". In combination with the `threshold` criteria, one can use the `max_features` parameter to set a limit on the number of features to select."
msgstr ":class:`SelectFromModel` es un metatransformador que puede utilizarse junto con cualquier estimador de la importancia de cada característica a través de un atributo específico (tales como ``coef_``, ``feature_importances_``) o invocable después del ajuste. Las características se consideran poco importantes y se eliminan si la importancia correspondiente de los valores de las características está por debajo del parámetro ``threshold`` proporcionado. Aparte de especificar el umbral numéricamente, hay heurísticas integradas que permiten encontrar un umbral utilizando un argumento de cadena. Las heurísticas disponibles son \"mean\", \"median\" y múltiplos flotantes de éstas como \"0.1*mean\". En combinación con el criterio `threshold`, se puede utilizar el parámetro `max_features` para establecer un límite en el número de características a seleccionar."

#: ../modules/feature_selection.rst:159
msgid "For examples on how it is to be used refer to the sections below."
msgstr "Para ver ejemplos de cómo se debe utilizar, consulta las secciones que siguen."

#: ../modules/feature_selection.rst:163 ../modules/feature_selection.rst:304
msgid ":ref:`sphx_glr_auto_examples_feature_selection_plot_select_from_model_diabetes.py`"
msgstr ":ref:`sphx_glr_auto_examples_feature_selection_plot_select_from_model_diabetes.py`"

#: ../modules/feature_selection.rst:168
msgid "L1-based feature selection"
msgstr "Selección de características basada en L1"

#: ../modules/feature_selection.rst:172
msgid ":ref:`Linear models <linear_model>` penalized with the L1 norm have sparse solutions: many of their estimated coefficients are zero. When the goal is to reduce the dimensionality of the data to use with another classifier, they can be used along with :class:`~feature_selection.SelectFromModel` to select the non-zero coefficients. In particular, sparse estimators useful for this purpose are the :class:`~linear_model.Lasso` for regression, and of :class:`~linear_model.LogisticRegression` and :class:`~svm.LinearSVC` for classification::"
msgstr ":ref:`Linear models <linear_model>` penalizados con la norma L1 tienen soluciones dispersas: muchos de sus coeficientes estimados son cero. Cuando el objetivo es reducir la dimensionalidad de los datos para utilizarlos con otro clasificador, pueden utilizarse junto con :class:`~feature_selection.SelectFromModel` para seleccionar los coeficientes no nulos. En particular, los estimadores dispersos útiles para este propósito son los :class:`~linear_model.Lasso` para la regresión, y de :class:`~linear_model.LogisticRegression` y :class:`~svm.LinearSVC` para la clasificación::"

#: ../modules/feature_selection.rst:193
msgid "With SVMs and logistic-regression, the parameter C controls the sparsity: the smaller C the fewer features selected. With Lasso, the higher the alpha parameter, the fewer features selected."
msgstr "Con las SVM y la regresión logística, el parámetro C controla la dispersión: cuanto menor sea C, menos características serán seleccionadas. Con Lasso, cuanto mayor sea el parámetro alfa, menos características se seleccionarán."

#: ../modules/feature_selection.rst:199
msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`: Comparison of different algorithms for document classification including L1-based feature selection."
msgstr ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`: Comparación de diferentes algoritmos para la clasificación de documentos, incluida la selección de características basada en L1."

msgid "**L1-recovery and compressive sensing**"
msgstr "**Recuperación del L1 y muestreo con compresión (compressive sensing)**"

#: ../modules/feature_selection.rst:207
msgid "For a good choice of alpha, the :ref:`lasso` can fully recover the exact set of non-zero variables using only few observations, provided certain specific conditions are met. In particular, the number of samples should be \"sufficiently large\", or L1 models will perform at random, where \"sufficiently large\" depends on the number of non-zero coefficients, the logarithm of the number of features, the amount of noise, the smallest absolute value of non-zero coefficients, and the structure of the design matrix X. In addition, the design matrix must display certain specific properties, such as not being too correlated."
msgstr "Para una buena elección de alfa, el :ref:`lasso` puede recuperar completamente el conjunto exacto de variables no nulas utilizando sólo unas pocas observaciones, siempre que se cumplan ciertas condiciones específicas. En particular, el número de muestras debe ser \"suficientemente grande\", o los modelos L1 se comportarán de forma aleatoria, en donde \" suficientemente grande\" depende del número de coeficientes no nulos, del logaritmo del número de características, de la cantidad de ruido, del menor valor absoluto de los coeficientes no nulos y de la estructura de la matriz de diseño X. Además, la matriz de diseño debe mostrar ciertas propiedades específicas, como no estar demasiado correlacionada."

#: ../modules/feature_selection.rst:217
msgid "There is no general rule to select an alpha parameter for recovery of non-zero coefficients. It can by set by cross-validation (:class:`LassoCV` or :class:`LassoLarsCV`), though this may lead to under-penalized models: including a small number of non-relevant variables is not detrimental to prediction score. BIC (:class:`LassoLarsIC`) tends, on the opposite, to set high values of alpha."
msgstr "No hay una regla general para seleccionar un parámetro alfa para la recuperación de coeficientes distintos de cero. Puede establecerse mediante validación cruzada (:class:`LassoCV` o :class:`LassoLarsCV`), aunque esto puede conducir a modelos insuficientemente penalizados: la inclusión de un pequeño número de variables no relevantes no es perjudicial para la puntuación de la predicción. BIC (:class:`LassoLarsIC`) tiende, por el contrario, a establecer valores altos de alfa."

#: ../modules/feature_selection.rst:225
msgid "**Reference** Richard G. Baraniuk \"Compressive Sensing\", IEEE Signal Processing Magazine [120] July 2007 http://users.isr.ist.utl.pt/~aguiar/CS_notes.pdf"
msgstr "**Referencia** Richard G. Baraniuk \"Compressive Sensing\", IEEE Signal Processing Magazine [120] July 2007 http://users.isr.ist.utl.pt/~aguiar/CS_notes.pdf"

#: ../modules/feature_selection.rst:231
msgid "Tree-based feature selection"
msgstr "Selección de características basada en árboles"

#: ../modules/feature_selection.rst:233
msgid "Tree-based estimators (see the :mod:`sklearn.tree` module and forest of trees in the :mod:`sklearn.ensemble` module) can be used to compute impurity-based feature importances, which in turn can be used to discard irrelevant features (when coupled with the :class:`~feature_selection.SelectFromModel` meta-transformer)::"
msgstr "Los estimadores basados en árboles (véase el módulo :mod:`sklearn.tree` y el bosque de árboles en el módulo :mod:`sklearn.ensemble`) pueden utilizarse para calcular la importancia de características basadas en impurezas, que a su vez pueden utilizarse para descartar características irrelevantes (cuando se combinan con el metatransformador :class:`~feature_selection.SelectFromModel`)::"

#: ../modules/feature_selection.rst:256
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_forest_importances.py`: example on synthetic data showing the recovery of the actually meaningful features."
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_forest_importances.py`: ejemplo sobre datos sintéticos que muestran la recuperación de las características efectivamente significativas."

#: ../modules/feature_selection.rst:260
msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_forest_importances_faces.py`: example on face recognition data."
msgstr ":ref:`sphx_glr_auto_examples_ensemble_plot_forest_importances_faces.py`: ejemplo de datos de reconocimiento facial."

#: ../modules/feature_selection.rst:266
msgid "Sequential Feature Selection"
msgstr "Selección secuencial de características"

#: ../modules/feature_selection.rst:268
msgid "Sequential Feature Selection [sfs]_ (SFS) is available in the :class:`~sklearn.feature_selection.SequentialFeatureSelector` transformer. SFS can be either forward or backward:"
msgstr "La selección secuencial de características [sfs]_ (SFS) está disponible en el transformador :class:`~sklearn.feature_selection.SequentialFeatureSelector`. SFS puede funcionar hacia adelante (forward) o hacia atrás (backward):"

#: ../modules/feature_selection.rst:272
msgid "Forward-SFS is a greedy procedure that iteratively finds the best new feature to add to the set of selected features. Concretely, we initially start with zero feature and find the one feature that maximizes a cross-validated score when an estimator is trained on this single feature. Once that first feature is selected, we repeat the procedure by adding a new feature to the set of selected features. The procedure stops when the desired number of selected features is reached, as determined by the `n_features_to_select` parameter."
msgstr "Forward-SFS es un procedimiento ambicioso (*greedy*) que encuentra de forma iterativa la mejor característica nueva para añadir al conjunto de características seleccionadas. Concretamente, empezamos con cero características y encontramos la que maximiza una puntuación validada de forma cruzada cuando se entrena un estimador con esta única característica. Una vez seleccionada esa primera característica, repetimos el procedimiento añadiendo una nueva característica al conjunto de características seleccionadas. El procedimiento se detiene cuando se alcanza el número deseado de características seleccionadas, determinado por el parámetro `n_features_to_select`."

#: ../modules/feature_selection.rst:280
msgid "Backward-SFS follows the same idea but works in the opposite direction: instead of starting with no feature and greedily adding features, we start with *all* the features and greedily *remove* features from the set. The `direction` parameter controls whether forward or backward SFS is used."
msgstr "Backward-SFS sigue la misma idea, pero funciona en la dirección opuesta: en lugar de empezar sin ninguna característica y añadirla codiciosamente, empezamos con *todas* las características y *eliminamos* codiciosamente las características del conjunto. El parámetro `direction` controla si se utiliza el SFS hacia adelante o hacia atrás."

#: ../modules/feature_selection.rst:285
msgid "In general, forward and backward selection do not yield equivalent results. Also, one may be much faster than the other depending on the requested number of selected features: if we have 10 features and ask for 7 selected features, forward selection would need to perform 7 iterations while backward selection would only need to perform 3."
msgstr "En general, la selección hacia adelante (forward) y la selección hacia atrás (backward) no dan resultados equivalentes. Además, una puede ser mucho más rápida que la otra dependiendo del número de características seleccionadas que se soliciten: si tenemos 10 características y queremos que se seleccionen 7, la selección hacia delante necesitaría realizar 7 iteraciones mientras que la selección hacia atrás sólo necesitaría llevar a cabo 3."

#: ../modules/feature_selection.rst:291
msgid "SFS differs from :class:`~sklearn.feature_selection.RFE` and :class:`~sklearn.feature_selection.SelectFromModel` in that it does not require the underlying model to expose a `coef_` or `feature_importances_` attribute. It may however be slower considering that more models need to be evaluated, compared to the other approaches. For example in backward selection, the iteration going from `m` features to `m - 1` features using k-fold cross-validation requires fitting `m * k` models, while :class:`~sklearn.feature_selection.RFE` would require only a single fit, and :class:`~sklearn.feature_selection.SelectFromModel` always just does a single fit and requires no iterations."
msgstr "SFS difiere de :class:`~sklearn.feature_selection.RFE` y :class:`~sklearn.feature_selection.SelectFromModel` en que no requiere que el modelo subyacente exponga un atributo `coef_` o `feature_importances_`. Sin embargo, puede ser más lento, en comparación con los otros enfoques, ya que es necesario evaluar más modelos. Por ejemplo, en la selección hacia atrás, la iteración que va de `m` características a `m - 1` características utilizando la validación cruzada de *k* partes requiere el ajuste de `m * k` modelos, mientras que :class:`~sklearn.feature_selection.RFE` sólo requeriría un único ajuste, y :class:`~sklearn.feature_selection.SelectFromModel` siempre hace un único ajuste y no requiere iteraciones."

#: ../modules/feature_selection.rst:308
msgid "Ferri et al, `Comparative study of techniques for large-scale feature selection <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.4369&rep=rep1&type=pdf>`_."
msgstr "Ferri et al, `Comparative study of techniques for large-scale feature selection <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.4369&rep=rep1&type=pdf>`_."

#: ../modules/feature_selection.rst:313
msgid "Feature selection as part of a pipeline"
msgstr "Selección de rasgos como parte de un pipeline"

#: ../modules/feature_selection.rst:315
msgid "Feature selection is usually used as a pre-processing step before doing the actual learning. The recommended way to do this in scikit-learn is to use a :class:`~pipeline.Pipeline`::"
msgstr "La selección de características se utiliza generalmente como un paso de preprocesamiento antes de realizar el aprendizaje propiamente dicho. La forma recomendada de hacer esto en scikit-learn es utilizar un :class:`~pipeline.Pipeline`::"

#: ../modules/feature_selection.rst:325
msgid "In this snippet we make use of a :class:`~svm.LinearSVC` coupled with :class:`~feature_selection.SelectFromModel` to evaluate feature importances and select the most relevant features. Then, a :class:`~ensemble.RandomForestClassifier` is trained on the transformed output, i.e. using only relevant features. You can perform similar operations with the other feature selection methods and also classifiers that provide a way to evaluate feature importances of course. See the :class:`~pipeline.Pipeline` examples for more details."
msgstr "En este fragmento utilizamos un :class:`~svm.LinearSVC` junto con :class:`~feature_selection.SelectFromModel` para evaluar la importancia de las características y seleccionar las más relevantes. A continuación, se entrena un :class:`~ensemble.RandomForestClassifier` en la salida transformada, es decir, utilizando sólo las características relevantes. Puedes realizar operaciones similares con los otros métodos de selección de características y también con clasificadores que proporcionan una forma de evaluar la importancia de las características, por supuesto. Puedes consultar los ejemplos de :class:`~pipeline.Pipeline` para más detalles."

