msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-29 02:34\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/mixture.po\n"
"X-Crowdin-File-ID: 4842\n"
"Language: es_ES\n"

#: ../modules/mixture.rst:7
msgid "Gaussian mixture models"
msgstr "Modelos de mezclas gaussianas"

#: ../modules/mixture.rst:11
msgid "``sklearn.mixture`` is a package which enables one to learn Gaussian Mixture Models (diagonal, spherical, tied and full covariance matrices supported), sample them, and estimate them from data. Facilities to help determine the appropriate number of components are also provided."
msgstr ""

#: ../modules/mixture.rst:22
msgid "**Two-component Gaussian mixture model:** *data points, and equi-probability surfaces of the model.*"
msgstr ""

#: ../modules/mixture.rst:25
msgid "A Gaussian mixture model is a probabilistic model that assumes all the data points are generated from a mixture of a finite number of Gaussian distributions with unknown parameters. One can think of mixture models as generalizing k-means clustering to incorporate information about the covariance structure of the data as well as the centers of the latent Gaussians."
msgstr ""

#: ../modules/mixture.rst:32
msgid "Scikit-learn implements different classes to estimate Gaussian mixture models, that correspond to different estimation strategies, detailed below."
msgstr ""

#: ../modules/mixture.rst:37
msgid "Gaussian Mixture"
msgstr ""

#: ../modules/mixture.rst:39
msgid "The :class:`GaussianMixture` object implements the :ref:`expectation-maximization <expectation_maximization>` (EM) algorithm for fitting mixture-of-Gaussian models. It can also draw confidence ellipsoids for multivariate models, and compute the Bayesian Information Criterion to assess the number of clusters in the data. A :meth:`GaussianMixture.fit` method is provided that learns a Gaussian Mixture Model from train data. Given test data, it can assign to each sample the Gaussian it mostly probably belong to using the :meth:`GaussianMixture.predict` method."
msgstr ""

#: ../modules/mixture.rst:54
msgid "The :class:`GaussianMixture` comes with different options to constrain the covariance of the difference classes estimated: spherical, diagonal, tied or full covariance."
msgstr ""

#: ../modules/mixture.rst:65
msgid "See :ref:`sphx_glr_auto_examples_mixture_plot_gmm_covariances.py` for an example of using the Gaussian mixture as clustering on the iris dataset."
msgstr ""

#: ../modules/mixture.rst:68
msgid "See :ref:`sphx_glr_auto_examples_mixture_plot_gmm_pdf.py` for an example on plotting the density estimation."
msgstr ""

#: ../modules/mixture.rst:72
msgid "Pros and cons of class :class:`GaussianMixture`"
msgstr ""

#: ../modules/mixture.rst:75 ../modules/mixture.rst:253
msgid "Pros"
msgstr ""

#: ../modules/mixture.rst
msgid "Speed"
msgstr ""

#: ../modules/mixture.rst:77
msgid "It is the fastest algorithm for learning mixture models"
msgstr ""

#: ../modules/mixture.rst
msgid "Agnostic"
msgstr ""

#: ../modules/mixture.rst:79
msgid "As this algorithm maximizes only the likelihood, it will not bias the means towards zero, or bias the cluster sizes to have specific structures that might or might not apply."
msgstr ""

#: ../modules/mixture.rst:84 ../modules/mixture.rst:277
msgid "Cons"
msgstr ""

#: ../modules/mixture.rst
msgid "Singularities"
msgstr ""

#: ../modules/mixture.rst:86
msgid "When one has insufficiently many points per mixture, estimating the covariance matrices becomes difficult, and the algorithm is known to diverge and find solutions with infinite likelihood unless one regularizes the covariances artificially."
msgstr ""

#: ../modules/mixture.rst
msgid "Number of components"
msgstr ""

#: ../modules/mixture.rst:91
msgid "This algorithm will always use all the components it has access to, needing held-out data or information theoretical criteria to decide how many components to use in the absence of external cues."
msgstr ""

#: ../modules/mixture.rst:97
msgid "Selecting the number of components in a classical Gaussian Mixture Model"
msgstr ""

#: ../modules/mixture.rst:99
msgid "The BIC criterion can be used to select the number of components in a Gaussian Mixture in an efficient way. In theory, it recovers the true number of components only in the asymptotic regime (i.e. if much data is available and assuming that the data was actually generated i.i.d. from a mixture of Gaussian distribution). Note that using a :ref:`Variational Bayesian Gaussian mixture <bgmm>` avoids the specification of the number of components for a Gaussian mixture model."
msgstr ""

#: ../modules/mixture.rst:114
msgid "See :ref:`sphx_glr_auto_examples_mixture_plot_gmm_selection.py` for an example of model selection performed with classical Gaussian mixture."
msgstr ""

#: ../modules/mixture.rst:120
msgid "Estimation algorithm Expectation-maximization"
msgstr ""

#: ../modules/mixture.rst:122
#, python-format
msgid "The main difficulty in learning Gaussian mixture models from unlabeled data is that it is one usually doesn't know which points came from which latent component (if one has access to this information it gets very easy to fit a separate Gaussian distribution to each set of points). `Expectation-maximization <https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm>`_ is a well-founded statistical algorithm to get around this problem by an iterative process. First one assumes random components (randomly centered on data points, learned from k-means, or even just normally distributed around the origin) and computes for each point a probability of being generated by each component of the model. Then, one tweaks the parameters to maximize the likelihood of the data given those assignments. Repeating this process is guaranteed to always converge to a local optimum."
msgstr ""

#: ../modules/mixture.rst:141
msgid "Variational Bayesian Gaussian Mixture"
msgstr ""

#: ../modules/mixture.rst:143
msgid "The :class:`BayesianGaussianMixture` object implements a variant of the Gaussian mixture model with variational inference algorithms. The API is similar as the one defined by :class:`GaussianMixture`."
msgstr ""

#: ../modules/mixture.rst:150
msgid "Estimation algorithm: variational inference"
msgstr ""

#: ../modules/mixture.rst:152
msgid "Variational inference is an extension of expectation-maximization that maximizes a lower bound on model evidence (including priors) instead of data likelihood. The principle behind variational methods is the same as expectation-maximization (that is both are iterative algorithms that alternate between finding the probabilities for each point to be generated by each mixture and fitting the mixture to these assigned points), but variational methods add regularization by integrating information from prior distributions. This avoids the singularities often found in expectation-maximization solutions but introduces some subtle biases to the model. Inference is often notably slower, but not usually as much so as to render usage unpractical."
msgstr ""

#: ../modules/mixture.rst:165
msgid "Due to its Bayesian nature, the variational algorithm needs more hyper- parameters than expectation-maximization, the most important of these being the concentration parameter ``weight_concentration_prior``. Specifying a low value for the concentration prior will make the model put most of the weight on few components set the remaining components weights very close to zero. High values of the concentration prior will allow a larger number of components to be active in the mixture."
msgstr ""

#: ../modules/mixture.rst:173
msgid "The parameters implementation of the :class:`BayesianGaussianMixture` class proposes two types of prior for the weights distribution: a finite mixture model with Dirichlet distribution and an infinite mixture model with the Dirichlet Process. In practice Dirichlet Process inference algorithm is approximated and uses a truncated distribution with a fixed maximum number of components (called the Stick-breaking representation). The number of components actually used almost always depends on the data."
msgstr ""

#: ../modules/mixture.rst:181
msgid "The next figure compares the results obtained for the different type of the weight concentration prior (parameter ``weight_concentration_prior_type``) for different values of ``weight_concentration_prior``. Here, we can see the value of the ``weight_concentration_prior`` parameter has a strong impact on the effective number of active components obtained. We can also notice that large values for the concentration weight prior lead to more uniform weights when the type of prior is 'dirichlet_distribution' while this is not necessarily the case for the 'dirichlet_process' type (used by default)."
msgstr ""

#: ../modules/mixture.rst:200
msgid "plot_bgmm plot_dpgmm"
msgstr ""

#: ../modules/mixture.rst:201
msgid "The examples below compare Gaussian mixture models with a fixed number of components, to the variational Gaussian mixture models with a Dirichlet process prior. Here, a classical Gaussian mixture is fitted with 5 components on a dataset composed of 2 clusters. We can see that the variational Gaussian mixture with a Dirichlet process prior is able to limit itself to only 2 components whereas the Gaussian mixture fits the data with a fixed number of components that has to be set a priori by the user. In this case the user has selected ``n_components=5`` which does not match the true generative distribution of this toy dataset. Note that with very little observations, the variational Gaussian mixture models with a Dirichlet process prior can take a conservative stand, and fit only one component."
msgstr ""

#: ../modules/mixture.rst:219
msgid "On the following figure we are fitting a dataset not well-depicted by a Gaussian mixture. Adjusting the ``weight_concentration_prior``, parameter of the :class:`BayesianGaussianMixture` controls the number of components used to fit this data. We also present on the last two plots a random sampling generated from the two resulting mixtures."
msgstr ""

#: ../modules/mixture.rst:234
msgid "See :ref:`sphx_glr_auto_examples_mixture_plot_gmm.py` for an example on plotting the confidence ellipsoids for both :class:`GaussianMixture` and :class:`BayesianGaussianMixture`."
msgstr ""

#: ../modules/mixture.rst:238
msgid ":ref:`sphx_glr_auto_examples_mixture_plot_gmm_sin.py` shows using :class:`GaussianMixture` and :class:`BayesianGaussianMixture` to fit a sine wave."
msgstr ""

#: ../modules/mixture.rst:242
msgid "See :ref:`sphx_glr_auto_examples_mixture_plot_concentration_prior.py` for an example plotting the confidence ellipsoids for the :class:`BayesianGaussianMixture` with different ``weight_concentration_prior_type`` for different values of the parameter ``weight_concentration_prior``."
msgstr ""

#: ../modules/mixture.rst:250
msgid "Pros and cons of variational inference with :class:`BayesianGaussianMixture`"
msgstr ""

#: ../modules/mixture.rst
msgid "Automatic selection"
msgstr ""

#: ../modules/mixture.rst:255
msgid "when ``weight_concentration_prior`` is small enough and ``n_components`` is larger than what is found necessary by the model, the Variational Bayesian mixture model has a natural tendency to set some mixture weights values close to zero. This makes it possible to let the model choose a suitable number of effective components automatically. Only an upper bound of this number needs to be provided. Note however that the \"ideal\" number of active components is very application specific and is typically ill-defined in a data exploration setting."
msgstr ""

#: ../modules/mixture.rst
msgid "Less sensitivity to the number of parameters"
msgstr ""

#: ../modules/mixture.rst:264
msgid "unlike finite models, which will almost always use all components as much as they can, and hence will produce wildly different solutions for different numbers of components, the variational inference with a Dirichlet process prior (``weight_concentration_prior_type='dirichlet_process'``) won't change much with changes to the parameters, leading to more stability and less tuning."
msgstr ""

#: ../modules/mixture.rst
msgid "Regularization"
msgstr ""

#: ../modules/mixture.rst:271
msgid "due to the incorporation of prior information, variational solutions have less pathological special cases than expectation-maximization solutions."
msgstr ""

#: ../modules/mixture.rst:279
msgid "the extra parametrization necessary for variational inference make inference slower, although not by much."
msgstr ""

#: ../modules/mixture.rst
msgid "Hyperparameters"
msgstr ""

#: ../modules/mixture.rst:282
msgid "this algorithm needs an extra hyperparameter that might need experimental tuning via cross-validation."
msgstr ""

#: ../modules/mixture.rst
msgid "Bias"
msgstr ""

#: ../modules/mixture.rst:285
msgid "there are many implicit biases in the inference algorithms (and also in the Dirichlet process if used), and whenever there is a mismatch between these biases and the data it might be possible to fit better models using a finite mixture."
msgstr ""

#: ../modules/mixture.rst:294
msgid "The Dirichlet Process"
msgstr ""

#: ../modules/mixture.rst:296
msgid "Here we describe variational inference algorithms on Dirichlet process mixture. The Dirichlet process is a prior probability distribution on *clusterings with an infinite, unbounded, number of partitions*. Variational techniques let us incorporate this prior structure on Gaussian mixture models at almost no penalty in inference time, comparing with a finite Gaussian mixture model."
msgstr ""

#: ../modules/mixture.rst:303
msgid "An important question is how can the Dirichlet process use an infinite, unbounded number of clusters and still be consistent. While a full explanation doesn't fit this manual, one can think of its `stick breaking process <https://en.wikipedia.org/wiki/Dirichlet_process#The_stick-breaking_process>`_ analogy to help understanding it. The stick breaking process is a generative story for the Dirichlet process. We start with a unit-length stick and in each step we break off a portion of the remaining stick. Each time, we associate the length of the piece of the stick to the proportion of points that falls into a group of the mixture. At the end, to represent the infinite mixture, we associate the last remaining piece of the stick to the proportion of points that don't fall into all the other groups. The length of each piece is a random variable with probability proportional to the concentration parameter. Smaller value of the concentration will divide the unit-length into larger pieces of the stick (defining more concentrated distribution). Larger concentration values will create smaller pieces of the stick (increasing the number of components with non zero weights)."
msgstr ""

#: ../modules/mixture.rst:320
msgid "Variational inference techniques for the Dirichlet process still work with a finite approximation to this infinite mixture model, but instead of having to specify a priori how many components one wants to use, one just specifies the concentration parameter and an upper bound on the number of mixture components (this upper bound, assuming it is higher than the \"true\" number of components, affects only algorithmic complexity, not the actual number of components used)."
msgstr ""

