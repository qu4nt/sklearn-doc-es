msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:14\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/multiclass.po\n"
"X-Crowdin-File-ID: 3908\n"
"Language: es_ES\n"

#: ../modules/multiclass.rst:6
msgid "Multiclass and multioutput algorithms"
msgstr ""

#: ../modules/multiclass.rst:8
msgid "This section of the user guide covers functionality related to multi-learning problems, including :term:`multiclass`, :term:`multilabel`, and :term:`multioutput` classification and regression."
msgstr ""

#: ../modules/multiclass.rst:12
msgid "The modules in this section implement :term:`meta-estimators`, which require a base estimator to be provided in their constructor. Meta-estimators extend the functionality of the base estimator to support multi-learning problems, which is accomplished by transforming the multi-learning problem into a set of simpler problems, then fitting one estimator per problem."
msgstr ""

#: ../modules/multiclass.rst:18
msgid "This section covers two modules: :mod:`sklearn.multiclass` and :mod:`sklearn.multioutput`. The chart below demonstrates the problem types that each module is responsible for, and the corresponding meta-estimators that each module provides."
msgstr ""

#: ../modules/multiclass.rst:26
msgid "The table below provides a quick reference on the differences between problem types. More detailed explanations can be found in subsequent sections of this guide."
msgstr ""

#: ../modules/multiclass.rst:31
msgid "Number of targets"
msgstr ""

#: ../modules/multiclass.rst:31
msgid "Target cardinality"
msgstr ""

#: ../modules/multiclass.rst:31
msgid "Valid :func:`~sklearn.utils.multiclass.type_of_target`"
msgstr ""

#: ../modules/multiclass.rst:34 ../modules/multiclass.rst:120
msgid "Multiclass classification"
msgstr ""

#: ../modules/multiclass.rst:34
msgid "1"
msgstr ""

#: ../modules/multiclass.rst:34 ../modules/multiclass.rst:40
msgid ">2"
msgstr ""

#: ../modules/multiclass.rst:34
msgid "'multiclass'"
msgstr ""

#: ../modules/multiclass.rst:37 ../modules/multiclass.rst:343
msgid "Multilabel classification"
msgstr ""

#: ../modules/multiclass.rst:37 ../modules/multiclass.rst:40
#: ../modules/multiclass.rst:43
msgid ">1"
msgstr ""

#: ../modules/multiclass.rst:37
msgid "2 (0 or 1)"
msgstr ""

#: ../modules/multiclass.rst:37
msgid "'multilabel-indicator'"
msgstr ""

#: ../modules/multiclass.rst:40 ../modules/multiclass.rst:465
msgid "Multiclass-multioutput classification"
msgstr ""

#: ../modules/multiclass.rst:40
msgid "'multiclass-multioutput'"
msgstr ""

#: ../modules/multiclass.rst:43 ../modules/multiclass.rst:510
msgid "Multioutput regression"
msgstr ""

#: ../modules/multiclass.rst:43
msgid "Continuous"
msgstr ""

#: ../modules/multiclass.rst:43
msgid "'continuous-multioutput'"
msgstr ""

#: ../modules/multiclass.rst:47
msgid "Below is a summary of scikit-learn estimators that have multi-learning support built-in, grouped by strategy. You don't need the meta-estimators provided by this section if you're using one of these estimators. However, meta-estimators can provide additional strategies beyond what is built-in:"
msgstr ""

#: ../modules/multiclass.rst:54
msgid "**Inherently multiclass:**"
msgstr ""

#: ../modules/multiclass.rst:56
msgid ":class:`naive_bayes.BernoulliNB`"
msgstr ""

#: ../modules/multiclass.rst:57 ../modules/multiclass.rst:98
#: ../modules/multiclass.rst:110
msgid ":class:`tree.DecisionTreeClassifier`"
msgstr ""

#: ../modules/multiclass.rst:58 ../modules/multiclass.rst:99
#: ../modules/multiclass.rst:111
msgid ":class:`tree.ExtraTreeClassifier`"
msgstr ""

#: ../modules/multiclass.rst:59 ../modules/multiclass.rst:100
#: ../modules/multiclass.rst:112
msgid ":class:`ensemble.ExtraTreesClassifier`"
msgstr ""

#: ../modules/multiclass.rst:60
msgid ":class:`naive_bayes.GaussianNB`"
msgstr ""

#: ../modules/multiclass.rst:61 ../modules/multiclass.rst:101
#: ../modules/multiclass.rst:113
msgid ":class:`neighbors.KNeighborsClassifier`"
msgstr ""

#: ../modules/multiclass.rst:62
msgid ":class:`semi_supervised.LabelPropagation`"
msgstr ""

#: ../modules/multiclass.rst:63
msgid ":class:`semi_supervised.LabelSpreading`"
msgstr ""

#: ../modules/multiclass.rst:64
msgid ":class:`discriminant_analysis.LinearDiscriminantAnalysis`"
msgstr ""

#: ../modules/multiclass.rst:65
msgid ":class:`svm.LinearSVC` (setting multi_class=\"crammer_singer\")"
msgstr ""

#: ../modules/multiclass.rst:66
msgid ":class:`linear_model.LogisticRegression` (setting multi_class=\"multinomial\")"
msgstr ""

#: ../modules/multiclass.rst:67
msgid ":class:`linear_model.LogisticRegressionCV` (setting multi_class=\"multinomial\")"
msgstr ""

#: ../modules/multiclass.rst:68 ../modules/multiclass.rst:102
msgid ":class:`neural_network.MLPClassifier`"
msgstr ""

#: ../modules/multiclass.rst:69
msgid ":class:`neighbors.NearestCentroid`"
msgstr ""

#: ../modules/multiclass.rst:70
msgid ":class:`discriminant_analysis.QuadraticDiscriminantAnalysis`"
msgstr ""

#: ../modules/multiclass.rst:71 ../modules/multiclass.rst:103
#: ../modules/multiclass.rst:114
msgid ":class:`neighbors.RadiusNeighborsClassifier`"
msgstr ""

#: ../modules/multiclass.rst:72 ../modules/multiclass.rst:104
#: ../modules/multiclass.rst:115
msgid ":class:`ensemble.RandomForestClassifier`"
msgstr ""

#: ../modules/multiclass.rst:73
msgid ":class:`linear_model.RidgeClassifier`"
msgstr ""

#: ../modules/multiclass.rst:74 ../modules/multiclass.rst:105
msgid ":class:`linear_model.RidgeClassifierCV`"
msgstr ""

#: ../modules/multiclass.rst:77
msgid "**Multiclass as One-Vs-One:**"
msgstr ""

#: ../modules/multiclass.rst:79
msgid ":class:`svm.NuSVC`"
msgstr ""

#: ../modules/multiclass.rst:80
msgid ":class:`svm.SVC`."
msgstr ""

#: ../modules/multiclass.rst:81
msgid ":class:`gaussian_process.GaussianProcessClassifier` (setting multi_class = \"one_vs_one\")"
msgstr ""

#: ../modules/multiclass.rst:84
msgid "**Multiclass as One-Vs-The-Rest:**"
msgstr ""

#: ../modules/multiclass.rst:86
msgid ":class:`ensemble.GradientBoostingClassifier`"
msgstr ""

#: ../modules/multiclass.rst:87
msgid ":class:`gaussian_process.GaussianProcessClassifier` (setting multi_class = \"one_vs_rest\")"
msgstr ""

#: ../modules/multiclass.rst:88
msgid ":class:`svm.LinearSVC` (setting multi_class=\"ovr\")"
msgstr ""

#: ../modules/multiclass.rst:89
msgid ":class:`linear_model.LogisticRegression` (setting multi_class=\"ovr\")"
msgstr ""

#: ../modules/multiclass.rst:90
msgid ":class:`linear_model.LogisticRegressionCV` (setting multi_class=\"ovr\")"
msgstr ""

#: ../modules/multiclass.rst:91
msgid ":class:`linear_model.SGDClassifier`"
msgstr ""

#: ../modules/multiclass.rst:92
msgid ":class:`linear_model.Perceptron`"
msgstr ""

#: ../modules/multiclass.rst:93
msgid ":class:`linear_model.PassiveAggressiveClassifier`"
msgstr ""

#: ../modules/multiclass.rst:96
msgid "**Support multilabel:**"
msgstr ""

#: ../modules/multiclass.rst:108
msgid "**Support multiclass-multioutput:**"
msgstr ""

#: ../modules/multiclass.rst:123
msgid "All classifiers in scikit-learn do multiclass classification out-of-the-box. You don't need to use the :mod:`sklearn.multiclass` module unless you want to experiment with different multiclass strategies."
msgstr ""

#: ../modules/multiclass.rst:127
msgid "**Multiclass classification** is a classification task with more than two classes. Each sample can only be labeled as one class."
msgstr ""

#: ../modules/multiclass.rst:130
msgid "For example, classification using features extracted from a set of images of fruit, where each image may either be of an orange, an apple, or a pear. Each image is one sample and is labeled as one of the 3 possible classes. Multiclass classification makes the assumption that each sample is assigned to one and only one label - one sample cannot, for example, be both a pear and an apple."
msgstr ""

#: ../modules/multiclass.rst:137
msgid "While all scikit-learn classifiers are capable of multiclass classification, the meta-estimators offered by :mod:`sklearn.multiclass` permit changing the way they handle more than two classes because this may have an effect on classifier performance (either in terms of generalization error or required computational resources)."
msgstr ""

#: ../modules/multiclass.rst:144 ../modules/multiclass.rst:363
#: ../modules/multiclass.rst:495 ../modules/multiclass.rst:524
msgid "Target format"
msgstr ""

#: ../modules/multiclass.rst:146
msgid "Valid :term:`multiclass` representations for :func:`~sklearn.utils.multiclass.type_of_target` (`y`) are:"
msgstr ""

#: ../modules/multiclass.rst:149
msgid "1d or column vector containing more than two discrete values. An example of a vector ``y`` for 4 samples:"
msgstr ""

#: ../modules/multiclass.rst:157
msgid "Dense or sparse :term:`binary` matrix of shape ``(n_samples, n_classes)`` with a single sample per row, where each column represents one class. An example of both a dense and sparse :term:`binary` matrix ``y`` for 4 samples, where the columns, in order, are apple, orange, and pear:"
msgstr ""

#: ../modules/multiclass.rst:179
msgid "For more information about :class:`~sklearn.preprocessing.LabelBinarizer`, refer to :ref:`preprocessing_targets`."
msgstr ""

#: ../modules/multiclass.rst:185
msgid "OneVsRestClassifier"
msgstr ""

#: ../modules/multiclass.rst:187
msgid "The **one-vs-rest** strategy, also known as **one-vs-all**, is implemented in :class:`~sklearn.multiclass.OneVsRestClassifier`.  The strategy consists in fitting one classifier per class. For each classifier, the class is fitted against all the other classes. In addition to its computational efficiency (only `n_classes` classifiers are needed), one advantage of this approach is its interpretability. Since each class is represented by one and only one classifier, it is possible to gain knowledge about the class by inspecting its corresponding classifier. This is the most commonly used strategy and is a fair default choice."
msgstr ""

#: ../modules/multiclass.rst:197
msgid "Below is an example of multiclass learning using OvR::"
msgstr ""

#: ../modules/multiclass.rst:213
msgid ":class:`~sklearn.multiclass.OneVsRestClassifier` also supports multilabel classification. To use this feature, feed the classifier an indicator matrix, in which cell [i, j] indicates the presence of label j in sample i."
msgstr ""

#: ../modules/multiclass.rst:226
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_multilabel.py`"
msgstr ""

#: ../modules/multiclass.rst:231
msgid "OneVsOneClassifier"
msgstr ""

#: ../modules/multiclass.rst:233
msgid ":class:`~sklearn.multiclass.OneVsOneClassifier` constructs one classifier per pair of classes. At prediction time, the class which received the most votes is selected. In the event of a tie (among two classes with an equal number of votes), it selects the class with the highest aggregate classification confidence by summing over the pair-wise classification confidence levels computed by the underlying binary classifiers."
msgstr ""

#: ../modules/multiclass.rst:240
msgid "Since it requires to fit ``n_classes * (n_classes - 1) / 2`` classifiers, this method is usually slower than one-vs-the-rest, due to its O(n_classes^2) complexity. However, this method may be advantageous for algorithms such as kernel algorithms which don't scale well with ``n_samples``. This is because each individual learning problem only involves a small subset of the data whereas, with one-vs-the-rest, the complete dataset is used ``n_classes`` times. The decision function is the result of a monotonic transformation of the one-versus-one classification."
msgstr ""

#: ../modules/multiclass.rst:249
msgid "Below is an example of multiclass learning using OvO::"
msgstr ""

#: ../modules/multiclass.rst:267
msgid "\"Pattern Recognition and Machine Learning. Springer\", Christopher M. Bishop, page 183, (First Edition)"
msgstr ""

#: ../modules/multiclass.rst:273
msgid "OutputCodeClassifier"
msgstr ""

#: ../modules/multiclass.rst:275
msgid "Error-Correcting Output Code-based strategies are fairly different from one-vs-the-rest and one-vs-one. With these strategies, each class is represented in a Euclidean space, where each dimension can only be 0 or 1. Another way to put it is that each class is represented by a binary code (an array of 0 and 1). The matrix which keeps track of the location/code of each class is called the code book. The code size is the dimensionality of the aforementioned space. Intuitively, each class should be represented by a code as unique as possible and a good code book should be designed to optimize classification accuracy. In this implementation, we simply use a randomly-generated code book as advocated in [3]_ although more elaborate methods may be added in the future."
msgstr ""

#: ../modules/multiclass.rst:287
msgid "At fitting time, one binary classifier per bit in the code book is fitted. At prediction time, the classifiers are used to project new points in the class space and the class closest to the points is chosen."
msgstr ""

#: ../modules/multiclass.rst:291
msgid "In :class:`~sklearn.multiclass.OutputCodeClassifier`, the ``code_size`` attribute allows the user to control the number of classifiers which will be used. It is a percentage of the total number of classes."
msgstr ""

#: ../modules/multiclass.rst:295
msgid "A number between 0 and 1 will require fewer classifiers than one-vs-the-rest. In theory, ``log2(n_classes) / n_classes`` is sufficient to represent each class unambiguously. However, in practice, it may not lead to good accuracy since ``log2(n_classes)`` is much smaller than n_classes."
msgstr ""

#: ../modules/multiclass.rst:300
msgid "A number greater than 1 will require more classifiers than one-vs-the-rest. In this case, some classifiers will in theory correct for the mistakes made by other classifiers, hence the name \"error-correcting\". In practice, however, this may not happen as classifier mistakes will typically be correlated. The error-correcting output codes have a similar effect to bagging."
msgstr ""

#: ../modules/multiclass.rst:307
msgid "Below is an example of multiclass learning using Output-Codes::"
msgstr ""

#: ../modules/multiclass.rst:326
msgid "\"Solving multiclass learning problems via error-correcting output codes\", Dietterich T., Bakiri G., Journal of Artificial Intelligence Research 2, 1995."
msgstr ""

#: ../modules/multiclass.rst:331
msgid "\"The error coding method and PICTs\", James G., Hastie T., Journal of Computational and Graphical statistics 7, 1998."
msgstr ""

#: ../modules/multiclass.rst:336
msgid "\"The Elements of Statistical Learning\", Hastie T., Tibshirani R., Friedman J., page 606 (second-edition) 2008."
msgstr ""

#: ../modules/multiclass.rst:345
msgid "**Multilabel classification** (closely related to **multioutput** **classification**) is a classification task labeling each sample with ``m`` labels from ``n_classes`` possible classes, where ``m`` can be 0 to ``n_classes`` inclusive. This can be thought of as predicting properties of a sample that are not mutually exclusive. Formally, a binary output is assigned to each class, for every sample. Positive classes are indicated with 1 and negative classes with 0 or -1. It is thus comparable to running ``n_classes`` binary classification tasks, for example with :class:`~sklearn.multioutput.MultiOutputClassifier`. This approach treats each label independently whereas multilabel classifiers *may* treat the multiple classes simultaneously, accounting for correlated behavior among them."
msgstr ""

#: ../modules/multiclass.rst:358
msgid "For example, prediction of the topics relevant to a text document or video. The document or video may be about one of 'religion', 'politics', 'finance' or 'education', several of the topic classes or all of the topic classes."
msgstr ""

#: ../modules/multiclass.rst:365
msgid "A valid representation of :term:`multilabel` `y` is an either dense or sparse :term:`binary` matrix of shape ``(n_samples, n_classes)``. Each column represents a class. The ``1``'s in each row denote the positive classes a sample has been labeled with. An example of a dense matrix ``y`` for 3 samples:"
msgstr ""

#: ../modules/multiclass.rst:377
msgid "Dense binary matrices can also be created using :class:`~sklearn.preprocessing.MultiLabelBinarizer`. For more information, refer to :ref:`preprocessing_targets`."
msgstr ""

#: ../modules/multiclass.rst:381
msgid "An example of the same ``y`` in sparse matrix form:"
msgstr ""

#: ../modules/multiclass.rst:393
msgid "MultiOutputClassifier"
msgstr ""

#: ../modules/multiclass.rst:395
msgid "Multilabel classification support can be added to any classifier with :class:`~sklearn.multioutput.MultiOutputClassifier`. This strategy consists of fitting one classifier per target.  This allows multiple target variable classifications. The purpose of this class is to extend estimators to be able to estimate a series of target functions (f1,f2,f3...,fn) that are trained on a single X predictor matrix to predict a series of responses (y1,y2,y3...,yn)."
msgstr ""

#: ../modules/multiclass.rst:403
msgid "Below is an example of multilabel classification:"
msgstr ""

#: ../modules/multiclass.rst:434
msgid "ClassifierChain"
msgstr ""

#: ../modules/multiclass.rst:436
msgid "Classifier chains (see :class:`~sklearn.multioutput.ClassifierChain`) are a way of combining a number of binary classifiers into a single multi-label model that is capable of exploiting correlations among targets."
msgstr ""

#: ../modules/multiclass.rst:440
msgid "For a multi-label classification problem with N classes, N binary classifiers are assigned an integer between 0 and N-1. These integers define the order of models in the chain. Each classifier is then fit on the available training data plus the true labels of the classes whose models were assigned a lower number."
msgstr ""

#: ../modules/multiclass.rst:446
msgid "When predicting, the true labels will not be available. Instead the predictions of each model are passed on to the subsequent models in the chain to be used as features."
msgstr ""

#: ../modules/multiclass.rst:450
msgid "Clearly the order of the chain is important. The first model in the chain has no information about the other labels while the last model in the chain has features indicating the presence of all of the other labels. In general one does not know the optimal ordering of the models in the chain so typically many randomly ordered chains are fit and their predictions are averaged together."
msgstr ""

#: ../modules/multiclass.rst:459
msgid "Jesse Read, Bernhard Pfahringer, Geoff Holmes, Eibe Frank,"
msgstr ""

#: ../modules/multiclass.rst:460
msgid "\"Classifier Chains for Multi-label Classification\", 2009."
msgstr ""

#: ../modules/multiclass.rst:467
msgid "**Multiclass-multioutput classification** (also known as **multitask classification**) is a classification task which labels each sample with a set of **non-binary** properties. Both the number of properties and the number of classes per property is greater than 2. A single estimator thus handles several joint classification tasks. This is both a generalization of the multi\\ *label* classification task, which only considers binary attributes, as well as a generalization of the multi\\ *class* classification task, where only one property is considered."
msgstr ""

#: ../modules/multiclass.rst:477
msgid "For example, classification of the properties \"type of fruit\" and \"colour\" for a set of images of fruit. The property \"type of fruit\" has the possible classes: \"apple\", \"pear\" and \"orange\". The property \"colour\" has the possible classes: \"green\", \"red\", \"yellow\" and \"orange\". Each sample is an image of a fruit, a label is output for both properties and each label is one of the possible classes of the corresponding property."
msgstr ""

#: ../modules/multiclass.rst:484
msgid "Note that all classifiers handling multiclass-multioutput (also known as multitask classification) tasks, support the multilabel classification task as a special case. Multitask classification is similar to the multioutput classification task with different model formulations. For more information, see the relevant estimator documentation."
msgstr ""

#: ../modules/multiclass.rst:491
msgid "At present, no metric in :mod:`sklearn.metrics` supports the multiclass-multioutput classification task."
msgstr ""

#: ../modules/multiclass.rst:497
msgid "A valid representation of :term:`multioutput` `y` is a dense matrix of shape ``(n_samples, n_classes)`` of class labels. A column wise concatenation of 1d :term:`multiclass` variables. An example of ``y`` for 3 samples:"
msgstr ""

#: ../modules/multiclass.rst:512
msgid "**Multioutput regression** predicts multiple numerical properties for each sample. Each property is a numerical variable and the number of properties to be predicted for each sample is greater than or equal to 2. Some estimators that support multioutput regression are faster than just running ``n_output`` estimators."
msgstr ""

#: ../modules/multiclass.rst:518
msgid "For example, prediction of both wind speed and wind direction, in degrees, using data obtained at a certain location. Each sample would be data obtained at one location and both wind speed and direction would be output for each sample."
msgstr ""

#: ../modules/multiclass.rst:526
msgid "A valid representation of :term:`multioutput` `y` is a dense matrix of shape ``(n_samples, n_classes)`` of floats. A column wise concatenation of :term:`continuous` variables. An example of ``y`` for 3 samples:"
msgstr ""

#: ../modules/multiclass.rst:539
msgid "MultiOutputRegressor"
msgstr ""

#: ../modules/multiclass.rst:541
msgid "Multioutput regression support can be added to any regressor with :class:`~sklearn.multioutput.MultiOutputRegressor`.  This strategy consists of fitting one regressor per target. Since each target is represented by exactly one regressor it is possible to gain knowledge about the target by inspecting its corresponding regressor. As :class:`~sklearn.multioutput.MultiOutputRegressor` fits one regressor per target it can not take advantage of correlations between targets."
msgstr ""

#: ../modules/multiclass.rst:549
msgid "Below is an example of multioutput regression:"
msgstr ""

#: ../modules/multiclass.rst:570
msgid "RegressorChain"
msgstr ""

#: ../modules/multiclass.rst:572
msgid "Regressor chains (see :class:`~sklearn.multioutput.RegressorChain`) is analogous to :class:`~sklearn.multioutput.ClassifierChain` as a way of combining a number of regressions into a single multi-target model that is capable of exploiting correlations among targets."
msgstr ""

