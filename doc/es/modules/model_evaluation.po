msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:14\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/model_evaluation.po\n"
"X-Crowdin-File-ID: 3904\n"
"Language: es_ES\n"

#: ../modules/model_evaluation.rst:7
msgid "Metrics and scoring: quantifying the quality of predictions"
msgstr ""

#: ../modules/model_evaluation.rst:9
msgid "There are 3 different APIs for evaluating the quality of a model's predictions:"
msgstr ""

#: ../modules/model_evaluation.rst:12
msgid "**Estimator score method**: Estimators have a ``score`` method providing a default evaluation criterion for the problem they are designed to solve. This is not discussed on this page, but in each estimator's documentation."
msgstr ""

#: ../modules/model_evaluation.rst:16
msgid "**Scoring parameter**: Model-evaluation tools using :ref:`cross-validation <cross_validation>` (such as :func:`model_selection.cross_val_score` and :class:`model_selection.GridSearchCV`) rely on an internal *scoring* strategy. This is discussed in the section :ref:`scoring_parameter`."
msgstr ""

#: ../modules/model_evaluation.rst:22
msgid "**Metric functions**: The :mod:`sklearn.metrics` module implements functions assessing prediction error for specific purposes. These metrics are detailed in sections on :ref:`classification_metrics`, :ref:`multilabel_ranking_metrics`, :ref:`regression_metrics` and :ref:`clustering_metrics`."
msgstr ""

#: ../modules/model_evaluation.rst:28
msgid "Finally, :ref:`dummy_estimators` are useful to get a baseline value of those metrics for random predictions."
msgstr ""

#: ../modules/model_evaluation.rst:33
msgid "For \"pairwise\" metrics, between *samples* and not estimators or predictions, see the :ref:`metrics` section."
msgstr ""

#: ../modules/model_evaluation.rst:39
msgid "The ``scoring`` parameter: defining model evaluation rules"
msgstr ""

#: ../modules/model_evaluation.rst:41
msgid "Model selection and evaluation using tools, such as :class:`model_selection.GridSearchCV` and :func:`model_selection.cross_val_score`, take a ``scoring`` parameter that controls what metric they apply to the estimators evaluated."
msgstr ""

#: ../modules/model_evaluation.rst:47
msgid "Common cases: predefined values"
msgstr ""

#: ../modules/model_evaluation.rst:49
msgid "For the most common use cases, you can designate a scorer object with the ``scoring`` parameter; the table below shows all possible values. All scorer objects follow the convention that **higher return values are better than lower return values**.  Thus metrics which measure the distance between the model and the data, like :func:`metrics.mean_squared_error`, are available as neg_mean_squared_error which return the negated value of the metric."
msgstr ""

#: ../modules/model_evaluation.rst:58
msgid "Scoring"
msgstr ""

#: ../modules/model_evaluation.rst:58
msgid "Function"
msgstr ""

#: ../modules/model_evaluation.rst:58
msgid "Comment"
msgstr ""

#: ../modules/model_evaluation.rst:60
msgid "**Classification**"
msgstr ""

#: ../modules/model_evaluation.rst:61
msgid "'accuracy'"
msgstr ""

#: ../modules/model_evaluation.rst:61
msgid ":func:`metrics.accuracy_score`"
msgstr ""

#: ../modules/model_evaluation.rst:62
msgid "'balanced_accuracy'"
msgstr ""

#: ../modules/model_evaluation.rst:62
msgid ":func:`metrics.balanced_accuracy_score`"
msgstr ""

#: ../modules/model_evaluation.rst:63
msgid "'top_k_accuracy'"
msgstr ""

#: ../modules/model_evaluation.rst:63
msgid ":func:`metrics.top_k_accuracy_score`"
msgstr ""

#: ../modules/model_evaluation.rst:64
msgid "'average_precision'"
msgstr ""

#: ../modules/model_evaluation.rst:64
msgid ":func:`metrics.average_precision_score`"
msgstr ""

#: ../modules/model_evaluation.rst:65
msgid "'neg_brier_score'"
msgstr ""

#: ../modules/model_evaluation.rst:65
msgid ":func:`metrics.brier_score_loss`"
msgstr ""

#: ../modules/model_evaluation.rst:66
msgid "'f1'"
msgstr ""

#: ../modules/model_evaluation.rst:66 ../modules/model_evaluation.rst:67
#: ../modules/model_evaluation.rst:68 ../modules/model_evaluation.rst:69
#: ../modules/model_evaluation.rst:70
msgid ":func:`metrics.f1_score`"
msgstr ""

#: ../modules/model_evaluation.rst:66
msgid "for binary targets"
msgstr ""

#: ../modules/model_evaluation.rst:67
msgid "'f1_micro'"
msgstr ""

#: ../modules/model_evaluation.rst:67
msgid "micro-averaged"
msgstr ""

#: ../modules/model_evaluation.rst:68
msgid "'f1_macro'"
msgstr ""

#: ../modules/model_evaluation.rst:68
msgid "macro-averaged"
msgstr ""

#: ../modules/model_evaluation.rst:69
msgid "'f1_weighted'"
msgstr ""

#: ../modules/model_evaluation.rst:69
msgid "weighted average"
msgstr ""

#: ../modules/model_evaluation.rst:70
msgid "'f1_samples'"
msgstr ""

#: ../modules/model_evaluation.rst:70
msgid "by multilabel sample"
msgstr ""

#: ../modules/model_evaluation.rst:71
msgid "'neg_log_loss'"
msgstr ""

#: ../modules/model_evaluation.rst:71
msgid ":func:`metrics.log_loss`"
msgstr ""

#: ../modules/model_evaluation.rst:71
msgid "requires ``predict_proba`` support"
msgstr ""

#: ../modules/model_evaluation.rst:72
msgid "'precision' etc."
msgstr ""

#: ../modules/model_evaluation.rst:72
msgid ":func:`metrics.precision_score`"
msgstr ""

#: ../modules/model_evaluation.rst:72 ../modules/model_evaluation.rst:73
#: ../modules/model_evaluation.rst:74
msgid "suffixes apply as with 'f1'"
msgstr ""

#: ../modules/model_evaluation.rst:73
msgid "'recall' etc."
msgstr ""

#: ../modules/model_evaluation.rst:73
msgid ":func:`metrics.recall_score`"
msgstr ""

#: ../modules/model_evaluation.rst:74
msgid "'jaccard' etc."
msgstr ""

#: ../modules/model_evaluation.rst:74
msgid ":func:`metrics.jaccard_score`"
msgstr ""

#: ../modules/model_evaluation.rst:75
msgid "'roc_auc'"
msgstr ""

#: ../modules/model_evaluation.rst:75 ../modules/model_evaluation.rst:76
#: ../modules/model_evaluation.rst:77 ../modules/model_evaluation.rst:78
#: ../modules/model_evaluation.rst:79
msgid ":func:`metrics.roc_auc_score`"
msgstr ""

#: ../modules/model_evaluation.rst:76
msgid "'roc_auc_ovr'"
msgstr ""

#: ../modules/model_evaluation.rst:77
msgid "'roc_auc_ovo'"
msgstr ""

#: ../modules/model_evaluation.rst:78
msgid "'roc_auc_ovr_weighted'"
msgstr ""

#: ../modules/model_evaluation.rst:79
msgid "'roc_auc_ovo_weighted'"
msgstr ""

#: ../modules/model_evaluation.rst:81
msgid "**Clustering**"
msgstr ""

#: ../modules/model_evaluation.rst:82
msgid "'adjusted_mutual_info_score'"
msgstr ""

#: ../modules/model_evaluation.rst:82
msgid ":func:`metrics.adjusted_mutual_info_score`"
msgstr ""

#: ../modules/model_evaluation.rst:83
msgid "'adjusted_rand_score'"
msgstr ""

#: ../modules/model_evaluation.rst:83
msgid ":func:`metrics.adjusted_rand_score`"
msgstr ""

#: ../modules/model_evaluation.rst:84
msgid "'completeness_score'"
msgstr ""

#: ../modules/model_evaluation.rst:84
msgid ":func:`metrics.completeness_score`"
msgstr ""

#: ../modules/model_evaluation.rst:85
msgid "'fowlkes_mallows_score'"
msgstr ""

#: ../modules/model_evaluation.rst:85
msgid ":func:`metrics.fowlkes_mallows_score`"
msgstr ""

#: ../modules/model_evaluation.rst:86
msgid "'homogeneity_score'"
msgstr ""

#: ../modules/model_evaluation.rst:86
msgid ":func:`metrics.homogeneity_score`"
msgstr ""

#: ../modules/model_evaluation.rst:87
msgid "'mutual_info_score'"
msgstr ""

#: ../modules/model_evaluation.rst:87
msgid ":func:`metrics.mutual_info_score`"
msgstr ""

#: ../modules/model_evaluation.rst:88
msgid "'normalized_mutual_info_score'"
msgstr ""

#: ../modules/model_evaluation.rst:88
msgid ":func:`metrics.normalized_mutual_info_score`"
msgstr ""

#: ../modules/model_evaluation.rst:89
msgid "'rand_score'"
msgstr ""

#: ../modules/model_evaluation.rst:89
msgid ":func:`metrics.rand_score`"
msgstr ""

#: ../modules/model_evaluation.rst:90
msgid "'v_measure_score'"
msgstr ""

#: ../modules/model_evaluation.rst:90
msgid ":func:`metrics.v_measure_score`"
msgstr ""

#: ../modules/model_evaluation.rst:92
msgid "**Regression**"
msgstr ""

#: ../modules/model_evaluation.rst:93
msgid "'explained_variance'"
msgstr ""

#: ../modules/model_evaluation.rst:93
msgid ":func:`metrics.explained_variance_score`"
msgstr ""

#: ../modules/model_evaluation.rst:94
msgid "'max_error'"
msgstr ""

#: ../modules/model_evaluation.rst:94
msgid ":func:`metrics.max_error`"
msgstr ""

#: ../modules/model_evaluation.rst:95
msgid "'neg_mean_absolute_error'"
msgstr ""

#: ../modules/model_evaluation.rst:95
msgid ":func:`metrics.mean_absolute_error`"
msgstr ""

#: ../modules/model_evaluation.rst:96
msgid "'neg_mean_squared_error'"
msgstr ""

#: ../modules/model_evaluation.rst:96 ../modules/model_evaluation.rst:97
msgid ":func:`metrics.mean_squared_error`"
msgstr ""

#: ../modules/model_evaluation.rst:97
msgid "'neg_root_mean_squared_error'"
msgstr ""

#: ../modules/model_evaluation.rst:98
msgid "'neg_mean_squared_log_error'"
msgstr ""

#: ../modules/model_evaluation.rst:98
msgid ":func:`metrics.mean_squared_log_error`"
msgstr ""

#: ../modules/model_evaluation.rst:99
msgid "'neg_median_absolute_error'"
msgstr ""

#: ../modules/model_evaluation.rst:99
msgid ":func:`metrics.median_absolute_error`"
msgstr ""

#: ../modules/model_evaluation.rst:100
msgid "'r2'"
msgstr ""

#: ../modules/model_evaluation.rst:100
msgid ":func:`metrics.r2_score`"
msgstr ""

#: ../modules/model_evaluation.rst:101
msgid "'neg_mean_poisson_deviance'"
msgstr ""

#: ../modules/model_evaluation.rst:101
msgid ":func:`metrics.mean_poisson_deviance`"
msgstr ""

#: ../modules/model_evaluation.rst:102
msgid "'neg_mean_gamma_deviance'"
msgstr ""

#: ../modules/model_evaluation.rst:102
msgid ":func:`metrics.mean_gamma_deviance`"
msgstr ""

#: ../modules/model_evaluation.rst:103
msgid "'neg_mean_absolute_percentage_error'"
msgstr ""

#: ../modules/model_evaluation.rst:103
msgid ":func:`metrics.mean_absolute_percentage_error`"
msgstr ""

#: ../modules/model_evaluation.rst:107
msgid "Usage examples:"
msgstr ""

#: ../modules/model_evaluation.rst:122
msgid "The values listed by the ``ValueError`` exception correspond to the functions measuring prediction accuracy described in the following sections. The scorer objects for those functions are stored in the dictionary ``sklearn.metrics.SCORERS``."
msgstr ""

#: ../modules/model_evaluation.rst:132
msgid "Defining your scoring strategy from metric functions"
msgstr ""

#: ../modules/model_evaluation.rst:134
msgid "The module :mod:`sklearn.metrics` also exposes a set of simple functions measuring a prediction error given ground truth and prediction:"
msgstr ""

#: ../modules/model_evaluation.rst:137
msgid "functions ending with ``_score`` return a value to maximize, the higher the better."
msgstr ""

#: ../modules/model_evaluation.rst:140
msgid "functions ending with ``_error`` or ``_loss`` return a value to minimize, the lower the better.  When converting into a scorer object using :func:`make_scorer`, set the ``greater_is_better`` parameter to ``False`` (``True`` by default; see the parameter description below)."
msgstr ""

#: ../modules/model_evaluation.rst:146
msgid "Metrics available for various machine learning tasks are detailed in sections below."
msgstr ""

#: ../modules/model_evaluation.rst:149
msgid "Many metrics are not given names to be used as ``scoring`` values, sometimes because they require additional parameters, such as :func:`fbeta_score`. In such cases, you need to generate an appropriate scoring object.  The simplest way to generate a callable object for scoring is by using :func:`make_scorer`. That function converts metrics into callables that can be used for model evaluation."
msgstr ""

#: ../modules/model_evaluation.rst:156
msgid "One typical use case is to wrap an existing metric function from the library with non-default values for its parameters, such as the ``beta`` parameter for the :func:`fbeta_score` function::"
msgstr ""

#: ../modules/model_evaluation.rst:167
msgid "The second use case is to build a completely custom scorer object from a simple python function using :func:`make_scorer`, which can take several parameters:"
msgstr ""

#: ../modules/model_evaluation.rst:171
msgid "the python function you want to use (``my_custom_loss_func`` in the example below)"
msgstr ""

#: ../modules/model_evaluation.rst:174
msgid "whether the python function returns a score (``greater_is_better=True``, the default) or a loss (``greater_is_better=False``).  If a loss, the output of the python function is negated by the scorer object, conforming to the cross validation convention that scorers return higher values for better models."
msgstr ""

#: ../modules/model_evaluation.rst:179
msgid "for classification metrics only: whether the python function you provided requires continuous decision certainties (``needs_threshold=True``).  The default value is False."
msgstr ""

#: ../modules/model_evaluation.rst:183
msgid "any additional parameters, such as ``beta`` or ``labels`` in :func:`f1_score`."
msgstr ""

#: ../modules/model_evaluation.rst:185
msgid "Here is an example of building custom scorers, and of using the ``greater_is_better`` parameter::"
msgstr ""

#: ../modules/model_evaluation.rst:211
msgid "Implementing your own scoring object"
msgstr ""

#: ../modules/model_evaluation.rst:212
msgid "You can generate even more flexible model scorers by constructing your own scoring object from scratch, without using the :func:`make_scorer` factory. For a callable to be a scorer, it needs to meet the protocol specified by the following two rules:"
msgstr ""

#: ../modules/model_evaluation.rst:217
msgid "It can be called with parameters ``(estimator, X, y)``, where ``estimator`` is the model that should be evaluated, ``X`` is validation data, and ``y`` is the ground truth target for ``X`` (in the supervised case) or ``None`` (in the unsupervised case)."
msgstr ""

#: ../modules/model_evaluation.rst:222
msgid "It returns a floating point number that quantifies the ``estimator`` prediction quality on ``X``, with reference to ``y``. Again, by convention higher numbers are better, so if your scorer returns loss, that value should be negated."
msgstr ""

#: ../modules/model_evaluation.rst:227
msgid "**Using custom scorers in functions where n_jobs > 1**"
msgstr ""

#: ../modules/model_evaluation.rst:229
msgid "While defining the custom scoring function alongside the calling function should work out of the box with the default joblib backend (loky), importing it from another module will be a more robust approach and work independently of the joblib backend."
msgstr ""

#: ../modules/model_evaluation.rst:234
msgid "For example, to use ``n_jobs`` greater than 1 in the example below, ``custom_scoring_function`` function is saved in a user-created module (``custom_scorer_module.py``) and imported::"
msgstr ""

#: ../modules/model_evaluation.rst:249
msgid "Using multiple metric evaluation"
msgstr ""

#: ../modules/model_evaluation.rst:251
msgid "Scikit-learn also permits evaluation of multiple metrics in ``GridSearchCV``, ``RandomizedSearchCV`` and ``cross_validate``."
msgstr ""

#: ../modules/model_evaluation.rst:254
msgid "There are three ways to specify multiple scoring metrics for the ``scoring`` parameter:"
msgstr ""

#: ../modules/model_evaluation.rst:258
msgid "As an iterable of string metrics::"
msgstr ""

#: ../modules/model_evaluation.rst:264
msgid "As a ``dict`` mapping the scorer name to the scoring function::"
msgstr ""

#: ../modules/model_evaluation.rst:266
msgid "Note that the dict values can either be scorer functions or one of the predefined metric strings."
msgstr ""

#: ../modules/model_evaluation.rst:269
msgid "As a callable that returns a dictionary of scores::"
msgstr ""

#: ../modules/model_evaluation.rst:293
msgid "Classification metrics"
msgstr ""

#: ../modules/model_evaluation.rst:297
msgid "The :mod:`sklearn.metrics` module implements several loss, score, and utility functions to measure classification performance. Some metrics might require probability estimates of the positive class, confidence values, or binary decisions values. Most implementations allow each sample to provide a weighted contribution to the overall score, through the ``sample_weight`` parameter."
msgstr ""

#: ../modules/model_evaluation.rst:304
msgid "Some of these are restricted to the binary classification case:"
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`precision_recall_curve <sklearn.metrics.precision_recall_curve>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute precision-recall pairs for different probability thresholds."
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
msgid ":obj:`roc_curve <sklearn.metrics.roc_curve>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
msgid "Compute Receiver operating characteristic (ROC)."
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
msgid ":obj:`det_curve <sklearn.metrics.det_curve>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:312:<autosummary>:1
msgid "Compute error rates for different probability thresholds."
msgstr ""

#: ../modules/model_evaluation.rst:313
msgid "Others also work in the multiclass case:"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`balanced_accuracy_score <sklearn.metrics.balanced_accuracy_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Compute the balanced accuracy."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`cohen_kappa_score <sklearn.metrics.cohen_kappa_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Cohen's kappa: a statistic that measures inter-annotator agreement."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`confusion_matrix <sklearn.metrics.confusion_matrix>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Compute confusion matrix to evaluate the accuracy of a classification."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`hinge_loss <sklearn.metrics.hinge_loss>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Average hinge loss (non-regularized)."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`matthews_corrcoef <sklearn.metrics.matthews_corrcoef>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Compute the Matthews correlation coefficient (MCC)."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`roc_auc_score <sklearn.metrics.roc_auc_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores."
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid ":obj:`top_k_accuracy_score <sklearn.metrics.top_k_accuracy_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:325:<autosummary>:1
msgid "Top-k Accuracy classification score."
msgstr ""

#: ../modules/model_evaluation.rst:326
msgid "Some also work in the multilabel case:"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`accuracy_score <sklearn.metrics.accuracy_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Accuracy classification score."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`classification_report <sklearn.metrics.classification_report>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Build a text report showing the main classification metrics."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`f1_score <sklearn.metrics.f1_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute the F1 score, also known as balanced F-score or F-measure."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`fbeta_score <sklearn.metrics.fbeta_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute the F-beta score."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`hamming_loss <sklearn.metrics.hamming_loss>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Compute the average Hamming loss."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`jaccard_score <sklearn.metrics.jaccard_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Jaccard similarity coefficient score."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`log_loss <sklearn.metrics.log_loss>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Log loss, aka logistic loss or cross-entropy loss."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`multilabel_confusion_matrix <sklearn.metrics.multilabel_confusion_matrix>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Compute a confusion matrix for each class or sample."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`precision_recall_fscore_support <sklearn.metrics.precision_recall_fscore_support>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute precision, recall, F-measure and support for each class."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`precision_score <sklearn.metrics.precision_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute the precision."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`recall_score <sklearn.metrics.recall_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute the recall."
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid ":obj:`zero_one_loss <sklearn.metrics.zero_one_loss>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:343:<autosummary>:1
msgid "Zero-one classification loss."
msgstr ""

#: ../modules/model_evaluation.rst:344
msgid "And some work with binary and multilabel (but not multiclass) problems:"
msgstr ""

#: ../modules/model_evaluation.rst:350:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid ":obj:`average_precision_score <sklearn.metrics.average_precision_score>`\\"
msgstr ""

#: ../modules/model_evaluation.rst:350:<autosummary>:1
#: ../modules/model_evaluation.rst:796:<autosummary>:1
msgid "Compute average precision (AP) from prediction scores."
msgstr ""

#: ../modules/model_evaluation.rst:351
msgid "In the following sub-sections, we will describe each of those functions, preceded by some notes on common API and metric definition."
msgstr ""

#: ../modules/model_evaluation.rst:357
msgid "From binary to multiclass and multilabel"
msgstr ""

#: ../modules/model_evaluation.rst:359
msgid "Some metrics are essentially defined for binary classification tasks (e.g. :func:`f1_score`, :func:`roc_auc_score`). In these cases, by default only the positive label is evaluated, assuming by default that the positive class is labelled ``1`` (though this may be configurable through the ``pos_label`` parameter)."
msgstr ""

#: ../modules/model_evaluation.rst:365
msgid "In extending a binary metric to multiclass or multilabel problems, the data is treated as a collection of binary problems, one for each class. There are then a number of ways to average binary metric calculations across the set of classes, each of which may be useful in some scenario. Where available, you should select among these using the ``average`` parameter."
msgstr ""

#: ../modules/model_evaluation.rst:371
msgid "``\"macro\"`` simply calculates the mean of the binary metrics, giving equal weight to each class.  In problems where infrequent classes are nonetheless important, macro-averaging may be a means of highlighting their performance. On the other hand, the assumption that all classes are equally important is often untrue, such that macro-averaging will over-emphasize the typically low performance on an infrequent class."
msgstr ""

#: ../modules/model_evaluation.rst:377
msgid "``\"weighted\"`` accounts for class imbalance by computing the average of binary metrics in which each class's score is weighted by its presence in the true data sample."
msgstr ""

#: ../modules/model_evaluation.rst:380
msgid "``\"micro\"`` gives each sample-class pair an equal contribution to the overall metric (except as a result of sample-weight). Rather than summing the metric per class, this sums the dividends and divisors that make up the per-class metrics to calculate an overall quotient. Micro-averaging may be preferred in multilabel settings, including multiclass classification where a majority class is to be ignored."
msgstr ""

#: ../modules/model_evaluation.rst:386
msgid "``\"samples\"`` applies only to multilabel problems. It does not calculate a per-class measure, instead calculating the metric over the true and predicted classes for each sample in the evaluation data, and returning their (``sample_weight``-weighted) average."
msgstr ""

#: ../modules/model_evaluation.rst:390
msgid "Selecting ``average=None`` will return an array with the score for each class."
msgstr ""

#: ../modules/model_evaluation.rst:393
msgid "While multiclass data is provided to the metric, like binary targets, as an array of class labels, multilabel data is specified as an indicator matrix, in which cell ``[i, j]`` has value 1 if sample ``i`` has label ``j`` and value 0 otherwise."
msgstr ""

#: ../modules/model_evaluation.rst:401
msgid "Accuracy score"
msgstr ""

#: ../modules/model_evaluation.rst:403
msgid "The :func:`accuracy_score` function computes the `accuracy <https://en.wikipedia.org/wiki/Accuracy_and_precision>`_, either the fraction (default) or the count (normalize=False) of correct predictions."
msgstr ""

#: ../modules/model_evaluation.rst:408
msgid "In multilabel classification, the function returns the subset accuracy. If the entire set of predicted labels for a sample strictly match with the true set of labels, then the subset accuracy is 1.0; otherwise it is 0.0."
msgstr ""

#: ../modules/model_evaluation.rst:412
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample and :math:`y_i` is the corresponding true value, then the fraction of correct predictions over :math:`n_\\text{samples}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:417
msgid "\\texttt{accuracy}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} 1(\\hat{y}_i = y_i)"
msgstr ""

#: ../modules/model_evaluation.rst:421 ../modules/model_evaluation.rst:1644
msgid "where :math:`1(x)` is the `indicator function <https://en.wikipedia.org/wiki/Indicator_function>`_."
msgstr ""

#: ../modules/model_evaluation.rst:433 ../modules/model_evaluation.rst:726
#: ../modules/model_evaluation.rst:1017
msgid "In the multilabel case with binary label indicators::"
msgstr ""

#: ../modules/model_evaluation.rst:440
msgid "See :ref:`sphx_glr_auto_examples_feature_selection_plot_permutation_test_for_classification.py` for an example of accuracy score usage using permutations of the dataset."
msgstr ""

#: ../modules/model_evaluation.rst:447
msgid "Top-k accuracy score"
msgstr ""

#: ../modules/model_evaluation.rst:449
msgid "The :func:`top_k_accuracy_score` function is a generalization of :func:`accuracy_score`. The difference is that a prediction is considered correct as long as the true label is associated with one of the ``k`` highest predicted scores. :func:`accuracy_score` is the special case of `k = 1`."
msgstr ""

#: ../modules/model_evaluation.rst:454
msgid "The function covers the binary and multiclass classification cases but not the multilabel case."
msgstr ""

#: ../modules/model_evaluation.rst:457
msgid "If :math:`\\hat{f}_{i,j}` is the predicted class for the :math:`i`-th sample corresponding to the :math:`j`-th largest predicted score and :math:`y_i` is the corresponding true value, then the fraction of correct predictions over :math:`n_\\text{samples}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:462
msgid "\\texttt{top-k accuracy}(y, \\hat{f}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples}-1} \\sum_{j=1}^{k} 1(\\hat{f}_{i,j} = y_i)"
msgstr ""

#: ../modules/model_evaluation.rst:466
msgid "where :math:`k` is the number of guesses allowed and :math:`1(x)` is the `indicator function <https://en.wikipedia.org/wiki/Indicator_function>`_."
msgstr ""

#: ../modules/model_evaluation.rst:485
msgid "Balanced accuracy score"
msgstr ""

#: ../modules/model_evaluation.rst:487
msgid "The :func:`balanced_accuracy_score` function computes the `balanced accuracy <https://en.wikipedia.org/wiki/Accuracy_and_precision>`_, which avoids inflated performance estimates on imbalanced datasets. It is the macro-average of recall scores per class or, equivalently, raw accuracy where each sample is weighted according to the inverse prevalence of its true class. Thus for balanced datasets, the score is equal to accuracy."
msgstr ""

#: ../modules/model_evaluation.rst:494
msgid "In the binary case, balanced accuracy is equal to the arithmetic mean of `sensitivity <https://en.wikipedia.org/wiki/Sensitivity_and_specificity>`_ (true positive rate) and `specificity <https://en.wikipedia.org/wiki/Sensitivity_and_specificity>`_ (true negative rate), or the area under the ROC curve with binary predictions rather than scores:"
msgstr ""

#: ../modules/model_evaluation.rst:501
msgid "\\texttt{balanced-accuracy} = \\frac{1}{2}\\left( \\frac{TP}{TP + FN} + \\frac{TN}{TN + FP}\\right )"
msgstr ""

#: ../modules/model_evaluation.rst:505
msgid "If the classifier performs equally well on either class, this term reduces to the conventional accuracy (i.e., the number of correct predictions divided by the total number of predictions)."
msgstr ""

#: ../modules/model_evaluation.rst:509
msgid "In contrast, if the conventional accuracy is above chance only because the classifier takes advantage of an imbalanced test set, then the balanced accuracy, as appropriate, will drop to :math:`\\frac{1}{n\\_classes}`."
msgstr ""

#: ../modules/model_evaluation.rst:513
msgid "The score ranges from 0 to 1, or when ``adjusted=True`` is used, it rescaled to the range :math:`\\frac{1}{1 - n\\_classes}` to 1, inclusive, with performance at random scoring 0."
msgstr ""

#: ../modules/model_evaluation.rst:517
msgid "If :math:`y_i` is the true value of the :math:`i`-th sample, and :math:`w_i` is the corresponding sample weight, then we adjust the sample weight to:"
msgstr ""

#: ../modules/model_evaluation.rst:520
msgid "\\hat{w}_i = \\frac{w_i}{\\sum_j{1(y_j = y_i) w_j}}"
msgstr ""

#: ../modules/model_evaluation.rst:524
msgid "where :math:`1(x)` is the `indicator function <https://en.wikipedia.org/wiki/Indicator_function>`_. Given predicted :math:`\\hat{y}_i` for sample :math:`i`, balanced accuracy is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:528
msgid "\\texttt{balanced-accuracy}(y, \\hat{y}, w) = \\frac{1}{\\sum{\\hat{w}_i}} \\sum_i 1(\\hat{y}_i = y_i) \\hat{w}_i"
msgstr ""

#: ../modules/model_evaluation.rst:532
#, python-format
msgid "With ``adjusted=True``, balanced accuracy reports the relative increase from :math:`\\texttt{balanced-accuracy}(y, \\mathbf{0}, w) = \\frac{1}{n\\_classes}`.  In the binary case, this is also known as `*Youden's J statistic* <https://en.wikipedia.org/wiki/Youden%27s_J_statistic>`_, or *informedness*."
msgstr ""

#: ../modules/model_evaluation.rst:540
msgid "The multiclass definition here seems the most reasonable extension of the metric used in binary classification, though there is no certain consensus in the literature:"
msgstr ""

#: ../modules/model_evaluation.rst:544
msgid "Our definition: [Mosley2013]_, [Kelleher2015]_ and [Guyon2015]_, where [Guyon2015]_ adopt the adjusted version to ensure that random predictions have a score of :math:`0` and perfect predictions have a score of :math:`1`.."
msgstr ""

#: ../modules/model_evaluation.rst:547
msgid "Class balanced accuracy as described in [Mosley2013]_: the minimum between the precision and the recall for each class is computed. Those values are then averaged over the total number of classes to get the balanced accuracy."
msgstr ""

#: ../modules/model_evaluation.rst:550
msgid "Balanced Accuracy as described in [Urbanowicz2015]_: the average of sensitivity and specificity is computed for each class and then averaged over total number of classes."
msgstr ""

#: ../modules/model_evaluation.rst:555
msgid "I. Guyon, K. Bennett, G. Cawley, H.J. Escalante, S. Escalera, T.K. Ho, N. Macià, B. Ray, M. Saeed, A.R. Statnikov, E. Viegas, `Design of the 2015 ChaLearn AutoML Challenge <https://ieeexplore.ieee.org/document/7280767>`_, IJCNN 2015."
msgstr ""

#: ../modules/model_evaluation.rst:559
msgid "L. Mosley, `A balanced approach to the multi-class imbalance problem <https://lib.dr.iastate.edu/etd/13537/>`_, IJCV 2010."
msgstr ""

#: ../modules/model_evaluation.rst:562
msgid "John. D. Kelleher, Brian Mac Namee, Aoife D'Arcy, `Fundamentals of Machine Learning for Predictive Data Analytics: Algorithms, Worked Examples, and Case Studies <https://mitpress.mit.edu/books/fundamentals-machine-learning-predictive-data-analytics>`_, 2015."
msgstr ""

#: ../modules/model_evaluation.rst:566
msgid "Urbanowicz R.J.,  Moore, J.H. `ExSTraCS 2.0: description and evaluation of a scalable learning classifier system <https://doi.org/10.1007/s12065-015-0128-8>`_, Evol. Intel. (2015) 8: 89."
msgstr ""

#: ../modules/model_evaluation.rst:572
msgid "Cohen's kappa"
msgstr ""

#: ../modules/model_evaluation.rst:574
#, python-format
msgid "The function :func:`cohen_kappa_score` computes `Cohen's kappa <https://en.wikipedia.org/wiki/Cohen%27s_kappa>`_ statistic. This measure is intended to compare labelings by different human annotators, not a classifier versus a ground truth."
msgstr ""

#: ../modules/model_evaluation.rst:579
msgid "The kappa score (see docstring) is a number between -1 and 1. Scores above .8 are generally considered good agreement; zero or lower means no agreement (practically random labels)."
msgstr ""

#: ../modules/model_evaluation.rst:583
msgid "Kappa scores can be computed for binary or multiclass problems, but not for multilabel problems (except by manually computing a per-label score) and not for more than two annotators."
msgstr ""

#: ../modules/model_evaluation.rst:596
msgid "Confusion matrix"
msgstr ""

#: ../modules/model_evaluation.rst:598
msgid "The :func:`confusion_matrix` function evaluates classification accuracy by computing the `confusion matrix <https://en.wikipedia.org/wiki/Confusion_matrix>`_ with each row corresponding to the true class (Wikipedia and other references may use different convention for axes)."
msgstr ""

#: ../modules/model_evaluation.rst:604
msgid "By definition, entry :math:`i, j` in a confusion matrix is the number of observations actually in group :math:`i`, but predicted to be in group :math:`j`. Here is an example::"
msgstr ""

#: ../modules/model_evaluation.rst:616
msgid ":func:`plot_confusion_matrix` can be used to visually represent a confusion matrix as shown in the :ref:`sphx_glr_auto_examples_model_selection_plot_confusion_matrix.py` example, which creates the following figure:"
msgstr ""

#: ../modules/model_evaluation.rst:626
msgid "The parameter ``normalize`` allows to report ratios instead of counts. The confusion matrix can be normalized in 3 different ways: ``'pred'``, ``'true'``, and ``'all'`` which will divide the counts by the sum of each columns, rows, or the entire matrix, respectively."
msgstr ""

#: ../modules/model_evaluation.rst:637
msgid "For binary problems, we can get counts of true negatives, false positives, false negatives and true positives as follows::"
msgstr ""

#: ../modules/model_evaluation.rst:648
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_confusion_matrix.py` for an example of using a confusion matrix to evaluate classifier output quality."
msgstr ""

#: ../modules/model_evaluation.rst:652
msgid "See :ref:`sphx_glr_auto_examples_classification_plot_digits_classification.py` for an example of using a confusion matrix to classify hand-written digits."
msgstr ""

#: ../modules/model_evaluation.rst:656
msgid "See :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py` for an example of using a confusion matrix to classify text documents."
msgstr ""

#: ../modules/model_evaluation.rst:663
msgid "Classification report"
msgstr ""

#: ../modules/model_evaluation.rst:665
msgid "The :func:`classification_report` function builds a text report showing the main classification metrics. Here is a small example with custom ``target_names`` and inferred labels::"
msgstr ""

#: ../modules/model_evaluation.rst:687
msgid "See :ref:`sphx_glr_auto_examples_classification_plot_digits_classification.py` for an example of classification report usage for hand-written digits."
msgstr ""

#: ../modules/model_evaluation.rst:691
msgid "See :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py` for an example of classification report usage for text documents."
msgstr ""

#: ../modules/model_evaluation.rst:695
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_grid_search_digits.py` for an example of classification report usage for grid search with nested cross-validation."
msgstr ""

#: ../modules/model_evaluation.rst:702
msgid "Hamming loss"
msgstr ""

#: ../modules/model_evaluation.rst:704
msgid "The :func:`hamming_loss` computes the average Hamming loss or `Hamming distance <https://en.wikipedia.org/wiki/Hamming_distance>`_ between two sets of samples."
msgstr ""

#: ../modules/model_evaluation.rst:708
msgid "If :math:`\\hat{y}_j` is the predicted value for the :math:`j`-th label of a given sample, :math:`y_j` is the corresponding true value, and :math:`n_\\text{labels}` is the number of classes or labels, then the Hamming loss :math:`L_{Hamming}` between two samples is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:713
msgid "L_{Hamming}(y, \\hat{y}) = \\frac{1}{n_\\text{labels}} \\sum_{j=0}^{n_\\text{labels} - 1} 1(\\hat{y}_j \\not= y_j)"
msgstr ""

#: ../modules/model_evaluation.rst:717
msgid "where :math:`1(x)` is the `indicator function <https://en.wikipedia.org/wiki/Indicator_function>`_. ::"
msgstr ""

#: ../modules/model_evaluation.rst:733
msgid "In multiclass classification, the Hamming loss corresponds to the Hamming distance between ``y_true`` and ``y_pred`` which is similar to the :ref:`zero_one_loss` function.  However, while zero-one loss penalizes prediction sets that do not strictly match true sets, the Hamming loss penalizes individual labels.  Thus the Hamming loss, upper bounded by the zero-one loss, is always between zero and one, inclusive; and predicting a proper subset or superset of the true labels will give a Hamming loss between zero and one, exclusive."
msgstr ""

#: ../modules/model_evaluation.rst:745
msgid "Precision, recall and F-measures"
msgstr ""

#: ../modules/model_evaluation.rst:747
msgid "Intuitively, `precision <https://en.wikipedia.org/wiki/Precision_and_recall#Precision>`_ is the ability of the classifier not to label as positive a sample that is negative, and `recall <https://en.wikipedia.org/wiki/Precision_and_recall#Recall>`_ is the ability of the classifier to find all the positive samples."
msgstr ""

#: ../modules/model_evaluation.rst:753
msgid "The  `F-measure <https://en.wikipedia.org/wiki/F1_score>`_ (:math:`F_\\beta` and :math:`F_1` measures) can be interpreted as a weighted harmonic mean of the precision and recall. A :math:`F_\\beta` measure reaches its best value at 1 and its worst score at 0. With :math:`\\beta = 1`,  :math:`F_\\beta` and :math:`F_1`  are equivalent, and the recall and the precision are equally important."
msgstr ""

#: ../modules/model_evaluation.rst:760
msgid "The :func:`precision_recall_curve` computes a precision-recall curve from the ground truth label and a score given by the classifier by varying a decision threshold."
msgstr ""

#: ../modules/model_evaluation.rst:764
msgid "The :func:`average_precision_score` function computes the `average precision <https://en.wikipedia.org/w/index.php?title=Information_retrieval&oldid=793358396#Average_precision>`_ (AP) from prediction scores. The value is between 0 and 1 and higher is better. AP is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:769
msgid "\\text{AP} = \\sum_n (R_n - R_{n-1}) P_n\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:772
msgid "where :math:`P_n` and :math:`R_n` are the precision and recall at the nth threshold. With random predictions, the AP is the fraction of positive samples."
msgstr ""

#: ../modules/model_evaluation.rst:776
msgid "References [Manning2008]_ and [Everingham2010]_ present alternative variants of AP that interpolate the precision-recall curve. Currently, :func:`average_precision_score` does not implement any interpolated variant. References [Davis2006]_ and [Flach2015]_ describe why a linear interpolation of points on the precision-recall curve provides an overly-optimistic measure of classifier performance. This linear interpolation is used when computing area under the curve with the trapezoidal rule in :func:`auc`."
msgstr ""

#: ../modules/model_evaluation.rst:784
msgid "Several functions allow you to analyze the precision, recall and F-measures score:"
msgstr ""

#: ../modules/model_evaluation.rst:797
msgid "Note that the :func:`precision_recall_curve` function is restricted to the binary case. The :func:`average_precision_score` function works only in binary classification and multilabel indicator format. The :func:`plot_precision_recall_curve` function plots the precision recall as follows."
msgstr ""

#: ../modules/model_evaluation.rst:810
msgid "See :ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py` for an example of :func:`f1_score` usage to classify  text documents."
msgstr ""

#: ../modules/model_evaluation.rst:814
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_grid_search_digits.py` for an example of :func:`precision_score` and :func:`recall_score` usage to estimate parameters using grid search with nested cross-validation."
msgstr ""

#: ../modules/model_evaluation.rst:818
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_precision_recall.py` for an example of :func:`precision_recall_curve` usage to evaluate classifier output quality."
msgstr ""

#: ../modules/model_evaluation.rst:825
msgid "C.D. Manning, P. Raghavan, H. Schütze, `Introduction to Information Retrieval <https://nlp.stanford.edu/IR-book/html/htmledition/evaluation-of-ranked-retrieval-results-1.html>`_, 2008."
msgstr ""

#: ../modules/model_evaluation.rst:828
msgid "M. Everingham, L. Van Gool, C.K.I. Williams, J. Winn, A. Zisserman, `The Pascal Visual Object Classes (VOC) Challenge <http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.157.5766&rep=rep1&type=pdf>`_, IJCV 2010."
msgstr ""

#: ../modules/model_evaluation.rst:832
msgid "J. Davis, M. Goadrich, `The Relationship Between Precision-Recall and ROC Curves <http://www.machinelearning.org/proceedings/icml2006/030_The_Relationship_Bet.pdf>`_, ICML 2006."
msgstr ""

#: ../modules/model_evaluation.rst:835
msgid "P.A. Flach, M. Kull, `Precision-Recall-Gain Curves: PR Analysis Done Right <https://papers.nips.cc/paper/5867-precision-recall-gain-curves-pr-analysis-done-right.pdf>`_, NIPS 2015."
msgstr ""

#: ../modules/model_evaluation.rst:841
msgid "Binary classification"
msgstr ""

#: ../modules/model_evaluation.rst:843
msgid "In a binary classification task, the terms ''positive'' and ''negative'' refer to the classifier's prediction, and the terms ''true'' and ''false'' refer to whether that prediction corresponds to the external judgment (sometimes known as the ''observation''). Given these definitions, we can formulate the following table:"
msgstr ""

#: ../modules/model_evaluation.rst:850
msgid "Actual class (observation)"
msgstr ""

#: ../modules/model_evaluation.rst:852
msgid "Predicted class (expectation)"
msgstr ""

#: ../modules/model_evaluation.rst:852
msgid "tp (true positive) Correct result"
msgstr ""

#: ../modules/model_evaluation.rst:852
msgid "fp (false positive) Unexpected result"
msgstr ""

#: ../modules/model_evaluation.rst:855
msgid "fn (false negative) Missing result"
msgstr ""

#: ../modules/model_evaluation.rst:855
msgid "tn (true negative) Correct absence of result"
msgstr ""

#: ../modules/model_evaluation.rst:859
msgid "In this context, we can define the notions of precision, recall and F-measure:"
msgstr ""

#: ../modules/model_evaluation.rst:861
msgid "\\text{precision} = \\frac{tp}{tp + fp},"
msgstr ""

#: ../modules/model_evaluation.rst:865
msgid "\\text{recall} = \\frac{tp}{tp + fn},"
msgstr ""

#: ../modules/model_evaluation.rst:869
msgid "F_\\beta = (1 + \\beta^2) \\frac{\\text{precision} \\times \\text{recall}}{\\beta^2 \\text{precision} + \\text{recall}}."
msgstr ""

#: ../modules/model_evaluation.rst:873
msgid "Here are some small examples in binary classification::"
msgstr ""

#: ../modules/model_evaluation.rst:912
msgid "Multiclass and multilabel classification"
msgstr ""

#: ../modules/model_evaluation.rst:913
msgid "In multiclass and multilabel classification task, the notions of precision, recall, and F-measures can be applied to each label independently. There are a few ways to combine results across labels, specified by the ``average`` argument to the :func:`average_precision_score` (multilabel only), :func:`f1_score`, :func:`fbeta_score`, :func:`precision_recall_fscore_support`, :func:`precision_score` and :func:`recall_score` functions, as described :ref:`above <average>`. Note that if all labels are included, \"micro\"-averaging in a multiclass setting will produce precision, recall and :math:`F` that are all identical to accuracy. Also note that \"weighted\" averaging may produce an F-score that is not between precision and recall."
msgstr ""

#: ../modules/model_evaluation.rst:925
msgid "To make this more explicit, consider the following notation:"
msgstr ""

#: ../modules/model_evaluation.rst:927
msgid ":math:`y` the set of *predicted* :math:`(sample, label)` pairs"
msgstr ""

#: ../modules/model_evaluation.rst:928
msgid ":math:`\\hat{y}` the set of *true* :math:`(sample, label)` pairs"
msgstr ""

#: ../modules/model_evaluation.rst:929
msgid ":math:`L` the set of labels"
msgstr ""

#: ../modules/model_evaluation.rst:930
msgid ":math:`S` the set of samples"
msgstr ""

#: ../modules/model_evaluation.rst:931
msgid ":math:`y_s` the subset of :math:`y` with sample :math:`s`, i.e. :math:`y_s := \\left\\{(s', l) \\in y | s' = s\\right\\}`"
msgstr ""

#: ../modules/model_evaluation.rst:933
msgid ":math:`y_l` the subset of :math:`y` with label :math:`l`"
msgstr ""

#: ../modules/model_evaluation.rst:934
msgid "similarly, :math:`\\hat{y}_s` and :math:`\\hat{y}_l` are subsets of :math:`\\hat{y}`"
msgstr ""

#: ../modules/model_evaluation.rst:936
msgid ":math:`P(A, B) := \\frac{\\left| A \\cap B \\right|}{\\left|A\\right|}` for some sets :math:`A` and :math:`B`"
msgstr ""

#: ../modules/model_evaluation.rst:938
msgid ":math:`R(A, B) := \\frac{\\left| A \\cap B \\right|}{\\left|B\\right|}` (Conventions vary on handling :math:`B = \\emptyset`; this implementation uses :math:`R(A, B):=0`, and similar for :math:`P`.)"
msgstr ""

#: ../modules/model_evaluation.rst:941
msgid ":math:`F_\\beta(A, B) := \\left(1 + \\beta^2\\right) \\frac{P(A, B) \\times R(A, B)}{\\beta^2 P(A, B) + R(A, B)}`"
msgstr ""

#: ../modules/model_evaluation.rst:943
msgid "Then the metrics are defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:946
msgid "``average``"
msgstr ""

#: ../modules/model_evaluation.rst:946
msgid "Precision"
msgstr ""

#: ../modules/model_evaluation.rst:946
msgid "Recall"
msgstr ""

#: ../modules/model_evaluation.rst:946
msgid "F\\_beta"
msgstr ""

#: ../modules/model_evaluation.rst:948
msgid "``\"micro\"``"
msgstr ""

#: ../modules/model_evaluation.rst:948
msgid ":math:`P(y, \\hat{y})`"
msgstr ""

#: ../modules/model_evaluation.rst:948
msgid ":math:`R(y, \\hat{y})`"
msgstr ""

#: ../modules/model_evaluation.rst:948
msgid ":math:`F_\\beta(y, \\hat{y})`"
msgstr ""

#: ../modules/model_evaluation.rst:950
msgid "``\"samples\"``"
msgstr ""

#: ../modules/model_evaluation.rst:950
msgid ":math:`\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} P(y_s, \\hat{y}_s)`"
msgstr ""

#: ../modules/model_evaluation.rst:950
msgid ":math:`\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} R(y_s, \\hat{y}_s)`"
msgstr ""

#: ../modules/model_evaluation.rst:950
msgid ":math:`\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} F_\\beta(y_s, \\hat{y}_s)`"
msgstr ""

#: ../modules/model_evaluation.rst:952
msgid "``\"macro\"``"
msgstr ""

#: ../modules/model_evaluation.rst:952
msgid ":math:`\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} P(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:952
msgid ":math:`\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} R(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:952
msgid ":math:`\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} F_\\beta(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:954
msgid "``\"weighted\"``"
msgstr ""

#: ../modules/model_evaluation.rst:954
msgid ":math:`\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| P(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:954
msgid ":math:`\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| R(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:954
msgid ":math:`\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| F_\\beta(y_l, \\hat{y}_l)`"
msgstr ""

#: ../modules/model_evaluation.rst:956
msgid "``None``"
msgstr ""

#: ../modules/model_evaluation.rst:956
msgid ":math:`\\langle P(y_l, \\hat{y}_l) | l \\in L \\rangle`"
msgstr ""

#: ../modules/model_evaluation.rst:956
msgid ":math:`\\langle R(y_l, \\hat{y}_l) | l \\in L \\rangle`"
msgstr ""

#: ../modules/model_evaluation.rst:956
msgid ":math:`\\langle F_\\beta(y_l, \\hat{y}_l) | l \\in L \\rangle`"
msgstr ""

#: ../modules/model_evaluation.rst:973
msgid "For multiclass classification with a \"negative class\", it is possible to exclude some labels:"
msgstr ""

#: ../modules/model_evaluation.rst:979
msgid "Similarly, labels not present in the data sample may be accounted for in macro-averaging."
msgstr ""

#: ../modules/model_evaluation.rst:987
msgid "Jaccard similarity coefficient score"
msgstr ""

#: ../modules/model_evaluation.rst:989
msgid "The :func:`jaccard_score` function computes the average of `Jaccard similarity coefficients <https://en.wikipedia.org/wiki/Jaccard_index>`_, also called the Jaccard index, between pairs of label sets."
msgstr ""

#: ../modules/model_evaluation.rst:993
msgid "The Jaccard similarity coefficient of the :math:`i`-th samples, with a ground truth label set :math:`y_i` and predicted label set :math:`\\hat{y}_i`, is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:997
msgid "J(y_i, \\hat{y}_i) = \\frac{|y_i \\cap \\hat{y}_i|}{|y_i \\cup \\hat{y}_i|}."
msgstr ""

#: ../modules/model_evaluation.rst:1001
msgid ":func:`jaccard_score` works like :func:`precision_recall_fscore_support` as a naively set-wise measure applying natively to binary targets, and extended to apply to multilabel and multiclass through the use of `average` (see :ref:`above <average>`)."
msgstr ""

#: ../modules/model_evaluation.rst:1006
msgid "In the binary case::"
msgstr ""

#: ../modules/model_evaluation.rst:1026
msgid "Multiclass problems are binarized and treated like the corresponding multilabel problem::"
msgstr ""

#: ../modules/model_evaluation.rst:1041
msgid "Hinge loss"
msgstr ""

#: ../modules/model_evaluation.rst:1043
msgid "The :func:`hinge_loss` function computes the average distance between the model and the data using `hinge loss <https://en.wikipedia.org/wiki/Hinge_loss>`_, a one-sided metric that considers only prediction errors. (Hinge loss is used in maximal margin classifiers such as support vector machines.)"
msgstr ""

#: ../modules/model_evaluation.rst:1049
msgid "If the labels are encoded with +1 and -1,  :math:`y`: is the true value, and :math:`w` is the predicted decisions as output by ``decision_function``, then the hinge loss is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:1053
msgid "L_\\text{Hinge}(y, w) = \\max\\left\\{1 - wy, 0\\right\\} = \\left|1 - wy\\right|_+"
msgstr ""

#: ../modules/model_evaluation.rst:1057
msgid "If there are more than two labels, :func:`hinge_loss` uses a multiclass variant due to Crammer & Singer. `Here <http://jmlr.csail.mit.edu/papers/volume2/crammer01a/crammer01a.pdf>`_ is the paper describing it."
msgstr ""

#: ../modules/model_evaluation.rst:1062
msgid "If :math:`y_w` is the predicted decision for true label and :math:`y_t` is the maximum of the predicted decisions for all other labels, where predicted decisions are output by decision function, then multiclass hinge loss is defined by:"
msgstr ""

#: ../modules/model_evaluation.rst:1067
msgid "L_\\text{Hinge}(y_w, y_t) = \\max\\left\\{1 + y_t - y_w, 0\\right\\}"
msgstr ""

#: ../modules/model_evaluation.rst:1071
msgid "Here a small example demonstrating the use of the :func:`hinge_loss` function with a svm classifier in a binary class problem::"
msgstr ""

#: ../modules/model_evaluation.rst:1087
msgid "Here is an example demonstrating the use of the :func:`hinge_loss` function with a svm classifier in a multiclass problem::"
msgstr ""

#: ../modules/model_evaluation.rst:1104
msgid "Log loss"
msgstr ""

#: ../modules/model_evaluation.rst:1106
msgid "Log loss, also called logistic regression loss or cross-entropy loss, is defined on probability estimates.  It is commonly used in (multinomial) logistic regression and neural networks, as well as in some variants of expectation-maximization, and can be used to evaluate the probability outputs (``predict_proba``) of a classifier instead of its discrete predictions."
msgstr ""

#: ../modules/model_evaluation.rst:1113
msgid "For binary classification with a true label :math:`y \\in \\{0,1\\}` and a probability estimate :math:`p = \\operatorname{Pr}(y = 1)`, the log loss per sample is the negative log-likelihood of the classifier given the true label:"
msgstr ""

#: ../modules/model_evaluation.rst:1118
msgid "L_{\\log}(y, p) = -\\log \\operatorname{Pr}(y|p) = -(y \\log (p) + (1 - y) \\log (1 - p))"
msgstr ""

#: ../modules/model_evaluation.rst:1122
msgid "This extends to the multiclass case as follows. Let the true labels for a set of samples be encoded as a 1-of-K binary indicator matrix :math:`Y`, i.e., :math:`y_{i,k} = 1` if sample :math:`i` has label :math:`k` taken from a set of :math:`K` labels. Let :math:`P` be a matrix of probability estimates, with :math:`p_{i,k} = \\operatorname{Pr}(y_{i,k} = 1)`. Then the log loss of the whole set is"
msgstr ""

#: ../modules/model_evaluation.rst:1131
msgid "L_{\\log}(Y, P) = -\\log \\operatorname{Pr}(Y|P) = - \\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{k=0}^{K-1} y_{i,k} \\log p_{i,k}"
msgstr ""

#: ../modules/model_evaluation.rst:1135
msgid "To see how this generalizes the binary log loss given above, note that in the binary case, :math:`p_{i,0} = 1 - p_{i,1}` and :math:`y_{i,0} = 1 - y_{i,1}`, so expanding the inner sum over :math:`y_{i,k} \\in \\{0,1\\}` gives the binary log loss."
msgstr ""

#: ../modules/model_evaluation.rst:1141
msgid "The :func:`log_loss` function computes log loss given a list of ground-truth labels and a probability matrix, as returned by an estimator's ``predict_proba`` method."
msgstr ""

#: ../modules/model_evaluation.rst:1151
msgid "The first ``[.9, .1]`` in ``y_pred`` denotes 90% probability that the first sample has label 0.  The log loss is non-negative."
msgstr ""

#: ../modules/model_evaluation.rst:1157
msgid "Matthews correlation coefficient"
msgstr ""

#: ../modules/model_evaluation.rst:1159
msgid "The :func:`matthews_corrcoef` function computes the `Matthew's correlation coefficient (MCC) <https://en.wikipedia.org/wiki/Matthews_correlation_coefficient>`_ for binary classes.  Quoting Wikipedia:"
msgstr ""

#: ../modules/model_evaluation.rst:1164
msgid "\"The Matthews correlation coefficient is used in machine learning as a measure of the quality of binary (two-class) classifications. It takes into account true and false positives and negatives and is generally regarded as a balanced measure which can be used even if the classes are of very different sizes. The MCC is in essence a correlation coefficient value between -1 and +1. A coefficient of +1 represents a perfect prediction, 0 an average random prediction and -1 an inverse prediction. The statistic is also known as the phi coefficient.\""
msgstr ""

#: ../modules/model_evaluation.rst:1174
msgid "In the binary (two-class) case, :math:`tp`, :math:`tn`, :math:`fp` and :math:`fn` are respectively the number of true positives, true negatives, false positives and false negatives, the MCC is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:1178
msgid "MCC = \\frac{tp \\times tn - fp \\times fn}{\\sqrt{(tp + fp)(tp + fn)(tn + fp)(tn + fn)}}."
msgstr ""

#: ../modules/model_evaluation.rst:1182
msgid "In the multiclass case, the Matthews correlation coefficient can be `defined <http://rk.kvl.dk/introduction/index.html>`_ in terms of a :func:`confusion_matrix` :math:`C` for :math:`K` classes.  To simplify the definition consider the following intermediate variables:"
msgstr ""

#: ../modules/model_evaluation.rst:1187
msgid ":math:`t_k=\\sum_{i}^{K} C_{ik}` the number of times class :math:`k` truly occurred,"
msgstr ""

#: ../modules/model_evaluation.rst:1188
msgid ":math:`p_k=\\sum_{i}^{K} C_{ki}` the number of times class :math:`k` was predicted,"
msgstr ""

#: ../modules/model_evaluation.rst:1189
msgid ":math:`c=\\sum_{k}^{K} C_{kk}` the total number of samples correctly predicted,"
msgstr ""

#: ../modules/model_evaluation.rst:1190
msgid ":math:`s=\\sum_{i}^{K} \\sum_{j}^{K} C_{ij}` the total number of samples."
msgstr ""

#: ../modules/model_evaluation.rst:1192
msgid "Then the multiclass MCC is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:1194
msgid "MCC = \\frac{\n"
"    c \\times s - \\sum_{k}^{K} p_k \\times t_k\n"
"}{\\sqrt{\n"
"    (s^2 - \\sum_{k}^{K} p_k^2) \\times\n"
"    (s^2 - \\sum_{k}^{K} t_k^2)\n"
"}}\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:1202
msgid "When there are more than two labels, the value of the MCC will no longer range between -1 and +1. Instead the minimum value will be somewhere between -1 and 0 depending on the number and distribution of ground true labels. The maximum value is always +1."
msgstr ""

#: ../modules/model_evaluation.rst:1207
msgid "Here is a small example illustrating the usage of the :func:`matthews_corrcoef` function:"
msgstr ""

#: ../modules/model_evaluation.rst:1219
msgid "Multi-label confusion matrix"
msgstr ""

#: ../modules/model_evaluation.rst:1221
msgid "The :func:`multilabel_confusion_matrix` function computes class-wise (default) or sample-wise (samplewise=True) multilabel confusion matrix to evaluate the accuracy of a classification. multilabel_confusion_matrix also treats multiclass data as if it were multilabel, as this is a transformation commonly applied to evaluate multiclass problems with binary classification metrics (such as precision, recall, etc.)."
msgstr ""

#: ../modules/model_evaluation.rst:1228
msgid "When calculating class-wise multilabel confusion matrix :math:`C`, the count of true negatives for class :math:`i` is :math:`C_{i,0,0}`, false negatives is :math:`C_{i,1,0}`, true positives is :math:`C_{i,1,1}` and false positives is :math:`C_{i,0,1}`."
msgstr ""

#: ../modules/model_evaluation.rst:1233
msgid "Here is an example demonstrating the use of the :func:`multilabel_confusion_matrix` function with :term:`multilabel indicator matrix` input::"
msgstr ""

#: ../modules/model_evaluation.rst:1253
msgid "Or a confusion matrix can be constructed for each sample's labels:"
msgstr ""

#: ../modules/model_evaluation.rst:1262
msgid "Here is an example demonstrating the use of the :func:`multilabel_confusion_matrix` function with :term:`multiclass` input::"
msgstr ""

#: ../modules/model_evaluation.rst:1279
msgid "Here are some examples demonstrating the use of the :func:`multilabel_confusion_matrix` function to calculate recall (or sensitivity), specificity, fall out and miss rate for each class in a problem with multilabel indicator matrix input."
msgstr ""

#: ../modules/model_evaluation.rst:1284
msgid "Calculating `recall <https://en.wikipedia.org/wiki/Sensitivity_and_specificity>`__ (also called the true positive rate or the sensitivity) for each class::"
msgstr ""

#: ../modules/model_evaluation.rst:1302
msgid "Calculating `specificity <https://en.wikipedia.org/wiki/Sensitivity_and_specificity>`__ (also called the true negative rate) for each class::"
msgstr ""

#: ../modules/model_evaluation.rst:1309
msgid "Calculating `fall out <https://en.wikipedia.org/wiki/False_positive_rate>`__ (also called the false positive rate) for each class::"
msgstr ""

#: ../modules/model_evaluation.rst:1315
msgid "Calculating `miss rate <https://en.wikipedia.org/wiki/False_positives_and_false_negatives>`__ (also called the false negative rate) for each class::"
msgstr ""

#: ../modules/model_evaluation.rst:1325
msgid "Receiver operating characteristic (ROC)"
msgstr ""

#: ../modules/model_evaluation.rst:1327
msgid "The function :func:`roc_curve` computes the `receiver operating characteristic curve, or ROC curve <https://en.wikipedia.org/wiki/Receiver_operating_characteristic>`_. Quoting Wikipedia :"
msgstr ""

#: ../modules/model_evaluation.rst:1331
msgid "\"A receiver operating characteristic (ROC), or simply ROC curve, is a graphical plot which illustrates the performance of a binary classifier system as its discrimination threshold is varied. It is created by plotting the fraction of true positives out of the positives (TPR = true positive rate) vs. the fraction of false positives out of the negatives (FPR = false positive rate), at various threshold settings. TPR is also known as sensitivity, and FPR is one minus the specificity or true negative rate.\""
msgstr ""

#: ../modules/model_evaluation.rst:1339
msgid "This function requires the true binary value and the target scores, which can either be probability estimates of the positive class, confidence values, or binary decisions. Here is a small example of how to use the :func:`roc_curve` function::"
msgstr ""

#: ../modules/model_evaluation.rst:1356
msgid "This figure shows an example of such an ROC curve:"
msgstr ""

#: ../modules/model_evaluation.rst:1363
msgid "The :func:`roc_auc_score` function computes the area under the receiver operating characteristic (ROC) curve, which is also denoted by AUC or AUROC.  By computing the area under the roc curve, the curve information is summarized in one number. For more information see the `Wikipedia article on AUC <https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve>`_."
msgstr ""

#: ../modules/model_evaluation.rst:1370
msgid "Compared to metrics such as the subset accuracy, the Hamming loss, or the F1 score, ROC doesn't require optimizing a threshold for each label."
msgstr ""

#: ../modules/model_evaluation.rst:1376
msgid "Binary case"
msgstr ""

#: ../modules/model_evaluation.rst:1378
msgid "In the **binary case**, you can either provide the probability estimates, using the `classifier.predict_proba()` method, or the non-thresholded decision values given by the `classifier.decision_function()` method. In the case of providing the probability estimates, the probability of the class with the \"greater label\" should be provided. The \"greater label\" corresponds to `classifier.classes_[1]` and thus `classifier.predict_proba(X)[:, 1]`. Therefore, the `y_score` parameter is of size (n_samples,)."
msgstr ""

#: ../modules/model_evaluation.rst:1394
msgid "We can use the probability estimates corresponding to `clf.classes_[1]`."
msgstr ""

#: ../modules/model_evaluation.rst:1400
msgid "Otherwise, we can use the non-thresholded decision values"
msgstr ""

#: ../modules/model_evaluation.rst:1408
msgid "Multi-class case"
msgstr ""

#: ../modules/model_evaluation.rst:1410
msgid "The :func:`roc_auc_score` function can also be used in **multi-class classification**. Two averaging strategies are currently supported: the one-vs-one algorithm computes the average of the pairwise ROC AUC scores, and the one-vs-rest algorithm computes the average of the ROC AUC scores for each class against all other classes. In both cases, the predicted labels are provided in an array with values from 0 to ``n_classes``, and the scores correspond to the probability estimates that a sample belongs to a particular class. The OvO and OvR algorithms support weighting uniformly (``average='macro'``) and by prevalence (``average='weighted'``)."
msgstr ""

#: ../modules/model_evaluation.rst:1420
msgid "**One-vs-one Algorithm**: Computes the average AUC of all possible pairwise combinations of classes. [HT2001]_ defines a multiclass AUC metric weighted uniformly:"
msgstr ""

#: ../modules/model_evaluation.rst:1424
msgid "\\frac{1}{c(c-1)}\\sum_{j=1}^{c}\\sum_{k > j}^c (\\text{AUC}(j | k) +\n"
"\\text{AUC}(k | j))"
msgstr ""

#: ../modules/model_evaluation.rst:1429
msgid "where :math:`c` is the number of classes and :math:`\\text{AUC}(j | k)` is the AUC with class :math:`j` as the positive class and class :math:`k` as the negative class. In general, :math:`\\text{AUC}(j | k) \\neq \\text{AUC}(k | j))` in the multiclass case. This algorithm is used by setting the keyword argument ``multiclass`` to ``'ovo'`` and ``average`` to ``'macro'``."
msgstr ""

#: ../modules/model_evaluation.rst:1436
msgid "The [HT2001]_ multiclass AUC metric can be extended to be weighted by the prevalence:"
msgstr ""

#: ../modules/model_evaluation.rst:1439
msgid "\\frac{1}{c(c-1)}\\sum_{j=1}^{c}\\sum_{k > j}^c p(j \\cup k)(\n"
"\\text{AUC}(j | k) + \\text{AUC}(k | j))"
msgstr ""

#: ../modules/model_evaluation.rst:1444
msgid "where :math:`c` is the number of classes. This algorithm is used by setting the keyword argument ``multiclass`` to ``'ovo'`` and ``average`` to ``'weighted'``. The ``'weighted'`` option returns a prevalence-weighted average as described in [FC2009]_."
msgstr ""

#: ../modules/model_evaluation.rst:1449
msgid "**One-vs-rest Algorithm**: Computes the AUC of each class against the rest [PD2000]_. The algorithm is functionally the same as the multilabel case. To enable this algorithm set the keyword argument ``multiclass`` to ``'ovr'``. Like OvO, OvR supports two types of averaging: ``'macro'`` [F2006]_ and ``'weighted'`` [F2001]_."
msgstr ""

#: ../modules/model_evaluation.rst:1455
msgid "In applications where a high false positive rate is not tolerable the parameter ``max_fpr`` of :func:`roc_auc_score` can be used to summarize the ROC curve up to the given limit."
msgstr ""

#: ../modules/model_evaluation.rst:1468
msgid "Multi-label case"
msgstr ""

#: ../modules/model_evaluation.rst:1470
msgid "In **multi-label classification**, the :func:`roc_auc_score` function is extended by averaging over the labels as :ref:`above <average>`. In this case, you should provide a `y_score` of shape `(n_samples, n_classes)`. Thus, when using the probability estimates, one needs to select the probability of the class with the greater label for each output."
msgstr ""

#: ../modules/model_evaluation.rst:1485
msgid "And the decision values do not require such processing."
msgstr ""

#: ../modules/model_evaluation.rst:1495
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_roc.py` for an example of using ROC to evaluate the quality of the output of a classifier."
msgstr ""

#: ../modules/model_evaluation.rst:1499
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_roc_crossval.py` for an example of using ROC to evaluate classifier output quality, using cross-validation."
msgstr ""

#: ../modules/model_evaluation.rst:1503
msgid "See :ref:`sphx_glr_auto_examples_applications_plot_species_distribution_modeling.py` for an example of using ROC to model species distribution."
msgstr ""

#: ../modules/model_evaluation.rst:1509
msgid "Hand, D.J. and Till, R.J., (2001). `A simple generalisation of the area under the ROC curve for multiple class classification problems. <http://link.springer.com/article/10.1023/A:1010920819831>`_ Machine learning, 45(2), pp.171-186."
msgstr ""

#: ../modules/model_evaluation.rst:1514
msgid "Ferri, Cèsar & Hernandez-Orallo, Jose & Modroiu, R. (2009). `An Experimental Comparison of Performance Measures for Classification. <https://www.math.ucdavis.edu/~saito/data/roc/ferri-class-perf-metrics.pdf>`_ Pattern Recognition Letters. 30. 27-38."
msgstr ""

#: ../modules/model_evaluation.rst:1519
msgid "Provost, F., Domingos, P. (2000). Well-trained PETs: Improving probability estimation trees (Section 6.2), CeDER Working Paper #IS-00-04, Stern School of Business, New York University."
msgstr ""

#: ../modules/model_evaluation.rst:1523
msgid "Fawcett, T., 2006. `An introduction to ROC analysis. <http://www.sciencedirect.com/science/article/pii/S016786550500303X>`_ Pattern Recognition Letters, 27(8), pp. 861-874."
msgstr ""

#: ../modules/model_evaluation.rst:1527
msgid "Fawcett, T., 2001. `Using rule sets to maximize ROC performance <http://ieeexplore.ieee.org/document/989510/>`_ In Data Mining, 2001. Proceedings IEEE International Conference, pp. 131-138."
msgstr ""

#: ../modules/model_evaluation.rst:1535
msgid "Detection error tradeoff (DET)"
msgstr ""

#: ../modules/model_evaluation.rst:1537
msgid "The function :func:`det_curve` computes the detection error tradeoff curve (DET) curve [WikipediaDET2017]_. Quoting Wikipedia:"
msgstr ""

#: ../modules/model_evaluation.rst:1541
msgid "\"A detection error tradeoff (DET) graph is a graphical plot of error rates for binary classification systems, plotting false reject rate vs. false accept rate. The x- and y-axes are scaled non-linearly by their standard normal deviates (or just by logarithmic transformation), yielding tradeoff curves that are more linear than ROC curves, and use most of the image area to highlight the differences of importance in the critical operating region.\""
msgstr ""

#: ../modules/model_evaluation.rst:1548
msgid "DET curves are a variation of receiver operating characteristic (ROC) curves where False Negative Rate is plotted on the y-axis instead of True Positive Rate. DET curves are commonly plotted in normal deviate scale by transformation with :math:`\\phi^{-1}` (with :math:`\\phi` being the cumulative distribution function). The resulting performance curves explicitly visualize the tradeoff of error types for given classification algorithms. See [Martin1997]_ for examples and further motivation."
msgstr ""

#: ../modules/model_evaluation.rst:1558
msgid "This figure compares the ROC and DET curves of two example classifiers on the same classification task:"
msgstr ""

#: ../modules/model_evaluation.rst:1566
msgid "**Properties:**"
msgstr ""

#: ../modules/model_evaluation.rst:1568
msgid "DET curves form a linear curve in normal deviate scale if the detection scores are normally (or close-to normally) distributed. It was shown by [Navratil2007]_ that the reverse it not necessarily true and even more general distributions are able produce linear DET curves."
msgstr ""

#: ../modules/model_evaluation.rst:1573
msgid "The normal deviate scale transformation spreads out the points such that a comparatively larger space of plot is occupied. Therefore curves with similar classification performance might be easier to distinguish on a DET plot."
msgstr ""

#: ../modules/model_evaluation.rst:1578
msgid "With False Negative Rate being \"inverse\" to True Positive Rate the point of perfection for DET curves is the origin (in contrast to the top left corner for ROC curves)."
msgstr ""

#: ../modules/model_evaluation.rst:1582
msgid "**Applications and limitations:**"
msgstr ""

#: ../modules/model_evaluation.rst:1584
msgid "DET curves are intuitive to read and hence allow quick visual assessment of a classifier's performance. Additionally DET curves can be consulted for threshold analysis and operating point selection. This is particularly helpful if a comparison of error types is required."
msgstr ""

#: ../modules/model_evaluation.rst:1590
msgid "One the other hand DET curves do not provide their metric as a single number. Therefore for either automated evaluation or comparison to other classification tasks metrics like the derived area under ROC curve might be better suited."
msgstr ""

#: ../modules/model_evaluation.rst:1597
msgid "See :ref:`sphx_glr_auto_examples_model_selection_plot_det.py` for an example comparison between receiver operating characteristic (ROC) curves and Detection error tradeoff (DET) curves."
msgstr ""

#: ../modules/model_evaluation.rst:1603
msgid "Wikipedia contributors. Detection error tradeoff. Wikipedia, The Free Encyclopedia. September 4, 2017, 23:33 UTC. Available at: https://en.wikipedia.org/w/index.php?title=Detection_error_tradeoff&oldid=798982054. Accessed February 19, 2018."
msgstr ""

#: ../modules/model_evaluation.rst:1608
msgid "A. Martin, G. Doddington, T. Kamm, M. Ordowski, and M. Przybocki, `The DET Curve in Assessment of Detection Task Performance <http://www.dtic.mil/docs/citations/ADA530509>`_, NIST 1997."
msgstr ""

#: ../modules/model_evaluation.rst:1613
msgid "J. Navractil and D. Klusacek, \"`On Linear DETs, <http://www.research.ibm.com/CBG/papers/icassp07_navratil.pdf>`_\" 2007 IEEE International Conference on Acoustics, Speech and Signal Processing - ICASSP '07, Honolulu, HI, 2007, pp. IV-229-IV-232."
msgstr ""

#: ../modules/model_evaluation.rst:1623
msgid "Zero one loss"
msgstr ""

#: ../modules/model_evaluation.rst:1625
msgid "The :func:`zero_one_loss` function computes the sum or the average of the 0-1 classification loss (:math:`L_{0-1}`) over :math:`n_{\\text{samples}}`. By default, the function normalizes over the sample. To get the sum of the :math:`L_{0-1}`, set ``normalize`` to ``False``."
msgstr ""

#: ../modules/model_evaluation.rst:1630
msgid "In multilabel classification, the :func:`zero_one_loss` scores a subset as one if its labels strictly match the predictions, and as a zero if there are any errors.  By default, the function returns the percentage of imperfectly predicted subsets.  To get the count of such subsets instead, set ``normalize`` to ``False``"
msgstr ""

#: ../modules/model_evaluation.rst:1636
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample and :math:`y_i` is the corresponding true value, then the 0-1 loss :math:`L_{0-1}` is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:1640
msgid "L_{0-1}(y_i, \\hat{y}_i) = 1(\\hat{y}_i \\not= y_i)"
msgstr ""

#: ../modules/model_evaluation.rst:1656
msgid "In the multilabel case with binary label indicators, where the first label set [0,1] has an error::"
msgstr ""

#: ../modules/model_evaluation.rst:1667
msgid "See :ref:`sphx_glr_auto_examples_feature_selection_plot_rfe_with_cross_validation.py` for an example of zero one loss usage to perform recursive feature elimination with cross-validation."
msgstr ""

#: ../modules/model_evaluation.rst:1674
msgid "Brier score loss"
msgstr ""

#: ../modules/model_evaluation.rst:1676
msgid "The :func:`brier_score_loss` function computes the `Brier score <https://en.wikipedia.org/wiki/Brier_score>`_ for binary classes [Brier1950]_. Quoting Wikipedia:"
msgstr ""

#: ../modules/model_evaluation.rst:1680
msgid "\"The Brier score is a proper score function that measures the accuracy of probabilistic predictions. It is applicable to tasks in which predictions must assign probabilities to a set of mutually exclusive discrete outcomes.\""
msgstr ""

#: ../modules/model_evaluation.rst:1684
msgid "This function returns the mean squared error of the actual outcome :math:`y \\in \\{0,1\\}` and the predicted probability estimate :math:`p = \\operatorname{Pr}(y = 1)` (:term:`predict_proba`) as outputted by:"
msgstr ""

#: ../modules/model_evaluation.rst:1688
msgid "BS = \\frac{1}{n_{\\text{samples}}} \\sum_{i=0}^{n_{\\text{samples}} - 1}(y_i - p_i)^2"
msgstr ""

#: ../modules/model_evaluation.rst:1692
msgid "The Brier score loss is also between 0 to 1 and the lower the value (the mean square difference is smaller), the more accurate the prediction is."
msgstr ""

#: ../modules/model_evaluation.rst:1695 ../modules/model_evaluation.rst:1790
#: ../modules/model_evaluation.rst:1837 ../modules/model_evaluation.rst:1872
msgid "Here is a small example of usage of this function::"
msgstr ""

#: ../modules/model_evaluation.rst:1712
msgid "The Brier score can be used to assess how well a classifier is calibrated. However, a lower Brier score loss does not always mean a better calibration. This is because, by analogy with the bias-variance decomposition of the mean squared error, the Brier score loss can be decomposed as the sum of calibration loss and refinement loss [Bella2012]_. Calibration loss is defined as the mean squared deviation from empirical probabilities derived from the slope of ROC segments. Refinement loss can be defined as the expected optimal loss as measured by the area under the optimal cost curve. Refinement loss can change independently from calibration loss, thus a lower Brier score loss does not necessarily mean a better calibrated model. \"Only when refinement loss remains the same does a lower Brier score loss always mean better calibration\" [Bella2012]_, [Flach2008]_."
msgstr ""

#: ../modules/model_evaluation.rst:1727
msgid "See :ref:`sphx_glr_auto_examples_calibration_plot_calibration.py` for an example of Brier score loss usage to perform probability calibration of classifiers."
msgstr ""

#: ../modules/model_evaluation.rst:1733
msgid "G. Brier, `Verification of forecasts expressed in terms of probability <ftp://ftp.library.noaa.gov/docs.lib/htdocs/rescue/mwr/078/mwr-078-01-0001.pdf>`_, Monthly weather review 78.1 (1950)"
msgstr ""

#: ../modules/model_evaluation.rst:1738
msgid "Bella, Ferri, Hernández-Orallo, and Ramírez-Quintana `\"Calibration of Machine Learning Models\" <http://dmip.webs.upv.es/papers/BFHRHandbook2010.pdf>`_ in Khosrow-Pour, M. \"Machine learning: concepts, methodologies, tools and applications.\" Hershey, PA: Information Science Reference (2012)."
msgstr ""

#: ../modules/model_evaluation.rst:1744
msgid "Flach, Peter, and Edson Matsubara. `\"On classification, ranking, and probability estimation.\" <https://drops.dagstuhl.de/opus/volltexte/2008/1382/>`_ Dagstuhl Seminar Proceedings. Schloss Dagstuhl-Leibniz-Zentrum fr Informatik (2008)."
msgstr ""

#: ../modules/model_evaluation.rst:1751
msgid "Multilabel ranking metrics"
msgstr ""

#: ../modules/model_evaluation.rst:1755
msgid "In multilabel learning, each sample can have any number of ground truth labels associated with it. The goal is to give high scores and better rank to the ground truth labels."
msgstr ""

#: ../modules/model_evaluation.rst:1762
msgid "Coverage error"
msgstr ""

#: ../modules/model_evaluation.rst:1764
msgid "The :func:`coverage_error` function computes the average number of labels that have to be included in the final prediction such that all true labels are predicted. This is useful if you want to know how many top-scored-labels you have to predict in average without missing any true one. The best value of this metrics is thus the average number of true labels."
msgstr ""

#: ../modules/model_evaluation.rst:1772
msgid "Our implementation's score is 1 greater than the one given in Tsoumakas et al., 2010. This extends it to handle the degenerate case in which an instance has 0 true labels."
msgstr ""

#: ../modules/model_evaluation.rst:1776
msgid "Formally, given a binary indicator matrix of the ground truth labels :math:`y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}` and the score associated with each label :math:`\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}`, the coverage is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:1782
msgid "coverage(y, \\hat{f}) = \\frac{1}{n_{\\text{samples}}}\n"
"  \\sum_{i=0}^{n_{\\text{samples}} - 1} \\max_{j:y_{ij} = 1} \\text{rank}_{ij}\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:1786
msgid "with :math:`\\text{rank}_{ij} = \\left|\\left\\{k: \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}\\right|`. Given the rank definition, ties in ``y_scores`` are broken by giving the maximal rank that would have been assigned to all tied values."
msgstr ""

#: ../modules/model_evaluation.rst:1802
msgid "Label ranking average precision"
msgstr ""

#: ../modules/model_evaluation.rst:1804
msgid "The :func:`label_ranking_average_precision_score` function implements label ranking average precision (LRAP). This metric is linked to the :func:`average_precision_score` function, but is based on the notion of label ranking instead of precision and recall."
msgstr ""

#: ../modules/model_evaluation.rst:1809
msgid "Label ranking average precision (LRAP) averages over the samples the answer to the following question: for each ground truth label, what fraction of higher-ranked labels were true labels? This performance measure will be higher if you are able to give better rank to the labels associated with each sample. The obtained score is always strictly greater than 0, and the best value is 1. If there is exactly one relevant label per sample, label ranking average precision is equivalent to the `mean reciprocal rank <https://en.wikipedia.org/wiki/Mean_reciprocal_rank>`_."
msgstr ""

#: ../modules/model_evaluation.rst:1818
msgid "Formally, given a binary indicator matrix of the ground truth labels :math:`y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}` and the score associated with each label :math:`\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}`, the average precision is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:1824
msgid "LRAP(y, \\hat{f}) = \\frac{1}{n_{\\text{samples}}}\n"
"  \\sum_{i=0}^{n_{\\text{samples}} - 1} \\frac{1}{||y_i||_0}\n"
"  \\sum_{j:y_{ij} = 1} \\frac{|\\mathcal{L}_{ij}|}{\\text{rank}_{ij}}\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:1830
msgid "where :math:`\\mathcal{L}_{ij} = \\left\\{k: y_{ik} = 1, \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}`, :math:`\\text{rank}_{ij} = \\left|\\left\\{k: \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}\\right|`, :math:`|\\cdot|` computes the cardinality of the set (i.e., the number of elements in the set), and :math:`||\\cdot||_0` is the :math:`\\ell_0` \"norm\" (which computes the number of nonzero elements in a vector)."
msgstr ""

#: ../modules/model_evaluation.rst:1849
msgid "Ranking loss"
msgstr ""

#: ../modules/model_evaluation.rst:1851
msgid "The :func:`label_ranking_loss` function computes the ranking loss which averages over the samples the number of label pairs that are incorrectly ordered, i.e. true labels have a lower score than false labels, weighted by the inverse of the number of ordered pairs of false and true labels. The lowest achievable ranking loss is zero."
msgstr ""

#: ../modules/model_evaluation.rst:1857
msgid "Formally, given a binary indicator matrix of the ground truth labels :math:`y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}` and the score associated with each label :math:`\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}`, the ranking loss is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:1863
msgid "ranking\\_loss(y, \\hat{f}) =  \\frac{1}{n_{\\text{samples}}}\n"
"  \\sum_{i=0}^{n_{\\text{samples}} - 1} \\frac{1}{||y_i||_0(n_\\text{labels} - ||y_i||_0)}\n"
"  \\left|\\left\\{(k, l): \\hat{f}_{ik} \\leq \\hat{f}_{il}, y_{ik} = 1, y_{il} = 0 \\right\\}\\right|\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:1868
msgid "where :math:`|\\cdot|` computes the cardinality of the set (i.e., the number of elements in the set) and :math:`||\\cdot||_0` is the :math:`\\ell_0` \"norm\" (which computes the number of nonzero elements in a vector)."
msgstr ""

#: ../modules/model_evaluation.rst:1888
msgid "Tsoumakas, G., Katakis, I., & Vlahavas, I. (2010). Mining multi-label data. In Data mining and knowledge discovery handbook (pp. 667-685). Springer US."
msgstr ""

#: ../modules/model_evaluation.rst:1894
msgid "Normalized Discounted Cumulative Gain"
msgstr ""

#: ../modules/model_evaluation.rst:1896
msgid "Discounted Cumulative Gain (DCG) and Normalized Discounted Cumulative Gain (NDCG) are ranking metrics implemented in :func:`~sklearn.metrics.dcg_score` and :func:`~sklearn.metrics.ndcg_score` ; they compare a predicted order to ground-truth scores, such as the relevance of answers to a query."
msgstr ""

#: ../modules/model_evaluation.rst:1901
msgid "From the Wikipedia page for Discounted Cumulative Gain:"
msgstr ""

#: ../modules/model_evaluation.rst:1903
msgid "\"Discounted cumulative gain (DCG) is a measure of ranking quality. In information retrieval, it is often used to measure effectiveness of web search engine algorithms or related applications. Using a graded relevance scale of documents in a search-engine result set, DCG measures the usefulness, or gain, of a document based on its position in the result list. The gain is accumulated from the top of the result list to the bottom, with the gain of each result discounted at lower ranks\""
msgstr ""

#: ../modules/model_evaluation.rst:1911
msgid "DCG orders the true targets (e.g. relevance of query answers) in the predicted order, then multiplies them by a logarithmic decay and sums the result. The sum can be truncated after the first :math:`K` results, in which case we call it DCG@K. NDCG, or NDCG@K is DCG divided by the DCG obtained by a perfect prediction, so that it is always between 0 and 1. Usually, NDCG is preferred to DCG."
msgstr ""

#: ../modules/model_evaluation.rst:1918
msgid "Compared with the ranking loss, NDCG can take into account relevance scores, rather than a ground-truth ranking. So if the ground-truth consists only of an ordering, the ranking loss should be preferred; if the ground-truth consists of actual usefulness scores (e.g. 0 for irrelevant, 1 for relevant, 2 for very relevant), NDCG can be used."
msgstr ""

#: ../modules/model_evaluation.rst:1924
msgid "For one sample, given the vector of continuous ground-truth values for each target :math:`y \\in \\mathbb{R}^{M}`, where :math:`M` is the number of outputs, and the prediction :math:`\\hat{y}`, which induces the ranking function :math:`f`, the DCG score is"
msgstr ""

#: ../modules/model_evaluation.rst:1929
msgid "\\sum_{r=1}^{\\min(K, M)}\\frac{y_{f(r)}}{\\log(1 + r)}\n\n"
msgstr ""

#: ../modules/model_evaluation.rst:1932
msgid "and the NDCG score is the DCG score divided by the DCG score obtained for :math:`y`."
msgstr ""

#: ../modules/model_evaluation.rst:1937
msgid "`Wikipedia entry for Discounted Cumulative Gain <https://en.wikipedia.org/wiki/Discounted_cumulative_gain>`_"
msgstr ""

#: ../modules/model_evaluation.rst:1940
msgid "Jarvelin, K., & Kekalainen, J. (2002). Cumulated gain-based evaluation of IR techniques. ACM Transactions on Information Systems (TOIS), 20(4), 422-446."
msgstr ""

#: ../modules/model_evaluation.rst:1944
msgid "Wang, Y., Wang, L., Li, Y., He, D., Chen, W., & Liu, T. Y. (2013, May). A theoretical analysis of NDCG ranking measures. In Proceedings of the 26th Annual Conference on Learning Theory (COLT 2013)"
msgstr ""

#: ../modules/model_evaluation.rst:1948
msgid "McSherry, F., & Najork, M. (2008, March). Computing information retrieval performance measures efficiently in the presence of tied scores. In European conference on information retrieval (pp. 414-421). Springer, Berlin, Heidelberg."
msgstr ""

#: ../modules/model_evaluation.rst:1956
msgid "Regression metrics"
msgstr ""

#: ../modules/model_evaluation.rst:1960
msgid "The :mod:`sklearn.metrics` module implements several loss, score, and utility functions to measure regression performance. Some of those have been enhanced to handle the multioutput case: :func:`mean_squared_error`, :func:`mean_absolute_error`, :func:`explained_variance_score` and :func:`r2_score`."
msgstr ""

#: ../modules/model_evaluation.rst:1967
msgid "These functions have an ``multioutput`` keyword argument which specifies the way the scores or losses for each individual target should be averaged. The default is ``'uniform_average'``, which specifies a uniformly weighted mean over outputs. If an ``ndarray`` of shape ``(n_outputs,)`` is passed, then its entries are interpreted as weights and an according weighted average is returned. If ``multioutput`` is ``'raw_values'`` is specified, then all unaltered individual scores or losses will be returned in an array of shape ``(n_outputs,)``."
msgstr ""

#: ../modules/model_evaluation.rst:1977
msgid "The :func:`r2_score` and :func:`explained_variance_score` accept an additional value ``'variance_weighted'`` for the ``multioutput`` parameter. This option leads to a weighting of each individual score by the variance of the corresponding target variable. This setting quantifies the globally captured unscaled variance. If the target variables are of different scale, then this score puts more importance on well explaining the higher variance variables. ``multioutput='variance_weighted'`` is the default value for :func:`r2_score` for backward compatibility. This will be changed to ``uniform_average`` in the future."
msgstr ""

#: ../modules/model_evaluation.rst:1990
msgid "Explained variance score"
msgstr ""

#: ../modules/model_evaluation.rst:1992
msgid "The :func:`explained_variance_score` computes the `explained variance regression score <https://en.wikipedia.org/wiki/Explained_variation>`_."
msgstr ""

#: ../modules/model_evaluation.rst:1995
msgid "If :math:`\\hat{y}` is the estimated target output, :math:`y` the corresponding (correct) target output, and :math:`Var` is `Variance <https://en.wikipedia.org/wiki/Variance>`_, the square of the standard deviation, then the explained variance is estimated as follow:"
msgstr ""

#: ../modules/model_evaluation.rst:2000
msgid "explained\\_{}variance(y, \\hat{y}) = 1 - \\frac{Var\\{ y - \\hat{y}\\}}{Var\\{y\\}}"
msgstr ""

#: ../modules/model_evaluation.rst:2004
msgid "The best possible score is 1.0, lower values are worse."
msgstr ""

#: ../modules/model_evaluation.rst:2006
msgid "Here is a small example of usage of the :func:`explained_variance_score` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2024
msgid "Max error"
msgstr ""

#: ../modules/model_evaluation.rst:2026
msgid "The :func:`max_error` function computes the maximum `residual error <https://en.wikipedia.org/wiki/Errors_and_residuals>`_ , a metric that captures the worst case error between the predicted value and the true value. In a perfectly fitted single output regression model, ``max_error`` would be ``0`` on the training set and though this would be highly unlikely in the real world, this metric shows the extent of error that the model had when it was fitted."
msgstr ""

#: ../modules/model_evaluation.rst:2035
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample, and :math:`y_i` is the corresponding true value, then the max error is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2039
msgid "\\text{Max Error}(y, \\hat{y}) = max(| y_i - \\hat{y}_i |)"
msgstr ""

#: ../modules/model_evaluation.rst:2043
msgid "Here is a small example of usage of the :func:`max_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2051
msgid "The :func:`max_error` does not support multioutput."
msgstr ""

#: ../modules/model_evaluation.rst:2056
msgid "Mean absolute error"
msgstr ""

#: ../modules/model_evaluation.rst:2058
msgid "The :func:`mean_absolute_error` function computes `mean absolute error <https://en.wikipedia.org/wiki/Mean_absolute_error>`_, a risk metric corresponding to the expected value of the absolute error loss or :math:`l1`-norm loss."
msgstr ""

#: ../modules/model_evaluation.rst:2063
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample, and :math:`y_i` is the corresponding true value, then the mean absolute error (MAE) estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2067
msgid "\\text{MAE}(y, \\hat{y}) = \\frac{1}{n_{\\text{samples}}} \\sum_{i=0}^{n_{\\text{samples}}-1} \\left| y_i - \\hat{y}_i \\right|."
msgstr ""

#: ../modules/model_evaluation.rst:2071
msgid "Here is a small example of usage of the :func:`mean_absolute_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2090
msgid "Mean squared error"
msgstr ""

#: ../modules/model_evaluation.rst:2092
msgid "The :func:`mean_squared_error` function computes `mean square error <https://en.wikipedia.org/wiki/Mean_squared_error>`_, a risk metric corresponding to the expected value of the squared (quadratic) error or loss."
msgstr ""

#: ../modules/model_evaluation.rst:2097
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample, and :math:`y_i` is the corresponding true value, then the mean squared error (MSE) estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2101
msgid "\\text{MSE}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples} - 1} (y_i - \\hat{y}_i)^2."
msgstr ""

#: ../modules/model_evaluation.rst:2105
msgid "Here is a small example of usage of the :func:`mean_squared_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2120
msgid "See :ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_regression.py` for an example of mean squared error usage to evaluate gradient boosting regression."
msgstr ""

#: ../modules/model_evaluation.rst:2127
msgid "Mean squared logarithmic error"
msgstr ""

#: ../modules/model_evaluation.rst:2129
msgid "The :func:`mean_squared_log_error` function computes a risk metric corresponding to the expected value of the squared logarithmic (quadratic) error or loss."
msgstr ""

#: ../modules/model_evaluation.rst:2133
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample, and :math:`y_i` is the corresponding true value, then the mean squared logarithmic error (MSLE) estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2138
msgid "\\text{MSLE}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}} \\sum_{i=0}^{n_\\text{samples} - 1} (\\log_e (1 + y_i) - \\log_e (1 + \\hat{y}_i) )^2."
msgstr ""

#: ../modules/model_evaluation.rst:2142
msgid "Where :math:`\\log_e (x)` means the natural logarithm of :math:`x`. This metric is best to use when targets having exponential growth, such as population counts, average sales of a commodity over a span of years etc. Note that this metric penalizes an under-predicted estimate greater than an over-predicted estimate."
msgstr ""

#: ../modules/model_evaluation.rst:2148
msgid "Here is a small example of usage of the :func:`mean_squared_log_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2164
msgid "Mean absolute percentage error"
msgstr ""

#: ../modules/model_evaluation.rst:2165
msgid "The :func:`mean_absolute_percentage_error` (MAPE), also known as mean absolute percentage deviation (MAPD), is an evaluation metric for regression problems. The idea of this metric is to be sensitive to relative errors. It is for example not changed by a global scaling of the target variable."
msgstr ""

#: ../modules/model_evaluation.rst:2170
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample and :math:`y_i` is the corresponding true value, then the mean absolute percentage error (MAPE) estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2174
msgid "\\text{MAPE}(y, \\hat{y}) = \\frac{1}{n_{\\text{samples}}} \\sum_{i=0}^{n_{\\text{samples}}-1} \\frac{{}\\left| y_i - \\hat{y}_i \\right|}{max(\\epsilon, \\left| y_i \\right|)}"
msgstr ""

#: ../modules/model_evaluation.rst:2178
msgid "where :math:`\\epsilon` is an arbitrary small yet strictly positive number to avoid undefined results when y is zero."
msgstr ""

#: ../modules/model_evaluation.rst:2181
msgid "The :func:`mean_absolute_percentage_error` function supports multioutput."
msgstr ""

#: ../modules/model_evaluation.rst:2183
msgid "Here is a small example of usage of the :func:`mean_absolute_percentage_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2192
msgid "In above example, if we had used `mean_absolute_error`, it would have ignored the small magnitude values and only reflected the error in prediction of highest magnitude value. But that problem is resolved in case of MAPE because it calculates relative percentage error with respect to actual output."
msgstr ""

#: ../modules/model_evaluation.rst:2200
msgid "Median absolute error"
msgstr ""

#: ../modules/model_evaluation.rst:2202
msgid "The :func:`median_absolute_error` is particularly interesting because it is robust to outliers. The loss is calculated by taking the median of all absolute differences between the target and the prediction."
msgstr ""

#: ../modules/model_evaluation.rst:2206
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample and :math:`y_i` is the corresponding true value, then the median absolute error (MedAE) estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2210
msgid "\\text{MedAE}(y, \\hat{y}) = \\text{median}(\\mid y_1 - \\hat{y}_1 \\mid, \\ldots, \\mid y_n - \\hat{y}_n \\mid)."
msgstr ""

#: ../modules/model_evaluation.rst:2214
msgid "The :func:`median_absolute_error` does not support multioutput."
msgstr ""

#: ../modules/model_evaluation.rst:2216
msgid "Here is a small example of usage of the :func:`median_absolute_error` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2228
msgid "R² score, the coefficient of determination"
msgstr ""

#: ../modules/model_evaluation.rst:2230
msgid "The :func:`r2_score` function computes the `coefficient of determination <https://en.wikipedia.org/wiki/Coefficient_of_determination>`_, usually denoted as R²."
msgstr ""

#: ../modules/model_evaluation.rst:2234
msgid "It represents the proportion of variance (of y) that has been explained by the independent variables in the model. It provides an indication of goodness of fit and therefore a measure of how well unseen samples are likely to be predicted by the model, through the proportion of explained variance."
msgstr ""

#: ../modules/model_evaluation.rst:2239
msgid "As such variance is dataset dependent, R² may not be meaningfully comparable across different datasets. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a R² score of 0.0."
msgstr ""

#: ../modules/model_evaluation.rst:2245
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample and :math:`y_i` is the corresponding true value for total :math:`n` samples, the estimated R² is defined as:"
msgstr ""

#: ../modules/model_evaluation.rst:2249
msgid "R^2(y, \\hat{y}) = 1 - \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{n} (y_i - \\bar{y})^2}"
msgstr ""

#: ../modules/model_evaluation.rst:2253
msgid "where :math:`\\bar{y} = \\frac{1}{n} \\sum_{i=1}^{n} y_i` and :math:`\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{n} \\epsilon_i^2`."
msgstr ""

#: ../modules/model_evaluation.rst:2255
msgid "Note that :func:`r2_score` calculates unadjusted R² without correcting for bias in sample variance of y."
msgstr ""

#: ../modules/model_evaluation.rst:2258
msgid "Here is a small example of usage of the :func:`r2_score` function::"
msgstr ""

#: ../modules/model_evaluation.rst:2281
msgid "See :ref:`sphx_glr_auto_examples_linear_model_plot_lasso_and_elasticnet.py` for an example of R² score usage to evaluate Lasso and Elastic Net on sparse signals."
msgstr ""

#: ../modules/model_evaluation.rst:2289
msgid "Mean Poisson, Gamma, and Tweedie deviances"
msgstr ""

#: ../modules/model_evaluation.rst:2290
msgid "The :func:`mean_tweedie_deviance` function computes the `mean Tweedie deviance error <https://en.wikipedia.org/wiki/Tweedie_distribution#The_Tweedie_deviance>`_ with a ``power`` parameter (:math:`p`). This is a metric that elicits predicted expectation values of regression targets."
msgstr ""

#: ../modules/model_evaluation.rst:2296
msgid "Following special cases exist,"
msgstr ""

#: ../modules/model_evaluation.rst:2298
msgid "when ``power=0`` it is equivalent to :func:`mean_squared_error`."
msgstr ""

#: ../modules/model_evaluation.rst:2299
msgid "when ``power=1`` it is equivalent to :func:`mean_poisson_deviance`."
msgstr ""

#: ../modules/model_evaluation.rst:2300
msgid "when ``power=2`` it is equivalent to :func:`mean_gamma_deviance`."
msgstr ""

#: ../modules/model_evaluation.rst:2302
msgid "If :math:`\\hat{y}_i` is the predicted value of the :math:`i`-th sample, and :math:`y_i` is the corresponding true value, then the mean Tweedie deviance error (D) for power :math:`p`, estimated over :math:`n_{\\text{samples}}` is defined as"
msgstr ""

#: ../modules/model_evaluation.rst:2307
msgid "\\text{D}(y, \\hat{y}) = \\frac{1}{n_\\text{samples}}\n"
"\\sum_{i=0}^{n_\\text{samples} - 1}\n"
"\\begin{cases}\n"
"(y_i-\\hat{y}_i)^2, & \\text{for }p=0\\text{ (Normal)}\\\\\n"
"2(y_i \\log(y/\\hat{y}_i) + \\hat{y}_i - y_i),  & \\text{for}p=1\\text{ (Poisson)}\\\\\n"
"2(\\log(\\hat{y}_i/y_i) + y_i/\\hat{y}_i - 1),  & \\text{for}p=2\\text{ (Gamma)}\\\\\n"
"2\\left(\\frac{\\max(y_i,0)^{2-p}}{(1-p)(2-p)}-\n"
"\\frac{y\\,\\hat{y}^{1-p}_i}{1-p}+\\frac{\\hat{y}^{2-p}_i}{2-p}\\right),\n"
"& \\text{otherwise}\n"
"\\end{cases}"
msgstr ""

#: ../modules/model_evaluation.rst:2320
msgid "Tweedie deviance is a homogeneous function of degree ``2-power``. Thus, Gamma distribution with ``power=2`` means that simultaneously scaling ``y_true`` and ``y_pred`` has no effect on the deviance. For Poisson distribution ``power=1`` the deviance scales linearly, and for Normal distribution (``power=0``), quadratically.  In general, the higher ``power`` the less weight is given to extreme deviations between true and predicted targets."
msgstr ""

#: ../modules/model_evaluation.rst:2328
#, python-format
msgid "For instance, let's compare the two predictions 1.0 and 100 that are both 50% of their corresponding true value."
msgstr ""

#: ../modules/model_evaluation.rst:2331
msgid "The mean squared error (``power=0``) is very sensitive to the prediction difference of the second point,::"
msgstr ""

#: ../modules/model_evaluation.rst:2340
msgid "If we increase ``power`` to 1,::"
msgstr ""

#: ../modules/model_evaluation.rst:2347
msgid "the difference in errors decreases. Finally, by setting, ``power=2``::"
msgstr ""

#: ../modules/model_evaluation.rst:2354
msgid "we would get identical errors. The deviance when ``power=2`` is thus only sensitive to relative errors."
msgstr ""

#: ../modules/model_evaluation.rst:2360
msgid "Clustering metrics"
msgstr ""

#: ../modules/model_evaluation.rst:2364
msgid "The :mod:`sklearn.metrics` module implements several loss, score, and utility functions. For more information see the :ref:`clustering_evaluation` section for instance clustering, and :ref:`biclustering_evaluation` for biclustering."
msgstr ""

#: ../modules/model_evaluation.rst:2374
msgid "Dummy estimators"
msgstr ""

#: ../modules/model_evaluation.rst:2378
msgid "When doing supervised learning, a simple sanity check consists of comparing one's estimator against simple rules of thumb. :class:`DummyClassifier` implements several such simple strategies for classification:"
msgstr ""

#: ../modules/model_evaluation.rst:2382
msgid "``stratified`` generates random predictions by respecting the training set class distribution."
msgstr ""

#: ../modules/model_evaluation.rst:2384
msgid "``most_frequent`` always predicts the most frequent label in the training set."
msgstr ""

#: ../modules/model_evaluation.rst:2385
msgid "``prior`` always predicts the class that maximizes the class prior (like ``most_frequent``) and ``predict_proba`` returns the class prior."
msgstr ""

#: ../modules/model_evaluation.rst:2387
msgid "``uniform`` generates predictions uniformly at random."
msgstr ""

#: ../modules/model_evaluation.rst:2390
msgid "``constant`` always predicts a constant label that is provided by the user."
msgstr ""

#: ../modules/model_evaluation.rst:2389
msgid "A major motivation of this method is F1-scoring, when the positive class is in the minority."
msgstr ""

#: ../modules/model_evaluation.rst:2392
msgid "Note that with all these strategies, the ``predict`` method completely ignores the input data!"
msgstr ""

#: ../modules/model_evaluation.rst:2395
msgid "To illustrate :class:`DummyClassifier`, first let's create an imbalanced dataset::"
msgstr ""

#: ../modules/model_evaluation.rst:2404
msgid "Next, let's compare the accuracy of ``SVC`` and ``most_frequent``::"
msgstr ""

#: ../modules/model_evaluation.rst:2417
msgid "We see that ``SVC`` doesn't do much better than a dummy classifier. Now, let's change the kernel::"
msgstr ""

#: ../modules/model_evaluation.rst:2424
msgid "We see that the accuracy was boosted to almost 100%.  A cross validation strategy is recommended for a better estimate of the accuracy, if it is not too CPU costly. For more information see the :ref:`cross_validation` section. Moreover if you want to optimize over the parameter space, it is highly recommended to use an appropriate methodology; see the :ref:`grid_search` section for details."
msgstr ""

#: ../modules/model_evaluation.rst:2431
msgid "More generally, when the accuracy of a classifier is too close to random, it probably means that something went wrong: features are not helpful, a hyperparameter is not correctly tuned, the classifier is suffering from class imbalance, etc..."
msgstr ""

#: ../modules/model_evaluation.rst:2436
msgid ":class:`DummyRegressor` also implements four simple rules of thumb for regression:"
msgstr ""

#: ../modules/model_evaluation.rst:2438
msgid "``mean`` always predicts the mean of the training targets."
msgstr ""

#: ../modules/model_evaluation.rst:2439
msgid "``median`` always predicts the median of the training targets."
msgstr ""

#: ../modules/model_evaluation.rst:2440
msgid "``quantile`` always predicts a user provided quantile of the training targets."
msgstr ""

#: ../modules/model_evaluation.rst:2441
msgid "``constant`` always predicts a constant value that is provided by the user."
msgstr ""

#: ../modules/model_evaluation.rst:2443
msgid "In all these strategies, the ``predict`` method completely ignores the input data."
msgstr ""

