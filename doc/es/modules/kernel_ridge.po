msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-26 19:56\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/modules/kernel_ridge.po\n"
"X-Crowdin-File-ID: 5934\n"
"Language: es_ES\n"

#: ../modules/kernel_ridge.rst:5
msgid "Kernel ridge regression"
msgstr "Regresión de cresta de núcleo"

#: ../modules/kernel_ridge.rst:9
msgid "Kernel ridge regression (KRR) [M2012]_ combines :ref:`ridge_regression` (linear least squares with l2-norm regularization) with the `kernel trick <https://en.wikipedia.org/wiki/Kernel_method>`_. It thus learns a linear function in the space induced by the respective kernel and the data. For non-linear kernels, this corresponds to a non-linear function in the original space."
msgstr "La regresión de cresta del núcleo (Kernel Ridge Regression, KRR) [M2012]_ combina :ref:`ridge_regression` (mínimos cuadrados lineales con regularización de la norma l2) con el `kernel triciclo <https://en.wikipedia.org/wiki/Kernel_method>`_. Así aprende una función lineal en el espacio inducido por el núcleo respectivo y los datos. Para los núcleos no lineales, esto corresponde a una función no lineal en el espacio original."

#: ../modules/kernel_ridge.rst:16
msgid "The form of the model learned by :class:`KernelRidge` is identical to support vector regression (:class:`~sklearn.svm.SVR`). However, different loss functions are used: KRR uses squared error loss while support vector regression uses :math:`\\epsilon`-insensitive loss, both combined with l2 regularization. In contrast to :class:`~sklearn.svm.SVR`, fitting :class:`KernelRidge` can be done in closed-form and is typically faster for medium-sized datasets. On the other hand, the learned model is non-sparse and thus slower than :class:`~sklearn.svm.SVR`, which learns a sparse model for :math:`\\epsilon > 0`, at prediction-time."
msgstr "La forma del modelo aprendido por :class:`KernelRidge` es idéntica a la regresión de vectores de soporte (:class:`~sklearn.svm.SVR`). Sin embargo, se utilizan diferentes funciones de pérdida: KRR utiliza la pérdida de error al cuadrado mientras que la regresión de vectores de soporte utiliza la pérdida insensible (insensitive loss) a :math:`\\epsilon`, ambas combinadas con la regularización l2. A diferencia de :class:`~sklearn.svm.SVR`, el ajuste de :class:`KernelRidge` puede realizarse de forma cerrada y suele ser más rápido para conjuntos de datos de tamaño medio. Por otro lado, el modelo aprendido no es disperso y por lo tanto es más lento que :class:`~sklearn.svm.SVR`, que aprende un modelo disperso para :math:`\\epsilon > 0`, en tiempo de predicción."

#: ../modules/kernel_ridge.rst:26
msgid "The following figure compares :class:`KernelRidge` and :class:`~sklearn.svm.SVR` on an artificial dataset, which consists of a sinusoidal target function and strong noise added to every fifth datapoint. The learned model of :class:`KernelRidge` and :class:`~sklearn.svm.SVR` is plotted, where both complexity/regularization and bandwidth of the RBF kernel have been optimized using grid-search. The learned functions are very similar; however, fitting :class:`KernelRidge` is approximately seven times faster than fitting :class:`~sklearn.svm.SVR` (both with grid-search). However, prediction of 100000 target values is more than three times faster with :class:`~sklearn.svm.SVR` since it has learned a sparse model using only approximately 1/3 of the 100 training datapoints as support vectors."
msgstr "La siguiente figura compara :class:`KernelRidge` y :class:`~sklearn.svm.SVR` en un conjunto de datos artificial, que consiste en una función objetivo sinusoidal y un fuerte ruido añadido cada quinto punto de datos. El modelo aprendido de :class:`KernelRidge` y :class:`~sklearn.svm.SVR` se representa gráficamente, donde tanto la complejidad/regularización como el ancho de banda del kernel RBF se han optimizado utilizando la búsqueda exhaustiva (grid-search). Las funciones aprendidas son muy similares; sin embargo, el ajuste de :class:`KernelRidge` es aproximadamente siete veces más rápido que el ajuste de :class:`~sklearn.svm.SVR` (ambos con búsqueda exhaustiva). Sin embargo, la predicción de 100.000 valores objetivo es más de tres veces más rápida con :class:`~sklearn.svm.SVR` ya que ha aprendido un modelo disperso utilizando sólo aproximadamente 1/3 de los 100 puntos de datos de entrenamiento como vectores de soporte."

#: ../modules/kernel_ridge.rst:42
msgid "The next figure compares the time for fitting and prediction of :class:`KernelRidge` and :class:`~sklearn.svm.SVR` for different sizes of the training set. Fitting :class:`KernelRidge` is faster than :class:`~sklearn.svm.SVR` for medium-sized training sets (less than 1000 samples); however, for larger training sets :class:`~sklearn.svm.SVR` scales better. With regard to prediction time, :class:`~sklearn.svm.SVR` is faster than :class:`KernelRidge` for all sizes of the training set because of the learned sparse solution. Note that the degree of sparsity and thus the prediction time depends on the parameters :math:`\\epsilon` and :math:`C` of the :class:`~sklearn.svm.SVR`; :math:`\\epsilon = 0` would correspond to a dense model."
msgstr "La siguiente figura compara el tiempo de ajuste y predicción de :class:`KernelRidge` y :class:`~sklearn.svm.SVR` para diferentes tamaños del conjunto de entrenamiento. El ajuste de :class:`KernelRidge` es más rápido que el de :class:`~sklearn.svm.SVR` para conjuntos de entrenamiento de tamaño medio (menos de 1000 muestras); sin embargo, para conjuntos de entrenamiento más grandes :class:`~sklearn.svm.SVR` se adapta mejor. Con respecto al tiempo de predicción, :class:`~sklearn.svm.SVR` es más rápido que :class:`KernelRidge` para todos los tamaños del conjunto de entrenamiento debido a la solución dispersa aprendida. Ten en cuenta que el grado de dispersión y por lo tanto el tiempo de predicción depende de los parámetros :math:`\\epsilon` y :math:`C` de la :class:`~sklearn.svm.SVR`; :math:`\\epsilon = 0` correspondería a un modelo denso."

#: ../modules/kernel_ridge.rst:61
msgid "\"Machine Learning: A Probabilistic Perspective\" Murphy, K. P. - chapter 14.4.3, pp. 492-493, The MIT Press, 2012"
msgstr "\"Machine Learning: A Probabilistic Perspective\" Murphy, K. P. - capítulo 14.4.3, pp. 492-493, The MIT Press, 2012"

