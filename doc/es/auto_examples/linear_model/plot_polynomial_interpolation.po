msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:07\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/auto_examples/linear_model/plot_polynomial_interpolation.po\n"
"X-Crowdin-File-ID: 2508\n"
"Language: es_ES\n"

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:13
msgid "Click :ref:`here <sphx_glr_download_auto_examples_linear_model_plot_polynomial_interpolation.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:23
msgid "Polynomial interpolation"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:25
msgid "This example demonstrates how to approximate a function with a polynomial of degree n_degree by using ridge regression. Concretely, from n_samples 1d points, it suffices to build the Vandermonde matrix, which is n_samples x n_degree+1 and has the following form:"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:32
msgid "[[1, x_1, x_1 ** 2, x_1 ** 3, ...],"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:31
msgid "[1, x_2, x_2 ** 2, x_2 ** 3, ...], ...]"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:34
msgid "Intuitively, this matrix can be interpreted as a matrix of pseudo features (the points raised to some power). The matrix is akin to (but different from) the matrix induced by a polynomial kernel."
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:38
msgid "This example shows that you can do non-linear regression with a linear model, using a pipeline to add non-linear features. Kernel methods extend this idea and can induce very high (even infinite) dimensional feature spaces."
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:109
msgid "**Total running time of the script:** ( 0 minutes  0.111 seconds)"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:131
msgid ":download:`Download Python source code: plot_polynomial_interpolation.py <plot_polynomial_interpolation.py>`"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:137
msgid ":download:`Download Jupyter notebook: plot_polynomial_interpolation.ipynb <plot_polynomial_interpolation.ipynb>`"
msgstr ""

#: ../auto_examples/linear_model/plot_polynomial_interpolation.rst:144
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

