msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-06-29 01:35\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/auto_examples/ensemble/plot_gradient_boosting_regression.po\n"
"X-Crowdin-File-ID: 4558\n"
"Language: es_ES\n"

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:13
msgid "Click :ref:`here <sphx_glr_download_auto_examples_ensemble_plot_gradient_boosting_regression.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:23
msgid "Gradient Boosting regression"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:25
msgid "This example demonstrates Gradient Boosting to produce a predictive model from an ensemble of weak predictive models. Gradient boosting can be used for regression and classification problems. Here, we will train a model to tackle a diabetes regression task. We will obtain the results from :class:`~sklearn.ensemble.GradientBoostingRegressor` with least squares loss and 500 regression trees of depth 4."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:32
msgid "Note: For larger datasets (n_samples >= 10000), please refer to :class:`~sklearn.ensemble.HistGradientBoostingRegressor`."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:64
msgid "Load the data"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:66
msgid "First we need to load the data."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:86
msgid "Data preprocessing"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:88
#, python-format
msgid "Next, we will split our dataset to use 90% for training and leave the rest for testing. We will also set the regression model parameters. You can play with these parameters to see how the results change."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:92
msgid "n_estimators : the number of boosting stages that will be performed. Later, we will plot deviance against boosting iterations."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:95
msgid "max_depth : limits the number of nodes in the tree. The best value depends on the interaction of the input variables."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:98
msgid "min_samples_split : the minimum number of samples required to split an internal node."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:101
msgid "learning_rate : how much the contribution of each tree will shrink."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:103
msgid "loss : loss function to optimize. The least squares function is  used in this case however, there are many other options (see :class:`~sklearn.ensemble.GradientBoostingRegressor` )."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:131
msgid "Fit regression model"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:133
msgid "Now we will initiate the gradient boosting regressors and fit it with our training data. Let's also look and the mean squared error on the test data."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:153
msgid "Out:"
msgstr "Salida:"

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:165
msgid "Plot training deviance"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:167
msgid "Finally, we will visualize the results. To do that we will first compute the test set deviance and then plot it against boosting iterations."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:206
msgid "Plot feature importance"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:208
msgid "Careful, impurity-based feature importances can be misleading for high cardinality features (many unique values). As an alternative, the permutation importances of ``reg`` can be computed on a held out test set. See :ref:`permutation_importance` for more details."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:213
msgid "For this example, the impurity-based and permutation methods identify the same 2 strongly predictive features but not in the same order. The third most predictive feature, \"bp\", is also the same for the 2 methods. The remaining features are less predictive and the error bars of the permutation plot show that they overlap with 0."
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:256
msgid "**Total running time of the script:** ( 0 minutes  2.372 seconds)"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:278
msgid ":download:`Download Python source code: plot_gradient_boosting_regression.py <plot_gradient_boosting_regression.py>`"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:284
msgid ":download:`Download Jupyter notebook: plot_gradient_boosting_regression.ipynb <plot_gradient_boosting_regression.ipynb>`"
msgstr ""

#: ../auto_examples/ensemble/plot_gradient_boosting_regression.rst:291
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

