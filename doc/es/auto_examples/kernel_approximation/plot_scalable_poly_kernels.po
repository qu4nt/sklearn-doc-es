msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/auto_examples/kernel_approximation/plot_scalable_poly_kernels.po\n"
"X-Crowdin-File-ID: 2462\n"
"Language: es_ES\n"

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:13
msgid "Click :ref:`here <sphx_glr_download_auto_examples_kernel_approximation_plot_scalable_poly_kernels.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:23
msgid "Scalable learning with polynomial kernel aproximation"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:25
msgid "This example illustrates the use of :class:`PolynomialCountSketch` to efficiently generate polynomial kernel feature-space approximations. This is used to train linear classifiers that approximate the accuracy of kernelized ones."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:32
msgid "We use the Covtype dataset [2], trying to reproduce the experiments on the original paper of Tensor Sketch [1], i.e. the algorithm implemented by :class:`PolynomialCountSketch`."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:36
msgid "First, we compute the accuracy of a linear classifier on the original features. Then, we train linear classifiers on different numbers of features (`n_components`) generated by :class:`PolynomialCountSketch`, approximating the accuracy of a kernelized classifier in a scalable manner."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:67
msgid "Load the Covtype dataset, which contains 581,012 samples with 54 features each, distributed among 6 classes. The goal of this dataset is to predict forest cover type from cartographic variables only (no remotely sensed data). After loading, we transform it into a binary classification problem to match the version of the dataset in the LIBSVM webpage [2], which was the one used in [1]."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:93
msgid "Here we select 5,000 samples for training and 10,000 for testing. To actually reproduce the results in the original Tensor Sketch paper, select 100,000 for training."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:115
msgid "Now scale features to the range [0, 1] to match the format of the dataset in the LIBSVM webpage, and then normalize to unit length as done in the original Tensor Sketch paper [1]."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:138
msgid "As a baseline, train a linear SVM on the original features and print the accuracy. We also measure and store accuracies and training times to plot them latter."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:164
#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:229
#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:271
msgid "Out:"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:175
msgid "Then we train linear SVMs on the features generated by :class:`PolynomialCountSketch` with different values for `n_components`, showing that these kernel feature approximations improve the accuracy of linear classification. In typical application scenarios, `n_components` should be larger than the number of features in the input representation in order to achieve an improvement with respect to linear classification. As a rule of thumb, the optimum of evaluation score / run time cost is typically achieved at around `n_components` = 10 * `n_features`, though this might depend on the specific dataset being handled. Note that, since the original samples have 54 features, the explicit feature map of the polynomial kernel of degree four would have approximately 8.5 million features (precisely, 54^4). Thanks to :class:`PolynomialCountSketch`, we can condense most of the discriminative information of that feature space into a much more compact representation. We repeat the experiment 5 times to compensate for the stochastic nature of :class:`PolynomialCountSketch`."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:243
msgid "Train a kernelized SVM to see how well :class:`PolynomialCountSketch` is approximating the performance of the kernel. This, of course, may take some time, as the SVC class has a relatively poor scalability. This is the reason why kernel approximators are so useful:"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:282
msgid "Finally, plot the resuts of the different methods against their training times. As we can see, the kernelized SVM achieves a higher accuracy, but its training time is much larger and, most importantly, will grow much faster if the number of training samples increases."
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:332
msgid "References"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:334
msgid "[1] Pham, Ninh and Rasmus Pagh. \"Fast and scalable polynomial kernels via explicit feature maps.\" KDD '13 (2013). https://doi.org/10.1145/2487575.2487591"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:338
msgid "[2] LIBSVM binary datasets repository https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:344
msgid "**Total running time of the script:** ( 3 minutes  24.821 seconds)"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:366
msgid ":download:`Download Python source code: plot_scalable_poly_kernels.py <plot_scalable_poly_kernels.py>`"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:372
msgid ":download:`Download Jupyter notebook: plot_scalable_poly_kernels.ipynb <plot_scalable_poly_kernels.ipynb>`"
msgstr ""

#: ../auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst:379
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

