msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-13 00:13\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/auto_examples/tree/plot_cost_complexity_pruning.po\n"
"X-Crowdin-File-ID: 4090\n"
"Language: es_ES\n"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:13
msgid "Click :ref:`here <sphx_glr_download_auto_examples_tree_plot_cost_complexity_pruning.py>` to download the full example code or to run this example in your browser via Binder"
msgstr "Haz clic :ref:`aquí <sphx_glr_download_auto_examples_tree_plot_cost_complexity_pruning.py>` para descargar el código de ejemplo completo o para ejecutar este ejemplo en tu navegador a través de Binder"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:23
msgid "Post pruning decision trees with cost complexity pruning"
msgstr "Árboles de decisión con poda de complejidad de costes"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:27
msgid "The :class:`DecisionTreeClassifier` provides parameters such as ``min_samples_leaf`` and ``max_depth`` to prevent a tree from overfiting. Cost complexity pruning provides another option to control the size of a tree. In :class:`DecisionTreeClassifier`, this pruning technique is parameterized by the cost complexity parameter, ``ccp_alpha``. Greater values of ``ccp_alpha`` increase the number of nodes pruned. Here we only show the effect of ``ccp_alpha`` on regularizing the trees and how to choose a ``ccp_alpha`` based on validation scores."
msgstr "El clasificador :class:`DecisionTreeClassifier` proporciona parámetros como ``min_samples_leaf`` y ``max_depth`` para evitar que un árbol se sobredimensione. La poda de complejidad de costes proporciona otra opción para controlar el tamaño de un árbol. En :class:`DecisionTreeClassifier`, esta técnica de poda está parametrizada por el parámetro de complejidad de costes, ``ccp_alpha``. Los valores más altos de ``ccp_alpha`` aumentan el número de nodos podados. Aquí sólo mostramos el efecto de ``ccp_alpha`` en la regularización de los árboles y cómo elegir un ``ccp_alpha`` basado en las puntuaciones de validación."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:36
msgid "See also :ref:`minimal_cost_complexity_pruning` for details on pruning."
msgstr "Ver también :ref:`minimal_cost_complexity_pruning` para más detalles sobre la poda."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:59
msgid "Total impurity of leaves vs effective alphas of pruned tree"
msgstr "Impureza total de las hojas vs las alfas efectivas del árbol podado"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:60
msgid "Minimal cost complexity pruning recursively finds the node with the \"weakest link\". The weakest link is characterized by an effective alpha, where the nodes with the smallest effective alpha are pruned first. To get an idea of what values of ``ccp_alpha`` could be appropriate, scikit-learn provides :func:`DecisionTreeClassifier.cost_complexity_pruning_path` that returns the effective alphas and the corresponding total leaf impurities at each step of the pruning process. As alpha increases, more of the tree is pruned, which increases the total impurity of its leaves."
msgstr "La poda de complejidad de coste mínimo encuentra recursivamente el nodo con el \"enlace más débil\". El enlace más débil se caracteriza por un alfa efectivo, donde los nodos con el alfa efectivo más pequeño se podan primero. Para tener una idea de qué valores de ``ccp_alpha`` podrían ser apropiados, scikit-learn proporciona :func:`DecisionTreeClassifier.cost_complexity_pruning_path` que devuelve los alfa efectivos y las correspondientes impurezas totales de las hojas en cada paso del proceso de poda. A medida que aumenta alfa, se poda más parte del árbol, lo que aumenta la impureza total de sus hojas."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:89
msgid "In the following plot, the maximum effective alpha value is removed, because it is the trivial tree with only one node."
msgstr "En la siguiente gráfica se elimina el valor máximo efectivo de la alfa, ya que es el árbol trivial con sólo un nodo."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:112
#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:145
msgid "Out:"
msgstr "Out:"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:123
msgid "Next, we train a decision tree using the effective alphas. The last value in ``ccp_alphas`` is the alpha value that prunes the whole tree, leaving the tree, ``clfs[-1]``, with one node."
msgstr "A continuación, formamos un árbol de decisiones usando las alfas efectivas. El último valor en ``ccp_alphas`` es el valor alfa que limpia todo el árbol, dejando el árbol, ``clfs[-1]``, con un nodo."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:156
msgid "For the remainder of this example, we remove the last element in ``clfs`` and ``ccp_alphas``, because it is the trivial tree with only one node. Here we show that the number of nodes and tree depth decreases as alpha increases."
msgstr "Para el resto de este ejemplo, eliminamos el último elemento en ``clfs`` y ``ccp_alphas``, porque es el árbol trivial con un solo nodo. Aquí mostramos que el número de nodos y la profundidad del árbol disminuyen a medida que aumenta alfa."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:195
msgid "Accuracy vs alpha for training and testing sets"
msgstr "Precisión vs alfa para entrenamiento y conjuntos de pruebas"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:196
msgid "When ``ccp_alpha`` is set to zero and keeping the other default parameters of :class:`DecisionTreeClassifier`, the tree overfits, leading to a 100% training accuracy and 88% testing accuracy. As alpha increases, more of the tree is pruned, thus creating a decision tree that generalizes better. In this example, setting ``ccp_alpha=0.015`` maximizes the testing accuracy."
msgstr "Cuando ``ccp_alpha`` se ajusta a cero y se mantienen los demás parámetros predeterminados de :class:`DecisionTreeClassifier`, el árbol se ajusta en exceso, lo que lleva a una precisión de entrenamiento del 100% y una precisión de prueba del 88%. A medida que aumenta alfa, se poda una mayor parte del árbol, creando así un árbol de decisión que generaliza mejor. En este ejemplo, la configuración de ``ccp_alpha=0,015`` maximiza la precisión de las pruebas."

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:233
msgid "**Total running time of the script:** ( 0 minutes  0.627 seconds)"
msgstr "**Tiempo total de ejecución del script:** (0 minutos 0.627 segundos)"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:255
msgid ":download:`Download Python source code: plot_cost_complexity_pruning.py <plot_cost_complexity_pruning.py>`"
msgstr ":download:`Descargar código fuente de Python: plot_cost_complexity_pruning.py <plot_cost_complexity_pruning.py>`"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:261
msgid ":download:`Download Jupyter notebook: plot_cost_complexity_pruning.ipynb <plot_cost_complexity_pruning.ipynb>`"
msgstr ":download:`Descargar notebook de Jupyter: plot_cost_complexity_pruning.ipynb <plot_cost_complexity_pruning.ipynb>`"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:268
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr "`Galería generada por Sphinx-Gallery <https://sphinx-gallery.github.io>`_"

