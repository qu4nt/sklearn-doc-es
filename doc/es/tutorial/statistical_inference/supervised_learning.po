msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-04-15 00:15\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/tutorial/statistical_inference/supervised_learning.po\n"
"X-Crowdin-File-ID: 3958\n"
"Language: es_ES\n"

#: ../tutorial/statistical_inference/supervised_learning.rst:5
msgid "Supervised learning: predicting an output variable from high-dimensional observations"
msgstr ""

msgid "The problem solved in supervised learning"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:10
msgid ":ref:`Supervised learning <supervised-learning>` consists in learning the link between two datasets: the observed data ``X`` and an external variable ``y`` that we are trying to predict, usually called \"target\" or \"labels\". Most often, ``y`` is a 1D array of length ``n_samples``."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:16
msgid "All supervised `estimators <https://en.wikipedia.org/wiki/Estimator>`_ in scikit-learn implement a ``fit(X, y)`` method to fit the model and a ``predict(X)`` method that, given unlabeled observations ``X``, returns the predicted labels ``y``."
msgstr ""

msgid "Vocabulary: classification and regression"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:23
msgid "If the prediction task is to classify the observations in a set of finite labels, in other words to \"name\" the objects observed, the task is said to be a **classification** task. On the other hand, if the goal is to predict a continuous target variable, it is said to be a **regression** task."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:29
msgid "When doing classification in scikit-learn, ``y`` is a vector of integers or strings."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:32
msgid "Note: See the :ref:`Introduction to machine learning with scikit-learn Tutorial <introduction>` for a quick run-through on the basic machine learning vocabulary used within scikit-learn."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:37
msgid "Nearest neighbor and the curse of dimensionality"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:41
msgid "The iris dataset is a classification task consisting in identifying 3 different types of irises (Setosa, Versicolour, and Virginica) from their petal and sepal length and width::"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:57
msgid "k-Nearest neighbors classifier"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:59
msgid "The simplest possible classifier is the `nearest neighbor <https://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm>`_: given a new observation ``X_test``, find in the training set (i.e. the data used to train the estimator) the observation with the closest feature vector. (Please see the :ref:`Nearest Neighbors section<neighbors>` of the online Scikit-learn documentation for more information about this type of classifier.)"
msgstr ""

msgid "Training set and testing set"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:68
msgid "While experimenting with any learning algorithm, it is important not to test the prediction of an estimator on the data used to fit the estimator as this would not be evaluating the performance of the estimator on **new data**. This is why datasets are often split into *train* and *test* data."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:74
msgid "**KNN (k nearest neighbors) classification example**:"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:104
msgid "The curse of dimensionality"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:106
msgid "For an estimator to be effective, you need the distance between neighboring points to be less than some value :math:`d`, which depends on the problem. In one dimension, this requires on average :math:`n \\sim 1/d` points. In the context of the above :math:`k`-NN example, if the data is described by just one feature with values ranging from 0 to 1 and with :math:`n` training observations, then new data will be no further away than :math:`1/n`. Therefore, the nearest neighbor decision rule will be efficient as soon as :math:`1/n` is small compared to the scale of between-class feature variations."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:115
msgid "If the number of features is :math:`p`, you now require :math:`n \\sim 1/d^p` points.  Let's say that we require 10 points in one dimension: now :math:`10^p` points are required in :math:`p` dimensions to pave the :math:`[0, 1]` space. As :math:`p` becomes large, the number of training points required for a good estimator grows exponentially."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:121
msgid "For example, if each point is just a single number (8 bytes), then an effective :math:`k`-NN estimator in a paltry :math:`p \\sim 20` dimensions would require more training data than the current estimated size of the entire internet (Â±1000 Exabytes or so)."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:126
msgid "This is called the `curse of dimensionality  <https://en.wikipedia.org/wiki/Curse_of_dimensionality>`_ and is a core problem that machine learning addresses."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:131
msgid "Linear model: from regression to sparsity"
msgstr ""

msgid "Diabetes dataset"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:135
msgid "The diabetes dataset consists of 10 physiological variables (age, sex, weight, blood pressure) measure on 442 patients, and an indication of disease progression after one year::"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:145
msgid "The task at hand is to predict disease progression from physiological variables."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:149
msgid "Linear regression"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:153
msgid ":class:`LinearRegression`, in its simplest form, fits a linear model to the data set by adjusting a set of parameters in order to make the sum of the squared residuals of the model as small as possible."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:158
msgid "Linear models: :math:`y = X\\beta + \\epsilon`"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:160
msgid ":math:`X`: data"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:161
msgid ":math:`y`: target variable"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:162
msgid ":math:`\\beta`: Coefficients"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:163
msgid ":math:`\\epsilon`: Observation noise"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:195
msgid "Shrinkage"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:197
msgid "If there are few data points per dimension, noise in the observations induces high variance:"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:221
msgid "A solution in high-dimensional statistical learning is to *shrink* the regression coefficients to zero: any two randomly chosen set of observations are likely to be uncorrelated. This is called :class:`Ridge` regression:"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:243
msgid "This is an example of **bias/variance tradeoff**: the larger the ridge ``alpha`` parameter, the higher the bias and the lower the variance."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:246
msgid "We can choose ``alpha`` to minimize left out error, this time using the diabetes dataset rather than our synthetic data::"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:260
msgid "Capturing in the fitted parameters noise that prevents the model to generalize to new data is called `overfitting <https://en.wikipedia.org/wiki/Overfitting>`_. The bias introduced by the ridge regression is called a `regularization <https://en.wikipedia.org/wiki/Regularization_%28machine_learning%29>`_."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:269
msgid "Sparsity"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:289
msgid "**Fitting only features 1 and 2**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:292
msgid "diabetes_ols_1 diabetes_ols_3 diabetes_ols_2"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:295
msgid "A representation of the full diabetes dataset would involve 11 dimensions (10 feature dimensions and one of the target variable). It is hard to develop an intuition on such representation, but it may be useful to keep in mind that it would be a fairly *empty* space."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:302
msgid "We can see that, although feature 2 has a strong coefficient on the full model, it conveys little information on ``y`` when considered with feature 1."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:305
msgid "To improve the conditioning of the problem (i.e. mitigating the :ref:`curse_of_dimensionality`), it would be interesting to select only the informative features and set non-informative ones, like feature 2 to 0. Ridge regression will decrease their contribution, but not set them to zero. Another penalization approach, called :ref:`lasso` (least absolute shrinkage and selection operator), can set some coefficients to zero. Such methods are called **sparse method** and sparsity can be seen as an application of Occam's razor: *prefer simpler models*."
msgstr ""

msgid "**Different algorithms for the same problem**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:331
msgid "Different algorithms can be used to solve the same mathematical problem. For instance the ``Lasso`` object in scikit-learn solves the lasso regression problem using a `coordinate descent <https://en.wikipedia.org/wiki/Coordinate_descent>`_ method, that is efficient on large datasets. However, scikit-learn also provides the :class:`LassoLars` object using the *LARS* algorithm, which is very efficient for problems in which the weight vector estimated is very sparse (i.e. problems with very few observations)."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:343
msgid "Classification"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:345
msgid "For classification, as in the labeling `iris <https://en.wikipedia.org/wiki/Iris_flower_data_set>`_ task, linear regression is not the right approach as it will give too much weight to data far from the decision frontier. A linear approach is to fit a sigmoid function or **logistic** function:"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:356
msgid "y = \\textrm{sigmoid}(X\\beta - \\textrm{offset}) + \\epsilon =\n"
"\\frac{1}{1 + \\textrm{exp}(- X\\beta + \\textrm{offset})} + \\epsilon"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:367
msgid "This is known as :class:`LogisticRegression`."
msgstr ""

msgid "Multiclass classification"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:376
msgid "If you have several classes to predict, an option often used is to fit one-versus-all classifiers and then use a voting heuristic for the final decision."
msgstr ""

msgid "Shrinkage and sparsity with logistic regression"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:382
msgid "The ``C`` parameter controls the amount of regularization in the :class:`LogisticRegression` object: a large value for ``C`` results in less regularization. ``penalty=\"l2\"`` gives :ref:`shrinkage` (i.e. non-sparse coefficients), while ``penalty=\"l1\"`` gives :ref:`sparsity`."
msgstr ""

msgid "**Exercise**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:391
msgid "Try classifying the digits dataset with nearest neighbors and a linear model. Leave out the last 10% and test prediction performance on these observations."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:398
msgid "A solution can be downloaded :download:`here <../../auto_examples/exercises/plot_digits_classification_exercise.py>`."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:402
msgid "Support vector machines (SVMs)"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:405
msgid "Linear SVMs"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:408
msgid ":ref:`svm` belong to the discriminant model family: they try to find a combination of samples to build a plane maximizing the margin between the two classes. Regularization is set by the ``C`` parameter: a small value for ``C`` means the margin is calculated using many or all of the observations around the separating line (more regularization); a large value for ``C`` means the margin is calculated on observations close to the separating line (less regularization)."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:421
msgid "**Unregularized SVM**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:426
msgid "**Regularized SVM (default)**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:430
msgid ":ref:`sphx_glr_auto_examples_svm_plot_iris_svc.py`"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:433
msgid "SVMs can be used in regression --:class:`SVR` (Support Vector Regression)--, or in classification --:class:`SVC` (Support Vector Classification)."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:444
msgid "**Normalizing data**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:446
msgid "For many estimators, including the SVMs, having datasets with unit standard deviation for each feature is important to get good prediction."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:453
msgid "Using kernels"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:455
msgid "Classes are not always linearly separable in feature space. The solution is to build a decision function that is not linear but may be polynomial instead. This is done using the *kernel trick* that can be seen as creating a decision energy by positioning *kernels* on observations:"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:461
msgid "Linear kernel"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:471
msgid "Polynomial kernel"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:483
msgid "RBF kernel (Radial Basis Function)"
msgstr ""

msgid "**Interactive example**"
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:498
msgid "See the :ref:`SVM GUI <sphx_glr_auto_examples_applications_svm_gui.py>` to download ``svm_gui.py``; add data points of both classes with right and left button, fit the model and change parameters and data."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:505
#, python-format
msgid "Try classifying classes 1 and 2 from the iris dataset with SVMs, with the 2 first features. Leave out 10% of each class and test prediction performance on these observations."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:509
msgid "**Warning**: the classes are ordered, do not leave out the last 10%, you would be testing on only one class."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:512
msgid "**Hint**: You can use the ``decision_function`` method on a grid to get intuitions."
msgstr ""

#: ../tutorial/statistical_inference/supervised_learning.rst:524
msgid "A solution can be downloaded :download:`here <../../auto_examples/exercises/plot_iris_exercise.py>`"
msgstr ""

