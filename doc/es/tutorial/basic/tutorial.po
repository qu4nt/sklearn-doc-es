msgid ""
msgstr ""
"Project-Id-Version: scikit-learn\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: 2021-07-02 14:35\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: scikit-learn\n"
"X-Crowdin-Project-ID: 450526\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /main/doc/en/tutorial/basic/tutorial.po\n"
"X-Crowdin-File-ID: 4044\n"
"Language: es_ES\n"

#: ../tutorial/basic/tutorial.rst:4
msgid "An introduction to machine learning with scikit-learn"
msgstr "Introducción al aprendizaje automático con scikit-learn"

msgid "Section contents"
msgstr "Sección de contenidos"

#: ../tutorial/basic/tutorial.rst:8
msgid "In this section, we introduce the `machine learning <https://en.wikipedia.org/wiki/Machine_learning>`_ vocabulary that we use throughout scikit-learn and give a simple learning example."
msgstr "En esta sección, introducimos el vocabulario `machine learning <https://en.wikipedia.org/wiki/Machine_learning>`_ que utilizamos en todo scikit-learn y damos un ejemplo sencillo de aprendizaje."

#: ../tutorial/basic/tutorial.rst:15
msgid "Machine learning: the problem setting"
msgstr "Aprendizaje automático: el escenario del problema"

#: ../tutorial/basic/tutorial.rst:17
msgid "In general, a learning problem considers a set of n `samples <https://en.wikipedia.org/wiki/Sample_(statistics)>`_ of data and then tries to predict properties of unknown data. If each sample is more than a single number and, for instance, a multi-dimensional entry (aka `multivariate <https://en.wikipedia.org/wiki/Multivariate_random_variable>`_ data), it is said to have several attributes or **features**."
msgstr "En general, un problema de aprendizaje considera un conjunto de n `muestras <https://en.wikipedia.org/wiki/Sample_(statistics)>`_ de datos y, a continuación, intenta predecir propiedades de datos desconocidos. Si cada muestra es más que un solo número y, por ejemplo, una entrada multidimensional (también conocida como `datos multivariantes <https://en.wikipedia.org/wiki/Multivariate_random_variable>`_), se dice que tiene varios atributos o **características**."

#: ../tutorial/basic/tutorial.rst:24
msgid "Learning problems fall into a few categories:"
msgstr "Los problemas de aprendizaje se dividen en varias categorías:"

#: ../tutorial/basic/tutorial.rst:26
msgid "`supervised learning <https://en.wikipedia.org/wiki/Supervised_learning>`_, in which the data comes with additional attributes that we want to predict (:ref:`Click here <supervised-learning>` to go to the scikit-learn supervised learning page).This problem can be either:"
msgstr ""

#: ../tutorial/basic/tutorial.rst:32
msgid "`classification <https://en.wikipedia.org/wiki/Classification_in_machine_learning>`_: samples belong to two or more classes and we want to learn from already labeled data how to predict the class of unlabeled data. An example of a classification problem would be handwritten digit recognition, in which the aim is to assign each input vector to one of a finite number of discrete categories.  Another way to think of classification is as a discrete (as opposed to continuous) form of supervised learning where one has a limited number of categories and for each of the n samples provided, one is to try to label them with the correct category or class."
msgstr ""

#: ../tutorial/basic/tutorial.rst:44
msgid "`regression <https://en.wikipedia.org/wiki/Regression_analysis>`_: if the desired output consists of one or more continuous variables, then the task is called *regression*. An example of a regression problem would be the prediction of the length of a salmon as a function of its age and weight."
msgstr ""

#: ../tutorial/basic/tutorial.rst:50
msgid "`unsupervised learning <https://en.wikipedia.org/wiki/Unsupervised_learning>`_, in which the training data consists of a set of input vectors x without any corresponding target values. The goal in such problems may be to discover groups of similar examples within the data, where it is called `clustering <https://en.wikipedia.org/wiki/Cluster_analysis>`_, or to determine the distribution of data within the input space, known as `density estimation <https://en.wikipedia.org/wiki/Density_estimation>`_, or to project the data from a high-dimensional space down to two or three dimensions for the purpose of *visualization* (:ref:`Click here <unsupervised-learning>` to go to the Scikit-Learn unsupervised learning page)."
msgstr ""

msgid "Training set and testing set"
msgstr ""

#: ../tutorial/basic/tutorial.rst:64
msgid "Machine learning is about learning some properties of a data set and then testing those properties against another data set. A common practice in machine learning is to evaluate an algorithm by splitting a data set into two. We call one of those sets the **training set**, on which we learn some properties; we call the other set the **testing set**, on which we test the learned properties."
msgstr ""

#: ../tutorial/basic/tutorial.rst:75
msgid "Loading an example dataset"
msgstr ""

#: ../tutorial/basic/tutorial.rst:77
msgid "`scikit-learn` comes with a few standard datasets, for instance the `iris <https://en.wikipedia.org/wiki/Iris_flower_data_set>`_ and `digits <https://archive.ics.uci.edu/ml/datasets/Pen-Based+Recognition+of+Handwritten+Digits>`_ datasets for classification and the `diabetes dataset <https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html>`_ for regression."
msgstr ""

#: ../tutorial/basic/tutorial.rst:83
msgid "In the following, we start a Python interpreter from our shell and then load the ``iris`` and ``digits`` datasets.  Our notational convention is that ``$`` denotes the shell prompt while ``>>>`` denotes the Python interpreter prompt::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:93
msgid "A dataset is a dictionary-like object that holds all the data and some metadata about the data. This data is stored in the ``.data`` member, which is a ``n_samples, n_features`` array. In the case of supervised problem, one or more response variables are stored in the ``.target`` member. More details on the different datasets can be found in the :ref:`dedicated section <datasets>`."
msgstr ""

#: ../tutorial/basic/tutorial.rst:100
msgid "For instance, in the case of the digits dataset, ``digits.data`` gives access to the features that can be used to classify the digits samples::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:112
msgid "and ``digits.target`` gives the ground truth for the digit dataset, that is the number corresponding to each digit image that we are trying to learn::"
msgstr ""

msgid "Shape of the data arrays"
msgstr ""

#: ../tutorial/basic/tutorial.rst:121
msgid "The data is always a 2D array, shape ``(n_samples, n_features)``, although the original data may have had a different shape. In the case of the digits, each original sample is an image of shape ``(8, 8)`` and can be accessed using::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:136
msgid "The :ref:`simple example on this dataset <sphx_glr_auto_examples_classification_plot_digits_classification.py>` illustrates how starting from the original problem one can shape the data for consumption in scikit-learn."
msgstr ""

msgid "Loading from external datasets"
msgstr ""

#: ../tutorial/basic/tutorial.rst:143
msgid "To load from an external dataset, please refer to :ref:`loading external datasets <external_datasets>`."
msgstr ""

#: ../tutorial/basic/tutorial.rst:146
msgid "Learning and predicting"
msgstr ""

#: ../tutorial/basic/tutorial.rst:148
msgid "In the case of the digits dataset, the task is to predict, given an image, which digit it represents. We are given samples of each of the 10 possible classes (the digits zero through nine) on which we *fit* an `estimator <https://en.wikipedia.org/wiki/Estimator>`_ to be able to *predict* the classes to which unseen samples belong."
msgstr ""

#: ../tutorial/basic/tutorial.rst:154
msgid "In scikit-learn, an estimator for classification is a Python object that implements the methods ``fit(X, y)`` and ``predict(T)``."
msgstr ""

#: ../tutorial/basic/tutorial.rst:157
msgid "An example of an estimator is the class ``sklearn.svm.SVC``, which implements `support vector classification <https://en.wikipedia.org/wiki/Support_vector_machine>`_. The estimator's constructor takes as arguments the model's parameters."
msgstr ""

#: ../tutorial/basic/tutorial.rst:162
msgid "For now, we will consider the estimator as a black box::"
msgstr ""

msgid "Choosing the parameters of the model"
msgstr ""

#: ../tutorial/basic/tutorial.rst:169
msgid "In this example, we set the value of ``gamma`` manually. To find good values for these parameters, we can use tools such as :ref:`grid search <grid_search>` and :ref:`cross validation <cross_validation>`."
msgstr ""

#: ../tutorial/basic/tutorial.rst:174
msgid "The ``clf`` (for classifier) estimator instance is first fitted to the model; that is, it must *learn* from the model. This is done by passing our training set to the ``fit`` method. For the training set, we'll use all the images from our dataset, except for the last image, which we'll reserve for our predicting. We select the training set with the ``[:-1]`` Python syntax, which produces a new array that contains all but the last item from ``digits.data``::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:185
msgid "Now you can *predict* new values. In this case, you'll predict using the last image from ``digits.data``. By predicting, you'll determine the image from the training set that best matches the last image."
msgstr ""

#: ../tutorial/basic/tutorial.rst:193
msgid "The corresponding image is:"
msgstr ""

#: ../tutorial/basic/tutorial.rst:200
msgid "As you can see, it is a challenging task: after all, the images are of poor resolution. Do you agree with the classifier?"
msgstr ""

#: ../tutorial/basic/tutorial.rst:203
msgid "A complete example of this classification problem is available as an example that you can run and study: :ref:`sphx_glr_auto_examples_classification_plot_digits_classification.py`."
msgstr ""

#: ../tutorial/basic/tutorial.rst:208
msgid "Conventions"
msgstr ""

#: ../tutorial/basic/tutorial.rst:210
msgid "scikit-learn estimators follow certain rules to make their behavior more predictive.  These are described in more detail in the :ref:`glossary`."
msgstr ""

#: ../tutorial/basic/tutorial.rst:214
msgid "Type casting"
msgstr ""

#: ../tutorial/basic/tutorial.rst:216
msgid "Unless otherwise specified, input will be cast to ``float64``::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:232
msgid "In this example, ``X`` is ``float32``, which is cast to ``float64`` by ``fit_transform(X)``."
msgstr ""

#: ../tutorial/basic/tutorial.rst:235
msgid "Regression targets are cast to ``float64`` and classification targets are maintained::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:254
msgid "Here, the first ``predict()`` returns an integer array, since ``iris.target`` (an integer array) was used in ``fit``. The second ``predict()`` returns a string array, since ``iris.target_names`` was for fitting."
msgstr ""

#: ../tutorial/basic/tutorial.rst:259
msgid "Refitting and updating parameters"
msgstr ""

#: ../tutorial/basic/tutorial.rst:261
msgid "Hyper-parameters of an estimator can be updated after it has been constructed via the :term:`set_params()<set_params>` method. Calling ``fit()`` more than once will overwrite what was learned by any previous ``fit()``::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:281
msgid "Here, the default kernel ``rbf`` is first changed to ``linear`` via :func:`SVC.set_params()<sklearn.svm.SVC.set_params>` after the estimator has been constructed, and changed back to ``rbf`` to refit the estimator and to make a second prediction."
msgstr ""

#: ../tutorial/basic/tutorial.rst:287
msgid "Multiclass vs. multilabel fitting"
msgstr ""

#: ../tutorial/basic/tutorial.rst:289
msgid "When using :class:`multiclass classifiers <sklearn.multiclass>`, the learning and prediction task that is performed is dependent on the format of the target data fit upon::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:304
msgid "In the above case, the classifier is fit on a 1d array of multiclass labels and the ``predict()`` method therefore provides corresponding multiclass predictions. It is also possible to fit upon a 2d array of binary label indicators::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:316
msgid "Here, the classifier is ``fit()``  on a 2d binary label representation of ``y``, using the :class:`LabelBinarizer <sklearn.preprocessing.LabelBinarizer>`. In this case ``predict()`` returns a 2d array representing the corresponding multilabel predictions."
msgstr ""

#: ../tutorial/basic/tutorial.rst:321
msgid "Note that the fourth and fifth instances returned all zeroes, indicating that they matched none of the three labels ``fit`` upon. With multilabel outputs, it is similarly possible for an instance to be assigned multiple labels::"
msgstr ""

#: ../tutorial/basic/tutorial.rst:335
msgid "In this case, the classifier is fit upon instances each assigned multiple labels. The :class:`MultiLabelBinarizer <sklearn.preprocessing.MultiLabelBinarizer>` is used to binarize the 2d array of multilabels to ``fit`` upon. As a result, ``predict()`` returns a 2d array with multiple predicted labels for each instance."
msgstr ""

