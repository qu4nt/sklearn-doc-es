# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.multioutput.ClassifierChain.rst:2
msgid ":mod:`sklearn.multioutput`.ClassifierChain"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:2
msgid "A multi-label model that arranges binary classifiers into a chain."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:4
msgid ""
"Each model makes a prediction in the order specified by the chain using "
"all of the available features provided to the model plus the predictions "
"of models that are earlier in the chain."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:8
msgid "Read more in the :ref:`User Guide <classifierchain>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multioutput.ClassifierChain
#: sklearn.multioutput.ClassifierChain.decision_function
#: sklearn.multioutput.ClassifierChain.fit
#: sklearn.multioutput.ClassifierChain.predict_proba
#: sklearn.multioutput._BaseChain.predict
msgid "Parameters"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:15
msgid "**base_estimator**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:15
msgid "The base estimator from which the classifier chain is built."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:32
msgid "**order**"
msgstr ""

#: of
msgid "array-like of shape (n_outputs,) or 'random', default=None"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:18
msgid ""
"If None, the order will be determined by the order of columns in the "
"label matrix Y.::"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:23
msgid ""
"The order of the chain can be explicitly set by providing a list of "
"integers. For example, for a chain of length 5.::"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:28
msgid ""
"means that the first model in the chain will make predictions for column "
"1 in the Y matrix, the second model will make predictions for column 3, "
"etc."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:32
msgid "If order is 'random' a random ordering will be used."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:42
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:35
msgid ""
"Determines whether to use cross validated predictions or true labels for "
"the results of previous estimators in the chain. Possible inputs for cv "
"are:"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:39
msgid "None, to use true labels when fitting,"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:40
msgid "integer, to specify the number of folds in a (Stratified)KFold,"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:41
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:42
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:54
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, optional (default=None)"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:45
msgid ""
"If ``order='random'``, determines random number generation for the chain "
"order. In addition, it controls the random seed given at each "
"`base_estimator` at each chaining iteration. Thus, it is only used when "
"`base_estimator` exposes a `random_state`. Pass an int for reproducible "
"output across multiple function calls. See :term:`Glossary "
"<random_state>`."
msgstr ""

#: of sklearn.multioutput.ClassifierChain
msgid "Attributes"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:60
msgid "**classes_**"
msgstr ""

#: of
msgid "list"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:59
msgid ""
"A list of arrays of length ``len(estimators_)`` containing the class "
"labels for each estimator in the chain."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:63
msgid "**estimators_**"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:63
msgid "A list of clones of base_estimator."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:69
msgid "**order_**"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:66
msgid "The order of labels in the classifier chain."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:74
msgid ":obj:`RegressorChain`"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:75
msgid "Equivalent for regression."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:76
msgid ":obj:`MultioutputClassifier`"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:77
msgid "Classifies each output independently rather than chaining."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:82
msgid "References"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:83
msgid ""
"Jesse Read, Bernhard Pfahringer, Geoff Holmes, Eibe Frank, \"Classifier "
"Chains for Multi-label Classification\", 2009."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:91
msgid "Examples"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:114
msgid "Methods"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.multioutput.ClassifierChain.decision_function>`\\"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.decision_function:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Evaluate the decision_function of the models in the chain."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`fit <sklearn.multioutput.ClassifierChain.fit>`\\"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.fit:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Fit the model to data matrix X and targets Y."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`get_params <sklearn.multioutput.ClassifierChain.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`predict <sklearn.multioutput.ClassifierChain.predict>`\\"
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
#: sklearn.multioutput._BaseChain.predict:2
msgid "Predict on the data matrix X using the ClassifierChain model."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.multioutput.ClassifierChain.predict_proba>`\\"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.predict_proba:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Predict probability estimates."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`score <sklearn.multioutput.ClassifierChain.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid ":obj:`set_params <sklearn.multioutput.ClassifierChain.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multioutput.ClassifierChain:124:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.multioutput.ClassifierChain.decision_function:8
#: sklearn.multioutput.ClassifierChain.fit:8
#: sklearn.multioutput.ClassifierChain.predict_proba:8
#: sklearn.multioutput._BaseChain.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.multioutput.ClassifierChain.decision_function
#: sklearn.multioutput.ClassifierChain.fit
#: sklearn.multioutput.ClassifierChain.predict_proba
#: sklearn.multioutput._BaseChain.predict
msgid "Returns"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.decision_function:25
msgid "**Y_decision**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.decision_function:13
msgid "Returns the decision function of the sample for each model in the chain."
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.fit:8
#: sklearn.multioutput._BaseChain.predict:8
msgid "The input data."
msgstr ""

#: of sklearn.multioutput.ClassifierChain.fit:11
msgid "**Y**"
msgstr ""

#: of sklearn.multioutput.ClassifierChain.fit:11
msgid "The target values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.multioutput.ClassifierChain.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multioutput._BaseChain.predict:24
msgid "**Y_pred**"
msgstr ""

#: of sklearn.multioutput._BaseChain.predict:13
msgid "The predicted values."
msgstr ""

#: of sklearn.multioutput.ClassifierChain.predict_proba:24
msgid "**Y_prob**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.multioutput.ClassifierChain.examples:4
msgid "Examples using ``sklearn.multioutput.ClassifierChain``"
msgstr ""

#: ../modules/generated/sklearn.multioutput.ClassifierChain.examples:15
#: ../modules/generated/sklearn.multioutput.ClassifierChain.examples:23
msgid ":ref:`sphx_glr_auto_examples_multioutput_plot_classifier_chain_yeast.py`"
msgstr ""

