# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.linear_model.RidgeClassifierCV.rst:2
msgid ":mod:`sklearn.linear_model`.RidgeClassifierCV"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:2
msgid "Ridge classifier with built-in cross-validation."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:4
msgid "See glossary entry for :term:`cross-validation estimator`."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:6
msgid ""
"By default, it performs Leave-One-Out Cross-Validation. Currently, only "
"the n_features > n_samples case is handled efficiently."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:9
msgid "Read more in the :ref:`User Guide <ridge_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._ridge.RidgeClassifierCV
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:20
msgid "**alphas**"
msgstr ""

#: of
msgid "ndarray of shape (n_alphas,), default=(0.1, 1.0, 10.0)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:14
msgid ""
"Array of alpha values to try. Regularization strength; must be a positive"
" float. Regularization improves the conditioning of the problem and "
"reduces the variance of the estimates. Larger values specify stronger "
"regularization. Alpha corresponds to ``1 / (2C)`` in other linear models "
"such as :class:`~sklearn.linear_model.LogisticRegression` or "
":class:`~sklearn.svm.LinearSVC`."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:25
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:23
msgid ""
"Whether to calculate the intercept for this model. If set to false, no "
"intercept will be used in calculations (i.e. data is expected to be "
"centered)."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:33
msgid "**normalize**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:28
msgid ""
"This parameter is ignored when ``fit_intercept`` is set to False. If "
"True, the regressors X will be normalized before regression by "
"subtracting the mean and dividing by the l2-norm. If you wish to "
"standardize, please use :class:`~sklearn.preprocessing.StandardScaler` "
"before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:38
msgid "**scoring**"
msgstr ""

#: of
msgid "string, callable, default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:36
msgid ""
"A string (see model evaluation documentation) or a scorer callable object"
" / function with signature ``scorer(estimator, X, y)``."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:50
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:41
msgid ""
"Determines the cross-validation splitting strategy. Possible inputs for "
"cv are:"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:44
msgid "None, to use the efficient Leave-One-Out cross-validation"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:45
msgid "integer, to specify the number of folds."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:46
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:47
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:49
msgid ""
"Refer :ref:`User Guide <cross_validation>` for the various cross-"
"validation strategies that can be used here."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:58
msgid "**class_weight**"
msgstr ""

#: of
msgid "dict or 'balanced', default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:53
msgid ""
"Weights associated with classes in the form ``{class_label: weight}``. If"
" not given, all classes are supposed to have weight one."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:56
msgid ""
"The \"balanced\" mode uses the values of y to automatically adjust "
"weights inversely proportional to class frequencies in the input data as "
"``n_samples / (n_classes * np.bincount(y))``"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:67
msgid "**store_cv_values**"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:61
msgid ""
"Flag indicating if the cross-validation values corresponding to each "
"alpha should be stored in the ``cv_values_`` attribute (see below). This "
"flag is only compatible with ``cv=None`` (i.e. using Leave-One-Out Cross-"
"Validation)."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:76
msgid "**cv_values_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_targets, n_alphas), optional"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:72
msgid ""
"Cross-validation values for each alpha (if ``store_cv_values=True`` and "
"``cv=None``). After ``fit()`` has been called, this attribute will "
"contain the mean squared errors (by default) or the values of the "
"``{loss,score}_func`` function (if provided in the constructor). This "
"attribute exists only when ``store_cv_values`` is True."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:81
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (1, n_features) or (n_targets, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:79
msgid "Coefficient of the features in the decision function."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:81
msgid "``coef_`` is of shape (1, n_features) when the given problem is binary."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:85
msgid "**intercept_**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:84
msgid ""
"Independent term in decision function. Set to 0.0 if ``fit_intercept = "
"False``."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:88
msgid "**alpha_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:88
msgid "Estimated regularization parameter."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:93
msgid "**best_score_**"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:91
msgid "Score of base estimator with best alpha."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:99
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:96
msgid "The classes labels."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:104
msgid ":obj:`Ridge`"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:105
msgid "Ridge regression."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:106
msgid ":obj:`RidgeClassifier`"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:107
msgid "Ridge classifier."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:108
msgid ":obj:`RidgeCV`"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:109
msgid "Ridge regression with built-in cross validation."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:113
msgid "Notes"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:114
msgid ""
"For multi-class classification, n_class classifiers are trained in a one-"
"versus-all approach. Concretely, this is implemented by taking advantage "
"of the multi-variate response support in Ridge."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:120
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:129
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.linear_model.RidgeClassifierCV.decision_function>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Predict confidence scores for samples."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.RidgeClassifierCV.fit>`\\"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV.fit:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Fit Ridge classifier with cv."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.RidgeClassifierCV.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.RidgeClassifierCV.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Predict class labels for samples in X."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.RidgeClassifierCV.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.RidgeClassifierCV.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._ridge.RidgeClassifierCV:138:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:4
msgid ""
"The confidence score for a sample is proportional to the signed distance "
"of that sample to the hyperplane."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit:10
msgid "**X**"
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:10
#: sklearn.linear_model._base.LinearClassifierMixin.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.linear_model._base.LinearClassifierMixin.decision_function
#: sklearn.linear_model._base.LinearClassifierMixin.predict
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit
msgid "Returns"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:28
msgid "array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.decision_function:15
msgid ""
"Confidence scores per (sample, class) combination. In the binary case, "
"confidence score for self.classes_[1] where >0 means this class would be "
"predicted."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV.fit:8
msgid ""
"Training vectors, where n_samples is the number of samples and n_features"
" is the number of features. When using GCV, will be cast to float64 if "
"necessary."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit:13
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV.fit:13
msgid "Target values. Will be cast to X's dtype if necessary."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.linear_model._ridge.RidgeClassifierCV.fit:16
msgid ""
"Individual weights for each sample. If given a float, every sample will "
"have the same weight."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._ridge.RidgeClassifierCV.fit:33
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape [n_samples]"
msgstr ""

#: of sklearn.linear_model._base.LinearClassifierMixin.predict:13
msgid "Predicted class label per sample."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

