# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.preprocessing.normalize.rst:2
msgid ":mod:`sklearn.preprocessing`.normalize"
msgstr ""

#: of sklearn.preprocessing._data.normalize:2
msgid "Scale input vectors individually to unit norm (vector length)."
msgstr ""

#: of sklearn.preprocessing._data.normalize:4
msgid "Read more in the :ref:`User Guide <preprocessing_normalization>`."
msgstr ""

#: of sklearn.preprocessing._data.normalize
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._data.normalize:11
#: sklearn.preprocessing._data.normalize:32
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.normalize:9
msgid ""
"The data to normalize, element by element. scipy.sparse matrices should "
"be in CSR format to avoid an un-necessary copy."
msgstr ""

#: of sklearn.preprocessing._data.normalize:15
msgid "**norm**"
msgstr ""

#: of
msgid "{'l1', 'l2', 'max'}, default='l2'"
msgstr ""

#: of sklearn.preprocessing._data.normalize:14
msgid ""
"The norm to use to normalize each non zero sample (or each non-zero "
"feature if axis is 0)."
msgstr ""

#: of sklearn.preprocessing._data.normalize:19
msgid "**axis**"
msgstr ""

#: of
msgid "{0, 1}, default=1"
msgstr ""

#: of sklearn.preprocessing._data.normalize:18
msgid ""
"axis used to normalize the data along. If 1, independently normalize each"
" sample, otherwise (if 0) normalize each feature."
msgstr ""

#: of sklearn.preprocessing._data.normalize:24
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.preprocessing._data.normalize:22
msgid ""
"set to False to perform inplace row normalization and avoid a copy (if "
"the input is already a numpy array or a scipy.sparse CSR matrix and if "
"axis is 1)."
msgstr ""

#: of sklearn.preprocessing._data.normalize:27
msgid "**return_norm**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.preprocessing._data.normalize:27
msgid "whether to return the computed norms"
msgstr ""

#: of sklearn.preprocessing._data.normalize
msgid "Returns"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.normalize:32
msgid "Normalized input X."
msgstr ""

#: of sklearn.preprocessing._data.normalize:43
msgid "**norms**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, ) if axis=1 else (n_features, )"
msgstr ""

#: of sklearn.preprocessing._data.normalize:35
msgid ""
"An array of norms along given axis for X. When X is sparse, a "
"NotImplementedError will be raised for norm 'l1' or 'l2'."
msgstr ""

#: of sklearn.preprocessing._data.normalize:48
msgid ":obj:`Normalizer`"
msgstr ""

#: of sklearn.preprocessing._data.normalize:49
msgid ""
"Performs normalization using the Transformer API (e.g. as part of a "
"preprocessing :class:`~sklearn.pipeline.Pipeline`)."
msgstr ""

#: of sklearn.preprocessing._data.normalize:53
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.normalize:54
msgid ""
"For a comparison of the different scalers, transformers, and normalizers,"
" see :ref:`examples/preprocessing/plot_all_scaling.py "
"<sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

