# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.feature_extraction.FeatureHasher.rst:2
msgid ":mod:`sklearn.feature_extraction`.FeatureHasher"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:2
msgid "Implements feature hashing, aka the hashing trick."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:4
msgid ""
"This class turns sequences of symbolic feature names (strings) into "
"scipy.sparse matrices, using a hash function to compute the matrix column"
" corresponding to a name. The hash function employed is the signed 32-bit"
" version of Murmurhash3."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:9
msgid ""
"Feature names of type byte string are used as-is. Unicode strings are "
"converted to UTF-8 first, but no Unicode normalization is done. Feature "
"values must be (finite) numbers."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:13
msgid ""
"This class is a low-memory alternative to DictVectorizer and "
"CountVectorizer, intended for large-scale (online) learning and "
"situations where memory is tight, e.g. when running prediction code on "
"embedded devices."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:18
msgid "Read more in the :ref:`User Guide <feature_hashing>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.feature_extraction._hash.FeatureHasher
#: sklearn.feature_extraction._hash.FeatureHasher.fit
#: sklearn.feature_extraction._hash.FeatureHasher.transform
msgid "Parameters"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:27
msgid "**n_features**"
msgstr ""

#: of
msgid "int, default=2**20"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:25
msgid ""
"The number of features (columns) in the output matrices. Small numbers of"
" features are likely to cause hash collisions, but large numbers will "
"cause larger coefficient dimensions in linear learners."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:37
msgid "**input_type**"
msgstr ""

#: of
msgid "{\"dict\", \"pair\", \"string\"}, default=\"dict\""
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:30
msgid ""
"Either \"dict\" (the default) to accept dictionaries over (feature_name, "
"value); \"pair\" to accept pairs of (feature_name, value); or \"string\" "
"to accept single strings. feature_name should be a string, while value "
"should be a number. In the case of \"string\", a value of 1 is implied. "
"The feature_name is hashed to find the appropriate column for the "
"feature. The value's sign might be flipped in the output (but see "
"non_negative, below)."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:42
msgid "**dtype**"
msgstr ""

#: of
msgid "numpy dtype, default=np.float64"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:40
msgid ""
"The type of feature values. Passed to scipy.sparse matrix constructors as"
" the dtype argument. Do not set this to bool, np.boolean or any unsigned "
"integer type."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:47
msgid "**alternate_sign**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:45
msgid ""
"When True, an alternating sign is added to the features as to "
"approximately conserve the inner product in the hashed space even for "
"small n_features. This approach is similar to sparse random projection."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:58
msgid "**.. versionchanged:: 0.19**"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:50
msgid "``alternate_sign`` replaces the now deprecated ``non_negative`` parameter."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:63
msgid ":obj:`DictVectorizer`"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:64
msgid "Vectorizes string-valued features using a hash table."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:65
msgid ":obj:`sklearn.preprocessing.OneHotEncoder`"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:66
msgid "Handles nominal/categorical features."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:72
msgid "Examples"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:82
msgid "Methods"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid ":obj:`fit <sklearn.feature_extraction.FeatureHasher.fit>`\\"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.fit:2
#: sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid "No-op."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.feature_extraction.FeatureHasher.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid ":obj:`get_params <sklearn.feature_extraction.FeatureHasher.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid ":obj:`set_params <sklearn.feature_extraction.FeatureHasher.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid ":obj:`transform <sklearn.feature_extraction.FeatureHasher.transform>`\\"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.transform:2
#: sklearn.feature_extraction._hash.FeatureHasher:90:<autosummary>:1
msgid "Transform a sequence of instances to a scipy.sparse matrix."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.fit:4
msgid ""
"This method doesn't do anything. It exists purely for compatibility with "
"the scikit-learn transformer API."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.feature_extraction._hash.FeatureHasher.fit:10
#: sklearn.feature_extraction._hash.FeatureHasher.transform:28
msgid "**X**"
msgstr ""

#: of
msgid "ndarray"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.feature_extraction._hash.FeatureHasher.fit
#: sklearn.feature_extraction._hash.FeatureHasher.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.feature_extraction._hash.FeatureHasher.fit:26
msgid "**self**"
msgstr ""

#: of
msgid "FeatureHasher"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.transform:12
msgid "**raw_X**"
msgstr ""

#: of
msgid "iterable over iterable over raw features, length = n_samples"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.transform:8
msgid ""
"Samples. Each sample must be iterable an (e.g., a list or tuple) "
"containing/generating feature names (and optionally values, see the "
"input_type constructor argument) which will be hashed. raw_X need not "
"support the len function, so it can be the result of a generator; "
"n_samples is determined on the fly."
msgstr ""

#: of
msgid "sparse matrix of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.feature_extraction._hash.FeatureHasher.transform:17
msgid "Feature matrix, for use with estimators or further transformers."
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.FeatureHasher.examples:4
msgid "Examples using ``sklearn.feature_extraction.FeatureHasher``"
msgstr ""

#: ../modules/generated/sklearn.feature_extraction.FeatureHasher.examples:15
#: ../modules/generated/sklearn.feature_extraction.FeatureHasher.examples:23
msgid ":ref:`sphx_glr_auto_examples_text_plot_hashing_vs_dict_vectorizer.py`"
msgstr ""

