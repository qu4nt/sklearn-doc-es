# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.compose.ColumnTransformer.rst:2
msgid ":mod:`sklearn.compose`.ColumnTransformer"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:2
msgid "Applies transformers to columns of an array or pandas DataFrame."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:4
msgid ""
"This estimator allows different columns or column subsets of the input to"
" be transformed separately and the features generated by each transformer"
" will be concatenated to form a single feature space. This is useful for "
"heterogeneous or columnar data, to combine several feature extraction "
"mechanisms or transformations into a single transformer."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:10
msgid "Read more in the :ref:`User Guide <column_transformer>`."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer
#: sklearn.compose._column_transformer.ColumnTransformer.fit
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform
#: sklearn.compose._column_transformer.ColumnTransformer.get_params
#: sklearn.compose._column_transformer.ColumnTransformer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:37
msgid "**transformers**"
msgstr ""

#: of
msgid "list of tuples"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:17
msgid ""
"List of (name, transformer, columns) tuples specifying the transformer "
"objects to be applied to subsets of the data."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:22
msgid "name"
msgstr ""

#: of
msgid "str"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:21
msgid ""
"Like in Pipeline and FeatureUnion, this allows the transformer and its "
"parameters to be set using ``set_params`` and searched in grid search."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:27
msgid "transformer"
msgstr ""

#: of
msgid "{'drop', 'passthrough'} or estimator"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:25
msgid ""
"Estimator must support :term:`fit` and :term:`transform`. Special-cased "
"strings 'drop' and 'passthrough' are accepted as well, to indicate to "
"drop the columns or to pass them through untransformed, respectively."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:37
msgid "columns"
msgstr ""

#: of
msgid ""
"str, array-like of str, int, array-like of int,                 array-"
"like of bool, slice or callable"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:30
msgid ""
"Indexes the data on its second axis. Integers are interpreted as "
"positional columns, while strings can reference DataFrame columns by "
"name.  A scalar string or int should be used where ``transformer`` "
"expects X to be a 1d array-like (vector), otherwise a 2d array will be "
"passed to the transformer. A callable is passed the input data `X` and "
"can return any of the above. To select multiple columns by name or dtype,"
" you can use :obj:`make_column_selector`."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:51
msgid "**remainder**"
msgstr ""

#: of
msgid "{'drop', 'passthrough'} or estimator, default='drop'"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:40
msgid ""
"By default, only the specified columns in `transformers` are transformed "
"and combined in the output, and the non-specified columns are dropped. "
"(default of ``'drop'``). By specifying ``remainder='passthrough'``, all "
"remaining columns that were not specified in `transformers` will be "
"automatically passed through. This subset of columns is concatenated with"
" the output of the transformers. By setting ``remainder`` to be an "
"estimator, the remaining non-specified columns will use the ``remainder``"
" estimator. The estimator must support :term:`fit` and :term:`transform`."
" Note that using this feature requires that the DataFrame columns input "
"at :term:`fit` and :term:`transform` have identical order."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:58
msgid "**sparse_threshold**"
msgstr ""

#: of
msgid "float, default=0.3"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:54
msgid ""
"If the output of the different transformers contains sparse matrices, "
"these will be stacked as a sparse matrix if the overall density is lower "
"than this value. Use ``sparse_threshold=0`` to always return dense.  When"
" the transformed output consists of all dense data, the stacked result "
"will be dense, and this keyword will be ignored."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:64
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:61
msgid ""
"Number of jobs to run in parallel. ``None`` means 1 unless in a "
":obj:`joblib.parallel_backend` context. ``-1`` means using all "
"processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:69
msgid "**transformer_weights**"
msgstr ""

#: of
msgid "dict, default=None"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:67
msgid ""
"Multiplicative weights for features per transformer. The output of the "
"transformer is multiplied by these weights. Keys are transformer names, "
"values the weights."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:76
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:72
msgid ""
"If True, the time elapsed while fitting each transformer will be printed "
"as it is completed."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer
msgid "Attributes"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:90
msgid "**transformers_**"
msgstr ""

#: of
msgid "list"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:81
msgid ""
"The collection of fitted transformers as tuples of (name, "
"fitted_transformer, column). `fitted_transformer` can be an estimator, "
"'drop', or 'passthrough'. In case there were no columns selected, this "
"will be the unfitted transformer. If there are remaining columns, the "
"final element is a tuple of the form: ('remainder', transformer, "
"remaining_columns) corresponding to the ``remainder`` parameter. If there"
" are remaining columns, then ``len(transformers_)==len(transformers)+1``,"
" otherwise ``len(transformers_)==len(transformers)``."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:93
msgid ""
":obj:`named_transformers_ <named_transformers_>` : "
":class:`~sklearn.utils.Bunch`"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:92
msgid "Bunch"
msgstr ""

#: of sklearn.compose.ColumnTransformer.named_transformers_:2
#: sklearn.compose._column_transformer.ColumnTransformer:93
msgid "Access the fitted transformer by name."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:101
msgid "**sparse_output_**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:96
msgid ""
"Boolean flag indicating whether the output of ``transform`` is a sparse "
"matrix or a dense numpy array, which depends on the output of the "
"individual transformers and the `sparse_threshold` keyword."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:106
msgid ":obj:`make_column_transformer`"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:107
msgid ""
"Convenience function for combining the outputs of multiple transformer "
"objects applied to column subsets of the original feature space."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:108
msgid ":obj:`make_column_selector`"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:109
msgid ""
"Convenience function for selecting columns based on datatype or the "
"columns name with a regex pattern."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:113
msgid "Notes"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:114
msgid ""
"The order of the columns in the transformed feature matrix follows the "
"order of how the columns are specified in the `transformers` list. "
"Columns of the original feature matrix that are not specified are dropped"
" from the resulting transformed feature matrix, unless specified in the "
"`passthrough` keyword. Those columns specified with `passthrough` are "
"added at the right to the output of the transformers."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:123
msgid "Examples"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:140
msgid "Methods"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`fit <sklearn.compose.ColumnTransformer.fit>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Fit all transformers using X."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`fit_transform <sklearn.compose.ColumnTransformer.fit_transform>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Fit all transformers, transform the data and concatenate results."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ""
":obj:`get_feature_names "
"<sklearn.compose.ColumnTransformer.get_feature_names>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Get feature names from all transformers."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`get_params <sklearn.compose.ColumnTransformer.get_params>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`set_params <sklearn.compose.ColumnTransformer.set_params>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid ":obj:`transform <sklearn.compose.ColumnTransformer.transform>`\\"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.transform:2
#: sklearn.compose._column_transformer.ColumnTransformer:149:<autosummary>:1
msgid "Transform X separately by each transformer, concatenate results."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:9
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:9
#: sklearn.compose._column_transformer.ColumnTransformer.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, dataframe} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:8
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:8
msgid "Input data, of which specified subsets are used to fit the transformers."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:12
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:12
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,...), default=None"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:12
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform:12
msgid "Targets for supervised learning."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit
#: sklearn.compose._column_transformer.ColumnTransformer.fit_transform
#: sklearn.compose._column_transformer.ColumnTransformer.get_feature_names
#: sklearn.compose._column_transformer.ColumnTransformer.get_params
#: sklearn.compose._column_transformer.ColumnTransformer.set_params
#: sklearn.compose._column_transformer.ColumnTransformer.transform
msgid "Returns"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:28
msgid "**self**"
msgstr ""

#: of
msgid "ColumnTransformer"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit:17
msgid "This estimator"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:31
#: sklearn.compose._column_transformer.ColumnTransformer.transform:27
msgid "**X_t**"
msgstr ""

#: of
msgid ""
"{array-like, sparse matrix} of                 shape (n_samples, "
"sum_n_components)"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.fit_transform:17
#: sklearn.compose._column_transformer.ColumnTransformer.transform:13
msgid ""
"hstack of results of transformers. sum_n_components is the sum of "
"n_components (output dimension) over transformers. If any result is a "
"sparse matrix, everything will be converted to sparse matrices."
msgstr ""

#: of
#: sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:20
msgid "**feature_names**"
msgstr ""

#: of
msgid "list of strings"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_feature_names:9
msgid "Names of the features produced by transform."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:4
msgid ""
"Returns the parameters given in the constructor as well as the estimators"
" contained within the `transformers` of the `ColumnTransformer`."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:12
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:11
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:28
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.get_params:17
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.compose.ColumnTransformer.named_transformers_:4
msgid ""
"Read-only attribute to access any transformer by given name. Keys are "
"transformer names and values are the fitted transformer objects."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:4
msgid ""
"Valid parameter keys can be listed with ``get_params()``. Note that you "
"can directly set the parameters of the estimators contained in "
"`transformers` of `ColumnTransformer`."
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.set_params:23
msgid "self"
msgstr ""

#: of sklearn.compose._column_transformer.ColumnTransformer.transform:8
msgid "The data to be transformed by subset."
msgstr ""

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:4
msgid "Examples using ``sklearn.compose.ColumnTransformer``"
msgstr ""

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:15
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
msgstr ""

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:34
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_tweedie_regression_insurance_claims.py`"
msgstr ""

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:53
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:61
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_permutation_importance.py`"
msgstr ""

#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:72
#: ../modules/generated/sklearn.compose.ColumnTransformer.examples:80
msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer_mixed_types.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_compose_plot_column_transformer.py`"
#~ msgstr ""

