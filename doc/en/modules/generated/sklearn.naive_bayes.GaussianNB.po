# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.naive_bayes.GaussianNB.rst:2
msgid ":mod:`sklearn.naive_bayes`.GaussianNB"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:2
msgid "Gaussian Naive Bayes (GaussianNB)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:4
msgid ""
"Can perform online updates to model parameters via :meth:`partial_fit`. "
"For details on algorithm used to update feature means and variance "
"online, see Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and "
"LeVeque:"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:8
msgid "http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:10
msgid "Read more in the :ref:`User Guide <gaussian_naive_bayes>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.GaussianNB sklearn.naive_bayes.GaussianNB.fit
#: sklearn.naive_bayes.GaussianNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:16
msgid "**priors**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:15
msgid ""
"Prior probabilities of the classes. If specified the priors are not "
"adjusted according to the data."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:25
msgid "**var_smoothing**"
msgstr ""

#: of
msgid "float, default=1e-9"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:19
msgid ""
"Portion of the largest variance of all features that is added to "
"variances for calculation stability."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB
msgid "Attributes"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:30
msgid "**class_count_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:30
msgid "number of training samples observed in each class."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:33
msgid "**class_prior_**"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:33
msgid "probability of each class."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:36
msgid "**classes_**"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:36
msgid "class labels known to the classifier"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:39
msgid "**epsilon_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:39
msgid "absolute additive value to variances"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:42
msgid "**sigma_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes, n_features)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:42
msgid "variance of each feature per class"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:51
msgid "**theta_**"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:45
msgid "mean of each feature per class"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:54
msgid "Examples"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:71
msgid "Methods"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`fit <sklearn.naive_bayes.GaussianNB.fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.fit:2
#: sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid "Fit Gaussian Naive Bayes according to X, y"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`get_params <sklearn.naive_bayes.GaussianNB.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.naive_bayes.GaussianNB.partial_fit>`\\"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:2
#: sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid "Incremental fit on a batch of samples."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`predict <sklearn.naive_bayes.GaussianNB.predict>`\\"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict:2
msgid "Perform classification on an array of test vectors X."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.naive_bayes.GaussianNB.predict_log_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_log_proba:2
msgid "Return log-probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.naive_bayes.GaussianNB.predict_proba>`\\"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
#: sklearn.naive_bayes._BaseNB.predict_proba:2
msgid "Return probability estimates for the test vector X."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`score <sklearn.naive_bayes.GaussianNB.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid ":obj:`set_params <sklearn.naive_bayes.GaussianNB.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.naive_bayes.GaussianNB:82:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.naive_bayes.GaussianNB.fit:9
#: sklearn.naive_bayes.GaussianNB.partial_fit:20
#: sklearn.naive_bayes._BaseNB.predict:8
#: sklearn.naive_bayes._BaseNB.predict_log_proba:8
#: sklearn.naive_bayes._BaseNB.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.fit:8
#: sklearn.naive_bayes.GaussianNB.partial_fit:19
msgid ""
"Training vectors, where n_samples is the number of samples and n_features"
" is the number of features."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.naive_bayes.GaussianNB.fit:12
#: sklearn.naive_bayes.GaussianNB.partial_fit:23
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.fit:12
#: sklearn.naive_bayes.GaussianNB.partial_fit:23
msgid "Target values."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.naive_bayes.GaussianNB.fit:18
#: sklearn.naive_bayes.GaussianNB.partial_fit:34
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.fit:15
#: sklearn.naive_bayes.GaussianNB.partial_fit:32
msgid "Weights applied to individual samples (1. for unweighted)."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.fit:17
msgid "Gaussian Naive Bayes supports fitting with *sample_weight*."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.naive_bayes.GaussianNB.fit
#: sklearn.naive_bayes.GaussianNB.partial_fit
#: sklearn.naive_bayes._BaseNB.predict
#: sklearn.naive_bayes._BaseNB.predict_log_proba
#: sklearn.naive_bayes._BaseNB.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.naive_bayes.GaussianNB.fit:34
#: sklearn.naive_bayes.GaussianNB.partial_fit:50
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:4
msgid ""
"This method is expected to be called several times consecutively on "
"different chunks of a dataset so as to implement out-of-core or online "
"learning."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:8
msgid ""
"This is especially useful when the whole dataset is too big to fit in "
"memory at once."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:11
msgid ""
"This method has some performance and numerical stability overhead, hence "
"it is better to call partial_fit on chunks of data that are as large as "
"possible (as long as fitting in the memory budget) to hide the overhead."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:29
msgid "**classes**"
msgstr ""

#: of
msgid "array-like of shape (n_classes,), default=None"
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:26
msgid "List of all the classes that can possibly appear in the y vector."
msgstr ""

#: of sklearn.naive_bayes.GaussianNB.partial_fit:28
msgid ""
"Must be provided at the first call to partial_fit, can be omitted in "
"subsequent calls."
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:24
#: sklearn.naive_bayes._BaseNB.predict_log_proba:26
#: sklearn.naive_bayes._BaseNB.predict_proba:26
msgid "**C**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict:13
msgid "Predicted target values for X"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_log_proba:13
msgid ""
"Returns the log-probability of the samples for each class in the model. "
"The columns correspond to the classes in sorted order, as they appear in "
"the attribute :term:`classes_`."
msgstr ""

#: of sklearn.naive_bayes._BaseNB.predict_proba:13
msgid ""
"Returns the probability of the samples for each class in the model. The "
"columns correspond to the classes in sorted order, as they appear in the "
"attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.GaussianNB.examples:4
msgid "Examples using ``sklearn.naive_bayes.GaussianNB``"
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.GaussianNB.examples:15
#: ../modules/generated/sklearn.naive_bayes.GaussianNB.examples:23
msgid ":ref:`sphx_glr_auto_examples_model_selection_plot_learning_curve.py`"
msgstr ""

#: ../modules/generated/sklearn.naive_bayes.GaussianNB.examples:34
#: ../modules/generated/sklearn.naive_bayes.GaussianNB.examples:42
msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_scaling_importance.py`"
msgstr ""

