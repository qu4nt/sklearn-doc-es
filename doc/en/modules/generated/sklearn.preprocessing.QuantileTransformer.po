# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.rst:2
msgid ":mod:`sklearn.preprocessing`.QuantileTransformer"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:2
msgid "Transform features using quantiles information."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:4
msgid ""
"This method transforms the features to follow a uniform or a normal "
"distribution. Therefore, for a given feature, this transformation tends "
"to spread out the most frequent values. It also reduces the impact of "
"(marginal) outliers: this is therefore a robust preprocessing scheme."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:9
msgid ""
"The transformation is applied on each feature independently. First an "
"estimate of the cumulative distribution function of a feature is used to "
"map the original values to a uniform distribution. The obtained values "
"are then mapped to the desired output distribution using the associated "
"quantile function. Features values of new/unseen data that fall below or "
"above the fitted range will be mapped to the bounds of the output "
"distribution. Note that this transform is non-linear. It may distort "
"linear correlations between variables measured at the same scale but "
"renders variables measured at different scales more directly comparable."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:19
msgid "Read more in the :ref:`User Guide <preprocessing_transformer>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.QuantileTransformer
#: sklearn.preprocessing._data.QuantileTransformer.fit
#: sklearn.preprocessing._data.QuantileTransformer.inverse_transform
#: sklearn.preprocessing._data.QuantileTransformer.transform
msgid "Parameters"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:31
msgid "**n_quantiles**"
msgstr ""

#: of
msgid "int, default=1000 or n_samples"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:26
msgid ""
"Number of quantiles to be computed. It corresponds to the number of "
"landmarks used to discretize the cumulative distribution function. If "
"n_quantiles is larger than the number of samples, n_quantiles is set to "
"the number of samples as a larger number of quantiles does not give a "
"better approximation of the cumulative distribution function estimator."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:35
msgid "**output_distribution**"
msgstr ""

#: of
msgid "{'uniform', 'normal'}, default='uniform'"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:34
msgid ""
"Marginal distribution for the transformed data. The choices are 'uniform'"
" (default) or 'normal'."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:40
msgid "**ignore_implicit_zeros**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:38
msgid ""
"Only applies to sparse matrices. If True, the sparse entries of the "
"matrix are discarded to compute the quantile statistics. If False, these "
"entries are treated as zeros."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:45
msgid "**subsample**"
msgstr ""

#: of
msgid "int, default=1e5"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:43
msgid ""
"Maximum number of samples used to estimate the quantiles for "
"computational efficiency. Note that the subsampling procedure may differ "
"for value-identical sparse and dense matrices."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:52
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:48
msgid ""
"Determines random number generation for subsampling and smoothing noise. "
"Please see ``subsample`` for more details. Pass an int for reproducible "
"results across multiple function calls. See :term:`Glossary "
"<random_state>`"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:59
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:55
msgid ""
"Set to False to perform inplace transformation and avoid a copy (if the "
"input is already a numpy array)."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer
msgid "Attributes"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:65
msgid "**n_quantiles_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:64
msgid ""
"The actual number of quantiles used to discretize the cumulative "
"distribution function."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:68
msgid "**quantiles_**"
msgstr ""

#: of
msgid "ndarray of shape (n_quantiles, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:68
msgid "The values corresponding the quantiles of reference."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:74
msgid "**references_**"
msgstr ""

#: of
msgid "ndarray of shape (n_quantiles, )"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:71
msgid "Quantiles of references."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:79
msgid ":obj:`quantile_transform`"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:80
msgid "Equivalent function without the estimator API."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:81
msgid ":obj:`PowerTransformer`"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:82
msgid "Perform mapping to a normal distribution using a power transform."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:83
msgid ":obj:`StandardScaler`"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:84
msgid "Perform standardization that is faster, but less robust to outliers."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:85
msgid ":obj:`RobustScaler`"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:86
msgid ""
"Perform robust standardization that removes the influence of outliers but"
" does not put outliers and inliers on the same scale."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:90
msgid "Notes"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:91
msgid ""
"NaNs are treated as missing values: disregarded in fit, and maintained in"
" transform."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:94
msgid ""
"For a comparison of the different scalers, transformers, and normalizers,"
" see :ref:`examples/preprocessing/plot_all_scaling.py "
"<sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:100
msgid "Examples"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:110
msgid "Methods"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ":obj:`fit <sklearn.preprocessing.QuantileTransformer.fit>`\\"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.fit:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Compute the quantiles used for transforming."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.preprocessing.QuantileTransformer.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ":obj:`get_params <sklearn.preprocessing.QuantileTransformer.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ""
":obj:`inverse_transform "
"<sklearn.preprocessing.QuantileTransformer.inverse_transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.inverse_transform:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Back-projection to the original space."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ":obj:`set_params <sklearn.preprocessing.QuantileTransformer.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid ":obj:`transform <sklearn.preprocessing.QuantileTransformer.transform>`\\"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.transform:2
#: sklearn.preprocessing._data.QuantileTransformer:119:<autosummary>:1
msgid "Feature-wise transformation of the data."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.preprocessing._data.QuantileTransformer.fit:11
#: sklearn.preprocessing._data.QuantileTransformer.inverse_transform:11
#: sklearn.preprocessing._data.QuantileTransformer.transform:11
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.fit:8
#: sklearn.preprocessing._data.QuantileTransformer.inverse_transform:8
#: sklearn.preprocessing._data.QuantileTransformer.transform:8
msgid ""
"The data used to scale along the features axis. If a sparse matrix is "
"provided, it will be converted into a sparse ``csc_matrix``. "
"Additionally, the sparse matrix needs to be nonnegative if "
"`ignore_implicit_zeros` is False."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.preprocessing._data.QuantileTransformer.fit:14
msgid "**y**"
msgstr ""

#: of
msgid "None"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.fit:14
msgid "Ignored."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.preprocessing._data.QuantileTransformer.fit
#: sklearn.preprocessing._data.QuantileTransformer.inverse_transform
#: sklearn.preprocessing._data.QuantileTransformer.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.preprocessing._data.QuantileTransformer.fit:30
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.fit:19
msgid "Fitted transformer."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.inverse_transform:27
#: sklearn.preprocessing._data.QuantileTransformer.transform:27
msgid "**Xt**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of (n_samples, n_features)"
msgstr ""

#: of sklearn.preprocessing._data.QuantileTransformer.inverse_transform:16
#: sklearn.preprocessing._data.QuantileTransformer.transform:16
msgid "The projected data."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.examples:4
msgid "Examples using ``sklearn.preprocessing.QuantileTransformer``"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.examples:15
#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_partial_dependence.py`"
msgstr ""

#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.examples:34
#: ../modules/generated/sklearn.preprocessing.QuantileTransformer.examples:42
msgid ":ref:`sphx_glr_auto_examples_compose_plot_transformed_target.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_map_data_to_normal.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_preprocessing_plot_all_scaling.py`"
#~ msgstr ""

