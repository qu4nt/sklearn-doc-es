# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst:2
msgid ":mod:`sklearn.kernel_approximation`.PolynomialCountSketch"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:2
msgid "Polynomial kernel approximation via Tensor Sketch."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:4
msgid ""
"Implements Tensor Sketch, which approximates the feature map of the "
"polynomial kernel::"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:9
msgid ""
"by efficiently computing a Count Sketch of the outer product of a vector "
"with itself using Fast Fourier Transforms (FFT). Read more in the "
":ref:`User Guide <polynomial_kernel_approx>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.kernel_approximation.PolynomialCountSketch
#: sklearn.kernel_approximation.PolynomialCountSketch.fit
#: sklearn.kernel_approximation.PolynomialCountSketch.transform
msgid "Parameters"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:19
msgid "**gamma**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:18
msgid "Parameter of the polynomial kernel whose feature map will be approximated."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:23
msgid "**degree**"
msgstr ""

#: of
msgid "int, default=2"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:22
msgid "Degree of the polynomial kernel whose feature map will be approximated."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:27
msgid "**coef0**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:26
msgid ""
"Constant term of the polynomial kernel whose feature map will be "
"approximated."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:34
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=100"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:30
msgid ""
"Dimensionality of the output feature space. Usually, n_components should "
"be greater than the number of features in input samples in order to "
"achieve good performance. The optimal score / run time balance is "
"typically achieved around n_components = 10 * n_features, but this "
"depends on the specific dataset being used."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:42
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:37
msgid ""
"Determines random number generation for indexHash and bitHash "
"initialization. Pass an int for reproducible results across multiple "
"function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch
msgid "Attributes"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:48
msgid "**indexHash_**"
msgstr ""

#: of
msgid "ndarray of shape (degree, n_features), dtype=int64"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:47
msgid ""
"Array of indexes in range [0, n_components) used to represent the 2-wise "
"independent hash functions for Count Sketch computation."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:58
msgid "**bitHash_**"
msgstr ""

#: of
msgid "ndarray of shape (degree, n_features), dtype=float32"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:51
msgid ""
"Array with random entries in {+1, -1}, used to represent the 2-wise "
"independent hash functions for Count Sketch computation."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:61
msgid "Examples"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:75
msgid "Methods"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid ":obj:`fit <sklearn.kernel_approximation.PolynomialCountSketch.fit>`\\"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.fit:2
#: sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid "Fit the model with X."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.kernel_approximation.PolynomialCountSketch.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.kernel_approximation.PolynomialCountSketch.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.kernel_approximation.PolynomialCountSketch.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid ""
":obj:`transform "
"<sklearn.kernel_approximation.PolynomialCountSketch.transform>`\\"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.transform:2
#: sklearn.kernel_approximation.PolynomialCountSketch:83:<autosummary>:1
msgid "Generate the feature map approximation for X."
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.fit:4
msgid ""
"Initializes the internal variables. The method needs no information about"
" the distribution of data, so we only care about n_features in X."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.kernel_approximation.PolynomialCountSketch.fit:11
#: sklearn.kernel_approximation.PolynomialCountSketch.transform:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.fit:10
msgid ""
"Training data, where n_samples in the number of samples and n_features is"
" the number of features."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.kernel_approximation.PolynomialCountSketch.fit
#: sklearn.kernel_approximation.PolynomialCountSketch.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.kernel_approximation.PolynomialCountSketch.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.fit:16
msgid "Returns the transformer."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "**y**"
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.kernel_approximation.PolynomialCountSketch.transform:25
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of
msgid "{array-like}, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.kernel_approximation.PolynomialCountSketch.transform:8
msgid ""
"New data, where n_samples in the number of samples and n_features is the "
"number of features."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_components)"
msgstr ""

#: ../modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.examples:4
msgid "Examples using ``sklearn.kernel_approximation.PolynomialCountSketch``"
msgstr ""

#: ../modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.examples:15
#: ../modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.examples:23
msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_kernel_approximation_plot_scalable_poly_kernels.py`"
#~ msgstr ""

