# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.ensemble.BaggingClassifier.rst:2
msgid ":mod:`sklearn.ensemble`.BaggingClassifier"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:2
msgid "A Bagging classifier."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:4
msgid ""
"A Bagging classifier is an ensemble meta-estimator that fits base "
"classifiers each on random subsets of the original dataset and then "
"aggregate their individual predictions (either by voting or by averaging)"
" to form a final prediction. Such a meta-estimator can typically be used "
"as a way to reduce the variance of a black-box estimator (e.g., a "
"decision tree), by introducing randomization into its construction "
"procedure and then making an ensemble out of it."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:12
msgid ""
"This algorithm encompasses several works from the literature. When random"
" subsets of the dataset are drawn as random subsets of the samples, then "
"this algorithm is known as Pasting [Rb1846455d0e5-1]_. If samples are "
"drawn with replacement, then the method is known as Bagging "
"[Rb1846455d0e5-2]_. When random subsets of the dataset are drawn as "
"random subsets of the features, then the method is known as Random "
"Subspaces [Rb1846455d0e5-3]_. Finally, when base estimators are built on "
"subsets of both samples and features, then the method is known as Random "
"Patches [Rb1846455d0e5-4]_."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:21
msgid "Read more in the :ref:`User Guide <bagging>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._bagging.BaggingClassifier
#: sklearn.ensemble._bagging.BaggingClassifier.decision_function
#: sklearn.ensemble._bagging.BaggingClassifier.predict
#: sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba
#: sklearn.ensemble._bagging.BaggingClassifier.predict_proba
#: sklearn.ensemble._bagging.BaseBagging.fit
msgid "Parameters"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:30
msgid "**base_estimator**"
msgstr ""

#: of
msgid "object, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:28
msgid ""
"The base estimator to fit on random subsets of the dataset. If None, then"
" the base estimator is a :class:`~sklearn.tree.DecisionTreeClassifier`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:33
msgid "**n_estimators**"
msgstr ""

#: of
msgid "int, default=10"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:33
msgid "The number of base estimators in the ensemble."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:40
msgid "**max_samples**"
msgstr ""

#: of
msgid "int or float, default=1.0"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:36
msgid ""
"The number of samples to draw from X to train each base estimator (with "
"replacement by default, see `bootstrap` for more details)."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:39
msgid "If int, then draw `max_samples` samples."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:40
msgid "If float, then draw `max_samples * X.shape[0]` samples."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:48
msgid "**max_features**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:43
msgid ""
"The number of features to draw from X to train each base estimator ( "
"without replacement by default, see `bootstrap_features` for more "
"details)."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:47
msgid "If int, then draw `max_features` features."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:48
msgid "If float, then draw `max_features * X.shape[1]` features."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:52
msgid "**bootstrap**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:51
msgid ""
"Whether samples are drawn with replacement. If False, sampling without "
"replacement is performed."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:55
msgid "**bootstrap_features**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:55
msgid "Whether features are drawn with replacement."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:59
msgid "**oob_score**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:58
msgid "Whether to use out-of-bag samples to estimate the generalization error."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:67
msgid "**warm_start**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:62
msgid ""
"When set to True, reuse the solution of the previous call to fit and add "
"more estimators to the ensemble, otherwise, just fit a whole new "
"ensemble. See :term:`the Glossary <warm_start>`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:66
msgid "*warm_start* constructor parameter."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:73
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:70
msgid ""
"The number of jobs to run in parallel for both :meth:`fit` and "
":meth:`predict`. ``None`` means 1 unless in a "
":obj:`joblib.parallel_backend` context. ``-1`` means using all "
"processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:81
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:76
msgid ""
"Controls the random resampling of the original dataset (sample wise and "
"feature wise). If the base estimator accepts a `random_state` attribute, "
"a different seed is generated for each instance in the ensemble. Pass an "
"int for reproducible output across multiple function calls. See "
":term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:87
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:84
msgid "Controls the verbosity when fitting and predicting."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:92
msgid "**base_estimator_**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:92
msgid "The base estimator from which the ensemble is grown."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:95
msgid "**n_features_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:95
msgid "The number of features when :meth:`fit` is performed."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:98
msgid "**estimators_**"
msgstr ""

#: of
msgid "list of estimators"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:98
msgid "The collection of fitted base estimators."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:101
msgid ":obj:`estimators_samples_ <estimators_samples_>`"
msgstr ""

#: of
msgid "list of arrays"
msgstr ""

#: of sklearn.ensemble.BaggingClassifier.estimators_samples_:2
#: sklearn.ensemble._bagging.BaggingClassifier:101
msgid "The subset of drawn samples for each base estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:104
msgid "**estimators_features_**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:104
msgid "The subset of drawn features for each base estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:107
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:107
msgid "The classes labels."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:110
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int or list"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:110
msgid "The number of classes."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:114
msgid "**oob_score_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:113
msgid ""
"Score of the training dataset obtained using an out-of-bag estimate. This"
" attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:126
msgid "**oob_decision_function_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:117
msgid ""
"Decision function computed with out-of-bag estimate on the training set. "
"If n_estimators is small it might be possible that a data point was never"
" left out during the bootstrap. In this case, `oob_decision_function_` "
"might contain NaN. This attribute exists only when ``oob_score`` is True."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:129
msgid "References"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:130
msgid ""
"L. Breiman, \"Pasting small votes for classification in large databases "
"and on-line\", Machine Learning, 36(1), 85-103, 1999."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:133
msgid ""
"L. Breiman, \"Bagging predictors\", Machine Learning, 24(2), 123-140, "
"1996."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:136
msgid ""
"T. Ho, \"The random subspace method for constructing decision forests\", "
"Pattern Analysis and Machine Intelligence, 20(8), 832-844, 1998."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:140
msgid ""
"G. Louppe and P. Geurts, \"Ensembles on Random Patches\", Machine "
"Learning and Knowledge Discovery in Databases, 346-361, 2012."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:145
msgid ""
"[Rb1846455d0e5-1]_, [Rb1846455d0e5-2]_, [Rb1846455d0e5-3]_, "
"[Rb1846455d0e5-4]_"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:148
msgid "Examples"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:161
msgid "Methods"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ""
":obj:`decision_function "
"<sklearn.ensemble.BaggingClassifier.decision_function>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.decision_function:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Average of the decision functions of the base classifiers."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`fit <sklearn.ensemble.BaggingClassifier.fit>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
#: sklearn.ensemble._bagging.BaseBagging.fit:4
msgid "Build a Bagging ensemble of estimators from the training"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`get_params <sklearn.ensemble.BaggingClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`predict <sklearn.ensemble.BaggingClassifier.predict>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Predict class for X."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.ensemble.BaggingClassifier.predict_log_proba>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Predict class log-probabilities for X."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.ensemble.BaggingClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_proba:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Predict class probabilities for X."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`score <sklearn.ensemble.BaggingClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid ":obj:`set_params <sklearn.ensemble.BaggingClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.ensemble._bagging.BaggingClassifier:172:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.ensemble._bagging.BaggingClassifier.decision_function:9
#: sklearn.ensemble._bagging.BaggingClassifier.predict:12
#: sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:12
#: sklearn.ensemble._bagging.BaggingClassifier.predict_proba:15
#: sklearn.ensemble._bagging.BaseBagging.fit:10
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.decision_function:8
#: sklearn.ensemble._bagging.BaggingClassifier.predict:11
#: sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:11
#: sklearn.ensemble._bagging.BaggingClassifier.predict_proba:14
#: sklearn.ensemble._bagging.BaseBagging.fit:9
msgid ""
"The training input samples. Sparse matrices are accepted only if they are"
" supported by the base estimator."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.ensemble._bagging.BaggingClassifier.decision_function
#: sklearn.ensemble._bagging.BaggingClassifier.predict
#: sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba
#: sklearn.ensemble._bagging.BaggingClassifier.predict_proba
#: sklearn.ensemble._bagging.BaseBagging.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
#: sklearn.ensemble._bagging.BaggingClassifier.decision_function:28
msgid "**score**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, k)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.decision_function:14
msgid ""
"The decision function of the input samples. The columns correspond to the"
" classes in sorted order, as they appear in the attribute ``classes_``. "
"Regression and binary classification are special cases with ``k == 1``, "
"otherwise ``k==n_classes``."
msgstr ""

#: of sklearn.ensemble.BaggingClassifier.estimators_samples_:4
msgid ""
"Returns a dynamically generated list of indices identifying the samples "
"used for fitting each member of the ensemble, i.e., the in-bag samples."
msgstr ""

#: of sklearn.ensemble.BaggingClassifier.estimators_samples_:8
msgid ""
"Note: the list is re-created at each call to the property in order to "
"reduce the object memory footprint by not storing the sampling data. Thus"
" fetching the property may be slower than expected."
msgstr ""

#: of sklearn.ensemble._bagging.BaseBagging.fit:3
msgid "set (X, y)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.ensemble._bagging.BaggingClassifier.predict:28
#: sklearn.ensemble._bagging.BaseBagging.fit:14
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._bagging.BaseBagging.fit:13
msgid ""
"The target values (class labels in classification, real numbers in "
"regression)."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
#: sklearn.ensemble._bagging.BaseBagging.fit:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.ensemble._bagging.BaseBagging.fit:17
msgid ""
"Sample weights. If None, then samples are equally weighted. Note that "
"this is supported only if the base estimator supports sample weighting."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.ensemble._bagging.BaseBagging.fit:35
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict:4
msgid ""
"The predicted class of an input sample is computed as the class with the "
"highest mean predicted probability. If base estimators do not implement a"
" ``predict_proba`` method, then it resorts to voting."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict:17
msgid "The predicted classes."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:4
msgid ""
"The predicted class log-probabilities of an input sample is computed as "
"the log of the mean predicted class probabilities of the base estimators "
"in the ensemble."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:29
#: sklearn.ensemble._bagging.BaggingClassifier.predict_proba:32
msgid "**p**"
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba:17
msgid ""
"The class log-probabilities of the input samples. The order of the "
"classes corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_proba:4
msgid ""
"The predicted class probabilities of an input sample is computed as the "
"mean predicted class probabilities of the base estimators in the "
"ensemble. If base estimators do not implement a ``predict_proba`` method,"
" then it resorts to voting and the predicted class probabilities of an "
"input sample represents the proportion of estimators predicting each "
"class."
msgstr ""

#: of sklearn.ensemble._bagging.BaggingClassifier.predict_proba:20
msgid ""
"The class probabilities of the input samples. The order of the classes "
"corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
msgid "Test samples."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

