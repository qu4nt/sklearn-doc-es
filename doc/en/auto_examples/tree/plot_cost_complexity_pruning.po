# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_auto_examples_tree_plot_cost_complexity_pruning.py>` "
"to download the full example code or to run this example in your browser "
"via Binder"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:23
msgid "Post pruning decision trees with cost complexity pruning"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:27
msgid ""
"The :class:`DecisionTreeClassifier` provides parameters such as "
"``min_samples_leaf`` and ``max_depth`` to prevent a tree from overfiting."
" Cost complexity pruning provides another option to control the size of a"
" tree. In :class:`DecisionTreeClassifier`, this pruning technique is "
"parameterized by the cost complexity parameter, ``ccp_alpha``. Greater "
"values of ``ccp_alpha`` increase the number of nodes pruned. Here we only"
" show the effect of ``ccp_alpha`` on regularizing the trees and how to "
"choose a ``ccp_alpha`` based on validation scores."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:36
msgid "See also :ref:`minimal_cost_complexity_pruning` for details on pruning."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:59
msgid "Total impurity of leaves vs effective alphas of pruned tree"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:60
msgid ""
"Minimal cost complexity pruning recursively finds the node with the "
"\"weakest link\". The weakest link is characterized by an effective "
"alpha, where the nodes with the smallest effective alpha are pruned "
"first. To get an idea of what values of ``ccp_alpha`` could be "
"appropriate, scikit-learn provides "
":func:`DecisionTreeClassifier.cost_complexity_pruning_path` that returns "
"the effective alphas and the corresponding total leaf impurities at each "
"step of the pruning process. As alpha increases, more of the tree is "
"pruned, which increases the total impurity of its leaves."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:89
msgid ""
"In the following plot, the maximum effective alpha value is removed, "
"because it is the trivial tree with only one node."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:112
#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:145
msgid "Out:"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:123
msgid ""
"Next, we train a decision tree using the effective alphas. The last value"
" in ``ccp_alphas`` is the alpha value that prunes the whole tree, leaving"
" the tree, ``clfs[-1]``, with one node."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:156
msgid ""
"For the remainder of this example, we remove the last element in ``clfs``"
" and ``ccp_alphas``, because it is the trivial tree with only one node. "
"Here we show that the number of nodes and tree depth decreases as alpha "
"increases."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:195
msgid "Accuracy vs alpha for training and testing sets"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:196
msgid ""
"When ``ccp_alpha`` is set to zero and keeping the other default "
"parameters of :class:`DecisionTreeClassifier`, the tree overfits, leading"
" to a 100% training accuracy and 88% testing accuracy. As alpha "
"increases, more of the tree is pruned, thus creating a decision tree that"
" generalizes better. In this example, setting ``ccp_alpha=0.015`` "
"maximizes the testing accuracy."
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:233
msgid "**Total running time of the script:** ( 0 minutes  0.627 seconds)"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:255
msgid ""
":download:`Download Python source code: plot_cost_complexity_pruning.py "
"<plot_cost_complexity_pruning.py>`"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:261
msgid ""
":download:`Download Jupyter notebook: plot_cost_complexity_pruning.ipynb "
"<plot_cost_complexity_pruning.ipynb>`"
msgstr ""

#: ../auto_examples/tree/plot_cost_complexity_pruning.rst:268
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

