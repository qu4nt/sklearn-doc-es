# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:43-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_auto_examples_compose_plot_column_transformer_mixed_types.py>`"
" to download the full example code or to run this example in your browser"
" via Binder"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:23
msgid "Column Transformer with Mixed Types"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:27
msgid ""
"This example illustrates how to apply different preprocessing and feature"
" extraction pipelines to different subsets of features, using "
":class:`~compose.ColumnTransformer`. This is particularly handy for the "
"case of datasets that contain heterogeneous data types, since we may want"
" to scale the numeric features and one-hot encode the categorical ones."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:33
msgid ""
"In this example, the numeric data is standard-scaled after mean-"
"imputation, while the categorical data is one-hot encoded after imputing "
"missing values with a new category (``'missing'``)."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:37
msgid ""
"In addition, we show two different ways to dispatch the columns to the "
"particular pre-processor: by column names and by column data types."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:40
msgid ""
"Finally, the preprocessing pipeline is integrated in a full prediction "
"pipeline using :class:`~pipeline.Pipeline`, together with a simple "
"classification model."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:82
msgid "Use ``ColumnTransformer`` by selecting column by names"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:83
msgid "We will train our classifier with the following features:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:85
msgid "Numeric Features:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:87
msgid "``age``: float;"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:88
msgid "``fare``: float."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:90
msgid "Categorical Features:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:92
msgid "``embarked``: categories encoded as strings ``{'C', 'S', 'Q'}``;"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:93
msgid "``sex``: categories encoded as strings ``{'female', 'male'}``;"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:94
msgid "``pclass``: ordinal integers ``{1, 2, 3}``."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:96
msgid ""
"We create the preprocessing pipelines for both numeric and categorical "
"data. Note that ``pclass`` could either be treated as a categorical or "
"numeric feature."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:135
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:233
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:293
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:321
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:343
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:430
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:456
#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:576
msgid "Out:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:147
msgid "HTML representation of ``Pipeline``"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:148
msgid ""
"When the ``Pipeline`` is printed out in a jupyter notebook an HTML "
"representation of the estimator is displayed as follows:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:193
msgid "Use ``ColumnTransformer`` by selecting column by data types"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:194
msgid ""
"When dealing with a cleaned dataset, the preprocessing can be automatic "
"by using the data types of the column to decide whether to treat a column"
" as a numerical or categorical feature. "
":func:`sklearn.compose.make_column_selector` gives this possibility. "
"First, let's only select a subset of columns to simplify our example."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:218
msgid "Then, we introspect the information regarding each column data type."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:255
msgid ""
"We can observe that the `embarked` and `sex` columns were tagged as "
"`category` columns when loading the data with ``fetch_openml``. "
"Therefore, we can use this information to dispatch the categorical "
"columns to the ``categorical_transformer`` and the remaining columns to "
"the ``numerical_transformer``."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:263
msgid ""
"In practice, you will have to handle yourself the column data type. If "
"you want some columns to be considered as `category`, you will have to "
"convert them into categorical columns. If you are using pandas, you can "
"refer to their documentation regarding `Categorical data "
"<https://pandas.pydata.org/pandas-"
"docs/stable/user_guide/categorical.html>`_."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:304
msgid ""
"The resulting score is not exactly the same as the one from the previous "
"pipeline becase the dtype-based selector treats the ``pclass`` columns as"
" a numeric features instead of a categorical feature as previously:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:355
msgid "Using the prediction pipeline in a grid search"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:356
msgid ""
"Grid search can also be performed on the different preprocessing steps "
"defined in the ``ColumnTransformer`` object, together with the "
"classifier's hyperparameters as part of the ``Pipeline``. We will search "
"for both the imputer strategy of the numeric preprocessing and the "
"regularization parameter of the logistic regression using "
":class:`~sklearn.model_selection.GridSearchCV`."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:411
msgid ""
"Calling 'fit' triggers the cross-validated search for the best hyper-"
"parameters combination:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:442
msgid "The internal cross-validation scores obtained by those parameters is:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:467
msgid "We can also introspect the top grid search results as a pandas dataframe:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:559
msgid ""
"The best hyper-parameters have be used to re-fit a final model on the "
"full training set. We can evaluate that final model on held out test data"
" that was not used for hyparameter tuning."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:588
msgid "**Total running time of the script:** ( 0 minutes  2.496 seconds)"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:610
msgid ""
":download:`Download Python source code: "
"plot_column_transformer_mixed_types.py "
"<plot_column_transformer_mixed_types.py>`"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:616
msgid ""
":download:`Download Jupyter notebook: "
"plot_column_transformer_mixed_types.ipynb "
"<plot_column_transformer_mixed_types.ipynb>`"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer_mixed_types.rst:623
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#~ msgid "**Total running time of the script:** ( 0 minutes  1.225 seconds)"
#~ msgstr ""

