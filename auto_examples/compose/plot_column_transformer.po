# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../auto_examples/compose/plot_column_transformer.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_auto_examples_compose_plot_column_transformer.py>` to "
"download the full example code or to run this example in your browser via"
" Binder"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:23
msgid "Column Transformer with Heterogeneous Data Sources"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:25
msgid ""
"Datasets can often contain components that require different feature "
"extraction and processing pipelines. This scenario might occur when:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:28
msgid ""
"your dataset consists of heterogeneous data types (e.g. raster images and"
" text captions),"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:30
msgid ""
"your dataset is stored in a :class:`pandas.DataFrame` and different "
"columns require different processing pipelines."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:33
msgid ""
"This example demonstrates how to use "
":class:`~sklearn.compose.ColumnTransformer` on a dataset containing "
"different types of features. The choice of features is not particularly "
"helpful, but serves to illustrate the technique."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:69
msgid "20 newsgroups dataset"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:71
msgid ""
"We will use the :ref:`20 newsgroups dataset <20newsgroups_dataset>`, "
"which comprises posts from newsgroups on 20 topics. This dataset is split"
" into train and test subsets based on messages posted before and after a "
"specific date. We will only use posts from 2 categories to speed up "
"running time."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:103
msgid ""
"Each feature comprises meta information about that post, such as the "
"subject, and the body of the news post."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:119
#: ../auto_examples/compose/plot_column_transformer.rst:297
msgid "Out:"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:150
msgid "Creating transformers"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:152
msgid ""
"First, we would like a transformer that extracts the subject and body of "
"each post. Since this is a stateless transformation (does not require "
"state information from training data), we can define a function that "
"performs the data transformation then use "
":class:`~sklearn.preprocessing.FunctionTransformer` to create a scikit-"
"learn transformer."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:198
msgid ""
"We will also create a transformer that extracts the length of the text "
"and the number of sentences."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:225
msgid "Classification pipeline"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:227
msgid ""
"The pipeline below extracts the subject and body from each post using "
"``SubjectBodyExtractor``, producing a (n_samples, 2) array. This array is"
" then used to compute standard bag-of-words features for the subject and "
"body as well as text length and number of sentences on the body, using "
"``ColumnTransformer``. We combine them, with weights, then train a "
"classifier on the combined set of features."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:278
msgid ""
"Finally, we fit our pipeline on the training data and use it to predict "
"topics for ``X_test``. Performance metrics of our pipeline are then "
"printed."
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:322
msgid "**Total running time of the script:** ( 0 minutes  3.151 seconds)"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:344
msgid ""
":download:`Download Python source code: plot_column_transformer.py "
"<plot_column_transformer.py>`"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:350
msgid ""
":download:`Download Jupyter notebook: plot_column_transformer.ipynb "
"<plot_column_transformer.ipynb>`"
msgstr ""

#: ../auto_examples/compose/plot_column_transformer.rst:357
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

