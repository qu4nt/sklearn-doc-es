# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../auto_examples/applications/plot_out_of_core_classification.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_auto_examples_applications_plot_out_of_core_classification.py>`"
" to download the full example code or to run this example in your browser"
" via Binder"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:23
msgid "Out-of-core classification of text documents"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:25
msgid ""
"This is an example showing how scikit-learn can be used for "
"classification using an out-of-core approach: learning from data that "
"doesn't fit into main memory. We make use of an online classifier, i.e., "
"one that supports the partial_fit method, that will be fed with batches "
"of examples. To guarantee that the features space remains the same over "
"time we leverage a HashingVectorizer that will project each example into "
"the same feature space. This is especially useful in the case of text "
"classification where new features (words) may appear in each batch."
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:79
msgid "Reuters Dataset related routines"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:81
msgid ""
"The dataset used in this example is Reuters-21578 as provided by the UCI "
"ML repository. It will be automatically downloaded and uncompressed on "
"first run."
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:227
msgid "Main"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:229
msgid ""
"Create the vectorizer and limit the number of features to a reasonable "
"maximum"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:369
msgid "Out:"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:426
msgid "Plot results"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:428
msgid ""
"The plot represents the learning curve of the classifier: the evolution "
"of classification accuracy over the course of the mini-batches. Accuracy "
"is measured on the first 1000 samples, held out as a validation set."
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:432
msgid ""
"To limit the memory consumption, we queue examples up to a fixed amount "
"before feeding them to the learner."
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:572
msgid "**Total running time of the script:** ( 0 minutes  55.885 seconds)"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:594
msgid ""
":download:`Download Python source code: "
"plot_out_of_core_classification.py <plot_out_of_core_classification.py>`"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:600
msgid ""
":download:`Download Jupyter notebook: "
"plot_out_of_core_classification.ipynb "
"<plot_out_of_core_classification.ipynb>`"
msgstr ""

#: ../auto_examples/applications/plot_out_of_core_classification.rst:607
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

