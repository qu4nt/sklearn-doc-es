# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.neighbors.KDTree.rst:2
msgid ":mod:`sklearn.neighbors`.KDTree"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:2
msgid "KDTree for fast generalized N-point problems"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:4
msgid "Read more in the :ref:`User Guide <unsupervised_neighbors>`."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density
#: sklearn.neighbors.KDTree.query sklearn.neighbors.KDTree.query_radius
#: sklearn.neighbors.KDTree.two_point_correlation
#: sklearn.neighbors._kd_tree.KDTree
msgid "Parameters"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:10
#: sklearn.neighbors.KDTree.query:8 sklearn.neighbors.KDTree.query_radius:8
#: sklearn.neighbors.KDTree.two_point_correlation:9
#: sklearn.neighbors._kd_tree.KDTree:12
msgid "**X**"
msgstr ""

#: ../docstring of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:9
msgid ""
"n_samples is the number of points in the data set, and n_features is the "
"dimension of the parameter space. Note: if X is a C-contiguous array of "
"doubles then data will not be copied. Otherwise, an internal copy will be"
" made."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:22
msgid "**leaf_size**"
msgstr ""

#: ../docstring of
msgid "positive int, default=40"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:15
msgid ""
"Number of points at which to switch to brute-force. Changing leaf_size "
"will not affect the results of a query, but can significantly impact the "
"speed of a query and the memory required to store the constructed tree.  "
"The amount of memory needed to store the tree scales as approximately "
"n_samples / leaf_size. For a specified ``leaf_size``, a leaf node is "
"guaranteed to satisfy ``leaf_size <= n_points <= 2 * leaf_size``, except "
"in the case that ``n_samples < leaf_size``."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:29
msgid "**metric**"
msgstr ""

#: ../docstring of
msgid "str or DistanceMetric object"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:25
msgid ""
"the distance metric to use for the tree.  Default='minkowski' with p=2 "
"(that is, a euclidean metric). See the documentation of the "
"DistanceMetric class for a list of available metrics. "
"kd_tree.valid_metrics gives a list of the metrics which are valid for "
"KDTree."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:32
msgid "**Additional keywords are passed to the distance metric class.**"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:35
msgid ""
"**Note: Callable functions in the metric parameter are NOT supported for "
"KDTree**"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:41
msgid ""
"**and Ball Tree. Function call overhead will result in very poor "
"performance.**"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree
msgid "Attributes"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:52
msgid "**data**"
msgstr ""

#: ../docstring of
msgid "memory view"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:46
msgid "The training data"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:55
msgid "Examples"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:56
msgid "Query for k-nearest neighbors"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:68
msgid ""
"Pickle and Unpickle a tree.  Note that the state of the tree is saved in "
"the pickle operation: the tree needs not be rebuilt upon unpickling."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:84
msgid "Query for neighbors within a given radius"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:96
msgid "Compute a gaussian kernel density estimate:"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:105
msgid "Compute a two-point auto-correlation function"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:116
msgid "Methods"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ":obj:`get_arrays <sklearn.neighbors.KDTree.get_arrays>`\\ \\(self\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_arrays:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "Get data and node arrays."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ":obj:`get_n_calls <sklearn.neighbors.KDTree.get_n_calls>`\\ \\(self\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_n_calls:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "Get number of calls."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
":obj:`get_tree_stats <sklearn.neighbors.KDTree.get_tree_stats>`\\ "
"\\(self\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_tree_stats:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "Get tree status."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
":obj:`kernel_density <sklearn.neighbors.KDTree.kernel_density>`\\ "
"\\(self\\, X\\, h\\[\\, kernel\\, atol\\, ...\\]\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
"Compute the kernel density estimate at points X with the given kernel, "
"using the distance metric specified at tree creation."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
":obj:`query <sklearn.neighbors.KDTree.query>`\\ \\(X\\[\\, k\\, "
"return\\_distance\\, dualtree\\, ...\\]\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "query the tree for the k nearest neighbors"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
":obj:`query_radius <sklearn.neighbors.KDTree.query_radius>`\\ \\(X\\, "
"r\\[\\, return\\_distance\\, ...\\]\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "query the tree for neighbors within a radius r"
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ":obj:`reset_n_calls <sklearn.neighbors.KDTree.reset_n_calls>`\\ \\(self\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.reset_n_calls:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "Reset number of calls to 0."
msgstr ""

#: ../docstring of sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid ""
":obj:`two_point_correlation "
"<sklearn.neighbors.KDTree.two_point_correlation>`\\ \\(X\\, r\\[\\, "
"dualtree\\]\\)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.two_point_correlation:2
#: sklearn.neighbors._kd_tree.KDTree:127:<autosummary>:1
msgid "Compute the two-point correlation function"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_arrays
#: sklearn.neighbors.KDTree.get_n_calls sklearn.neighbors.KDTree.get_tree_stats
#: sklearn.neighbors.KDTree.kernel_density sklearn.neighbors.KDTree.query
#: sklearn.neighbors.KDTree.query_radius
#: sklearn.neighbors.KDTree.two_point_correlation
msgid "Returns"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_arrays:20
msgid "arrays: tuple of array"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_arrays:9
msgid "Arrays for storing tree data, index, node data and node bounds."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_n_calls:20
msgid "n_calls: int"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_n_calls:9
msgid "number of distance computation calls"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_tree_stats:20
msgid "tree_stats: tuple of int"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.get_tree_stats:9
msgid "(number of trims, number of leaves, number of splits)"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:9
#: sklearn.neighbors.KDTree.two_point_correlation:8
msgid ""
"An array of points to query.  Last dimension should match dimension of "
"training data."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:13
msgid "**h**"
msgstr ""

#: ../docstring of
msgid "float"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:13
msgid "the bandwidth of the kernel"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:23
msgid "**kernel**"
msgstr ""

#: ../docstring of
msgid "str, default=\"gaussian\""
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:16
msgid ""
"specify the kernel to use.  Options are - 'gaussian' - 'tophat' - "
"'epanechnikov' - 'exponential' - 'linear' - 'cosine' Default is kernel = "
"'gaussian'"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:29
msgid "**atol, rtol**"
msgstr ""

#: ../docstring of
msgid "float, default=0, 1e-8"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:26
msgid ""
"Specify the desired relative and absolute tolerance of the result. If the"
" true result is K_true, then the returned result K_ret satisfies "
"``abs(K_true - K_ret) < atol + rtol * K_ret`` The default is zero (i.e. "
"machine precision) for both."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:34
#: sklearn.neighbors.KDTree.query:25
msgid "**breadth_first**"
msgstr ""

#: ../docstring of
msgid "bool, default=False"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:32
msgid ""
"If True, use a breadth-first search.  If False (default) use a depth-"
"first search.  Breadth-first is generally faster for compact kernels "
"and/or high tolerances."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:38
msgid "**return_log**"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:37
msgid ""
"Return the logarithm of the result.  This can be more accurate than "
"returning the result itself for narrow kernels."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:54
msgid "**density**"
msgstr ""

#: ../docstring of
msgid "ndarray of shape X.shape[:-1]"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.kernel_density:43
msgid "The array of (log)-density evaluations"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:8
#: sklearn.neighbors.KDTree.query_radius:8
msgid "An array of points to query"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:11
msgid "**k**"
msgstr ""

#: ../docstring of
msgid "int, default=1"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:11
msgid "The number of nearest neighbors to return"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:15
#: sklearn.neighbors.KDTree.query_radius:20
msgid "**return_distance**"
msgstr ""

#: ../docstring of
msgid "bool, default=True"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:14
msgid ""
"if True, return a tuple (d, i) of distances and indices if False, return "
"array i"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:21
#: sklearn.neighbors.KDTree.two_point_correlation:17
msgid "**dualtree**"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:18
msgid ""
"if True, use the dual tree formalism for the query: a tree is built for "
"the query points, and the pair of trees is used to efficiently search "
"this space.  This can lead to better performance as the number of points "
"grows large."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:24
msgid ""
"if True, then query the nodes in a breadth-first manner. Otherwise, query"
" the nodes in a depth-first manner."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:30
#: sklearn.neighbors.KDTree.query_radius:32
msgid "**sort_results**"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:28
msgid ""
"if True, then distances and indices of each point are sorted on return, "
"so that the first column contains the closest points. Otherwise, "
"neighbors are returned in an arbitrary order."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:35
#: sklearn.neighbors.KDTree.query:57
msgid "**i**"
msgstr ""

#: ../docstring of
msgid "if return_distance == False"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:38
msgid "**(d,i)**"
msgstr ""

#: ../docstring of
msgid "if return_distance == True"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:42
msgid "**d**"
msgstr ""

#: ../docstring of
msgid "ndarray of shape X.shape[:-1] + (k,), dtype=double"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:41
msgid ""
"Each entry gives the list of distances to the neighbors of the "
"corresponding point."
msgstr ""

#: ../docstring of
msgid "ndarray of shape X.shape[:-1] + (k,), dtype=int"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query:45
msgid ""
"Each entry gives the list of indices of neighbors of the corresponding "
"point."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:12
#: sklearn.neighbors.KDTree.two_point_correlation:12
msgid "**r**"
msgstr ""

#: ../docstring of
msgid "distance within which neighbors are returned"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:11
msgid ""
"r can be a single value, or an array of values of shape x.shape[:-1] if "
"different radii are desired for each point."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:15
msgid ""
"if True,  return distances to neighbors of each point if False, return "
"only neighbors Note that unlike the query() method, setting "
"return_distance=True here adds to the computation time.  Not all "
"distances need to be calculated explicitly for return_distance=False.  "
"Results are not sorted by default: see ``sort_results`` keyword."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:26
msgid "**count_only**"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:23
msgid ""
"if True,  return only the count of points within distance r if False, "
"return the indices of all points within distance r If "
"return_distance==True, setting count_only=True will result in an error."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:29
msgid ""
"if True, the distances and indices will be sorted before being returned."
"  If False, the results will not be sorted.  If return_distance == False,"
" setting sort_results = True will result in an error."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:37
#: sklearn.neighbors.KDTree.query_radius:47
msgid "**count**"
msgstr ""

#: ../docstring of
msgid "if count_only == True"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:40
#: sklearn.neighbors.KDTree.query_radius:53
msgid "**ind**"
msgstr ""

#: ../docstring of
msgid "if count_only == False and return_distance == False"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:43
msgid "**(ind, dist)**"
msgstr ""

#: ../docstring of
msgid "if count_only == False and return_distance == True"
msgstr ""

#: ../docstring of
msgid "ndarray of shape X.shape[:-1], dtype=int"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:46
msgid ""
"Each entry gives the number of neighbors within a distance r of the "
"corresponding point."
msgstr ""

#: ../docstring of
msgid "ndarray of shape X.shape[:-1], dtype=object"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:50
msgid ""
"Each element is a numpy integer array listing the indices of neighbors of"
" the corresponding point.  Note that unlike the results of a k-neighbors "
"query, the returned neighbors are not sorted by distance by default."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:68
msgid "**dist**"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.query_radius:56
msgid ""
"Each element is a numpy double array listing the distances corresponding "
"to indices in i."
msgstr ""

#: ../docstring of
msgid "array-like"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.two_point_correlation:12
msgid "A one-dimensional array of distances"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.two_point_correlation:15
msgid ""
"If True, use a dualtree algorithm.  Otherwise, use a single-tree "
"algorithm.  Dual tree algorithms can have better scaling for large N."
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.two_point_correlation:34
msgid "**counts**"
msgstr ""

#: ../docstring of
msgid "ndarray"
msgstr ""

#: ../docstring of sklearn.neighbors.KDTree.two_point_correlation:22
msgid ""
"counts[i] contains the number of pairs of points with distance less than "
"or equal to r[i]"
msgstr ""

