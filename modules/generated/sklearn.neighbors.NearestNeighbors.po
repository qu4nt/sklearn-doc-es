# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.neighbors.NearestNeighbors.rst:2
msgid ":mod:`sklearn.neighbors`.NearestNeighbors"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:2
msgid "Unsupervised learner for implementing neighbor searches."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:4
msgid "Read more in the :ref:`User Guide <unsupervised_neighbors>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph
#: sklearn.neighbors._unsupervised.NearestNeighbors
#: sklearn.neighbors._unsupervised.NearestNeighbors.fit
msgid "Parameters"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:15
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:17
#: sklearn.neighbors._unsupervised.NearestNeighbors:11
msgid "**n_neighbors**"
msgstr ""

#: of
msgid "int, default=5"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:11
msgid "Number of neighbors to use by default for :meth:`kneighbors` queries."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:20
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:16
#: sklearn.neighbors._unsupervised.NearestNeighbors:15
msgid "**radius**"
msgstr ""

#: of
msgid "float, default=1.0"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:14
msgid ""
"Range of parameter space to use by default for :meth:`radius_neighbors` "
"queries."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:27
msgid "**algorithm**"
msgstr ""

#: of
msgid "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:18
msgid "Algorithm used to compute the nearest neighbors:"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:20
msgid "'ball_tree' will use :class:`BallTree`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:21
msgid "'kd_tree' will use :class:`KDTree`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:22
msgid "'brute' will use a brute-force search."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:23
msgid ""
"'auto' will attempt to decide the most appropriate algorithm based on the"
" values passed to :meth:`fit` method."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:26
msgid ""
"Note: fitting on sparse input will override the setting of this "
"parameter, using brute force."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:33
msgid "**leaf_size**"
msgstr ""

#: of
msgid "int, default=30"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:30
msgid ""
"Leaf size passed to BallTree or KDTree.  This can affect the speed of the"
" construction and query, as well as the memory required to store the "
"tree.  The optimal value depends on the nature of the problem."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:42
msgid "**metric**"
msgstr ""

#: of
msgid "str or callable, default='minkowski'"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:36
msgid ""
"the distance metric to use for the tree.  The default metric is "
"minkowski, and with p=2 is equivalent to the standard Euclidean metric. "
"See the documentation of :class:`DistanceMetric` for a list of available "
"metrics. If metric is \"precomputed\", X is assumed to be a distance "
"matrix and must be square during fit. X may be a :term:`sparse graph`, in"
" which case only \"nonzero\" elements may be considered neighbors."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:48
msgid "**p**"
msgstr ""

#: of
msgid "int, default=2"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:45
msgid ""
"Parameter for the Minkowski metric from "
"sklearn.metrics.pairwise.pairwise_distances. When p = 1, this is "
"equivalent to using manhattan_distance (l1), and euclidean_distance (l2) "
"for p = 2. For arbitrary p, minkowski_distance (l_p) is used."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:51
msgid "**metric_params**"
msgstr ""

#: of
msgid "dict, default=None"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:51
msgid "Additional keyword arguments for the metric function."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:60
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:54
msgid ""
"The number of parallel jobs to run for neighbors search. ``None`` means 1"
" unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using "
"all processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors
msgid "Attributes"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:65
msgid "**effective_metric_**"
msgstr ""

#: of
msgid "str"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:65
msgid "Metric used to compute distances to neighbors."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:68
msgid "**effective_metric_params_**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:68
msgid "Parameters for the metric used to compute distances to neighbors."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:74
msgid "**n_samples_fit_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:71
msgid "Number of samples in the fitted data."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:79
msgid ":obj:`KNeighborsClassifier`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:81
msgid ":obj:`RadiusNeighborsClassifier`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:83
msgid ":obj:`KNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:85
msgid ":obj:`RadiusNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:87
msgid ":obj:`BallTree`"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:53
#: sklearn.neighbors._unsupervised.NearestNeighbors:91
msgid "Notes"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:92
msgid ""
"See :ref:`Nearest Neighbors <neighbors>` in the online documentation for "
"a discussion of the choice of ``algorithm`` and ``leaf_size``."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:95
msgid "https://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:39
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:46
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:62
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:52
#: sklearn.neighbors._unsupervised.NearestNeighbors:99
msgid "Examples"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:118
msgid "Methods"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.NearestNeighbors.fit>`\\"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors.fit:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Fit the nearest neighbors estimator from the training dataset."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ":obj:`get_params <sklearn.neighbors.NearestNeighbors.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ":obj:`kneighbors <sklearn.neighbors.NearestNeighbors.kneighbors>`\\"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Finds the K-neighbors of a point."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ""
":obj:`kneighbors_graph "
"<sklearn.neighbors.NearestNeighbors.kneighbors_graph>`\\"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Computes the (weighted) graph of k-Neighbors for points in X"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ""
":obj:`radius_neighbors "
"<sklearn.neighbors.NearestNeighbors.radius_neighbors>`\\"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Finds the neighbors within a given radius of a point or points."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ""
":obj:`radius_neighbors_graph "
"<sklearn.neighbors.NearestNeighbors.radius_neighbors_graph>`\\"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Computes the (weighted) graph of Neighbors for points in X"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid ":obj:`set_params <sklearn.neighbors.NearestNeighbors.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neighbors._unsupervised.NearestNeighbors:128:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:11
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:13
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:16
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:12
#: sklearn.neighbors._unsupervised.NearestNeighbors.fit:8
msgid "**X**"
msgstr ""

#: of
msgid ""
"{array-like, sparse matrix} of shape (n_samples, n_features) or"
"                 (n_samples, n_samples) if metric='precomputed'"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors.fit:11
msgid "Not used, present for API consistency by convention."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph
#: sklearn.neighbors._unsupervised.NearestNeighbors.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neighbors._unsupervised.NearestNeighbors.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "NearestNeighbors"
msgstr ""

#: of sklearn.neighbors._unsupervised.NearestNeighbors.fit:16
msgid "The fitted nearest neighbors estimator."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:4
msgid "Returns indices of and distances to the neighbors of each point."
msgstr ""

#: of
msgid ""
"array-like, shape (n_queries, n_features),             or (n_queries, "
"n_indexed) if metric == 'precomputed',                 default=None"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:9
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:14
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:10
msgid ""
"The query point or points. If not provided, neighbors of each indexed "
"point are returned. In this case, the query point is not considered its "
"own neighbor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:14
msgid ""
"Number of neighbors required for each sample. The default is the value "
"passed to the constructor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:18
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:23
msgid "**return_distance**"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:18
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:23
msgid "Whether or not to return the distances."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:24
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:38
msgid "**neigh_dist**"
msgstr ""

#: of
msgid "ndarray of shape (n_queries, n_neighbors)"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:23
msgid ""
"Array representing the lengths to points, only present if "
"return_distance=True"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:36
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:50
msgid "**neigh_ind**"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:27
msgid "Indices of the nearest points in the population matrix."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:40
msgid ""
"In the following example, we construct a NearestNeighbors class from an "
"array representing our data set and ask who's the closest point to "
"[1,1,1]"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:52
msgid ""
"As you can see, it returns [[0.5]], and [[2]], which means that the "
"element is at distance 0.5 and is the third element of samples (indexes "
"start at 0). You can also query for multiple points:"
msgstr ""

#: of
msgid ""
"array-like of shape (n_queries, n_features),                 or "
"(n_queries, n_indexed) if metric == 'precomputed',                 "
"default=None"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:8
msgid ""
"The query point or points. If not provided, neighbors of each indexed "
"point are returned. In this case, the query point is not considered its "
"own neighbor. For ``metric='precomputed'`` the shape should be "
"(n_queries, n_indexed). Otherwise the shape should be (n_queries, "
"n_features)."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:16
msgid ""
"Number of neighbors for each sample. The default is the value passed to "
"the constructor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:22
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:21
msgid "**mode**"
msgstr ""

#: of
msgid "{'connectivity', 'distance'}, default='connectivity'"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:20
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:19
msgid ""
"Type of returned matrix: 'connectivity' will return the connectivity "
"matrix with ones and zeros, in 'distance' the edges are Euclidean "
"distance between points."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:35
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:41
msgid "**A**"
msgstr ""

#: of
msgid "sparse-matrix of shape (n_queries, n_samples_fit)"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:27
msgid ""
"`n_samples_fit` is the number of samples in the fitted data `A[i, j]` is "
"assigned the weight of edge that connects `i` to `j`. The matrix is of "
"CSR format."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:40
msgid ":obj:`NearestNeighbors.radius_neighbors_graph`"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:4
msgid ""
"Return the indices and distances of each point from the dataset lying in "
"a ball with size ``radius`` around the points of the query array. Points "
"lying on the boundary are included in the results."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:8
msgid ""
"The result points are *not* necessarily sorted by distance to their query"
" point."
msgstr ""

#: of
msgid "array-like of (n_samples, n_features), default=None"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:19
msgid ""
"Limiting distance of neighbors to return. The default is the value passed"
" to the constructor."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:31
#: sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:28
msgid "**sort_results**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:26
msgid ""
"If True, the distances and indices will be sorted by increasing distances"
" before being returned. If False, the results may not be sorted. If "
"`return_distance=False`, setting `sort_results=True` will result in an "
"error."
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) of arrays"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:36
msgid ""
"Array representing the distances to each point, only present if "
"`return_distance=True`. The distance values are computed according to the"
" ``metric`` constructor parameter."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:41
msgid ""
"An array of arrays of indices of the approximate nearest points from the "
"population matrix that lie within a ball of size ``radius`` around the "
"query points."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:54
msgid ""
"Because the number of neighbors of each point is not necessarily equal, "
"the results for multiple query points cannot be fit in a standard data "
"array. For efficiency, `radius_neighbors` returns arrays of objects, "
"where each object is a 1D array of indices or distances."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:63
msgid ""
"In the following example, we construct a NeighborsClassifier class from "
"an array representing our data set and ask who's the closest point to [1,"
" 1, 1]:"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors:79
msgid ""
"The first array returned contains the distances to all points which are "
"closer than 1.6, while the second array returned contains their indices."
"  In general, multiple points can be queried at the same time."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:4
msgid "Neighborhoods are restricted the points at a distance lower than radius."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features), default=None"
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:15
msgid ""
"Radius of neighborhoods. The default is the value passed to the "
"constructor."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:24
msgid ""
"If True, in each row of the result, the non-zero entries will be sorted "
"by increasing distances. If False, the non-zero entries may not be "
"sorted. Only used with mode='distance'."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:33
msgid ""
"`n_samples_fit` is the number of samples in the fitted data `A[i, j]` is "
"assigned the weight of edge that connects `i` to `j`. The matrix if of "
"format CSR."
msgstr ""

#: of sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph:46
msgid ":obj:`kneighbors_graph`"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

