# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.compose.make_column_transformer.rst:2
msgid ":mod:`sklearn.compose`.make_column_transformer"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:2
msgid "Construct a ColumnTransformer from the given transformers."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:4
msgid ""
"This is a shorthand for the ColumnTransformer constructor; it does not "
"require, and does not permit, naming the transformers. Instead, they will"
" be given names automatically based on their types. It also does not "
"allow weighting with ``transformer_weights``."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:9
msgid "Read more in the :ref:`User Guide <make_column_transformer>`."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer
msgid "Parameters"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:30
msgid "**\\*transformers**"
msgstr ""

#: of
msgid "tuples"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:14
msgid ""
"Tuples of the form (transformer, columns) specifying the transformer "
"objects to be applied to subsets of the data."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:20
msgid "transformer"
msgstr ""

#: of
msgid "{'drop', 'passthrough'} or estimator"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:18
msgid ""
"Estimator must support :term:`fit` and :term:`transform`. Special-cased "
"strings 'drop' and 'passthrough' are accepted as well, to indicate to "
"drop the columns or to pass them through untransformed, respectively."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:30
msgid "columns"
msgstr ""

#: of
msgid ""
"str,  array-like of str, int, array-like of int, slice,                 "
"array-like of bool or callable"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:23
msgid ""
"Indexes the data on its second axis. Integers are interpreted as "
"positional columns, while strings can reference DataFrame columns by "
"name. A scalar string or int should be used where ``transformer`` expects"
" X to be a 1d array-like (vector), otherwise a 2d array will be passed to"
" the transformer. A callable is passed the input data `X` and can return "
"any of the above. To select multiple columns by name or dtype, you can "
"use :obj:`make_column_selector`."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:42
msgid "**remainder**"
msgstr ""

#: of
msgid "{'drop', 'passthrough'} or estimator, default='drop'"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:33
msgid ""
"By default, only the specified columns in `transformers` are transformed "
"and combined in the output, and the non-specified columns are dropped. "
"(default of ``'drop'``). By specifying ``remainder='passthrough'``, all "
"remaining columns that were not specified in `transformers` will be "
"automatically passed through. This subset of columns is concatenated with"
" the output of the transformers. By setting ``remainder`` to be an "
"estimator, the remaining non-specified columns will use the ``remainder``"
" estimator. The estimator must support :term:`fit` and :term:`transform`."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:50
msgid "**sparse_threshold**"
msgstr ""

#: of
msgid "float, default=0.3"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:45
msgid ""
"If the transformed output consists of a mix of sparse and dense data, it "
"will be stacked as a sparse matrix if the density is lower than this "
"value. Use ``sparse_threshold=0`` to always return dense. When the "
"transformed output consists of all sparse or all dense data, the stacked "
"result will be sparse or dense, respectively, and this keyword will be "
"ignored."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:56
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:53
msgid ""
"Number of jobs to run in parallel. ``None`` means 1 unless in a "
":obj:`joblib.parallel_backend` context. ``-1`` means using all "
"processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:60
msgid "**verbose**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:59
msgid ""
"If True, the time elapsed while fitting each transformer will be printed "
"as it is completed."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer
msgid "Returns"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:71
msgid "**ct**"
msgstr ""

#: of
msgid "ColumnTransformer"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:76
msgid ":obj:`ColumnTransformer`"
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:77
msgid ""
"Class that allows combining the outputs of multiple transformer objects "
"used on column subsets of the data into a single feature space."
msgstr ""

#: of sklearn.compose._column_transformer.make_column_transformer:83
msgid "Examples"
msgstr ""

#: ../modules/generated/sklearn.compose.make_column_transformer.examples:4
msgid "Examples using ``sklearn.compose.make_column_transformer``"
msgstr ""

#: ../modules/generated/sklearn.compose.make_column_transformer.examples:15
#: ../modules/generated/sklearn.compose.make_column_transformer.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_gradient_boosting_categorical.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_ensemble_plot_stack_predictors.py`"
#~ msgstr ""

