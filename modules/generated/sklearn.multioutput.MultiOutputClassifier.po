# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.multioutput.MultiOutputClassifier.rst:2
msgid ":mod:`sklearn.multioutput`.MultiOutputClassifier"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:2
msgid "Multi target classification"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:4
msgid ""
"This strategy consists of fitting one classifier per target. This is a "
"simple strategy for extending classifiers that do not natively support "
"multi-target classification"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.multioutput.MultiOutputClassifier
#: sklearn.multioutput.MultiOutputClassifier.fit
#: sklearn.multioutput.MultiOutputClassifier.predict_proba
#: sklearn.multioutput.MultiOutputClassifier.score
#: sklearn.multioutput._MultiOutputEstimator.partial_fit
#: sklearn.multioutput._MultiOutputEstimator.predict
msgid "Parameters"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:12
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:11
msgid ""
"An estimator object implementing :term:`fit`, :term:`score` and "
":term:`predict_proba`."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:31
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int or None, optional (default=None)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:15
msgid ""
"The number of jobs to run in parallel. :meth:`fit`, :meth:`predict` and "
":meth:`partial_fit` (if supported by the passed estimator) will be "
"parallelized for each target."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:19
msgid ""
"When individual estimators are fast to train or predict, using ``n_jobs >"
" 1`` can result in slower performance due to the parallelism overhead."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:23
msgid ""
"``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. "
"``-1`` means using all available processes / threads. See :term:`Glossary"
" <n_jobs>` for more details."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:27
msgid "`n_jobs` default changed from 1 to None"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:36
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:36
msgid "Class labels."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:45
msgid "**estimators_** : list of ``n_output`` estimators"
msgstr ""

#: of
msgid "list of"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:39
msgid "Estimators used for predictions."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:48
msgid "Examples"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:60
msgid "Methods"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ":obj:`fit <sklearn.multioutput.MultiOutputClassifier.fit>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:2
#: sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid "Fit the model to data matrix X and targets Y."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ":obj:`get_params <sklearn.multioutput.MultiOutputClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ""
":obj:`partial_fit "
"<sklearn.multioutput.MultiOutputClassifier.partial_fit>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid "Incrementally fit the model to data."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ":obj:`predict <sklearn.multioutput.MultiOutputClassifier.predict>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
#: sklearn.multioutput._MultiOutputEstimator.predict:4
msgid "Predict multi-output variable using a model"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ":obj:`score <sklearn.multioutput.MultiOutputClassifier.score>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:2
#: sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid ":obj:`set_params <sklearn.multioutput.MultiOutputClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multioutput.MultiOutputClassifier:69:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:8
#: sklearn.multioutput.MultiOutputClassifier.predict_proba:11
#: sklearn.multioutput.MultiOutputClassifier.score:8
#: sklearn.multioutput._MultiOutputEstimator.partial_fit:9
#: sklearn.multioutput._MultiOutputEstimator.predict:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:8
msgid "The input data."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:11
msgid "**Y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:11
msgid "The target values."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:16
#: sklearn.multioutput._MultiOutputEstimator.partial_fit:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:14
msgid ""
"Sample weights. If None, then samples are equally weighted. Only "
"supported if the underlying classifier supports sample weights."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:21
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict of string -> object"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.fit:19
msgid "Parameters passed to the ``estimator.fit`` method of each step."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.multioutput.MultiOutputClassifier.fit
#: sklearn.multioutput.MultiOutputClassifier.predict_proba
#: sklearn.multioutput.MultiOutputClassifier.score
#: sklearn.multioutput._MultiOutputEstimator.partial_fit
#: sklearn.multioutput._MultiOutputEstimator.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.multioutput.MultiOutputClassifier.fit:37
#: sklearn.multioutput._MultiOutputEstimator.partial_fit:42
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:2
msgid ""
"Incrementally fit the model to data. Fit a separate model for each output"
" variable."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:9
#: sklearn.multioutput._MultiOutputEstimator.predict:9
msgid "Data."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:11
#: sklearn.multioutput._MultiOutputEstimator.partial_fit:12
#: sklearn.multioutput._MultiOutputEstimator.predict:26
msgid "**y**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_outputs)"
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:12
msgid "Multi-output targets."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:21
msgid "**classes**"
msgstr ""

#: of
msgid "list of ndarray of shape (n_outputs,)"
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:15
msgid ""
"Each array is unique classes for one output in str/int Can be obtained by"
" via ``[np.unique(y[:, i]) for i in range(y.shape[1])]``, where y is the "
"target matrix of the entire dataset. This argument is required for the "
"first call to partial_fit and can be omitted in the subsequent calls. "
"Note that y doesn't need to contain all labels in `classes`."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.partial_fit:24
msgid ""
"Sample weights. If None, then samples are equally weighted. Only "
"supported if the underlying regressor supports sample weights."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.predict:3
msgid "trained for each target variable."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.predict:14
msgid ""
"Multi-output targets predicted across multiple predictors. Note: Separate"
" models are generated for each predictor."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:2
msgid ""
"Probability estimates. Returns prediction probabilities for each class of"
" each output."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:5
msgid ""
"This method will raise a ``ValueError`` if any of the estimators do not "
"have ``predict_proba``."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:11
msgid "Data"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:33
msgid "**p**"
msgstr ""

#: of
msgid ""
"array of shape (n_samples, n_classes), or a list of n_outputs"
"             such arrays if n_outputs > 1."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:16
msgid ""
"The class probabilities of the input samples. The order of the classes "
"corresponds to that in the attribute :term:`classes_`."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.predict_proba:19
msgid ""
"This function now returns a list of arrays where the length of the list "
"is ``n_outputs``, and each array is (``n_samples``, ``n_classes``) for "
"that particular output."
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:8
msgid "Test samples"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_outputs)"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:11
msgid "True values for X"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:27
msgid "**scores**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.multioutput.MultiOutputClassifier.score:16
msgid "accuracy_score of self.predict(X) versus y"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

