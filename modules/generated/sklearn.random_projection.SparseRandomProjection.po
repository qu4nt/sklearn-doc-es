# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.rst:2
msgid ":mod:`sklearn.random_projection`.SparseRandomProjection"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:2
msgid "Reduce dimensionality through sparse random projection."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:4
msgid ""
"Sparse random matrix is an alternative to dense random projection matrix "
"that guarantees similar embedding quality while being much more memory "
"efficient and allowing faster computation of the projected data."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:9
msgid ""
"If we note `s = 1 / density` the components of the random matrix are "
"drawn from:"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:12
msgid "-sqrt(s) / sqrt(n_components)   with probability 1 / 2s"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:13
msgid "0                              with probability 1 - 1 / s"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:14
msgid "+sqrt(s) / sqrt(n_components)   with probability 1 / 2s"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:16
msgid "Read more in the :ref:`User Guide <sparse_random_matrix>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.random_projection.BaseRandomProjection.fit
#: sklearn.random_projection.BaseRandomProjection.transform
#: sklearn.random_projection.SparseRandomProjection
msgid "Parameters"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:32
msgid "**n_components**"
msgstr ""

#: of
msgid "int or 'auto', default='auto'"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:23
msgid "Dimensionality of the target projection space."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:25
msgid ""
"n_components can be automatically adjusted according to the number of "
"samples in the dataset and the bound given by the Johnson-Lindenstrauss "
"lemma. In that case the quality of the embedding is controlled by the "
"``eps`` parameter."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:30
msgid ""
"It should be noted that Johnson-Lindenstrauss lemma can yield very "
"conservative estimated of the required number of components as it makes "
"no assumption on the structure of the dataset."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:42
msgid "**density**"
msgstr ""

#: of
msgid "float or 'auto', default='auto'"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:35
msgid ""
"Ratio in the range (0, 1] of non-zero component in the random projection "
"matrix."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:38
msgid ""
"If density = 'auto', the value is set to the minimum density as "
"recommended by Ping Li et al.: 1 / sqrt(n_features)."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:41
msgid ""
"Use density = 1 / 3.0 if you want to reproduce the results from "
"Achlioptas, 2001."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:50
msgid "**eps**"
msgstr ""

#: of
msgid "float, default=0.1"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:45
msgid ""
"Parameter to control the quality of the embedding according to the "
"Johnson-Lindenstrauss lemma when n_components is set to 'auto'. This "
"value should be strictly positive."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:49
msgid ""
"Smaller values lead to better embedding and higher number of dimensions "
"(n_components) in the target projection space."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:61
msgid "**dense_output**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:53
msgid ""
"If True, ensure that the output of the random projection is a dense numpy"
" array even if the input and random projection matrix are both sparse. In"
" practice, if the number of components is small the number of zero "
"components in the projected data will be very small and it will be more "
"CPU and memory efficient to use a dense representation."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:60
msgid ""
"If False, the projected data uses a sparse representation if the input is"
" sparse."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:70
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:64
msgid ""
"Controls the pseudo random number generator used to generate the "
"projection matrix at fit time. Pass an int for reproducible output across"
" multiple function calls. See :term:`Glossary <random_state>`."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection
msgid "Attributes"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:75
msgid "**n_components_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:75
msgid "Concrete number of components computed when n_components=\"auto\"."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:79
msgid "**components_**"
msgstr ""

#: of
msgid "sparse matrix of shape (n_components, n_features)"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:78
msgid ""
"Random matrix used for the projection. Sparse matrix will be of CSR "
"format."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:85
msgid "**density_**"
msgstr ""

#: of
msgid "float in range 0.0 - 1.0"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:82
msgid "Concrete density computed from when density = \"auto\"."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:90
msgid ":obj:`GaussianRandomProjection`"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:95
msgid "References"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:96
msgid ""
"Ping Li, T. Hastie and K. W. Church, 2006, \"Very Sparse Random "
"Projections\". https://web.stanford.edu/~hastie/Papers/Ping/KDD06_rp.pdf"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:100
msgid ""
"D. Achlioptas, 2001, \"Database-friendly random projections\", "
"https://users.soe.ucsc.edu/~optas/papers/jl.pdf"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:105
msgid "[R0fecf191e4b8-1]_, [R0fecf191e4b8-2]_"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:108
msgid "Examples"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:122
msgid "Methods"
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid ":obj:`fit <sklearn.random_projection.SparseRandomProjection.fit>`\\"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.fit:2
#: sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid "Generate a sparse random projection matrix."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.random_projection.SparseRandomProjection.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.random_projection.SparseRandomProjection.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.random_projection.SparseRandomProjection.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid ""
":obj:`transform "
"<sklearn.random_projection.SparseRandomProjection.transform>`\\"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.transform:2
#: sklearn.random_projection.SparseRandomProjection:130:<autosummary>:1
msgid "Project the data by using matrix product with the random matrix"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.random_projection.BaseRandomProjection.fit:10
#: sklearn.random_projection.BaseRandomProjection.transform:8
msgid "**X**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.fit:8
msgid ""
"Training set: only the shape is used to find optimal random matrix "
"dimensions based on the theory referenced in the afore mentioned papers."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.random_projection.BaseRandomProjection.fit:13
msgid "**y**"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.fit:13
msgid "Ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.random_projection.BaseRandomProjection.fit
#: sklearn.random_projection.BaseRandomProjection.transform
msgid "Returns"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.fit:29
msgid "self"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.random_projection.BaseRandomProjection.transform:24
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.transform:8
msgid "The input data to project into a smaller dimensional space."
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.random_projection.BaseRandomProjection.transform:13
msgid "Projected array."
msgstr ""

#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:4
msgid "Examples using ``sklearn.random_projection.SparseRandomProjection``"
msgstr ""

#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:15
#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:23
msgid ":ref:`sphx_glr_auto_examples_manifold_plot_lle_digits.py`"
msgstr ""

#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:34
#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:42
#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:53
#: ../modules/generated/sklearn.random_projection.SparseRandomProjection.examples:61
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_johnson_lindenstrauss_bound.py`"
msgstr ""

