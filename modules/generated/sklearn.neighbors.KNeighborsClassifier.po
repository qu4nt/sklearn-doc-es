# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.neighbors.KNeighborsClassifier.rst:2
msgid ":mod:`sklearn.neighbors`.KNeighborsClassifier"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:2
msgid "Classifier implementing the k-nearest neighbors vote."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:4
msgid "Read more in the :ref:`User Guide <classification>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph
#: sklearn.neighbors._classification.KNeighborsClassifier
#: sklearn.neighbors._classification.KNeighborsClassifier.fit
#: sklearn.neighbors._classification.KNeighborsClassifier.predict
#: sklearn.neighbors._classification.KNeighborsClassifier.predict_proba
msgid "Parameters"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:15
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:17
#: sklearn.neighbors._classification.KNeighborsClassifier:9
msgid "**n_neighbors**"
msgstr ""

#: of
msgid "int, default=5"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:9
msgid "Number of neighbors to use by default for :meth:`kneighbors` queries."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:21
msgid "**weights**"
msgstr ""

#: of
msgid "{'uniform', 'distance'} or callable, default='uniform'"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:12
msgid "weight function used in prediction.  Possible values:"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:14
msgid ""
"'uniform' : uniform weights.  All points in each neighborhood are "
"weighted equally."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:16
msgid ""
"'distance' : weight points by the inverse of their distance. in this "
"case, closer neighbors of a query point will have a greater influence "
"than neighbors which are further away."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:19
msgid ""
"[callable] : a user-defined function which accepts an array of distances,"
" and returns an array of the same shape containing the weights."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:33
msgid "**algorithm**"
msgstr ""

#: of
msgid "{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:24
msgid "Algorithm used to compute the nearest neighbors:"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:26
msgid "'ball_tree' will use :class:`BallTree`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:27
msgid "'kd_tree' will use :class:`KDTree`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:28
msgid "'brute' will use a brute-force search."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:29
msgid ""
"'auto' will attempt to decide the most appropriate algorithm based on the"
" values passed to :meth:`fit` method."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:32
msgid ""
"Note: fitting on sparse input will override the setting of this "
"parameter, using brute force."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:39
msgid "**leaf_size**"
msgstr ""

#: of
msgid "int, default=30"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:36
msgid ""
"Leaf size passed to BallTree or KDTree.  This can affect the speed of the"
" construction and query, as well as the memory required to store the "
"tree.  The optimal value depends on the nature of the problem."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:44
#: sklearn.neighbors._classification.KNeighborsClassifier.predict_proba:26
msgid "**p**"
msgstr ""

#: of
msgid "int, default=2"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:42
msgid ""
"Power parameter for the Minkowski metric. When p = 1, this is equivalent "
"to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. "
"For arbitrary p, minkowski_distance (l_p) is used."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:53
msgid "**metric**"
msgstr ""

#: of
msgid "str or callable, default='minkowski'"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:47
msgid ""
"the distance metric to use for the tree.  The default metric is "
"minkowski, and with p=2 is equivalent to the standard Euclidean metric. "
"See the documentation of :class:`DistanceMetric` for a list of available "
"metrics. If metric is \"precomputed\", X is assumed to be a distance "
"matrix and must be square during fit. X may be a :term:`sparse graph`, in"
" which case only \"nonzero\" elements may be considered neighbors."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:56
msgid "**metric_params**"
msgstr ""

#: of
msgid "dict, default=None"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:56
msgid "Additional keyword arguments for the metric function."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:66
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:59
msgid ""
"The number of parallel jobs to run for neighbors search. ``None`` means 1"
" unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using "
"all processors. See :term:`Glossary <n_jobs>` for more details. Doesn't "
"affect :meth:`fit` method."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:71
msgid "**classes_**"
msgstr ""

#: of
msgid "array of shape (n_classes,)"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:71
msgid "Class labels known to the classifier"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:76
msgid "**effective_metric_**"
msgstr ""

#: of
msgid "str or callble"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:74
msgid ""
"The distance metric used. It will be same as the `metric` parameter or a "
"synonym of it, e.g. 'euclidean' if the `metric` parameter set to "
"'minkowski' and `p` parameter set to 2."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:82
msgid "**effective_metric_params_**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:79
msgid ""
"Additional keyword arguments for the metric function. For most metrics "
"will be same with `metric_params` parameter, but may also contain the `p`"
" parameter value if the `effective_metric_` attribute is set to "
"'minkowski'."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:85
msgid "**n_samples_fit_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:85
msgid "Number of samples in the fitted data."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:92
msgid "**outputs_2d_**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:88
msgid ""
"False when `y`'s shape is (n_samples, ) or (n_samples, 1) during fit "
"otherwise True."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:97
msgid ":obj:`RadiusNeighborsClassifier`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:99
msgid ":obj:`KNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:101
msgid ":obj:`RadiusNeighborsRegressor`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:103
msgid ":obj:`NearestNeighbors`"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:107
msgid "Notes"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:108
msgid ""
"See :ref:`Nearest Neighbors <neighbors>` in the online documentation for "
"a discussion of the choice of ``algorithm`` and ``leaf_size``."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:113
msgid ""
"Regarding the Nearest Neighbors algorithms, if it is found that two "
"neighbors, neighbor `k+1` and `k`, have identical distances but different"
" labels, the results will depend on the ordering of the training data."
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:118
msgid "https://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:39
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:46
#: sklearn.neighbors._classification.KNeighborsClassifier:122
msgid "Examples"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier:135
msgid "Methods"
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`fit <sklearn.neighbors.KNeighborsClassifier.fit>`\\"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.fit:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Fit the k-nearest neighbors classifier from the training dataset."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`get_params <sklearn.neighbors.KNeighborsClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`kneighbors <sklearn.neighbors.KNeighborsClassifier.kneighbors>`\\"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Finds the K-neighbors of a point."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ""
":obj:`kneighbors_graph "
"<sklearn.neighbors.KNeighborsClassifier.kneighbors_graph>`\\"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Computes the (weighted) graph of k-Neighbors for points in X"
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`predict <sklearn.neighbors.KNeighborsClassifier.predict>`\\"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.predict:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Predict the class labels for the provided data."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ""
":obj:`predict_proba "
"<sklearn.neighbors.KNeighborsClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.predict_proba:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Return probability estimates for the test data X."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`score <sklearn.neighbors.KNeighborsClassifier.score>`\\"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: of
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid ":obj:`set_params <sklearn.neighbors.KNeighborsClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.neighbors._classification.KNeighborsClassifier:146:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors:11
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:13
#: sklearn.neighbors._classification.KNeighborsClassifier.fit:8
#: sklearn.neighbors._classification.KNeighborsClassifier.predict:8
#: sklearn.neighbors._classification.KNeighborsClassifier.predict_proba:8
msgid "**X**"
msgstr ""

#: of
msgid ""
"{array-like, sparse matrix} of shape (n_samples, n_features) or"
"                 (n_samples, n_samples) if metric='precomputed'"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
#: sklearn.neighbors._classification.KNeighborsClassifier.fit:11
#: sklearn.neighbors._classification.KNeighborsClassifier.predict:24
msgid "**y**"
msgstr ""

#: of
msgid ""
"{array-like, sparse matrix} of shape (n_samples,) or                 "
"(n_samples, n_outputs)"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.ClassifierMixin.score
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors
#: sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph
#: sklearn.neighbors._classification.KNeighborsClassifier.fit
#: sklearn.neighbors._classification.KNeighborsClassifier.predict
#: sklearn.neighbors._classification.KNeighborsClassifier.predict_proba
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.neighbors._classification.KNeighborsClassifier.fit:27
msgid "**self**"
msgstr ""

#: of
msgid "KNeighborsClassifier"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.fit:16
msgid "The fitted k-nearest neighbors classifier."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:4
msgid "Returns indices of and distances to the neighbors of each point."
msgstr ""

#: of
msgid ""
"array-like, shape (n_queries, n_features),             or (n_queries, "
"n_indexed) if metric == 'precomputed',                 default=None"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:9
msgid ""
"The query point or points. If not provided, neighbors of each indexed "
"point are returned. In this case, the query point is not considered its "
"own neighbor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:14
msgid ""
"Number of neighbors required for each sample. The default is the value "
"passed to the constructor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:18
msgid "**return_distance**"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:18
msgid "Whether or not to return the distances."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:24
msgid "**neigh_dist**"
msgstr ""

#: of
msgid "ndarray of shape (n_queries, n_neighbors)"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:23
msgid ""
"Array representing the lengths to points, only present if "
"return_distance=True"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:36
msgid "**neigh_ind**"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:27
msgid "Indices of the nearest points in the population matrix."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:40
msgid ""
"In the following example, we construct a NearestNeighbors class from an "
"array representing our data set and ask who's the closest point to "
"[1,1,1]"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors:52
msgid ""
"As you can see, it returns [[0.5]], and [[2]], which means that the "
"element is at distance 0.5 and is the third element of samples (indexes "
"start at 0). You can also query for multiple points:"
msgstr ""

#: of
msgid ""
"array-like of shape (n_queries, n_features),                 or "
"(n_queries, n_indexed) if metric == 'precomputed',                 "
"default=None"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:8
msgid ""
"The query point or points. If not provided, neighbors of each indexed "
"point are returned. In this case, the query point is not considered its "
"own neighbor. For ``metric='precomputed'`` the shape should be "
"(n_queries, n_indexed). Otherwise the shape should be (n_queries, "
"n_features)."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:16
msgid ""
"Number of neighbors for each sample. The default is the value passed to "
"the constructor."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:22
msgid "**mode**"
msgstr ""

#: of
msgid "{'connectivity', 'distance'}, default='connectivity'"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:20
msgid ""
"Type of returned matrix: 'connectivity' will return the connectivity "
"matrix with ones and zeros, in 'distance' the edges are Euclidean "
"distance between points."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:35
msgid "**A**"
msgstr ""

#: of
msgid "sparse-matrix of shape (n_queries, n_samples_fit)"
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:27
msgid ""
"`n_samples_fit` is the number of samples in the fitted data `A[i, j]` is "
"assigned the weight of edge that connects `i` to `j`. The matrix is of "
"CSR format."
msgstr ""

#: of sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph:40
msgid ":obj:`NearestNeighbors.radius_neighbors_graph`"
msgstr ""

#: of
msgid ""
"array-like of shape (n_queries, n_features),                 or "
"(n_queries, n_indexed) if metric == 'precomputed'"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.neighbors._classification.KNeighborsClassifier.predict:8
#: sklearn.neighbors._classification.KNeighborsClassifier.predict_proba:8
msgid "Test samples."
msgstr ""

#: of
msgid "ndarray of shape (n_queries,) or (n_queries, n_outputs)"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.predict:13
msgid "Class labels for each data sample."
msgstr ""

#: of
msgid "ndarray of shape (n_queries, n_classes), or a list of n_outputs"
msgstr ""

#: of sklearn.neighbors._classification.KNeighborsClassifier.predict_proba:13
msgid ""
"of such arrays if n_outputs > 1. The class probabilities of the input "
"samples. Classes are ordered by lexicographic order."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "True labels for `X`."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:17
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:33
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:22
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.neighbors.KNeighborsClassifier.examples:4
msgid "Examples using ``sklearn.neighbors.KNeighborsClassifier``"
msgstr ""

#: ../modules/generated/sklearn.neighbors.KNeighborsClassifier.examples:15
#: ../modules/generated/sklearn.neighbors.KNeighborsClassifier.examples:23
msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_classification.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_release_highlights_plot_release_highlights_0_24_0.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_caching_nearest_neighbors.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_classification.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_neighbors_plot_nca_dim_reduction.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_exercises_plot_digits_classification_exercise.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_text_plot_document_classification_20newsgroups.py`"
#~ msgstr ""

