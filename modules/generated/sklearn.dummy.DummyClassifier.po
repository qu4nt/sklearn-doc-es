# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.dummy.DummyClassifier.rst:2
msgid ":mod:`sklearn.dummy`.DummyClassifier"
msgstr ""

#: of sklearn.dummy.DummyClassifier:2
msgid "DummyClassifier is a classifier that makes predictions using simple rules."
msgstr ""

#: of sklearn.dummy.DummyClassifier:4
msgid ""
"This classifier is useful as a simple baseline to compare with other "
"(real) classifiers. Do not use it for real problems."
msgstr ""

#: of sklearn.dummy.DummyClassifier:7
msgid "Read more in the :ref:`User Guide <dummy_estimators>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.dummy.DummyClassifier
#: sklearn.dummy.DummyClassifier.fit sklearn.dummy.DummyClassifier.predict
#: sklearn.dummy.DummyClassifier.predict_log_proba
#: sklearn.dummy.DummyClassifier.predict_proba
#: sklearn.dummy.DummyClassifier.score
msgid "Parameters"
msgstr ""

#: of sklearn.dummy.DummyClassifier:29
msgid "**strategy**"
msgstr ""

#: of
msgid ""
"{\"stratified\", \"most_frequent\", \"prior\", \"uniform\",             "
"\"constant\"}, default=\"prior\""
msgstr ""

#: of sklearn.dummy.DummyClassifier:14
msgid "Strategy to use to generate predictions."
msgstr ""

#: of sklearn.dummy.DummyClassifier:16
msgid ""
"\"stratified\": generates predictions by respecting the training set's "
"class distribution."
msgstr ""

#: of sklearn.dummy.DummyClassifier:18
msgid ""
"\"most_frequent\": always predicts the most frequent label in the "
"training set."
msgstr ""

#: of sklearn.dummy.DummyClassifier:20
msgid ""
"\"prior\": always predicts the class that maximizes the class prior (like"
" \"most_frequent\") and ``predict_proba`` returns the class prior."
msgstr ""

#: of sklearn.dummy.DummyClassifier:22
msgid "\"uniform\": generates predictions uniformly at random."
msgstr ""

#: of sklearn.dummy.DummyClassifier:23
msgid ""
"\"constant\": always predicts a constant label that is provided by the "
"user. This is useful for metrics that evaluate a non-majority class"
msgstr ""

#: of sklearn.dummy.DummyClassifier:27
msgid "The default value of `strategy` has changed to \"prior\" in version 0.24."
msgstr ""

#: of sklearn.dummy.DummyClassifier:35
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.dummy.DummyClassifier:32
msgid ""
"Controls the randomness to generate the predictions when "
"``strategy='stratified'`` or ``strategy='uniform'``. Pass an int for "
"reproducible output across multiple function calls. See :term:`Glossary "
"<random_state>`."
msgstr ""

#: of sklearn.dummy.DummyClassifier:42
msgid "**constant**"
msgstr ""

#: of
msgid "int or str or array-like of shape (n_outputs,)"
msgstr ""

#: of sklearn.dummy.DummyClassifier:38
msgid ""
"The explicit constant as predicted by the \"constant\" strategy. This "
"parameter is useful only for the \"constant\" strategy."
msgstr ""

#: of sklearn.dummy.DummyClassifier
msgid "Attributes"
msgstr ""

#: of sklearn.dummy.DummyClassifier:47
msgid "**classes_**"
msgstr ""

#: of
msgid "ndarray of shape (n_classes,) or list of such arrays"
msgstr ""

#: of sklearn.dummy.DummyClassifier:47
msgid "Class labels for each output."
msgstr ""

#: of sklearn.dummy.DummyClassifier:50
msgid "**n_classes_**"
msgstr ""

#: of
msgid "int or list of int"
msgstr ""

#: of sklearn.dummy.DummyClassifier:50
msgid "Number of label for each output."
msgstr ""

#: of sklearn.dummy.DummyClassifier:53
msgid "**class_prior_**"
msgstr ""

#: of sklearn.dummy.DummyClassifier:53
msgid "Probability of each class for each output."
msgstr ""

#: of sklearn.dummy.DummyClassifier:56
msgid "**n_outputs_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.dummy.DummyClassifier:56
msgid "Number of outputs."
msgstr ""

#: of sklearn.dummy.DummyClassifier:66
msgid "**sparse_output_**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of sklearn.dummy.DummyClassifier:59
msgid ""
"True if the array returned from predict is to be in sparse CSC format. Is"
" automatically set to True if the input y is passed in sparse format."
msgstr ""

#: of sklearn.dummy.DummyClassifier:69
msgid "Examples"
msgstr ""

#: of sklearn.dummy.DummyClassifier:83
msgid "Methods"
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`fit <sklearn.dummy.DummyClassifier.fit>`\\"
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Fit the random classifier."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`get_params <sklearn.dummy.DummyClassifier.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`predict <sklearn.dummy.DummyClassifier.predict>`\\"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Perform classification on test vectors X."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ""
":obj:`predict_log_proba "
"<sklearn.dummy.DummyClassifier.predict_log_proba>`\\"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_log_proba:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Return log probability estimates for the test vectors X."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`predict_proba <sklearn.dummy.DummyClassifier.predict_proba>`\\"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_proba:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Return probability estimates for the test vectors X."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`score <sklearn.dummy.DummyClassifier.score>`\\"
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Returns the mean accuracy on the given test data and labels."
msgstr ""

#: of sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid ":obj:`set_params <sklearn.dummy.DummyClassifier.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.dummy.DummyClassifier:93:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:8
#: sklearn.dummy.DummyClassifier.predict:8
#: sklearn.dummy.DummyClassifier.predict_log_proba:8
#: sklearn.dummy.DummyClassifier.predict_proba:8
#: sklearn.dummy.DummyClassifier.score:13
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:11
#: sklearn.dummy.DummyClassifier.predict:24
#: sklearn.dummy.DummyClassifier.score:16
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:14
#: sklearn.dummy.DummyClassifier.score:19
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.dummy.DummyClassifier.fit:14
#: sklearn.dummy.DummyClassifier.score:19
msgid "Sample weights."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.dummy.DummyClassifier.fit
#: sklearn.dummy.DummyClassifier.predict
#: sklearn.dummy.DummyClassifier.predict_log_proba
#: sklearn.dummy.DummyClassifier.predict_proba
#: sklearn.dummy.DummyClassifier.score
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.dummy.DummyClassifier.fit:30
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict:8
#: sklearn.dummy.DummyClassifier.predict_proba:8
msgid "Test data."
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict:13
msgid "Predicted target values for X."
msgstr ""

#: of
msgid "{array-like, object with finite length or shape}"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_log_proba:8
msgid "Training data, requires length = n_samples"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_log_proba:26
#: sklearn.dummy.DummyClassifier.predict_proba:26
msgid "**P**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_classes) or list of such arrays"
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_log_proba:13
msgid ""
"Returns the log probability of the sample for each class in the model, "
"where classes are ordered arithmetically for each output."
msgstr ""

#: of sklearn.dummy.DummyClassifier.predict_proba:13
msgid ""
"Returns the probability of the sample for each class in the model, where "
"classes are ordered arithmetically, for each output."
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:4
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of
msgid "None or array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:11
msgid ""
"Test samples. Passing None as test samples gives the same result as "
"passing real test samples, since DummyClassifier operates independently "
"of the sampled observations."
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:16
msgid "True labels for X."
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:35
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.dummy.DummyClassifier.score:24
msgid "Mean accuracy of self.predict(X) wrt. y."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

