# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.multioutput.MultiOutputRegressor.rst:2
msgid ":mod:`sklearn.multioutput`.MultiOutputRegressor"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:2
msgid "Multi target regression"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:4
msgid ""
"This strategy consists of fitting one regressor per target. This is a "
"simple strategy for extending regressors that do not natively support "
"multi-target regression."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.multioutput.MultiOutputRegressor
#: sklearn.multioutput.MultiOutputRegressor.partial_fit
#: sklearn.multioutput._MultiOutputEstimator.fit
#: sklearn.multioutput._MultiOutputEstimator.predict
msgid "Parameters"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:13
msgid "**estimator**"
msgstr ""

#: of
msgid "estimator object"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:13
msgid "An estimator object implementing :term:`fit` and :term:`predict`."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:32
msgid "**n_jobs**"
msgstr ""

#: of
msgid "int or None, optional (default=None)"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:16
msgid ""
"The number of jobs to run in parallel. :meth:`fit`, :meth:`predict` and "
":meth:`partial_fit` (if supported by the passed estimator) will be "
"parallelized for each target."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:20
msgid ""
"When individual estimators are fast to train or predict, using ``n_jobs >"
" 1`` can result in slower performance due to the parallelism overhead."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:24
msgid ""
"``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. "
"``-1`` means using all available processes / threads. See :term:`Glossary"
" <n_jobs>` for more details."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:28
msgid "`n_jobs` default changed from 1 to None"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor
msgid "Attributes"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:43
msgid "**estimators_** : list of ``n_output`` estimators"
msgstr ""

#: of
msgid "list of"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:37
msgid "Estimators used for predictions."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:46
msgid "Examples"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:57
msgid "Methods"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ":obj:`fit <sklearn.multioutput.MultiOutputRegressor.fit>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid "Fit the model to data."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ":obj:`get_params <sklearn.multioutput.MultiOutputRegressor.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ""
":obj:`partial_fit "
"<sklearn.multioutput.MultiOutputRegressor.partial_fit>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid "Incrementally fit the model to data."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ":obj:`predict <sklearn.multioutput.MultiOutputRegressor.predict>`\\"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
#: sklearn.multioutput._MultiOutputEstimator.predict:4
msgid "Predict multi-output variable using a model"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ":obj:`score <sklearn.multioutput.MultiOutputRegressor.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid ":obj:`set_params <sklearn.multioutput.MultiOutputRegressor.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multioutput.MultiOutputRegressor:66:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.fit:2
msgid "Fit the model to data. Fit a separate model for each output variable."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.multioutput.MultiOutputRegressor.partial_fit:9
#: sklearn.multioutput._MultiOutputEstimator.fit:9
#: sklearn.multioutput._MultiOutputEstimator.predict:9
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor.partial_fit:9
#: sklearn.multioutput._MultiOutputEstimator.fit:9
#: sklearn.multioutput._MultiOutputEstimator.predict:9
msgid "Data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.multioutput.MultiOutputRegressor.partial_fit:12
#: sklearn.multioutput._MultiOutputEstimator.fit:13
#: sklearn.multioutput._MultiOutputEstimator.predict:26
msgid "**y**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_outputs)"
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.fit:12
msgid "Multi-output targets. An indicator matrix turns on multilabel estimation."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.multioutput.MultiOutputRegressor.partial_fit:17
#: sklearn.multioutput._MultiOutputEstimator.fit:18
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor.partial_fit:15
#: sklearn.multioutput._MultiOutputEstimator.fit:16
msgid ""
"Sample weights. If None, then samples are equally weighted. Only "
"supported if the underlying regressor supports sample weights."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.fit:23
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict of string -> object"
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.fit:21
msgid "Parameters passed to the ``estimator.fit`` method of each step."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.multioutput.MultiOutputRegressor.partial_fit
#: sklearn.multioutput._MultiOutputEstimator.fit
#: sklearn.multioutput._MultiOutputEstimator.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.multioutput.MultiOutputRegressor.partial_fit:33
#: sklearn.multioutput._MultiOutputEstimator.fit:39
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor.partial_fit:2
msgid ""
"Incrementally fit the model to data. Fit a separate model for each output"
" variable."
msgstr ""

#: of sklearn.multioutput.MultiOutputRegressor.partial_fit:12
msgid "Multi-output targets."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.predict:3
msgid "trained for each target variable."
msgstr ""

#: of sklearn.multioutput._MultiOutputEstimator.predict:14
msgid ""
"Multi-output targets predicted across multiple predictors. Note: Separate"
" models are generated for each predictor."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

