# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst:2
msgid ":mod:`sklearn.datasets`.fetch_20newsgroups_vectorized"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:2
msgid "Load and vectorize the 20 newsgroups dataset (classification)."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:4
msgid "Download it if necessary."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:6
msgid ""
"This is a convenience function; the transformation is done using the "
"default settings for "
":class:`~sklearn.feature_extraction.text.CountVectorizer`. For more "
"advanced usage (stopword filtering, n-gram extraction, etc.), combine "
"fetch_20newsgroups with a custom "
":class:`~sklearn.feature_extraction.text.CountVectorizer`, "
":class:`~sklearn.feature_extraction.text.HashingVectorizer`, "
":class:`~sklearn.feature_extraction.text.TfidfTransformer` or "
":class:`~sklearn.feature_extraction.text.TfidfVectorizer`."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:16
msgid ""
"The resulting counts are normalized using "
":func:`sklearn.preprocessing.normalize` unless normalize is set to False."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:20
msgid "Classes"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:20
msgid "20"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:21
msgid "Samples total"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:21
msgid "18846"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:22
msgid "Dimensionality"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:22
msgid "130107"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:23
msgid "Features"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:23
msgid "real"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:26
msgid "Read more in the :ref:`User Guide <20newsgroups_dataset>`."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized
msgid "Parameters"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:32
msgid "**subset**"
msgstr ""

#: of
msgid "{'train', 'test', 'all'}, default='train'"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:31
msgid ""
"Select the dataset to load: 'train' for the training set, 'test' for the "
"test set, 'all' for both, with shuffled ordering."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:42
msgid "**remove**"
msgstr ""

#: of
msgid "tuple, default=()"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:35
msgid ""
"May contain any subset of ('headers', 'footers', 'quotes'). Each of these"
" are kinds of text that will be detected and removed from the newsgroup "
"posts, preventing classifiers from overfitting on metadata."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:40
msgid ""
"'headers' removes newsgroup headers, 'footers' removes blocks at the ends"
" of posts that look like signatures, and 'quotes' removes lines that "
"appear to be quoting another post."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:46
msgid "**data_home**"
msgstr ""

#: of
msgid "str, default=None"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:45
msgid ""
"Specify an download and cache folder for the datasets. If None, all "
"scikit-learn data is stored in '~/scikit_learn_data' subfolders."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:50
msgid "**download_if_missing**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:49
msgid ""
"If False, raise an IOError if the data is not locally available instead "
"of trying to download the data from the source site."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:56
msgid "**return_X_y**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:53
msgid "If True, returns ``(data.data, data.target)`` instead of a Bunch object."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:62
msgid "**normalize**"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:59
msgid ""
"If True, normalizes each document's feature vector to unit norm using "
":func:`sklearn.preprocessing.normalize`."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:70
msgid "**as_frame**"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:65
msgid ""
"If True, the data is a pandas DataFrame including columns with "
"appropriate dtypes (numeric, string, or categorical). The target is a "
"pandas DataFrame or Series depending on the number of `target_columns`."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized
msgid "Returns"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:91
msgid "**bunch** : :class:`~sklearn.utils.Bunch`"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:90
msgid "Bunch"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:75
msgid "Dictionary-like object, with the following attributes."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:78
msgid "data: {sparse matrix, dataframe} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:78
msgid ""
"The input data matrix. If ``as_frame`` is `True`, ``data`` is a pandas "
"DataFrame with sparse columns."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:81
msgid "target: {ndarray, series} of shape (n_samples,)"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:81
msgid ""
"The target labels. If ``as_frame`` is `True`, ``target`` is a pandas "
"Series."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:83
msgid "target_names: list of shape (n_classes,)"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:84
msgid "The names of target classes."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:85
msgid "DESCR: str"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:86
msgid "The full description of the dataset."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:91
msgid "frame: dataframe of shape (n_samples, n_features + 1)"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:88
msgid ""
"Only present when `as_frame=True`. Pandas DataFrame with ``data`` and "
"``target``."
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:108
msgid "**(data, target)** : tuple if ``return_X_y`` is True"
msgstr ""

#: of
msgid "tuple if"
msgstr ""

#: of sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized:94
msgid ""
"`data` and `target` would be of the format defined in the `Bunch` "
"description above."
msgstr ""

#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:4
msgid "Examples using ``sklearn.datasets.fetch_20newsgroups_vectorized``"
msgstr ""

#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:15
#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:23
msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_sparse_logistic_regression_20newsgroups.py`"
msgstr ""

#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:34
#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:42
#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:53
#: ../modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.examples:61
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_johnson_lindenstrauss_bound.py`"
msgstr ""

