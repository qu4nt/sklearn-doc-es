# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.linear_model.Lars.rst:2
msgid ":mod:`sklearn.linear_model`.Lars"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:2
msgid "Least Angle Regression model a.k.a. LAR"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:4
msgid "Read more in the :ref:`User Guide <least_angle_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars
#: sklearn.linear_model._least_angle.Lars.fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:11
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:9
msgid ""
"Whether to calculate the intercept for this model. If set to false, no "
"intercept will be used in calculations (i.e. data is expected to be "
"centered)."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:14
msgid "**verbose**"
msgstr ""

#: of
msgid "bool or int, default=False"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:14
msgid "Sets the verbosity amount."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:22
msgid "**normalize**"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:17
msgid ""
"This parameter is ignored when ``fit_intercept`` is set to False. If "
"True, the regressors X will be normalized before regression by "
"subtracting the mean and dividing by the l2-norm. If you wish to "
"standardize, please use :class:`~sklearn.preprocessing.StandardScaler` "
"before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:27
msgid "**precompute**"
msgstr ""

#: of
msgid "bool, 'auto' or array-like , default='auto'"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:25
msgid ""
"Whether to use a precomputed Gram matrix to speed up calculations. If set"
" to ``'auto'`` let us decide. The Gram matrix can also be passed as "
"argument."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:30
msgid "**n_nonzero_coefs**"
msgstr ""

#: of
msgid "int, default=500"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:30
msgid "Target number of non-zero coefficients. Use ``np.inf`` for no limit."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:37
msgid "**eps**"
msgstr ""

#: of
msgid "float, default=np.finfo(float).eps"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:33
msgid ""
"The machine-precision regularization in the computation of the Cholesky "
"diagonal factors. Increase this for very ill-conditioned systems. Unlike "
"the ``tol`` parameter in some iterative optimization-based algorithms, "
"this parameter does not control the tolerance of the optimization."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:40
msgid "**copy_X**"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:40
msgid "If ``True``, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:46
msgid "**fit_path**"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:43
msgid ""
"If True the full path is stored in the ``coef_path_`` attribute. If you "
"compute the solution for a large problem or many targets, setting "
"``fit_path`` to ``False`` will lead to a speedup, especially with a small"
" alpha."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:53
msgid "**jitter**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:49
msgid ""
"Upper bound on a uniform noise parameter to be added to the `y` values, "
"to satisfy the model's assumption of one-at-a-time computations. Might "
"help with stability."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:63
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, default=None"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:56
msgid ""
"Determines random number generation for jittering. Pass an int for "
"reproducible output across multiple function calls. See :term:`Glossary "
"<random_state>`. Ignored if `jitter` is None."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:72
msgid "**alphas_**"
msgstr ""

#: of
msgid "array-like of shape (n_alphas + 1,) or list of such arrays"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:68
msgid ""
"Maximum of covariances (in absolute value) at each iteration. "
"``n_alphas`` is either ``max_iter``, ``n_features`` or the number of "
"nodes in the path with ``alpha >= alpha_min``, whichever is smaller. If "
"this is a list of array-like, the length of the outer list is "
"`n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:76
msgid "**active_**"
msgstr ""

#: of
msgid "list of shape (n_alphas,) or list of such lists"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:75
msgid ""
"Indices of active variables at the end of the path. If this is a list of "
"list, the length of the outer list is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:81
msgid "**coef_path_**"
msgstr ""

#: of
msgid ""
"array-like of shape (n_features, n_alphas + 1) or list             of "
"such arrays"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:79
msgid ""
"The varying values of the coefficients along the path. It is not present "
"if the ``fit_path`` parameter is ``False``. If this is a list of array-"
"like, the length of the outer list is `n_targets`."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:84
msgid "**coef_**"
msgstr ""

#: of
msgid "array-like of shape (n_features,) or (n_targets, n_features)"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:84
msgid "Parameter vector (w in the formulation formula)."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:87
msgid "**intercept_**"
msgstr ""

#: of
msgid "float or array-like of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:87
msgid "Independent term in decision function."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:94
msgid "**n_iter_**"
msgstr ""

#: of
msgid "array-like or int"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:90
msgid ""
"The number of iterations taken by lars_path to find the grid of alphas "
"for each target."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:99
msgid ":obj:`lars_path`, :obj:`LarsCV`"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:101
msgid ":obj:`sklearn.decomposition.sparse_encode`"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:107
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:116
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.Lars.fit>`\\"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Fit the model using X, y as training data."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.Lars.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.Lars.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.Lars.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.Lars.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._least_angle.Lars:124:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._least_angle.Lars.fit:8
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:8
msgid "Training data."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._least_angle.Lars.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:11
msgid "Target values."
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:15
msgid "**Xy**"
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_targets),"
"                 default=None"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:14
msgid ""
"Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the "
"Gram matrix is precomputed."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._least_angle.Lars.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._least_angle.Lars.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.linear_model._least_angle.Lars.fit:20
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

