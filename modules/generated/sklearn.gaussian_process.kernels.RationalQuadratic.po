# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst:2
msgid ":mod:`sklearn.gaussian_process.kernels`.RationalQuadratic"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:2
msgid "Rational Quadratic kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:4
msgid ""
"The RationalQuadratic kernel can be seen as a scale mixture (an infinite "
"sum) of RBF kernels with different characteristic length scales. It is "
"parameterized by a length scale parameter :math:`l>0` and a scale mixture"
" parameter :math:`\\alpha>0`. Only the isotropic variant where "
"length_scale :math:`l` is a scalar is supported at the moment. The kernel"
" is given by:"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:11
msgid ""
"k(x_i, x_j) = \\left(\n"
"1 + \\frac{d(x_i, x_j)^2 }{ 2\\alpha  l^2}\\right)^{-\\alpha}\n"
"\n"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:15
msgid ""
"where :math:`\\alpha` is the scale mixture parameter, :math:`l` is the "
"length scale of the kernel and :math:`d(\\cdot,\\cdot)` is the Euclidean "
"distance. For advice on how to set the parameters, see e.g. "
"[Rc7764613bdcf-1]_."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:20
msgid "Read more in the :ref:`User Guide <gp_kernels>`."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta
#: sklearn.gaussian_process.kernels.Kernel.get_params
#: sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag
#: sklearn.gaussian_process.kernels.RationalQuadratic
#: sklearn.gaussian_process.kernels.RationalQuadratic.__call__
msgid "Parameters"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:27
msgid "**length_scale**"
msgstr ""

#: of
msgid "float > 0, default=1.0"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:27
msgid "The length scale of the kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:30
msgid "**alpha**"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:30
msgid "Scale mixture parameter"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:35
msgid "**length_scale_bounds**"
msgstr ""

#: of
msgid "pair of floats >= 0 or \"fixed\", default=(1e-5, 1e5)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:33
msgid ""
"The lower and upper bound on 'length_scale'. If set to \"fixed\", "
"'length_scale' cannot be changed during hyperparameter tuning."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:43
msgid "**alpha_bounds**"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:38
msgid ""
"The lower and upper bound on 'alpha'. If set to \"fixed\", 'alpha' cannot"
" be changed during hyperparameter tuning."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic
msgid "Attributes"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:48
msgid ":obj:`bounds <bounds>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:48
#: sklearn.gaussian_process.kernels.RationalQuadratic.bounds:2
msgid "Returns the log-transformed bounds on the theta."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:51
msgid "**hyperparameter_alpha**"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:54
msgid "**hyperparameter_length_scale**"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:57
msgid ":obj:`hyperparameters <hyperparameters>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:57
#: sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters:2
msgid "Returns a list of all hyperparameter specifications."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:60
msgid ":obj:`n_dims <n_dims>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:60
#: sklearn.gaussian_process.kernels.RationalQuadratic.n_dims:2
msgid "Returns the number of non-fixed hyperparameters of the kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:63
msgid ":obj:`requires_vector_input <requires_vector_input>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:63
msgid ""
"Returns whether the kernel is defined on fixed-length feature vectors or "
"generic objects."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:71
msgid ":obj:`theta <theta>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:66
#: sklearn.gaussian_process.kernels.RationalQuadratic.theta:2
msgid "Returns the (flattened, log-transformed) non-fixed hyperparameters."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:74
msgid "References"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:75
msgid ""
"`David Duvenaud (2014). \"The Kernel Cookbook: Advice on Covariance "
"functions\". <https://www.cs.toronto.edu/~duvenaud/cookbook/>`_"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:81
msgid "[Rc7764613bdcf-1]_"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:84
msgid "Examples"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:99
msgid "Methods"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ""
":obj:`__call__ "
"<sklearn.gaussian_process.kernels.RationalQuadratic.__call__>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:2
#: sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid "Return the kernel k(X, Y) and optionally its gradient."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ""
":obj:`clone_with_theta "
"<sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:2
#: sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid "Returns a clone of self with given hyperparameters theta."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ":obj:`diag <sklearn.gaussian_process.kernels.RationalQuadratic.diag>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:2
#: sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid "Returns the diagonal of the kernel k(X, X)."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ""
":obj:`get_params "
"<sklearn.gaussian_process.kernels.RationalQuadratic.get_params>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:2
#: sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid "Get parameters of this kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ""
":obj:`is_stationary "
"<sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
#: sklearn.gaussian_process.kernels.StationaryKernelMixin.is_stationary:2
msgid "Returns whether the kernel is stationary."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid ""
":obj:`set_params "
"<sklearn.gaussian_process.kernels.RationalQuadratic.set_params>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:2
#: sklearn.gaussian_process.kernels.RationalQuadratic:108:<autosummary>:1
msgid "Set the parameters of this kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:11
#: sklearn.gaussian_process.kernels.RationalQuadratic.__call__:8
msgid "**X**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X, n_features)"
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:11
#: sklearn.gaussian_process.kernels.RationalQuadratic.__call__:8
msgid "Left argument of the returned kernel k(X, Y)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:12
msgid "**Y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_Y, n_features), default=None"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:11
msgid ""
"Right argument of the returned kernel k(X, Y). If None, k(X, X) if "
"evaluated instead."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:17
msgid "**eval_gradient**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:15
msgid ""
"Determines whether the gradient with respect to the log of the kernel "
"hyperparameter is computed. Only supported when Y is None."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params
#: sklearn.gaussian_process.kernels.Kernel.set_params
#: sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag
#: sklearn.gaussian_process.kernels.RationalQuadratic.__call__
#: sklearn.gaussian_process.kernels.RationalQuadratic.bounds
#: sklearn.gaussian_process.kernels.RationalQuadratic.theta
msgid "Returns"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:22
msgid "**K**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X, n_samples_Y)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:22
msgid "Kernel k(X, Y)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:38
msgid "**K_gradient**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X, n_samples_X, n_dims)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.__call__:25
msgid ""
"The gradient of the kernel k(X, X) with respect to the log of the "
"hyperparameter of the kernel. Only returned when eval_gradient is True."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.bounds:20
msgid "**bounds**"
msgstr ""

#: of
msgid "ndarray of shape (n_dims, 2)"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.bounds:9
msgid "The log-transformed bounds on the kernel's hyperparameters theta"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:20
#: sklearn.gaussian_process.kernels.RationalQuadratic.theta:24
msgid "**theta**"
msgstr ""

#: of
msgid "ndarray of shape (n_dims,)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:8
msgid "The hyperparameters"
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:4
msgid ""
"The result of this method is identical to np.diag(self(X)); however, it "
"can be evaluated more efficiently since only the diagonal is evaluated."
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:27
msgid "**K_diag**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X,)"
msgstr ""

#: of sklearn.gaussian_process.kernels.NormalizedKernelMixin.diag:16
msgid "Diagonal of kernel k(X, X)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
#: sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input:2
msgid ""
"Returns whether the kernel is defined on fixed-length feature vectors or "
"generic objects. Defaults to True for backward compatibility."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:4
msgid ""
"The method works on simple kernels as well as on nested kernels. The "
"latter have parameters of the form ``<component>__<parameter>`` so that "
"it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:23
msgid "self"
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.theta:4
msgid ""
"Note that theta are typically the log-transformed values of the kernel's "
"hyperparameters as this representation of the search space is more "
"amenable for hyperparameter search, as hyperparameters like length-scales"
" naturally live on a log-scale."
msgstr ""

#: of sklearn.gaussian_process.kernels.RationalQuadratic.theta:13
msgid "The non-fixed, log-transformed hyperparameters of the kernel"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.examples:4
msgid "Examples using ``sklearn.gaussian_process.kernels.RationalQuadratic``"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.examples:15
#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.examples:23
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_prior_posterior.py`"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.examples:34
#: ../modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.examples:42
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_co2.py`"
msgstr ""

