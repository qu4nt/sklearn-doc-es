# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.decomposition.sparse_encode.rst:2
msgid ":mod:`sklearn.decomposition`.sparse_encode"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:2
msgid "Sparse coding"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:4
msgid ""
"Each row of the result is the solution to a sparse coding problem. The "
"goal is to find a sparse array `code` such that::"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:9
msgid "Read more in the :ref:`User Guide <SparseCoder>`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode
msgid "Parameters"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:14
msgid "**X**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:14
msgid "Data matrix."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:19
msgid "**dictionary**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:17
msgid ""
"The dictionary matrix against which to solve the sparse coding of the "
"data. Some of the algorithms assume normalized rows for meaningful "
"output."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:22
msgid "**gram**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_components), default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:22
msgid "Precomputed Gram matrix, `dictionary * dictionary'`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:25
msgid "**cov**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_samples), default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:25
msgid "Precomputed covariance, `dictionary' * X`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:39
msgid "**algorithm**"
msgstr ""

#: of
msgid ""
"{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'},             "
"default='lasso_lars'"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:28
msgid "The algorithm used:"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:30
msgid ""
"`'lars'`: uses the least angle regression method "
"(`linear_model.lars_path`);"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:32
msgid "`'lasso_lars'`: uses Lars to compute the Lasso solution;"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:33
msgid ""
"`'lasso_cd'`: uses the coordinate descent method to compute the Lasso "
"solution (`linear_model.Lasso`). lasso_lars will be faster if the "
"estimated components are sparse;"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:36
msgid "`'omp'`: uses orthogonal matching pursuit to estimate the sparse solution;"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:38
msgid ""
"`'threshold'`: squashes to zero all coefficients less than regularization"
" from the projection `dictionary * data'`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:45
msgid "**n_nonzero_coefs**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:42
msgid ""
"Number of nonzero coefficients to target in each column of the solution. "
"This is only used by `algorithm='lars'` and `algorithm='omp'` and is "
"overridden by `alpha` in the `omp` case. If `None`, then "
"`n_nonzero_coefs=int(n_features / 10)`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:55
msgid "**alpha**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:48
msgid ""
"If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the "
"penalty applied to the L1 norm. If `algorithm='threshold'`, `alpha` is "
"the absolute value of the threshold below which coefficients will be "
"squashed to zero. If `algorithm='omp'`, `alpha` is the tolerance "
"parameter: the value of the reconstruction error targeted. In this case, "
"it overrides `n_nonzero_coefs`. If `None`, default to 1."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:59
msgid "**copy_cov**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:58
msgid ""
"Whether to copy the precomputed covariance matrix; if `False`, it may be "
"overwritten."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:63
msgid "**init**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components), default=None"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:62
msgid ""
"Initialization value of the sparse codes. Only used if "
"`algorithm='lasso_cd'`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:67
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:66
msgid ""
"Maximum number of iterations to perform if `algorithm='lasso_cd'` or "
"`'lasso_lars'`."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:73
msgid "**n_jobs**"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:70
msgid ""
"Number of parallel jobs to run. ``None`` means 1 unless in a "
":obj:`joblib.parallel_backend` context. ``-1`` means using all "
"processors. See :term:`Glossary <n_jobs>` for more details."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:76
msgid "**check_input**"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:76
msgid "If `False`, the input arrays X and dictionary will not be checked."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:79
msgid "**verbose**"
msgstr ""

#: of
msgid "int, default=0"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:79
msgid "Controls the verbosity; the higher, the more messages."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:84
msgid "**positive**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:82
msgid "Whether to enforce positivity when finding the encoding."
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode
msgid "Returns"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:95
msgid "**code**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:89
msgid "The sparse codes"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:100
msgid ":obj:`sklearn.linear_model.lars_path`"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:102
msgid ":obj:`sklearn.linear_model.orthogonal_mp`"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:104
msgid ":obj:`sklearn.linear_model.Lasso`"
msgstr ""

#: of sklearn.decomposition._dict_learning.sparse_encode:106
msgid ":obj:`SparseCoder`"
msgstr ""

