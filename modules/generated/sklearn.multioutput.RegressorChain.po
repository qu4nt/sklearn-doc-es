# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.multioutput.RegressorChain.rst:2
msgid ":mod:`sklearn.multioutput`.RegressorChain"
msgstr ""

#: of sklearn.multioutput.RegressorChain:2
msgid "A multi-label model that arranges regressions into a chain."
msgstr ""

#: of sklearn.multioutput.RegressorChain:4
msgid ""
"Each model makes a prediction in the order specified by the chain using "
"all of the available features provided to the model plus the predictions "
"of models that are earlier in the chain."
msgstr ""

#: of sklearn.multioutput.RegressorChain:8
msgid "Read more in the :ref:`User Guide <regressorchain>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.multioutput.RegressorChain sklearn.multioutput.RegressorChain.fit
#: sklearn.multioutput._BaseChain.predict
msgid "Parameters"
msgstr ""

#: of sklearn.multioutput.RegressorChain:15
msgid "**base_estimator**"
msgstr ""

#: of
msgid "estimator"
msgstr ""

#: of sklearn.multioutput.RegressorChain:15
msgid "The base estimator from which the classifier chain is built."
msgstr ""

#: of sklearn.multioutput.RegressorChain:32
msgid "**order**"
msgstr ""

#: of
msgid "array-like of shape (n_outputs,) or 'random', default=None"
msgstr ""

#: of sklearn.multioutput.RegressorChain:18
msgid ""
"If None, the order will be determined by the order of columns in the "
"label matrix Y.::"
msgstr ""

#: of sklearn.multioutput.RegressorChain:23
msgid ""
"The order of the chain can be explicitly set by providing a list of "
"integers. For example, for a chain of length 5.::"
msgstr ""

#: of sklearn.multioutput.RegressorChain:28
msgid ""
"means that the first model in the chain will make predictions for column "
"1 in the Y matrix, the second model will make predictions for column 3, "
"etc."
msgstr ""

#: of sklearn.multioutput.RegressorChain:32
msgid "If order is 'random' a random ordering will be used."
msgstr ""

#: of sklearn.multioutput.RegressorChain:42
msgid "**cv**"
msgstr ""

#: of
msgid "int, cross-validation generator or an iterable, default=None"
msgstr ""

#: of sklearn.multioutput.RegressorChain:35
msgid ""
"Determines whether to use cross validated predictions or true labels for "
"the results of previous estimators in the chain. Possible inputs for cv "
"are:"
msgstr ""

#: of sklearn.multioutput.RegressorChain:39
msgid "None, to use true labels when fitting,"
msgstr ""

#: of sklearn.multioutput.RegressorChain:40
msgid "integer, to specify the number of folds in a (Stratified)KFold,"
msgstr ""

#: of sklearn.multioutput.RegressorChain:41
msgid ":term:`CV splitter`,"
msgstr ""

#: of sklearn.multioutput.RegressorChain:42
msgid "An iterable yielding (train, test) splits as arrays of indices."
msgstr ""

#: of sklearn.multioutput.RegressorChain:54
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance or None, optional (default=None)"
msgstr ""

#: of sklearn.multioutput.RegressorChain:45
msgid ""
"If ``order='random'``, determines random number generation for the chain "
"order. In addition, it controls the random seed given at each "
"`base_estimator` at each chaining iteration. Thus, it is only used when "
"`base_estimator` exposes a `random_state`. Pass an int for reproducible "
"output across multiple function calls. See :term:`Glossary "
"<random_state>`."
msgstr ""

#: of sklearn.multioutput.RegressorChain
msgid "Attributes"
msgstr ""

#: of sklearn.multioutput.RegressorChain:59
msgid "**estimators_**"
msgstr ""

#: of
msgid "list"
msgstr ""

#: of sklearn.multioutput.RegressorChain:59
msgid "A list of clones of base_estimator."
msgstr ""

#: of sklearn.multioutput.RegressorChain:65
msgid "**order_**"
msgstr ""

#: of sklearn.multioutput.RegressorChain:62
msgid "The order of labels in the classifier chain."
msgstr ""

#: of sklearn.multioutput.RegressorChain:70
msgid ":obj:`ClassifierChain`"
msgstr ""

#: of sklearn.multioutput.RegressorChain:71
msgid "Equivalent for classification."
msgstr ""

#: of sklearn.multioutput.RegressorChain:72
msgid ":obj:`MultioutputRegressor`"
msgstr ""

#: of sklearn.multioutput.RegressorChain:73
msgid "Learns each output independently rather than chaining."
msgstr ""

#: of sklearn.multioutput.RegressorChain:79
msgid "Examples"
msgstr ""

#: of sklearn.multioutput.RegressorChain:91
msgid "Methods"
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid ":obj:`fit <sklearn.multioutput.RegressorChain.fit>`\\"
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:2
#: sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid "Fit the model to data matrix X and targets Y."
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid ":obj:`get_params <sklearn.multioutput.RegressorChain.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid ":obj:`predict <sklearn.multioutput.RegressorChain.predict>`\\"
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
#: sklearn.multioutput._BaseChain.predict:2
msgid "Predict on the data matrix X using the ClassifierChain model."
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid ":obj:`score <sklearn.multioutput.RegressorChain.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid ":obj:`set_params <sklearn.multioutput.RegressorChain.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.multioutput.RegressorChain:99:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.multioutput.RegressorChain.fit:8
#: sklearn.multioutput._BaseChain.predict:8
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:8
#: sklearn.multioutput._BaseChain.predict:8
msgid "The input data."
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:11
msgid "**Y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_classes)"
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:11
msgid "The target values."
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:17
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict of string -> object"
msgstr ""

#: of sklearn.multioutput.RegressorChain.fit:14
msgid "Parameters passed to the `fit` method at each step of the regressor chain."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.multioutput.RegressorChain.fit
#: sklearn.multioutput._BaseChain.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.multioutput.RegressorChain.fit:33
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.multioutput._BaseChain.predict:24
msgid "**Y_pred**"
msgstr ""

#: of sklearn.multioutput._BaseChain.predict:13
msgid "The predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "**sample_weight**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

