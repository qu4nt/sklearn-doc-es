# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.gaussian_process.kernels.Kernel.rst:2
msgid ":mod:`sklearn.gaussian_process.kernels`.Kernel"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:2
msgid "Base class for all kernels."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel
msgid "Attributes"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:13
msgid ":obj:`bounds <bounds>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:13
#: sklearn.gaussian_process.kernels.Kernel.bounds:2
msgid "Returns the log-transformed bounds on the theta."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:16
msgid ":obj:`hyperparameters <hyperparameters>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:16
#: sklearn.gaussian_process.kernels.Kernel.hyperparameters:2
msgid "Returns a list of all hyperparameter specifications."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:19
msgid ":obj:`n_dims <n_dims>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:19
#: sklearn.gaussian_process.kernels.Kernel.n_dims:2
msgid "Returns the number of non-fixed hyperparameters of the kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:22
msgid ":obj:`requires_vector_input <requires_vector_input>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:22
msgid ""
"Returns whether the kernel is defined on fixed-length feature vectors or "
"generic objects."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:32
msgid ":obj:`theta <theta>`"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:25
#: sklearn.gaussian_process.kernels.Kernel.theta:2
msgid "Returns the (flattened, log-transformed) non-fixed hyperparameters."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:35
msgid "Methods"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ":obj:`__call__ <sklearn.gaussian_process.kernels.Kernel.__call__>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.__call__:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Evaluate the kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ""
":obj:`clone_with_theta "
"<sklearn.gaussian_process.kernels.Kernel.clone_with_theta>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Returns a clone of self with given hyperparameters theta."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ":obj:`diag <sklearn.gaussian_process.kernels.Kernel.diag>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Returns the diagonal of the kernel k(X, X)."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ":obj:`get_params <sklearn.gaussian_process.kernels.Kernel.get_params>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Get parameters of this kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ""
":obj:`is_stationary "
"<sklearn.gaussian_process.kernels.Kernel.is_stationary>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.is_stationary:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Returns whether the kernel is stationary."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid ":obj:`set_params <sklearn.gaussian_process.kernels.Kernel.set_params>`\\"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:2
#: sklearn.gaussian_process.kernels.Kernel:44:<autosummary>:1
msgid "Set the parameters of this kernel."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.bounds
#: sklearn.gaussian_process.kernels.Kernel.diag
#: sklearn.gaussian_process.kernels.Kernel.get_params
#: sklearn.gaussian_process.kernels.Kernel.set_params
#: sklearn.gaussian_process.kernels.Kernel.theta
msgid "Returns"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.bounds:20
msgid "**bounds**"
msgstr ""

#: of
msgid "ndarray of shape (n_dims, 2)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.bounds:9
msgid "The log-transformed bounds on the kernel's hyperparameters theta"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta
#: sklearn.gaussian_process.kernels.Kernel.diag
#: sklearn.gaussian_process.kernels.Kernel.get_params
msgid "Parameters"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:20
#: sklearn.gaussian_process.kernels.Kernel.theta:24
msgid "**theta**"
msgstr ""

#: of
msgid "ndarray of shape (n_dims,)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.clone_with_theta:8
msgid "The hyperparameters"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:4
msgid ""
"The result of this method is identical to np.diag(self(X)); however, it "
"can be evaluated more efficiently since only the diagonal is evaluated."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:11
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:11
msgid "Left argument of the returned kernel k(X, Y)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:27
msgid "**K_diag**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples_X,)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.diag:16
msgid "Diagonal of kernel k(X, X)"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.requires_vector_input:2
msgid ""
"Returns whether the kernel is defined on fixed-length feature vectors or "
"generic objects. Defaults to True for backward compatibility."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:4
msgid ""
"The method works on simple kernels as well as on nested kernels. The "
"latter have parameters of the form ``<component>__<parameter>`` so that "
"it's possible to update each component of a nested object."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.set_params:23
msgid "self"
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.theta:4
msgid ""
"Note that theta are typically the log-transformed values of the kernel's "
"hyperparameters as this representation of the search space is more "
"amenable for hyperparameter search, as hyperparameters like length-scales"
" naturally live on a log-scale."
msgstr ""

#: of sklearn.gaussian_process.kernels.Kernel.theta:13
msgid "The non-fixed, log-transformed hyperparameters of the kernel"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.kernels.Kernel.examples:4
msgid "Examples using ``sklearn.gaussian_process.kernels.Kernel``"
msgstr ""

#: ../modules/generated/sklearn.gaussian_process.kernels.Kernel.examples:15
#: ../modules/generated/sklearn.gaussian_process.kernels.Kernel.examples:23
msgid ":ref:`sphx_glr_auto_examples_gaussian_process_plot_gpr_on_structured_data.py`"
msgstr ""

