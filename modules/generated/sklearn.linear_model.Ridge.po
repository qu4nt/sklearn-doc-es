# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 12:56-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.linear_model.Ridge.rst:2
msgid ":mod:`sklearn.linear_model`.Ridge"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:2
msgid "Linear least squares with l2 regularization."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:4
msgid "Minimizes the objective function::"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:8
msgid ""
"This model solves a regression model where the loss function is the "
"linear least squares function and regularization is given by the l2-norm."
" Also known as Ridge Regression or Tikhonov regularization. This "
"estimator has built-in support for multi-variate regression (i.e., when y"
" is a 2d-array of shape (n_samples, n_targets))."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:14
msgid "Read more in the :ref:`User Guide <ridge_regression>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._ridge.Ridge sklearn.linear_model._ridge.Ridge.fit
msgid "Parameters"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:26
msgid "**alpha**"
msgstr ""

#: of
msgid "{float, ndarray of shape (n_targets,)}, default=1.0"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:19
msgid ""
"Regularization strength; must be a positive float. Regularization "
"improves the conditioning of the problem and reduces the variance of the "
"estimates. Larger values specify stronger regularization. Alpha "
"corresponds to ``1 / (2C)`` in other linear models such as "
":class:`~sklearn.linear_model.LogisticRegression` or "
":class:`~sklearn.svm.LinearSVC`. If an array is passed, penalties are "
"assumed to be specific to the targets. Hence they must correspond in "
"number."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:31
msgid "**fit_intercept**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:29
msgid ""
"Whether to fit the intercept for this model. If set to false, no "
"intercept will be used in calculations (i.e. ``X`` and ``y`` are expected"
" to be centered)."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:39
msgid "**normalize**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:34
msgid ""
"This parameter is ignored when ``fit_intercept`` is set to False. If "
"True, the regressors X will be normalized before regression by "
"subtracting the mean and dividing by the l2-norm. If you wish to "
"standardize, please use :class:`~sklearn.preprocessing.StandardScaler` "
"before calling ``fit`` on an estimator with ``normalize=False``."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:42
msgid "**copy_X**"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:42
msgid "If True, X will be copied; else, it may be overwritten."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:47
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:45
msgid ""
"Maximum number of iterations for conjugate gradient solver. For "
"'sparse_cg' and 'lsqr' solvers, the default value is determined by "
"scipy.sparse.linalg. For 'sag' solver, the default value is 1000."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:50
msgid "**tol**"
msgstr ""

#: of
msgid "float, default=1e-3"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:50
msgid "Precision of the solution."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:87
msgid "**solver**"
msgstr ""

#: of
msgid ""
"{'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'},         "
"default='auto'"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:53
msgid "Solver to use in the computational routines:"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:55
msgid "'auto' chooses the solver automatically based on the type of data."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:57
msgid ""
"'svd' uses a Singular Value Decomposition of X to compute the Ridge "
"coefficients. More stable for singular matrices than 'cholesky'."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:60
msgid ""
"'cholesky' uses the standard scipy.linalg.solve function to obtain a "
"closed-form solution."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:63
msgid ""
"'sparse_cg' uses the conjugate gradient solver as found in "
"scipy.sparse.linalg.cg. As an iterative algorithm, this solver is more "
"appropriate than 'cholesky' for large-scale data (possibility to set "
"`tol` and `max_iter`)."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:68
msgid ""
"'lsqr' uses the dedicated regularized least-squares routine "
"scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative "
"procedure."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:72
msgid ""
"'sag' uses a Stochastic Average Gradient descent, and 'saga' uses its "
"improved, unbiased version named SAGA. Both methods also use an iterative"
" procedure, and are often faster than other solvers when both n_samples "
"and n_features are large. Note that 'sag' and 'saga' fast convergence is "
"only guaranteed on features with approximately the same scale. You can "
"preprocess the data with a scaler from sklearn.preprocessing."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:80
msgid ""
"All last five solvers support both dense and sparse data. However, only "
"'sag' and 'sparse_cg' supports sparse input when `fit_intercept` is True."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:84
msgid "Stochastic Average Gradient descent solver."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:86
msgid "SAGA solver."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:97
msgid "**random_state**"
msgstr ""

#: of
msgid "int, RandomState instance, default=None"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:90
msgid ""
"Used when ``solver`` == 'sag' or 'saga' to shuffle the data. See "
":term:`Glossary <random_state>` for details."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:93
msgid "`random_state` to support Stochastic Average Gradient."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge
msgid "Attributes"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:102
msgid "**coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,) or (n_targets, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:102
msgid "Weight vector(s)."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:106
msgid "**intercept_**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:105
msgid ""
"Independent term in decision function. Set to 0.0 if ``fit_intercept = "
"False``."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:115
msgid "**n_iter_**"
msgstr ""

#: of
msgid "None or ndarray of shape (n_targets,)"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:109
msgid ""
"Actual number of iterations for each target. Available only for sag and "
"lsqr solvers. Other solvers will return None."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:120
msgid ":obj:`RidgeClassifier`"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:121
msgid "Ridge classifier."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:122
msgid ":obj:`RidgeCV`"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:123
msgid "Ridge regression with built-in cross validation."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:124
msgid ":class:`~sklearn.kernel_ridge.KernelRidge`"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:125
msgid "Kernel ridge regression combines ridge regression with the kernel trick."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:131
msgid "Examples"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:143
msgid "Methods"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid ":obj:`fit <sklearn.linear_model.Ridge.fit>`\\"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge.fit:2
#: sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid "Fit Ridge regression model."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid ":obj:`get_params <sklearn.linear_model.Ridge.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid ":obj:`predict <sklearn.linear_model.Ridge.predict>`\\"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:2
#: sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid "Predict using the linear model."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid ":obj:`score <sklearn.linear_model.Ridge.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid ":obj:`set_params <sklearn.linear_model.Ridge.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.linear_model._ridge.Ridge:151:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.linear_model._base.LinearModel.predict:8
#: sklearn.linear_model._ridge.Ridge.fit:8
msgid "**X**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge.fit:8
msgid "Training data"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.linear_model._ridge.Ridge.fit:11
msgid "**y**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge.fit:11
msgid "Target values"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.linear_model._ridge.Ridge.fit:15
msgid "**sample_weight**"
msgstr ""

#: of
msgid "float or ndarray of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.linear_model._ridge.Ridge.fit:14
msgid ""
"Individual weights for each sample. If given a float, every sample will "
"have the same weight."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.linear_model._base.LinearModel.predict
#: sklearn.linear_model._ridge.Ridge.fit
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.linear_model._ridge.Ridge.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of
msgid "array-like or sparse matrix, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:8
msgid "Samples."
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:24
msgid "**C**"
msgstr ""

#: of
msgid "array, shape (n_samples,)"
msgstr ""

#: of sklearn.linear_model._base.LinearModel.predict:13
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.linear_model.Ridge.examples:4
msgid "Examples using ``sklearn.linear_model.Ridge``"
msgstr ""

#: ../modules/generated/sklearn.linear_model.Ridge.examples:15
#: ../modules/generated/sklearn.linear_model.Ridge.examples:23
msgid ":ref:`sphx_glr_auto_examples_inspection_plot_linear_model_coefficient_interpretation.py`"
msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_applications_plot_prediction_latency.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ridge_path.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ols_ridge_variance.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_ridge_coeffs.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_polynomial_interpolation.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_huber_vs_ridge.py`"
#~ msgstr ""

#~ msgid ":ref:`sphx_glr_auto_examples_linear_model_plot_poisson_regression_non_normal_loss.py`"
#~ msgstr ""

