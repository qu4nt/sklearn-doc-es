# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.decomposition.FactorAnalysis.rst:2
msgid ":mod:`sklearn.decomposition`.FactorAnalysis"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:2
msgid "Factor Analysis (FA)."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:4
msgid "A simple linear generative model with Gaussian latent variables."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:6
msgid ""
"The observations are assumed to be caused by a linear transformation of "
"lower dimensional latent factors and added Gaussian noise. Without loss "
"of generality the factors are distributed according to a Gaussian with "
"zero mean and unit covariance. The noise is also zero mean and has an "
"arbitrary diagonal covariance matrix."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:12
msgid ""
"If we would restrict the model further, by assuming that the Gaussian "
"noise is even isotropic (all diagonal entries are the same) we would "
"obtain :class:`PPCA`."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:16
msgid ""
"FactorAnalysis performs a maximum likelihood estimate of the so-called "
"`loading` matrix, the transformation of the latent variables to the "
"observed ones, using SVD based approach."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:20
msgid "Read more in the :ref:`User Guide <FA>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._factor_analysis.FactorAnalysis
#: sklearn.decomposition._factor_analysis.FactorAnalysis.fit
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples
#: sklearn.decomposition._factor_analysis.FactorAnalysis.transform
msgid "Parameters"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:29
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:27
msgid ""
"Dimensionality of latent space, the number of components of ``X`` that "
"are obtained after ``transform``. If None, n_components is set to the "
"number of features."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:32
msgid "**tol**"
msgstr ""

#: of
msgid "float, defaul=1e-2"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:32
msgid "Stopping tolerance for log-likelihood increase."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:36
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:35
msgid ""
"Whether to make a copy of X. If ``False``, the input X gets overwritten "
"during fitting."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:39
msgid "**max_iter**"
msgstr ""

#: of
msgid "int, default=1000"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:39
msgid "Maximum number of iterations."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:43
msgid "**noise_variance_init**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,), default=None"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:42
msgid ""
"The initial guess of the noise variance for each feature. If None, it "
"defaults to np.ones(n_features)."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:52
msgid "**svd_method**"
msgstr ""

#: of
msgid "{'lapack', 'randomized'}, default='randomized'"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:46
msgid ""
"Which SVD method to use. If 'lapack' use standard SVD from scipy.linalg, "
"if 'randomized' use fast ``randomized_svd`` function. Defaults to "
"'randomized'. For most applications 'randomized' will be sufficiently "
"precise while providing significant speed gains. Accuracy can also be "
"improved by setting higher values for `iterated_power`. If this is not "
"sufficient, for maximum precision you should choose 'lapack'."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:56
msgid "**iterated_power**"
msgstr ""

#: of
msgid "int, default=3"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:55
msgid ""
"Number of iterations for the power method. 3 by default. Only used if "
"``svd_method`` equals 'randomized'."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:65
msgid "**rotation**"
msgstr ""

#: of
msgid "{'varimax', 'quartimax'}, default=None"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:59
#, python-format
msgid ""
"If not None, apply the indicated rotation. Currently, varimax and "
"quartimax are implemented. See `\"The varimax criterion for analytic "
"rotation in factor analysis\" "
"<https://link.springer.com/article/10.1007%2FBF02289233>`_ H. F. Kaiser, "
"1958."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:73
msgid "**random_state**"
msgstr ""

#: of
msgid "int or RandomState instance, default=0"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:68
msgid ""
"Only used when ``svd_method`` equals 'randomized'. Pass an int for "
"reproducible results across multiple function calls. See :term:`Glossary "
"<random_state>`."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis
msgid "Attributes"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:78
msgid "**components_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:78
msgid "Components with maximum variance."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:81
msgid "**loglike_**"
msgstr ""

#: of
msgid "list of shape (n_iterations,)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:81
msgid "The log likelihood at each iteration."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:84
msgid "**noise_variance_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:84
msgid "The estimated noise variance for each feature."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:87
msgid "**n_iter_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:87
msgid "Number of iterations run."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:93
msgid "**mean_**"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:90
msgid "Per-feature empirical mean, estimated from the training set."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:98
msgid ":obj:`PCA`"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:99
msgid ""
"Principal component analysis is also a latent linear variable model which"
" however assumes equal noise variance for each feature. This extra "
"assumption makes probabilistic PCA faster as it can be computed in closed"
" form."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:100
msgid ":obj:`FastICA`"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:101
msgid ""
"Independent component analysis, a latent variable model with non-Gaussian"
" latent variables."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:106
msgid "References"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:107
msgid "David Barber, Bayesian Reasoning and Machine Learning, Algorithm 21.1."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:110
msgid ""
"Christopher M. Bishop: Pattern Recognition and Machine Learning, Chapter "
"12.2.4."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:118
msgid "Examples"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:128
msgid "Methods"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.FactorAnalysis.fit>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.fit:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Fit the FactorAnalysis model to X using SVD based approach"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.decomposition.FactorAnalysis.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ""
":obj:`get_covariance "
"<sklearn.decomposition.FactorAnalysis.get_covariance>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Compute data covariance with the FactorAnalysis model."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ":obj:`get_params <sklearn.decomposition.FactorAnalysis.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ""
":obj:`get_precision "
"<sklearn.decomposition.FactorAnalysis.get_precision>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Compute data precision matrix with the FactorAnalysis model."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ":obj:`score <sklearn.decomposition.FactorAnalysis.score>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Compute the average log-likelihood of the samples"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ""
":obj:`score_samples "
"<sklearn.decomposition.FactorAnalysis.score_samples>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Compute the log-likelihood of each sample"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ":obj:`set_params <sklearn.decomposition.FactorAnalysis.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.FactorAnalysis.transform>`\\"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.transform:2
#: sklearn.decomposition._factor_analysis.FactorAnalysis:140:<autosummary>:1
msgid "Apply dimensionality reduction to X using the model."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.decomposition._factor_analysis.FactorAnalysis.fit:8
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score:8
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples:8
#: sklearn.decomposition._factor_analysis.FactorAnalysis.transform:10
msgid "**X**"
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.fit:8
#: sklearn.decomposition._factor_analysis.FactorAnalysis.transform:10
msgid "Training data."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.decomposition._factor_analysis.FactorAnalysis.fit:11
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score:11
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._factor_analysis.FactorAnalysis.fit
#: sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance
#: sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples
#: sklearn.decomposition._factor_analysis.FactorAnalysis.transform
msgid "Returns"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.fit:27
msgid "self"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.decomposition._factor_analysis.FactorAnalysis.transform:26
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance:4
msgid "``cov = components_.T * components_ + diag(noise_variance)``"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance:21
msgid "**cov**"
msgstr ""

#: of
msgid "ndarray of shape (n_features, n_features)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance:10
msgid "Estimated covariance of data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision:20
msgid "**precision**"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision:9
msgid "Estimated precision of data."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score:8
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples:8
msgid "The data"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score:27
#: sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples:24
msgid "**ll**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score:16
msgid "Average log-likelihood of the samples under the current model"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples:13
msgid "Log-likelihood of each sample under the current model"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
msgid "**self**"
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.transform:4
msgid ""
"Compute the expected mean of the latent variables. See Barber, 21.2.33 "
"(or Bishop, 12.66)."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

#: of sklearn.decomposition._factor_analysis.FactorAnalysis.transform:15
msgid "The latent variables of X."
msgstr ""

