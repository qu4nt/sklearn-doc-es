# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.decomposition.IncrementalPCA.rst:2
msgid ":mod:`sklearn.decomposition`.IncrementalPCA"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:2
msgid "Incremental principal components analysis (IPCA)."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:4
msgid ""
"Linear dimensionality reduction using Singular Value Decomposition of the"
" data, keeping only the most significant singular vectors to project the "
"data to a lower dimensional space. The input data is centered but not "
"scaled for each feature before applying the SVD."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:9
msgid ""
"Depending on the size of the input data, this algorithm can be much more "
"memory efficient than a PCA, and allows sparse input."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:12
msgid ""
"This algorithm has constant memory complexity, on the order of "
"``batch_size * n_features``, enabling use of np.memmap files without "
"loading the entire file into memory. For sparse matrices, the input is "
"converted to dense in batches (in order to be able to subtract the mean) "
"which avoids storing the entire dense matrix at any one time."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:18
msgid ""
"The computational overhead of each SVD is ``O(batch_size * n_features ** "
"2)``, but only 2 * batch_size samples remain in memory at a time. There "
"will be ``n_samples / batch_size`` SVD computations to get the principal "
"components, versus 1 large SVD of complexity ``O(n_samples * n_features "
"** 2)`` for PCA."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:24
msgid "Read more in the :ref:`User Guide <IncrementalPCA>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._base._BasePCA.inverse_transform
#: sklearn.decomposition._incremental_pca.IncrementalPCA
#: sklearn.decomposition._incremental_pca.IncrementalPCA.fit
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit
#: sklearn.decomposition._incremental_pca.IncrementalPCA.transform
msgid "Parameters"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:32
msgid "**n_components**"
msgstr ""

#: of
msgid "int, default=None"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:31
msgid ""
"Number of components to keep. If ``n_components`` is ``None``, then "
"``n_components`` is set to ``min(n_samples, n_features)``."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:42
msgid "**whiten**"
msgstr ""

#: of
msgid "bool, default=False"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:35
msgid ""
"When True (False by default) the ``components_`` vectors are divided by "
"``n_samples`` times ``components_`` to ensure uncorrelated outputs with "
"unit component-wise variances."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:39
msgid ""
"Whitening will remove some information from the transformed signal (the "
"relative variance scales of the components) but can sometimes improve the"
" predictive accuracy of the downstream estimators by making data respect "
"some hard-wired assumptions."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:46
msgid "**copy**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:45
msgid ""
"If False, X will be overwritten. ``copy=False`` can be used to save "
"memory but is unsafe for general use."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:55
msgid "**batch_size**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:49
msgid ""
"The number of samples to use for each batch. Only used when calling "
"``fit``. If ``batch_size`` is ``None``, then ``batch_size`` is inferred "
"from the data and set to ``5 * n_features``, to provide a balance between"
" approximation accuracy and memory consumption."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA
msgid "Attributes"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:60
msgid "**components_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components, n_features)"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:60
msgid "Components with maximum variance."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:63
msgid "**explained_variance_**"
msgstr ""

#: of
msgid "ndarray of shape (n_components,)"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:63
msgid "Variance explained by each of the selected components."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:68
msgid "**explained_variance_ratio_**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:66
msgid ""
"Percentage of variance explained by each of the selected components. If "
"all components are stored, the sum of explained variances is equal to "
"1.0."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:73
msgid "**singular_values_**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:71
msgid ""
"The singular values corresponding to each of the selected components. The"
" singular values are equal to the 2-norms of the ``n_components`` "
"variables in the lower-dimensional space."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:76
msgid "**mean_**"
msgstr ""

#: of
msgid "ndarray of shape (n_features,)"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:76
msgid "Per-feature empirical mean, aggregate over calls to ``partial_fit``."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:80
msgid "**var_**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:79
msgid "Per-feature empirical variance, aggregate over calls to ``partial_fit``."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:86
msgid "**noise_variance_**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:83
msgid ""
"The estimated noise covariance following the Probabilistic PCA model from"
" Tipping and Bishop 1999. See \"Pattern Recognition and Machine "
"Learning\" by C. Bishop, 12.2.1 p. 574 or "
"http://www.miketipping.com/papers/met-mppca.pdf."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:90
msgid "**n_components_**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:89
msgid "The estimated number of components. Relevant when ``n_components=None``."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:94
msgid "**n_samples_seen_**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:93
msgid ""
"The number of samples processed by the estimator. Will be reset on new "
"calls to fit, but increments across ``partial_fit`` calls."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:100
msgid "**batch_size_**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:97
msgid "Inferred batch size from ``batch_size``."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:105
msgid ":obj:`PCA`"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:107
msgid ":obj:`KernelPCA`"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:109
msgid ":obj:`SparsePCA`"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:111
msgid ":obj:`TruncatedSVD`"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:25
#: sklearn.decomposition._incremental_pca.IncrementalPCA:115
msgid "Notes"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:116
msgid ""
"Implements the incremental PCA model from: *D. Ross, J. Lim, R. Lin, M. "
"Yang, Incremental Learning for Robust Visual Tracking, International "
"Journal of Computer Vision, Volume 77, Issue 1-3, pp. 125-141, May 2008.*"
" See https://www.cs.toronto.edu/~dross/ivt/RossLimLinYang_ijcv.pdf"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:122
msgid ""
"This model is an extension of the Sequential Karhunen-Loeve Transform "
"from: *A. Levy and M. Lindenbaum, Sequential Karhunen-Loeve Basis "
"Extraction and its Application to Images, IEEE Transactions on Image "
"Processing, Volume 9, Number 8, pp. 1371-1374, August 2000.* See "
"https://www.cs.technion.ac.il/~mic/doc/skl-ip.pdf"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:128
msgid ""
"We have specifically abstained from an optimization used by authors of "
"both papers, a QR decomposition used in specific situations to reduce the"
" algorithmic complexity of the SVD. The source for this technique is "
"*Matrix Computations, Third Edition, G. Holub and C. Van Loan, Chapter 5,"
" section 5.4.4, pp 252-253.*. This technique has been omitted because it "
"is advantageous only when decomposing a matrix with ``n_samples`` (rows) "
">= 5/3 * ``n_features`` (columns), and hurts the readability of the "
"implemented algorithm. This would be a good opportunity for future "
"optimization, if it is deemed necessary."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:139
msgid "References"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:140
msgid ""
"D. Ross, J. Lim, R. Lin, M. Yang. Incremental Learning for Robust Visual "
"Tracking, International Journal of Computer Vision, Volume 77, Issue 1-3,"
" pp. 125-141, May 2008."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:144
msgid ""
"G. Golub and C. Van Loan. Matrix Computations, Third Edition, Chapter 5, "
"Section 5.4.4, pp. 252-253."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:152
#: sklearn.decomposition._incremental_pca.IncrementalPCA.transform:29
msgid "Examples"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:168
msgid "Methods"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ":obj:`fit <sklearn.decomposition.IncrementalPCA.fit>`\\"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.fit:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Fit the model with X, using minibatches of size batch_size."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ""
":obj:`fit_transform "
"<sklearn.decomposition.IncrementalPCA.fit_transform>`\\"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Fit to data, then transform it."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ""
":obj:`get_covariance "
"<sklearn.decomposition.IncrementalPCA.get_covariance>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Compute data covariance with the generative model."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ":obj:`get_params <sklearn.decomposition.IncrementalPCA.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ""
":obj:`get_precision "
"<sklearn.decomposition.IncrementalPCA.get_precision>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Compute data precision matrix with the generative model."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ""
":obj:`inverse_transform "
"<sklearn.decomposition.IncrementalPCA.inverse_transform>`\\"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Transform data back to its original space."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ":obj:`partial_fit <sklearn.decomposition.IncrementalPCA.partial_fit>`\\"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Incremental fit with X."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ":obj:`set_params <sklearn.decomposition.IncrementalPCA.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid ":obj:`transform <sklearn.decomposition.IncrementalPCA.transform>`\\"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.transform:2
#: sklearn.decomposition._incremental_pca.IncrementalPCA:180:<autosummary>:1
msgid "Apply dimensionality reduction to X."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
#: sklearn.decomposition._base._BasePCA.inverse_transform:10
#: sklearn.decomposition._incremental_pca.IncrementalPCA.fit:9
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:9
#: sklearn.decomposition._incremental_pca.IncrementalPCA.transform:12
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.fit:8
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:8
msgid ""
"Training data, where n_samples is the number of samples and n_features is"
" the number of features."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
#: sklearn.decomposition._incremental_pca.IncrementalPCA.fit:12
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:15
msgid "**y**"
msgstr ""

#: of
msgid "Ignored"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params
#: sklearn.base.TransformerMixin.fit_transform
#: sklearn.decomposition._base._BasePCA.get_covariance
#: sklearn.decomposition._base._BasePCA.get_precision
#: sklearn.decomposition._base._BasePCA.inverse_transform
#: sklearn.decomposition._incremental_pca.IncrementalPCA.fit
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit
#: sklearn.decomposition._incremental_pca.IncrementalPCA.transform
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.decomposition._incremental_pca.IncrementalPCA.fit:28
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:31
msgid "**self**"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.fit:17
#: sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:20
msgid "Returns the instance itself."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:4
msgid ""
"Fits transformer to `X` and `y` with optional parameters `fit_params` and"
" returns a transformed version of `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:10
msgid "Input samples."
msgstr ""

#: of
msgid ""
"array-like of shape (n_samples,) or (n_samples, n_outputs),"
"                 default=None"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:13
msgid "Target values (None for unsupervised transformations)."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "**\\*\\*fit_params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:16
msgid "Additional fit parameters."
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:32
#: sklearn.decomposition._incremental_pca.IncrementalPCA.transform:26
msgid "**X_new**"
msgstr ""

#: of
msgid "ndarray array of shape (n_samples, n_features_new)"
msgstr ""

#: of sklearn.base.TransformerMixin.fit_transform:21
msgid "Transformed array."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:4
msgid ""
"``cov = components_.T * S**2 * components_ + sigma2 * eye(n_features)`` "
"where S**2 contains the explained variances, and sigma2 contains the "
"noise variances."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:23
msgid "**cov**"
msgstr ""

#: of
msgid "array, shape=(n_features, n_features)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_covariance:12
msgid "Estimated covariance of data."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:4
msgid ""
"Equals the inverse of the covariance but computed with the matrix "
"inversion lemma for efficiency."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:22
msgid "**precision**"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.get_precision:11
msgid "Estimated precision of data."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:4
msgid "In other words, return an input X_original whose transform would be X."
msgstr ""

#: of
msgid "array-like, shape (n_samples, n_components)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:9
msgid ""
"New data, where n_samples is the number of samples and n_components is "
"the number of components."
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:22
msgid "X_original array-like, shape (n_samples, n_features)"
msgstr ""

#: of sklearn.decomposition._base._BasePCA.inverse_transform:26
msgid ""
"If whitening is enabled, inverse_transform will compute the exact inverse"
" operation, which includes reversing whitening."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:2
msgid "Incremental fit with X. All of X is processed as a single batch."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:12
msgid "**check_input**"
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit:12
msgid "Run check_array on X."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.transform:4
msgid ""
"X is projected on the first principal components previously extracted "
"from a training set, using minibatches of size batch_size if X is sparse."
msgstr ""

#: of sklearn.decomposition._incremental_pca.IncrementalPCA.transform:11
msgid ""
"New data, where n_samples is the number of samples and n_features is the "
"number of features."
msgstr ""

#: of
msgid "ndarray of shape (n_samples, n_components)"
msgstr ""

