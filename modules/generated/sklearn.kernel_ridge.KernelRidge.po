# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007 - 2020, scikit-learn developers (BSD License)
# This file is distributed under the same license as the scikit-learn
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: scikit-learn 0.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-31 11:24-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.rst:2
msgid ":mod:`sklearn.kernel_ridge`.KernelRidge"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:2
msgid "Kernel ridge regression."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:4
msgid ""
"Kernel ridge regression (KRR) combines ridge regression (linear least "
"squares with l2-norm regularization) with the kernel trick. It thus "
"learns a linear function in the space induced by the respective kernel "
"and the data. For non-linear kernels, this corresponds to a non-linear "
"function in the original space."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:10
msgid ""
"The form of the model learned by KRR is identical to support vector "
"regression (SVR). However, different loss functions are used: KRR uses "
"squared error loss while support vector regression uses epsilon-"
"insensitive loss, both combined with l2 regularization. In contrast to "
"SVR, fitting a KRR model can be done in closed-form and is typically "
"faster for medium-sized datasets. On the other hand, the learned model is"
" non-sparse and thus slower than SVR, which learns a sparse model for "
"epsilon > 0, at prediction-time."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:19
msgid ""
"This estimator has built-in support for multi-variate regression (i.e., "
"when y is a 2d-array of shape [n_samples, n_targets])."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:22
msgid "Read more in the :ref:`User Guide <kernel_ridge>`."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.kernel_ridge.KernelRidge sklearn.kernel_ridge.KernelRidge.fit
#: sklearn.kernel_ridge.KernelRidge.predict
msgid "Parameters"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:34
msgid "**alpha**"
msgstr ""

#: of
msgid "float or array-like of shape (n_targets,), default=1.0"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:27
msgid ""
"Regularization strength; must be a positive float. Regularization "
"improves the conditioning of the problem and reduces the variance of the "
"estimates. Larger values specify stronger regularization. Alpha "
"corresponds to ``1 / (2C)`` in other linear models such as "
":class:`~sklearn.linear_model.LogisticRegression` or "
":class:`~sklearn.svm.LinearSVC`. If an array is passed, penalties are "
"assumed to be specific to the targets. Hence they must correspond in "
"number. See :ref:`ridge_regression` for formula."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:48
msgid "**kernel**"
msgstr ""

#: of
msgid "string or callable, default=\"linear\""
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:37
msgid ""
"Kernel mapping used internally. This parameter is directly passed to "
":class:`~sklearn.metrics.pairwise.pairwise_kernel`. If `kernel` is a "
"string, it must be one of the metrics in "
"`pairwise.PAIRWISE_KERNEL_FUNCTIONS`. If `kernel` is \"precomputed\", X "
"is assumed to be a kernel matrix. Alternatively, if `kernel` is a "
"callable function, it is called on each pair of instances (rows) and the "
"resulting value recorded. The callable should take two rows from X as "
"input and return the corresponding kernel value as a single number. This "
"means that callables from :mod:`sklearn.metrics.pairwise` are not "
"allowed, as they operate on matrices, not single samples. Use the string "
"identifying the kernel instead."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:54
msgid "**gamma**"
msgstr ""

#: of
msgid "float, default=None"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:51
msgid ""
"Gamma parameter for the RBF, laplacian, polynomial, exponential chi2 and "
"sigmoid kernels. Interpretation of the default value is left to the "
"kernel; see the documentation for sklearn.metrics.pairwise. Ignored by "
"other kernels."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:57
msgid "**degree**"
msgstr ""

#: of
msgid "float, default=3"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:57
msgid "Degree of the polynomial kernel. Ignored by other kernels."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:61
msgid "**coef0**"
msgstr ""

#: of
msgid "float, default=1"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:60
msgid ""
"Zero coefficient for polynomial and sigmoid kernels. Ignored by other "
"kernels."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:68
msgid "**kernel_params**"
msgstr ""

#: of
msgid "mapping of string to any, default=None"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:64
msgid ""
"Additional parameters (keyword arguments) for kernel function passed as "
"callable object."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge
msgid "Attributes"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:73
msgid "**dual_coef_**"
msgstr ""

#: of
msgid "ndarray of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:73
msgid "Representation of weight vector(s) in kernel space"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:81
msgid "**X_fit_**"
msgstr ""

#: of
msgid "{ndarray, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:76
msgid ""
"Training data, which is also required for prediction. If kernel == "
"\"precomputed\" this is instead the precomputed training matrix, of shape"
" (n_samples, n_samples)."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:86
msgid ":obj:`sklearn.linear_model.Ridge`"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:87
msgid "Linear ridge regression."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:88
msgid ":obj:`sklearn.svm.SVR`"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:89
msgid "Support Vector Regression implemented using libsvm."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:94
msgid "References"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:95
msgid ""
"Kevin P. Murphy \"Machine Learning: A Probabilistic Perspective\", The "
"MIT Press chapter 14.4.3, pp. 492-493"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:104
msgid "Examples"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:116
msgid "Methods"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid ":obj:`fit <sklearn.kernel_ridge.KernelRidge.fit>`\\"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.fit:2
#: sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid "Fit Kernel Ridge regression model"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid ":obj:`get_params <sklearn.kernel_ridge.KernelRidge.get_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:2
#: sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid "Get parameters for this estimator."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid ":obj:`predict <sklearn.kernel_ridge.KernelRidge.predict>`\\"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.predict:2
#: sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid "Predict using the kernel ridge model"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid ":obj:`score <sklearn.kernel_ridge.KernelRidge.score>`\\"
msgstr ""

#: of sklearn.base.RegressorMixin.score:2
#: sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid ":obj:`set_params <sklearn.kernel_ridge.KernelRidge.set_params>`\\"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:2
#: sklearn.kernel_ridge.KernelRidge:124:<autosummary>:1
msgid "Set the parameters of this estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:20
#: sklearn.kernel_ridge.KernelRidge.fit:9
#: sklearn.kernel_ridge.KernelRidge.predict:11
msgid "**X**"
msgstr ""

#: of
msgid "{array-like, sparse matrix} of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.fit:8
msgid ""
"Training data. If kernel == \"precomputed\" this is instead a precomputed"
" kernel matrix, of shape (n_samples, n_samples)."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
#: sklearn.kernel_ridge.KernelRidge.fit:12
msgid "**y**"
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_targets)"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.fit:12
msgid "Target values"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
#: sklearn.kernel_ridge.KernelRidge.fit:15
msgid "**sample_weight**"
msgstr ""

#: of
msgid "float or array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.fit:15
msgid "Individual weights for each sample, ignored if None is passed."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params
#: sklearn.base.BaseEstimator.set_params sklearn.base.RegressorMixin.score
#: sklearn.kernel_ridge.KernelRidge.fit
#: sklearn.kernel_ridge.KernelRidge.predict
msgid "Returns"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:28
#: sklearn.kernel_ridge.KernelRidge.fit:31
msgid "**self**"
msgstr ""

#: of
msgid "returns an instance of self."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:9
msgid "**deep**"
msgstr ""

#: of
msgid "bool, default=True"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:8
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:25
msgid "**params**"
msgstr ""

#: of
msgid "dict"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:14
msgid "Parameter names mapped to their values."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.predict:8
msgid ""
"Samples. If kernel == \"precomputed\" this is instead a precomputed "
"kernel matrix, shape = [n_samples, n_samples_fitted], where "
"n_samples_fitted is the number of samples used in the fitting for this "
"estimator."
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.predict:27
msgid "**C**"
msgstr ""

#: of sklearn.kernel_ridge.KernelRidge.predict:16
msgid "Returns predicted values."
msgstr ""

#: of sklearn.base.RegressorMixin.score:5
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of
msgid "array-like of shape (n_samples, n_features)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:17
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of
msgid "array-like of shape (n_samples,) or (n_samples, n_outputs)"
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "True values for `X`."
msgstr ""

#: of
msgid "array-like of shape (n_samples,), default=None"
msgstr ""

#: of sklearn.base.RegressorMixin.score:26
msgid "Sample weights."
msgstr ""

#: of sklearn.base.RegressorMixin.score:38
msgid "**score**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: of sklearn.base.RegressorMixin.score:31
msgid ":math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:41
msgid "Notes"
msgstr ""

#: of sklearn.base.RegressorMixin.score:42
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:4
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "**\\*\\*params**"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:12
msgid "Estimator parameters."
msgstr ""

#: of
msgid "estimator instance"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:17
msgid "Estimator instance."
msgstr ""

#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.examples:4
msgid "Examples using ``sklearn.kernel_ridge.KernelRidge``"
msgstr ""

#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.examples:15
#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.examples:23
#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.examples:34
#: ../modules/generated/sklearn.kernel_ridge.KernelRidge.examples:42
msgid ":ref:`sphx_glr_auto_examples_miscellaneous_plot_kernel_ridge_regression.py`"
msgstr ""

